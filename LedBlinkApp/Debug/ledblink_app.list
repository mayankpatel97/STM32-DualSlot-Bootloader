
ledblink_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d4  08040198  08040198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08046b6c  08046b6c  00016b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08046bc4  08046bc4  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08046bc4  08046bc4  00016bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08046bcc  08046bcc  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08046bcc  08046bcc  00016bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08046bd0  08046bd0  00016bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08046bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c04  200000fc  08046cd0  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d00  08046cd0  00021d00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d38c  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002996  00000000  00000000  0002d4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  0002fe98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000848  00000000  00000000  000309d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017bf7  00000000  00000000  00031220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f162  00000000  00000000  00048e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086ee6  00000000  00000000  00057f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c7c  00000000  00000000  000dee60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e1adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040198 <__do_global_dtors_aux>:
 8040198:	b510      	push	{r4, lr}
 804019a:	4c05      	ldr	r4, [pc, #20]	; (80401b0 <__do_global_dtors_aux+0x18>)
 804019c:	7823      	ldrb	r3, [r4, #0]
 804019e:	b933      	cbnz	r3, 80401ae <__do_global_dtors_aux+0x16>
 80401a0:	4b04      	ldr	r3, [pc, #16]	; (80401b4 <__do_global_dtors_aux+0x1c>)
 80401a2:	b113      	cbz	r3, 80401aa <__do_global_dtors_aux+0x12>
 80401a4:	4804      	ldr	r0, [pc, #16]	; (80401b8 <__do_global_dtors_aux+0x20>)
 80401a6:	f3af 8000 	nop.w
 80401aa:	2301      	movs	r3, #1
 80401ac:	7023      	strb	r3, [r4, #0]
 80401ae:	bd10      	pop	{r4, pc}
 80401b0:	200000fc 	.word	0x200000fc
 80401b4:	00000000 	.word	0x00000000
 80401b8:	08046b54 	.word	0x08046b54

080401bc <frame_dummy>:
 80401bc:	b508      	push	{r3, lr}
 80401be:	4b03      	ldr	r3, [pc, #12]	; (80401cc <frame_dummy+0x10>)
 80401c0:	b11b      	cbz	r3, 80401ca <frame_dummy+0xe>
 80401c2:	4903      	ldr	r1, [pc, #12]	; (80401d0 <frame_dummy+0x14>)
 80401c4:	4803      	ldr	r0, [pc, #12]	; (80401d4 <frame_dummy+0x18>)
 80401c6:	f3af 8000 	nop.w
 80401ca:	bd08      	pop	{r3, pc}
 80401cc:	00000000 	.word	0x00000000
 80401d0:	20000100 	.word	0x20000100
 80401d4:	08046b54 	.word	0x08046b54

080401d8 <__aeabi_uldivmod>:
 80401d8:	b953      	cbnz	r3, 80401f0 <__aeabi_uldivmod+0x18>
 80401da:	b94a      	cbnz	r2, 80401f0 <__aeabi_uldivmod+0x18>
 80401dc:	2900      	cmp	r1, #0
 80401de:	bf08      	it	eq
 80401e0:	2800      	cmpeq	r0, #0
 80401e2:	bf1c      	itt	ne
 80401e4:	f04f 31ff 	movne.w	r1, #4294967295
 80401e8:	f04f 30ff 	movne.w	r0, #4294967295
 80401ec:	f000 b970 	b.w	80404d0 <__aeabi_idiv0>
 80401f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80401f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80401f8:	f000 f806 	bl	8040208 <__udivmoddi4>
 80401fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040204:	b004      	add	sp, #16
 8040206:	4770      	bx	lr

08040208 <__udivmoddi4>:
 8040208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804020c:	9e08      	ldr	r6, [sp, #32]
 804020e:	460d      	mov	r5, r1
 8040210:	4604      	mov	r4, r0
 8040212:	460f      	mov	r7, r1
 8040214:	2b00      	cmp	r3, #0
 8040216:	d14a      	bne.n	80402ae <__udivmoddi4+0xa6>
 8040218:	428a      	cmp	r2, r1
 804021a:	4694      	mov	ip, r2
 804021c:	d965      	bls.n	80402ea <__udivmoddi4+0xe2>
 804021e:	fab2 f382 	clz	r3, r2
 8040222:	b143      	cbz	r3, 8040236 <__udivmoddi4+0x2e>
 8040224:	fa02 fc03 	lsl.w	ip, r2, r3
 8040228:	f1c3 0220 	rsb	r2, r3, #32
 804022c:	409f      	lsls	r7, r3
 804022e:	fa20 f202 	lsr.w	r2, r0, r2
 8040232:	4317      	orrs	r7, r2
 8040234:	409c      	lsls	r4, r3
 8040236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 804023a:	fa1f f58c 	uxth.w	r5, ip
 804023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8040242:	0c22      	lsrs	r2, r4, #16
 8040244:	fb0e 7711 	mls	r7, lr, r1, r7
 8040248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 804024c:	fb01 f005 	mul.w	r0, r1, r5
 8040250:	4290      	cmp	r0, r2
 8040252:	d90a      	bls.n	804026a <__udivmoddi4+0x62>
 8040254:	eb1c 0202 	adds.w	r2, ip, r2
 8040258:	f101 37ff 	add.w	r7, r1, #4294967295
 804025c:	f080 811c 	bcs.w	8040498 <__udivmoddi4+0x290>
 8040260:	4290      	cmp	r0, r2
 8040262:	f240 8119 	bls.w	8040498 <__udivmoddi4+0x290>
 8040266:	3902      	subs	r1, #2
 8040268:	4462      	add	r2, ip
 804026a:	1a12      	subs	r2, r2, r0
 804026c:	b2a4      	uxth	r4, r4
 804026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8040272:	fb0e 2210 	mls	r2, lr, r0, r2
 8040276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 804027a:	fb00 f505 	mul.w	r5, r0, r5
 804027e:	42a5      	cmp	r5, r4
 8040280:	d90a      	bls.n	8040298 <__udivmoddi4+0x90>
 8040282:	eb1c 0404 	adds.w	r4, ip, r4
 8040286:	f100 32ff 	add.w	r2, r0, #4294967295
 804028a:	f080 8107 	bcs.w	804049c <__udivmoddi4+0x294>
 804028e:	42a5      	cmp	r5, r4
 8040290:	f240 8104 	bls.w	804049c <__udivmoddi4+0x294>
 8040294:	4464      	add	r4, ip
 8040296:	3802      	subs	r0, #2
 8040298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 804029c:	1b64      	subs	r4, r4, r5
 804029e:	2100      	movs	r1, #0
 80402a0:	b11e      	cbz	r6, 80402aa <__udivmoddi4+0xa2>
 80402a2:	40dc      	lsrs	r4, r3
 80402a4:	2300      	movs	r3, #0
 80402a6:	e9c6 4300 	strd	r4, r3, [r6]
 80402aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80402ae:	428b      	cmp	r3, r1
 80402b0:	d908      	bls.n	80402c4 <__udivmoddi4+0xbc>
 80402b2:	2e00      	cmp	r6, #0
 80402b4:	f000 80ed 	beq.w	8040492 <__udivmoddi4+0x28a>
 80402b8:	2100      	movs	r1, #0
 80402ba:	e9c6 0500 	strd	r0, r5, [r6]
 80402be:	4608      	mov	r0, r1
 80402c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80402c4:	fab3 f183 	clz	r1, r3
 80402c8:	2900      	cmp	r1, #0
 80402ca:	d149      	bne.n	8040360 <__udivmoddi4+0x158>
 80402cc:	42ab      	cmp	r3, r5
 80402ce:	d302      	bcc.n	80402d6 <__udivmoddi4+0xce>
 80402d0:	4282      	cmp	r2, r0
 80402d2:	f200 80f8 	bhi.w	80404c6 <__udivmoddi4+0x2be>
 80402d6:	1a84      	subs	r4, r0, r2
 80402d8:	eb65 0203 	sbc.w	r2, r5, r3
 80402dc:	2001      	movs	r0, #1
 80402de:	4617      	mov	r7, r2
 80402e0:	2e00      	cmp	r6, #0
 80402e2:	d0e2      	beq.n	80402aa <__udivmoddi4+0xa2>
 80402e4:	e9c6 4700 	strd	r4, r7, [r6]
 80402e8:	e7df      	b.n	80402aa <__udivmoddi4+0xa2>
 80402ea:	b902      	cbnz	r2, 80402ee <__udivmoddi4+0xe6>
 80402ec:	deff      	udf	#255	; 0xff
 80402ee:	fab2 f382 	clz	r3, r2
 80402f2:	2b00      	cmp	r3, #0
 80402f4:	f040 8090 	bne.w	8040418 <__udivmoddi4+0x210>
 80402f8:	1a8a      	subs	r2, r1, r2
 80402fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80402fe:	fa1f fe8c 	uxth.w	lr, ip
 8040302:	2101      	movs	r1, #1
 8040304:	fbb2 f5f7 	udiv	r5, r2, r7
 8040308:	fb07 2015 	mls	r0, r7, r5, r2
 804030c:	0c22      	lsrs	r2, r4, #16
 804030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8040312:	fb0e f005 	mul.w	r0, lr, r5
 8040316:	4290      	cmp	r0, r2
 8040318:	d908      	bls.n	804032c <__udivmoddi4+0x124>
 804031a:	eb1c 0202 	adds.w	r2, ip, r2
 804031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8040322:	d202      	bcs.n	804032a <__udivmoddi4+0x122>
 8040324:	4290      	cmp	r0, r2
 8040326:	f200 80cb 	bhi.w	80404c0 <__udivmoddi4+0x2b8>
 804032a:	4645      	mov	r5, r8
 804032c:	1a12      	subs	r2, r2, r0
 804032e:	b2a4      	uxth	r4, r4
 8040330:	fbb2 f0f7 	udiv	r0, r2, r7
 8040334:	fb07 2210 	mls	r2, r7, r0, r2
 8040338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 804033c:	fb0e fe00 	mul.w	lr, lr, r0
 8040340:	45a6      	cmp	lr, r4
 8040342:	d908      	bls.n	8040356 <__udivmoddi4+0x14e>
 8040344:	eb1c 0404 	adds.w	r4, ip, r4
 8040348:	f100 32ff 	add.w	r2, r0, #4294967295
 804034c:	d202      	bcs.n	8040354 <__udivmoddi4+0x14c>
 804034e:	45a6      	cmp	lr, r4
 8040350:	f200 80bb 	bhi.w	80404ca <__udivmoddi4+0x2c2>
 8040354:	4610      	mov	r0, r2
 8040356:	eba4 040e 	sub.w	r4, r4, lr
 804035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 804035e:	e79f      	b.n	80402a0 <__udivmoddi4+0x98>
 8040360:	f1c1 0720 	rsb	r7, r1, #32
 8040364:	408b      	lsls	r3, r1
 8040366:	fa22 fc07 	lsr.w	ip, r2, r7
 804036a:	ea4c 0c03 	orr.w	ip, ip, r3
 804036e:	fa05 f401 	lsl.w	r4, r5, r1
 8040372:	fa20 f307 	lsr.w	r3, r0, r7
 8040376:	40fd      	lsrs	r5, r7
 8040378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 804037c:	4323      	orrs	r3, r4
 804037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8040382:	fa1f fe8c 	uxth.w	lr, ip
 8040386:	fb09 5518 	mls	r5, r9, r8, r5
 804038a:	0c1c      	lsrs	r4, r3, #16
 804038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8040390:	fb08 f50e 	mul.w	r5, r8, lr
 8040394:	42a5      	cmp	r5, r4
 8040396:	fa02 f201 	lsl.w	r2, r2, r1
 804039a:	fa00 f001 	lsl.w	r0, r0, r1
 804039e:	d90b      	bls.n	80403b8 <__udivmoddi4+0x1b0>
 80403a0:	eb1c 0404 	adds.w	r4, ip, r4
 80403a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80403a8:	f080 8088 	bcs.w	80404bc <__udivmoddi4+0x2b4>
 80403ac:	42a5      	cmp	r5, r4
 80403ae:	f240 8085 	bls.w	80404bc <__udivmoddi4+0x2b4>
 80403b2:	f1a8 0802 	sub.w	r8, r8, #2
 80403b6:	4464      	add	r4, ip
 80403b8:	1b64      	subs	r4, r4, r5
 80403ba:	b29d      	uxth	r5, r3
 80403bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80403c0:	fb09 4413 	mls	r4, r9, r3, r4
 80403c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80403c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80403cc:	45a6      	cmp	lr, r4
 80403ce:	d908      	bls.n	80403e2 <__udivmoddi4+0x1da>
 80403d0:	eb1c 0404 	adds.w	r4, ip, r4
 80403d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80403d8:	d26c      	bcs.n	80404b4 <__udivmoddi4+0x2ac>
 80403da:	45a6      	cmp	lr, r4
 80403dc:	d96a      	bls.n	80404b4 <__udivmoddi4+0x2ac>
 80403de:	3b02      	subs	r3, #2
 80403e0:	4464      	add	r4, ip
 80403e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80403e6:	fba3 9502 	umull	r9, r5, r3, r2
 80403ea:	eba4 040e 	sub.w	r4, r4, lr
 80403ee:	42ac      	cmp	r4, r5
 80403f0:	46c8      	mov	r8, r9
 80403f2:	46ae      	mov	lr, r5
 80403f4:	d356      	bcc.n	80404a4 <__udivmoddi4+0x29c>
 80403f6:	d053      	beq.n	80404a0 <__udivmoddi4+0x298>
 80403f8:	b156      	cbz	r6, 8040410 <__udivmoddi4+0x208>
 80403fa:	ebb0 0208 	subs.w	r2, r0, r8
 80403fe:	eb64 040e 	sbc.w	r4, r4, lr
 8040402:	fa04 f707 	lsl.w	r7, r4, r7
 8040406:	40ca      	lsrs	r2, r1
 8040408:	40cc      	lsrs	r4, r1
 804040a:	4317      	orrs	r7, r2
 804040c:	e9c6 7400 	strd	r7, r4, [r6]
 8040410:	4618      	mov	r0, r3
 8040412:	2100      	movs	r1, #0
 8040414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040418:	f1c3 0120 	rsb	r1, r3, #32
 804041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8040420:	fa20 f201 	lsr.w	r2, r0, r1
 8040424:	fa25 f101 	lsr.w	r1, r5, r1
 8040428:	409d      	lsls	r5, r3
 804042a:	432a      	orrs	r2, r5
 804042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040430:	fa1f fe8c 	uxth.w	lr, ip
 8040434:	fbb1 f0f7 	udiv	r0, r1, r7
 8040438:	fb07 1510 	mls	r5, r7, r0, r1
 804043c:	0c11      	lsrs	r1, r2, #16
 804043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8040442:	fb00 f50e 	mul.w	r5, r0, lr
 8040446:	428d      	cmp	r5, r1
 8040448:	fa04 f403 	lsl.w	r4, r4, r3
 804044c:	d908      	bls.n	8040460 <__udivmoddi4+0x258>
 804044e:	eb1c 0101 	adds.w	r1, ip, r1
 8040452:	f100 38ff 	add.w	r8, r0, #4294967295
 8040456:	d22f      	bcs.n	80404b8 <__udivmoddi4+0x2b0>
 8040458:	428d      	cmp	r5, r1
 804045a:	d92d      	bls.n	80404b8 <__udivmoddi4+0x2b0>
 804045c:	3802      	subs	r0, #2
 804045e:	4461      	add	r1, ip
 8040460:	1b49      	subs	r1, r1, r5
 8040462:	b292      	uxth	r2, r2
 8040464:	fbb1 f5f7 	udiv	r5, r1, r7
 8040468:	fb07 1115 	mls	r1, r7, r5, r1
 804046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8040470:	fb05 f10e 	mul.w	r1, r5, lr
 8040474:	4291      	cmp	r1, r2
 8040476:	d908      	bls.n	804048a <__udivmoddi4+0x282>
 8040478:	eb1c 0202 	adds.w	r2, ip, r2
 804047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8040480:	d216      	bcs.n	80404b0 <__udivmoddi4+0x2a8>
 8040482:	4291      	cmp	r1, r2
 8040484:	d914      	bls.n	80404b0 <__udivmoddi4+0x2a8>
 8040486:	3d02      	subs	r5, #2
 8040488:	4462      	add	r2, ip
 804048a:	1a52      	subs	r2, r2, r1
 804048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8040490:	e738      	b.n	8040304 <__udivmoddi4+0xfc>
 8040492:	4631      	mov	r1, r6
 8040494:	4630      	mov	r0, r6
 8040496:	e708      	b.n	80402aa <__udivmoddi4+0xa2>
 8040498:	4639      	mov	r1, r7
 804049a:	e6e6      	b.n	804026a <__udivmoddi4+0x62>
 804049c:	4610      	mov	r0, r2
 804049e:	e6fb      	b.n	8040298 <__udivmoddi4+0x90>
 80404a0:	4548      	cmp	r0, r9
 80404a2:	d2a9      	bcs.n	80403f8 <__udivmoddi4+0x1f0>
 80404a4:	ebb9 0802 	subs.w	r8, r9, r2
 80404a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80404ac:	3b01      	subs	r3, #1
 80404ae:	e7a3      	b.n	80403f8 <__udivmoddi4+0x1f0>
 80404b0:	4645      	mov	r5, r8
 80404b2:	e7ea      	b.n	804048a <__udivmoddi4+0x282>
 80404b4:	462b      	mov	r3, r5
 80404b6:	e794      	b.n	80403e2 <__udivmoddi4+0x1da>
 80404b8:	4640      	mov	r0, r8
 80404ba:	e7d1      	b.n	8040460 <__udivmoddi4+0x258>
 80404bc:	46d0      	mov	r8, sl
 80404be:	e77b      	b.n	80403b8 <__udivmoddi4+0x1b0>
 80404c0:	3d02      	subs	r5, #2
 80404c2:	4462      	add	r2, ip
 80404c4:	e732      	b.n	804032c <__udivmoddi4+0x124>
 80404c6:	4608      	mov	r0, r1
 80404c8:	e70a      	b.n	80402e0 <__udivmoddi4+0xd8>
 80404ca:	4464      	add	r4, ip
 80404cc:	3802      	subs	r0, #2
 80404ce:	e742      	b.n	8040356 <__udivmoddi4+0x14e>

080404d0 <__aeabi_idiv0>:
 80404d0:	4770      	bx	lr
 80404d2:	bf00      	nop

080404d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80404d4:	b580      	push	{r7, lr}
 80404d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80404d8:	f000 f97c 	bl	80407d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80404dc:	f000 f810 	bl	8040500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80404e0:	f000 f876 	bl	80405d0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80404e4:	f005 fe20 	bl	8046128 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80404e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80404ec:	4803      	ldr	r0, [pc, #12]	; (80404fc <main+0x28>)
 80404ee:	f000 fcb6 	bl	8040e5e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80404f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80404f6:	f000 f9df 	bl	80408b8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80404fa:	e7f5      	b.n	80404e8 <main+0x14>
 80404fc:	40020800 	.word	0x40020800

08040500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040500:	b580      	push	{r7, lr}
 8040502:	b094      	sub	sp, #80	; 0x50
 8040504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040506:	f107 0320 	add.w	r3, r7, #32
 804050a:	2230      	movs	r2, #48	; 0x30
 804050c:	2100      	movs	r1, #0
 804050e:	4618      	mov	r0, r3
 8040510:	f006 faf4 	bl	8046afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040514:	f107 030c 	add.w	r3, r7, #12
 8040518:	2200      	movs	r2, #0
 804051a:	601a      	str	r2, [r3, #0]
 804051c:	605a      	str	r2, [r3, #4]
 804051e:	609a      	str	r2, [r3, #8]
 8040520:	60da      	str	r2, [r3, #12]
 8040522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8040524:	2300      	movs	r3, #0
 8040526:	60bb      	str	r3, [r7, #8]
 8040528:	4b27      	ldr	r3, [pc, #156]	; (80405c8 <SystemClock_Config+0xc8>)
 804052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804052c:	4a26      	ldr	r2, [pc, #152]	; (80405c8 <SystemClock_Config+0xc8>)
 804052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040532:	6413      	str	r3, [r2, #64]	; 0x40
 8040534:	4b24      	ldr	r3, [pc, #144]	; (80405c8 <SystemClock_Config+0xc8>)
 8040536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804053c:	60bb      	str	r3, [r7, #8]
 804053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8040540:	2300      	movs	r3, #0
 8040542:	607b      	str	r3, [r7, #4]
 8040544:	4b21      	ldr	r3, [pc, #132]	; (80405cc <SystemClock_Config+0xcc>)
 8040546:	681b      	ldr	r3, [r3, #0]
 8040548:	4a20      	ldr	r2, [pc, #128]	; (80405cc <SystemClock_Config+0xcc>)
 804054a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 804054e:	6013      	str	r3, [r2, #0]
 8040550:	4b1e      	ldr	r3, [pc, #120]	; (80405cc <SystemClock_Config+0xcc>)
 8040552:	681b      	ldr	r3, [r3, #0]
 8040554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8040558:	607b      	str	r3, [r7, #4]
 804055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 804055c:	2301      	movs	r3, #1
 804055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8040560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8040564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8040566:	2302      	movs	r3, #2
 8040568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 804056a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 804056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8040570:	2319      	movs	r3, #25
 8040572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8040574:	23c0      	movs	r3, #192	; 0xc0
 8040576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8040578:	2306      	movs	r3, #6
 804057a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 804057c:	2304      	movs	r3, #4
 804057e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040580:	f107 0320 	add.w	r3, r7, #32
 8040584:	4618      	mov	r0, r3
 8040586:	f001 fed5 	bl	8042334 <HAL_RCC_OscConfig>
 804058a:	4603      	mov	r3, r0
 804058c:	2b00      	cmp	r3, #0
 804058e:	d001      	beq.n	8040594 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8040590:	f000 f87e 	bl	8040690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040594:	230f      	movs	r3, #15
 8040596:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8040598:	2302      	movs	r3, #2
 804059a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 804059c:	2300      	movs	r3, #0
 804059e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80405a0:	2300      	movs	r3, #0
 80405a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80405a4:	2300      	movs	r3, #0
 80405a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80405a8:	f107 030c 	add.w	r3, r7, #12
 80405ac:	2101      	movs	r1, #1
 80405ae:	4618      	mov	r0, r3
 80405b0:	f002 f938 	bl	8042824 <HAL_RCC_ClockConfig>
 80405b4:	4603      	mov	r3, r0
 80405b6:	2b00      	cmp	r3, #0
 80405b8:	d001      	beq.n	80405be <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80405ba:	f000 f869 	bl	8040690 <Error_Handler>
  }
}
 80405be:	bf00      	nop
 80405c0:	3750      	adds	r7, #80	; 0x50
 80405c2:	46bd      	mov	sp, r7
 80405c4:	bd80      	pop	{r7, pc}
 80405c6:	bf00      	nop
 80405c8:	40023800 	.word	0x40023800
 80405cc:	40007000 	.word	0x40007000

080405d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80405d0:	b580      	push	{r7, lr}
 80405d2:	b088      	sub	sp, #32
 80405d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80405d6:	f107 030c 	add.w	r3, r7, #12
 80405da:	2200      	movs	r2, #0
 80405dc:	601a      	str	r2, [r3, #0]
 80405de:	605a      	str	r2, [r3, #4]
 80405e0:	609a      	str	r2, [r3, #8]
 80405e2:	60da      	str	r2, [r3, #12]
 80405e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80405e6:	2300      	movs	r3, #0
 80405e8:	60bb      	str	r3, [r7, #8]
 80405ea:	4b26      	ldr	r3, [pc, #152]	; (8040684 <MX_GPIO_Init+0xb4>)
 80405ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80405ee:	4a25      	ldr	r2, [pc, #148]	; (8040684 <MX_GPIO_Init+0xb4>)
 80405f0:	f043 0304 	orr.w	r3, r3, #4
 80405f4:	6313      	str	r3, [r2, #48]	; 0x30
 80405f6:	4b23      	ldr	r3, [pc, #140]	; (8040684 <MX_GPIO_Init+0xb4>)
 80405f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80405fa:	f003 0304 	and.w	r3, r3, #4
 80405fe:	60bb      	str	r3, [r7, #8]
 8040600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8040602:	2300      	movs	r3, #0
 8040604:	607b      	str	r3, [r7, #4]
 8040606:	4b1f      	ldr	r3, [pc, #124]	; (8040684 <MX_GPIO_Init+0xb4>)
 8040608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804060a:	4a1e      	ldr	r2, [pc, #120]	; (8040684 <MX_GPIO_Init+0xb4>)
 804060c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8040610:	6313      	str	r3, [r2, #48]	; 0x30
 8040612:	4b1c      	ldr	r3, [pc, #112]	; (8040684 <MX_GPIO_Init+0xb4>)
 8040614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804061a:	607b      	str	r3, [r7, #4]
 804061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 804061e:	2300      	movs	r3, #0
 8040620:	603b      	str	r3, [r7, #0]
 8040622:	4b18      	ldr	r3, [pc, #96]	; (8040684 <MX_GPIO_Init+0xb4>)
 8040624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040626:	4a17      	ldr	r2, [pc, #92]	; (8040684 <MX_GPIO_Init+0xb4>)
 8040628:	f043 0301 	orr.w	r3, r3, #1
 804062c:	6313      	str	r3, [r2, #48]	; 0x30
 804062e:	4b15      	ldr	r3, [pc, #84]	; (8040684 <MX_GPIO_Init+0xb4>)
 8040630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040632:	f003 0301 	and.w	r3, r3, #1
 8040636:	603b      	str	r3, [r7, #0]
 8040638:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 804063a:	2200      	movs	r2, #0
 804063c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8040640:	4811      	ldr	r0, [pc, #68]	; (8040688 <MX_GPIO_Init+0xb8>)
 8040642:	f000 fbf3 	bl	8040e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8040646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 804064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804064c:	2301      	movs	r3, #1
 804064e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040650:	2300      	movs	r3, #0
 8040652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040654:	2300      	movs	r3, #0
 8040656:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8040658:	f107 030c 	add.w	r3, r7, #12
 804065c:	4619      	mov	r1, r3
 804065e:	480a      	ldr	r0, [pc, #40]	; (8040688 <MX_GPIO_Init+0xb8>)
 8040660:	f000 fa60 	bl	8040b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8040664:	2301      	movs	r3, #1
 8040666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040668:	2300      	movs	r3, #0
 804066a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804066c:	2301      	movs	r3, #1
 804066e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8040670:	f107 030c 	add.w	r3, r7, #12
 8040674:	4619      	mov	r1, r3
 8040676:	4805      	ldr	r0, [pc, #20]	; (804068c <MX_GPIO_Init+0xbc>)
 8040678:	f000 fa54 	bl	8040b24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 804067c:	bf00      	nop
 804067e:	3720      	adds	r7, #32
 8040680:	46bd      	mov	sp, r7
 8040682:	bd80      	pop	{r7, pc}
 8040684:	40023800 	.word	0x40023800
 8040688:	40020800 	.word	0x40020800
 804068c:	40020000 	.word	0x40020000

08040690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040690:	b480      	push	{r7}
 8040692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040694:	b672      	cpsid	i
}
 8040696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040698:	e7fe      	b.n	8040698 <Error_Handler+0x8>
	...

0804069c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 804069c:	b480      	push	{r7}
 804069e:	b083      	sub	sp, #12
 80406a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80406a2:	2300      	movs	r3, #0
 80406a4:	607b      	str	r3, [r7, #4]
 80406a6:	4b10      	ldr	r3, [pc, #64]	; (80406e8 <HAL_MspInit+0x4c>)
 80406a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80406aa:	4a0f      	ldr	r2, [pc, #60]	; (80406e8 <HAL_MspInit+0x4c>)
 80406ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80406b0:	6453      	str	r3, [r2, #68]	; 0x44
 80406b2:	4b0d      	ldr	r3, [pc, #52]	; (80406e8 <HAL_MspInit+0x4c>)
 80406b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80406b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80406ba:	607b      	str	r3, [r7, #4]
 80406bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80406be:	2300      	movs	r3, #0
 80406c0:	603b      	str	r3, [r7, #0]
 80406c2:	4b09      	ldr	r3, [pc, #36]	; (80406e8 <HAL_MspInit+0x4c>)
 80406c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80406c6:	4a08      	ldr	r2, [pc, #32]	; (80406e8 <HAL_MspInit+0x4c>)
 80406c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80406cc:	6413      	str	r3, [r2, #64]	; 0x40
 80406ce:	4b06      	ldr	r3, [pc, #24]	; (80406e8 <HAL_MspInit+0x4c>)
 80406d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80406d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80406d6:	603b      	str	r3, [r7, #0]
 80406d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80406da:	bf00      	nop
 80406dc:	370c      	adds	r7, #12
 80406de:	46bd      	mov	sp, r7
 80406e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406e4:	4770      	bx	lr
 80406e6:	bf00      	nop
 80406e8:	40023800 	.word	0x40023800

080406ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80406ec:	b480      	push	{r7}
 80406ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80406f0:	e7fe      	b.n	80406f0 <NMI_Handler+0x4>

080406f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80406f2:	b480      	push	{r7}
 80406f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80406f6:	e7fe      	b.n	80406f6 <HardFault_Handler+0x4>

080406f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80406f8:	b480      	push	{r7}
 80406fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80406fc:	e7fe      	b.n	80406fc <MemManage_Handler+0x4>

080406fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80406fe:	b480      	push	{r7}
 8040700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040702:	e7fe      	b.n	8040702 <BusFault_Handler+0x4>

08040704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040704:	b480      	push	{r7}
 8040706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040708:	e7fe      	b.n	8040708 <UsageFault_Handler+0x4>

0804070a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 804070a:	b480      	push	{r7}
 804070c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 804070e:	bf00      	nop
 8040710:	46bd      	mov	sp, r7
 8040712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040716:	4770      	bx	lr

08040718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040718:	b480      	push	{r7}
 804071a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 804071c:	bf00      	nop
 804071e:	46bd      	mov	sp, r7
 8040720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040724:	4770      	bx	lr

08040726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040726:	b480      	push	{r7}
 8040728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 804072a:	bf00      	nop
 804072c:	46bd      	mov	sp, r7
 804072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040732:	4770      	bx	lr

08040734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040734:	b580      	push	{r7, lr}
 8040736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040738:	f000 f89e 	bl	8040878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 804073c:	bf00      	nop
 804073e:	bd80      	pop	{r7, pc}

08040740 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8040740:	b580      	push	{r7, lr}
 8040742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8040744:	4802      	ldr	r0, [pc, #8]	; (8040750 <OTG_FS_IRQHandler+0x10>)
 8040746:	f000 fce8 	bl	804111a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 804074a:	bf00      	nop
 804074c:	bd80      	pop	{r7, pc}
 804074e:	bf00      	nop
 8040750:	200015fc 	.word	0x200015fc

08040754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8040754:	b480      	push	{r7}
 8040756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8040758:	4b07      	ldr	r3, [pc, #28]	; (8040778 <SystemInit+0x24>)
 804075a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804075e:	4a06      	ldr	r2, [pc, #24]	; (8040778 <SystemInit+0x24>)
 8040760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8040764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8040768:	4b03      	ldr	r3, [pc, #12]	; (8040778 <SystemInit+0x24>)
 804076a:	4a04      	ldr	r2, [pc, #16]	; (804077c <SystemInit+0x28>)
 804076c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 804076e:	bf00      	nop
 8040770:	46bd      	mov	sp, r7
 8040772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040776:	4770      	bx	lr
 8040778:	e000ed00 	.word	0xe000ed00
 804077c:	08040000 	.word	0x08040000

08040780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8040780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80407b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8040784:	f7ff ffe6 	bl	8040754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8040788:	480c      	ldr	r0, [pc, #48]	; (80407bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 804078a:	490d      	ldr	r1, [pc, #52]	; (80407c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 804078c:	4a0d      	ldr	r2, [pc, #52]	; (80407c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 804078e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040790:	e002      	b.n	8040798 <LoopCopyDataInit>

08040792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040796:	3304      	adds	r3, #4

08040798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 804079a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 804079c:	d3f9      	bcc.n	8040792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 804079e:	4a0a      	ldr	r2, [pc, #40]	; (80407c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80407a0:	4c0a      	ldr	r4, [pc, #40]	; (80407cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80407a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80407a4:	e001      	b.n	80407aa <LoopFillZerobss>

080407a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80407a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80407a8:	3204      	adds	r2, #4

080407aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80407aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80407ac:	d3fb      	bcc.n	80407a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80407ae:	f006 f9ad 	bl	8046b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80407b2:	f7ff fe8f 	bl	80404d4 <main>
  bx  lr    
 80407b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80407b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80407bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80407c0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80407c4:	08046bd4 	.word	0x08046bd4
  ldr r2, =_sbss
 80407c8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80407cc:	20001d00 	.word	0x20001d00

080407d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80407d0:	e7fe      	b.n	80407d0 <ADC_IRQHandler>
	...

080407d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80407d4:	b580      	push	{r7, lr}
 80407d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80407d8:	4b0e      	ldr	r3, [pc, #56]	; (8040814 <HAL_Init+0x40>)
 80407da:	681b      	ldr	r3, [r3, #0]
 80407dc:	4a0d      	ldr	r2, [pc, #52]	; (8040814 <HAL_Init+0x40>)
 80407de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80407e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80407e4:	4b0b      	ldr	r3, [pc, #44]	; (8040814 <HAL_Init+0x40>)
 80407e6:	681b      	ldr	r3, [r3, #0]
 80407e8:	4a0a      	ldr	r2, [pc, #40]	; (8040814 <HAL_Init+0x40>)
 80407ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80407ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80407f0:	4b08      	ldr	r3, [pc, #32]	; (8040814 <HAL_Init+0x40>)
 80407f2:	681b      	ldr	r3, [r3, #0]
 80407f4:	4a07      	ldr	r2, [pc, #28]	; (8040814 <HAL_Init+0x40>)
 80407f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80407fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80407fc:	2003      	movs	r0, #3
 80407fe:	f000 f94f 	bl	8040aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8040802:	200f      	movs	r0, #15
 8040804:	f000 f808 	bl	8040818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8040808:	f7ff ff48 	bl	804069c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 804080c:	2300      	movs	r3, #0
}
 804080e:	4618      	mov	r0, r3
 8040810:	bd80      	pop	{r7, pc}
 8040812:	bf00      	nop
 8040814:	40023c00 	.word	0x40023c00

08040818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040818:	b580      	push	{r7, lr}
 804081a:	b082      	sub	sp, #8
 804081c:	af00      	add	r7, sp, #0
 804081e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040820:	4b12      	ldr	r3, [pc, #72]	; (804086c <HAL_InitTick+0x54>)
 8040822:	681a      	ldr	r2, [r3, #0]
 8040824:	4b12      	ldr	r3, [pc, #72]	; (8040870 <HAL_InitTick+0x58>)
 8040826:	781b      	ldrb	r3, [r3, #0]
 8040828:	4619      	mov	r1, r3
 804082a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804082e:	fbb3 f3f1 	udiv	r3, r3, r1
 8040832:	fbb2 f3f3 	udiv	r3, r2, r3
 8040836:	4618      	mov	r0, r3
 8040838:	f000 f967 	bl	8040b0a <HAL_SYSTICK_Config>
 804083c:	4603      	mov	r3, r0
 804083e:	2b00      	cmp	r3, #0
 8040840:	d001      	beq.n	8040846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8040842:	2301      	movs	r3, #1
 8040844:	e00e      	b.n	8040864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040846:	687b      	ldr	r3, [r7, #4]
 8040848:	2b0f      	cmp	r3, #15
 804084a:	d80a      	bhi.n	8040862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 804084c:	2200      	movs	r2, #0
 804084e:	6879      	ldr	r1, [r7, #4]
 8040850:	f04f 30ff 	mov.w	r0, #4294967295
 8040854:	f000 f92f 	bl	8040ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040858:	4a06      	ldr	r2, [pc, #24]	; (8040874 <HAL_InitTick+0x5c>)
 804085a:	687b      	ldr	r3, [r7, #4]
 804085c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 804085e:	2300      	movs	r3, #0
 8040860:	e000      	b.n	8040864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8040862:	2301      	movs	r3, #1
}
 8040864:	4618      	mov	r0, r3
 8040866:	3708      	adds	r7, #8
 8040868:	46bd      	mov	sp, r7
 804086a:	bd80      	pop	{r7, pc}
 804086c:	20000000 	.word	0x20000000
 8040870:	20000008 	.word	0x20000008
 8040874:	20000004 	.word	0x20000004

08040878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040878:	b480      	push	{r7}
 804087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 804087c:	4b06      	ldr	r3, [pc, #24]	; (8040898 <HAL_IncTick+0x20>)
 804087e:	781b      	ldrb	r3, [r3, #0]
 8040880:	461a      	mov	r2, r3
 8040882:	4b06      	ldr	r3, [pc, #24]	; (804089c <HAL_IncTick+0x24>)
 8040884:	681b      	ldr	r3, [r3, #0]
 8040886:	4413      	add	r3, r2
 8040888:	4a04      	ldr	r2, [pc, #16]	; (804089c <HAL_IncTick+0x24>)
 804088a:	6013      	str	r3, [r2, #0]
}
 804088c:	bf00      	nop
 804088e:	46bd      	mov	sp, r7
 8040890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040894:	4770      	bx	lr
 8040896:	bf00      	nop
 8040898:	20000008 	.word	0x20000008
 804089c:	20000118 	.word	0x20000118

080408a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80408a0:	b480      	push	{r7}
 80408a2:	af00      	add	r7, sp, #0
  return uwTick;
 80408a4:	4b03      	ldr	r3, [pc, #12]	; (80408b4 <HAL_GetTick+0x14>)
 80408a6:	681b      	ldr	r3, [r3, #0]
}
 80408a8:	4618      	mov	r0, r3
 80408aa:	46bd      	mov	sp, r7
 80408ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408b0:	4770      	bx	lr
 80408b2:	bf00      	nop
 80408b4:	20000118 	.word	0x20000118

080408b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80408b8:	b580      	push	{r7, lr}
 80408ba:	b084      	sub	sp, #16
 80408bc:	af00      	add	r7, sp, #0
 80408be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80408c0:	f7ff ffee 	bl	80408a0 <HAL_GetTick>
 80408c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80408c6:	687b      	ldr	r3, [r7, #4]
 80408c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80408ca:	68fb      	ldr	r3, [r7, #12]
 80408cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80408d0:	d005      	beq.n	80408de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80408d2:	4b0a      	ldr	r3, [pc, #40]	; (80408fc <HAL_Delay+0x44>)
 80408d4:	781b      	ldrb	r3, [r3, #0]
 80408d6:	461a      	mov	r2, r3
 80408d8:	68fb      	ldr	r3, [r7, #12]
 80408da:	4413      	add	r3, r2
 80408dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80408de:	bf00      	nop
 80408e0:	f7ff ffde 	bl	80408a0 <HAL_GetTick>
 80408e4:	4602      	mov	r2, r0
 80408e6:	68bb      	ldr	r3, [r7, #8]
 80408e8:	1ad3      	subs	r3, r2, r3
 80408ea:	68fa      	ldr	r2, [r7, #12]
 80408ec:	429a      	cmp	r2, r3
 80408ee:	d8f7      	bhi.n	80408e0 <HAL_Delay+0x28>
  {
  }
}
 80408f0:	bf00      	nop
 80408f2:	bf00      	nop
 80408f4:	3710      	adds	r7, #16
 80408f6:	46bd      	mov	sp, r7
 80408f8:	bd80      	pop	{r7, pc}
 80408fa:	bf00      	nop
 80408fc:	20000008 	.word	0x20000008

08040900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040900:	b480      	push	{r7}
 8040902:	b085      	sub	sp, #20
 8040904:	af00      	add	r7, sp, #0
 8040906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040908:	687b      	ldr	r3, [r7, #4]
 804090a:	f003 0307 	and.w	r3, r3, #7
 804090e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040910:	4b0c      	ldr	r3, [pc, #48]	; (8040944 <__NVIC_SetPriorityGrouping+0x44>)
 8040912:	68db      	ldr	r3, [r3, #12]
 8040914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040916:	68ba      	ldr	r2, [r7, #8]
 8040918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 804091c:	4013      	ands	r3, r2
 804091e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040920:	68fb      	ldr	r3, [r7, #12]
 8040922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040924:	68bb      	ldr	r3, [r7, #8]
 8040926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 804092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040932:	4a04      	ldr	r2, [pc, #16]	; (8040944 <__NVIC_SetPriorityGrouping+0x44>)
 8040934:	68bb      	ldr	r3, [r7, #8]
 8040936:	60d3      	str	r3, [r2, #12]
}
 8040938:	bf00      	nop
 804093a:	3714      	adds	r7, #20
 804093c:	46bd      	mov	sp, r7
 804093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040942:	4770      	bx	lr
 8040944:	e000ed00 	.word	0xe000ed00

08040948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040948:	b480      	push	{r7}
 804094a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 804094c:	4b04      	ldr	r3, [pc, #16]	; (8040960 <__NVIC_GetPriorityGrouping+0x18>)
 804094e:	68db      	ldr	r3, [r3, #12]
 8040950:	0a1b      	lsrs	r3, r3, #8
 8040952:	f003 0307 	and.w	r3, r3, #7
}
 8040956:	4618      	mov	r0, r3
 8040958:	46bd      	mov	sp, r7
 804095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804095e:	4770      	bx	lr
 8040960:	e000ed00 	.word	0xe000ed00

08040964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040964:	b480      	push	{r7}
 8040966:	b083      	sub	sp, #12
 8040968:	af00      	add	r7, sp, #0
 804096a:	4603      	mov	r3, r0
 804096c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 804096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040972:	2b00      	cmp	r3, #0
 8040974:	db0b      	blt.n	804098e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8040976:	79fb      	ldrb	r3, [r7, #7]
 8040978:	f003 021f 	and.w	r2, r3, #31
 804097c:	4907      	ldr	r1, [pc, #28]	; (804099c <__NVIC_EnableIRQ+0x38>)
 804097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040982:	095b      	lsrs	r3, r3, #5
 8040984:	2001      	movs	r0, #1
 8040986:	fa00 f202 	lsl.w	r2, r0, r2
 804098a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 804098e:	bf00      	nop
 8040990:	370c      	adds	r7, #12
 8040992:	46bd      	mov	sp, r7
 8040994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040998:	4770      	bx	lr
 804099a:	bf00      	nop
 804099c:	e000e100 	.word	0xe000e100

080409a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80409a0:	b480      	push	{r7}
 80409a2:	b083      	sub	sp, #12
 80409a4:	af00      	add	r7, sp, #0
 80409a6:	4603      	mov	r3, r0
 80409a8:	6039      	str	r1, [r7, #0]
 80409aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80409ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80409b0:	2b00      	cmp	r3, #0
 80409b2:	db0a      	blt.n	80409ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80409b4:	683b      	ldr	r3, [r7, #0]
 80409b6:	b2da      	uxtb	r2, r3
 80409b8:	490c      	ldr	r1, [pc, #48]	; (80409ec <__NVIC_SetPriority+0x4c>)
 80409ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80409be:	0112      	lsls	r2, r2, #4
 80409c0:	b2d2      	uxtb	r2, r2
 80409c2:	440b      	add	r3, r1
 80409c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80409c8:	e00a      	b.n	80409e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80409ca:	683b      	ldr	r3, [r7, #0]
 80409cc:	b2da      	uxtb	r2, r3
 80409ce:	4908      	ldr	r1, [pc, #32]	; (80409f0 <__NVIC_SetPriority+0x50>)
 80409d0:	79fb      	ldrb	r3, [r7, #7]
 80409d2:	f003 030f 	and.w	r3, r3, #15
 80409d6:	3b04      	subs	r3, #4
 80409d8:	0112      	lsls	r2, r2, #4
 80409da:	b2d2      	uxtb	r2, r2
 80409dc:	440b      	add	r3, r1
 80409de:	761a      	strb	r2, [r3, #24]
}
 80409e0:	bf00      	nop
 80409e2:	370c      	adds	r7, #12
 80409e4:	46bd      	mov	sp, r7
 80409e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409ea:	4770      	bx	lr
 80409ec:	e000e100 	.word	0xe000e100
 80409f0:	e000ed00 	.word	0xe000ed00

080409f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80409f4:	b480      	push	{r7}
 80409f6:	b089      	sub	sp, #36	; 0x24
 80409f8:	af00      	add	r7, sp, #0
 80409fa:	60f8      	str	r0, [r7, #12]
 80409fc:	60b9      	str	r1, [r7, #8]
 80409fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040a00:	68fb      	ldr	r3, [r7, #12]
 8040a02:	f003 0307 	and.w	r3, r3, #7
 8040a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040a08:	69fb      	ldr	r3, [r7, #28]
 8040a0a:	f1c3 0307 	rsb	r3, r3, #7
 8040a0e:	2b04      	cmp	r3, #4
 8040a10:	bf28      	it	cs
 8040a12:	2304      	movcs	r3, #4
 8040a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040a16:	69fb      	ldr	r3, [r7, #28]
 8040a18:	3304      	adds	r3, #4
 8040a1a:	2b06      	cmp	r3, #6
 8040a1c:	d902      	bls.n	8040a24 <NVIC_EncodePriority+0x30>
 8040a1e:	69fb      	ldr	r3, [r7, #28]
 8040a20:	3b03      	subs	r3, #3
 8040a22:	e000      	b.n	8040a26 <NVIC_EncodePriority+0x32>
 8040a24:	2300      	movs	r3, #0
 8040a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040a28:	f04f 32ff 	mov.w	r2, #4294967295
 8040a2c:	69bb      	ldr	r3, [r7, #24]
 8040a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8040a32:	43da      	mvns	r2, r3
 8040a34:	68bb      	ldr	r3, [r7, #8]
 8040a36:	401a      	ands	r2, r3
 8040a38:	697b      	ldr	r3, [r7, #20]
 8040a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8040a40:	697b      	ldr	r3, [r7, #20]
 8040a42:	fa01 f303 	lsl.w	r3, r1, r3
 8040a46:	43d9      	mvns	r1, r3
 8040a48:	687b      	ldr	r3, [r7, #4]
 8040a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040a4c:	4313      	orrs	r3, r2
         );
}
 8040a4e:	4618      	mov	r0, r3
 8040a50:	3724      	adds	r7, #36	; 0x24
 8040a52:	46bd      	mov	sp, r7
 8040a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a58:	4770      	bx	lr
	...

08040a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040a5c:	b580      	push	{r7, lr}
 8040a5e:	b082      	sub	sp, #8
 8040a60:	af00      	add	r7, sp, #0
 8040a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040a64:	687b      	ldr	r3, [r7, #4]
 8040a66:	3b01      	subs	r3, #1
 8040a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040a6c:	d301      	bcc.n	8040a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040a6e:	2301      	movs	r3, #1
 8040a70:	e00f      	b.n	8040a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040a72:	4a0a      	ldr	r2, [pc, #40]	; (8040a9c <SysTick_Config+0x40>)
 8040a74:	687b      	ldr	r3, [r7, #4]
 8040a76:	3b01      	subs	r3, #1
 8040a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040a7a:	210f      	movs	r1, #15
 8040a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8040a80:	f7ff ff8e 	bl	80409a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040a84:	4b05      	ldr	r3, [pc, #20]	; (8040a9c <SysTick_Config+0x40>)
 8040a86:	2200      	movs	r2, #0
 8040a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040a8a:	4b04      	ldr	r3, [pc, #16]	; (8040a9c <SysTick_Config+0x40>)
 8040a8c:	2207      	movs	r2, #7
 8040a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040a90:	2300      	movs	r3, #0
}
 8040a92:	4618      	mov	r0, r3
 8040a94:	3708      	adds	r7, #8
 8040a96:	46bd      	mov	sp, r7
 8040a98:	bd80      	pop	{r7, pc}
 8040a9a:	bf00      	nop
 8040a9c:	e000e010 	.word	0xe000e010

08040aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040aa0:	b580      	push	{r7, lr}
 8040aa2:	b082      	sub	sp, #8
 8040aa4:	af00      	add	r7, sp, #0
 8040aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040aa8:	6878      	ldr	r0, [r7, #4]
 8040aaa:	f7ff ff29 	bl	8040900 <__NVIC_SetPriorityGrouping>
}
 8040aae:	bf00      	nop
 8040ab0:	3708      	adds	r7, #8
 8040ab2:	46bd      	mov	sp, r7
 8040ab4:	bd80      	pop	{r7, pc}

08040ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8040ab6:	b580      	push	{r7, lr}
 8040ab8:	b086      	sub	sp, #24
 8040aba:	af00      	add	r7, sp, #0
 8040abc:	4603      	mov	r3, r0
 8040abe:	60b9      	str	r1, [r7, #8]
 8040ac0:	607a      	str	r2, [r7, #4]
 8040ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8040ac4:	2300      	movs	r3, #0
 8040ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8040ac8:	f7ff ff3e 	bl	8040948 <__NVIC_GetPriorityGrouping>
 8040acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040ace:	687a      	ldr	r2, [r7, #4]
 8040ad0:	68b9      	ldr	r1, [r7, #8]
 8040ad2:	6978      	ldr	r0, [r7, #20]
 8040ad4:	f7ff ff8e 	bl	80409f4 <NVIC_EncodePriority>
 8040ad8:	4602      	mov	r2, r0
 8040ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040ade:	4611      	mov	r1, r2
 8040ae0:	4618      	mov	r0, r3
 8040ae2:	f7ff ff5d 	bl	80409a0 <__NVIC_SetPriority>
}
 8040ae6:	bf00      	nop
 8040ae8:	3718      	adds	r7, #24
 8040aea:	46bd      	mov	sp, r7
 8040aec:	bd80      	pop	{r7, pc}

08040aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040aee:	b580      	push	{r7, lr}
 8040af0:	b082      	sub	sp, #8
 8040af2:	af00      	add	r7, sp, #0
 8040af4:	4603      	mov	r3, r0
 8040af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8040af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040afc:	4618      	mov	r0, r3
 8040afe:	f7ff ff31 	bl	8040964 <__NVIC_EnableIRQ>
}
 8040b02:	bf00      	nop
 8040b04:	3708      	adds	r7, #8
 8040b06:	46bd      	mov	sp, r7
 8040b08:	bd80      	pop	{r7, pc}

08040b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040b0a:	b580      	push	{r7, lr}
 8040b0c:	b082      	sub	sp, #8
 8040b0e:	af00      	add	r7, sp, #0
 8040b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040b12:	6878      	ldr	r0, [r7, #4]
 8040b14:	f7ff ffa2 	bl	8040a5c <SysTick_Config>
 8040b18:	4603      	mov	r3, r0
}
 8040b1a:	4618      	mov	r0, r3
 8040b1c:	3708      	adds	r7, #8
 8040b1e:	46bd      	mov	sp, r7
 8040b20:	bd80      	pop	{r7, pc}
	...

08040b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040b24:	b480      	push	{r7}
 8040b26:	b089      	sub	sp, #36	; 0x24
 8040b28:	af00      	add	r7, sp, #0
 8040b2a:	6078      	str	r0, [r7, #4]
 8040b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8040b2e:	2300      	movs	r3, #0
 8040b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8040b32:	2300      	movs	r3, #0
 8040b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8040b36:	2300      	movs	r3, #0
 8040b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8040b3a:	2300      	movs	r3, #0
 8040b3c:	61fb      	str	r3, [r7, #28]
 8040b3e:	e159      	b.n	8040df4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8040b40:	2201      	movs	r2, #1
 8040b42:	69fb      	ldr	r3, [r7, #28]
 8040b44:	fa02 f303 	lsl.w	r3, r2, r3
 8040b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8040b4a:	683b      	ldr	r3, [r7, #0]
 8040b4c:	681b      	ldr	r3, [r3, #0]
 8040b4e:	697a      	ldr	r2, [r7, #20]
 8040b50:	4013      	ands	r3, r2
 8040b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8040b54:	693a      	ldr	r2, [r7, #16]
 8040b56:	697b      	ldr	r3, [r7, #20]
 8040b58:	429a      	cmp	r2, r3
 8040b5a:	f040 8148 	bne.w	8040dee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8040b5e:	683b      	ldr	r3, [r7, #0]
 8040b60:	685b      	ldr	r3, [r3, #4]
 8040b62:	f003 0303 	and.w	r3, r3, #3
 8040b66:	2b01      	cmp	r3, #1
 8040b68:	d005      	beq.n	8040b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040b6a:	683b      	ldr	r3, [r7, #0]
 8040b6c:	685b      	ldr	r3, [r3, #4]
 8040b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8040b72:	2b02      	cmp	r3, #2
 8040b74:	d130      	bne.n	8040bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8040b76:	687b      	ldr	r3, [r7, #4]
 8040b78:	689b      	ldr	r3, [r3, #8]
 8040b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8040b7c:	69fb      	ldr	r3, [r7, #28]
 8040b7e:	005b      	lsls	r3, r3, #1
 8040b80:	2203      	movs	r2, #3
 8040b82:	fa02 f303 	lsl.w	r3, r2, r3
 8040b86:	43db      	mvns	r3, r3
 8040b88:	69ba      	ldr	r2, [r7, #24]
 8040b8a:	4013      	ands	r3, r2
 8040b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8040b8e:	683b      	ldr	r3, [r7, #0]
 8040b90:	68da      	ldr	r2, [r3, #12]
 8040b92:	69fb      	ldr	r3, [r7, #28]
 8040b94:	005b      	lsls	r3, r3, #1
 8040b96:	fa02 f303 	lsl.w	r3, r2, r3
 8040b9a:	69ba      	ldr	r2, [r7, #24]
 8040b9c:	4313      	orrs	r3, r2
 8040b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8040ba0:	687b      	ldr	r3, [r7, #4]
 8040ba2:	69ba      	ldr	r2, [r7, #24]
 8040ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040ba6:	687b      	ldr	r3, [r7, #4]
 8040ba8:	685b      	ldr	r3, [r3, #4]
 8040baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8040bac:	2201      	movs	r2, #1
 8040bae:	69fb      	ldr	r3, [r7, #28]
 8040bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8040bb4:	43db      	mvns	r3, r3
 8040bb6:	69ba      	ldr	r2, [r7, #24]
 8040bb8:	4013      	ands	r3, r2
 8040bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8040bbc:	683b      	ldr	r3, [r7, #0]
 8040bbe:	685b      	ldr	r3, [r3, #4]
 8040bc0:	091b      	lsrs	r3, r3, #4
 8040bc2:	f003 0201 	and.w	r2, r3, #1
 8040bc6:	69fb      	ldr	r3, [r7, #28]
 8040bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8040bcc:	69ba      	ldr	r2, [r7, #24]
 8040bce:	4313      	orrs	r3, r2
 8040bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8040bd2:	687b      	ldr	r3, [r7, #4]
 8040bd4:	69ba      	ldr	r2, [r7, #24]
 8040bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8040bd8:	683b      	ldr	r3, [r7, #0]
 8040bda:	685b      	ldr	r3, [r3, #4]
 8040bdc:	f003 0303 	and.w	r3, r3, #3
 8040be0:	2b03      	cmp	r3, #3
 8040be2:	d017      	beq.n	8040c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8040be4:	687b      	ldr	r3, [r7, #4]
 8040be6:	68db      	ldr	r3, [r3, #12]
 8040be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8040bea:	69fb      	ldr	r3, [r7, #28]
 8040bec:	005b      	lsls	r3, r3, #1
 8040bee:	2203      	movs	r2, #3
 8040bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8040bf4:	43db      	mvns	r3, r3
 8040bf6:	69ba      	ldr	r2, [r7, #24]
 8040bf8:	4013      	ands	r3, r2
 8040bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8040bfc:	683b      	ldr	r3, [r7, #0]
 8040bfe:	689a      	ldr	r2, [r3, #8]
 8040c00:	69fb      	ldr	r3, [r7, #28]
 8040c02:	005b      	lsls	r3, r3, #1
 8040c04:	fa02 f303 	lsl.w	r3, r2, r3
 8040c08:	69ba      	ldr	r2, [r7, #24]
 8040c0a:	4313      	orrs	r3, r2
 8040c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8040c0e:	687b      	ldr	r3, [r7, #4]
 8040c10:	69ba      	ldr	r2, [r7, #24]
 8040c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040c14:	683b      	ldr	r3, [r7, #0]
 8040c16:	685b      	ldr	r3, [r3, #4]
 8040c18:	f003 0303 	and.w	r3, r3, #3
 8040c1c:	2b02      	cmp	r3, #2
 8040c1e:	d123      	bne.n	8040c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8040c20:	69fb      	ldr	r3, [r7, #28]
 8040c22:	08da      	lsrs	r2, r3, #3
 8040c24:	687b      	ldr	r3, [r7, #4]
 8040c26:	3208      	adds	r2, #8
 8040c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8040c2e:	69fb      	ldr	r3, [r7, #28]
 8040c30:	f003 0307 	and.w	r3, r3, #7
 8040c34:	009b      	lsls	r3, r3, #2
 8040c36:	220f      	movs	r2, #15
 8040c38:	fa02 f303 	lsl.w	r3, r2, r3
 8040c3c:	43db      	mvns	r3, r3
 8040c3e:	69ba      	ldr	r2, [r7, #24]
 8040c40:	4013      	ands	r3, r2
 8040c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8040c44:	683b      	ldr	r3, [r7, #0]
 8040c46:	691a      	ldr	r2, [r3, #16]
 8040c48:	69fb      	ldr	r3, [r7, #28]
 8040c4a:	f003 0307 	and.w	r3, r3, #7
 8040c4e:	009b      	lsls	r3, r3, #2
 8040c50:	fa02 f303 	lsl.w	r3, r2, r3
 8040c54:	69ba      	ldr	r2, [r7, #24]
 8040c56:	4313      	orrs	r3, r2
 8040c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8040c5a:	69fb      	ldr	r3, [r7, #28]
 8040c5c:	08da      	lsrs	r2, r3, #3
 8040c5e:	687b      	ldr	r3, [r7, #4]
 8040c60:	3208      	adds	r2, #8
 8040c62:	69b9      	ldr	r1, [r7, #24]
 8040c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040c68:	687b      	ldr	r3, [r7, #4]
 8040c6a:	681b      	ldr	r3, [r3, #0]
 8040c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8040c6e:	69fb      	ldr	r3, [r7, #28]
 8040c70:	005b      	lsls	r3, r3, #1
 8040c72:	2203      	movs	r2, #3
 8040c74:	fa02 f303 	lsl.w	r3, r2, r3
 8040c78:	43db      	mvns	r3, r3
 8040c7a:	69ba      	ldr	r2, [r7, #24]
 8040c7c:	4013      	ands	r3, r2
 8040c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8040c80:	683b      	ldr	r3, [r7, #0]
 8040c82:	685b      	ldr	r3, [r3, #4]
 8040c84:	f003 0203 	and.w	r2, r3, #3
 8040c88:	69fb      	ldr	r3, [r7, #28]
 8040c8a:	005b      	lsls	r3, r3, #1
 8040c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8040c90:	69ba      	ldr	r2, [r7, #24]
 8040c92:	4313      	orrs	r3, r2
 8040c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8040c96:	687b      	ldr	r3, [r7, #4]
 8040c98:	69ba      	ldr	r2, [r7, #24]
 8040c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8040c9c:	683b      	ldr	r3, [r7, #0]
 8040c9e:	685b      	ldr	r3, [r3, #4]
 8040ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8040ca4:	2b00      	cmp	r3, #0
 8040ca6:	f000 80a2 	beq.w	8040dee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040caa:	2300      	movs	r3, #0
 8040cac:	60fb      	str	r3, [r7, #12]
 8040cae:	4b57      	ldr	r3, [pc, #348]	; (8040e0c <HAL_GPIO_Init+0x2e8>)
 8040cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040cb2:	4a56      	ldr	r2, [pc, #344]	; (8040e0c <HAL_GPIO_Init+0x2e8>)
 8040cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8040cba:	4b54      	ldr	r3, [pc, #336]	; (8040e0c <HAL_GPIO_Init+0x2e8>)
 8040cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040cc2:	60fb      	str	r3, [r7, #12]
 8040cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8040cc6:	4a52      	ldr	r2, [pc, #328]	; (8040e10 <HAL_GPIO_Init+0x2ec>)
 8040cc8:	69fb      	ldr	r3, [r7, #28]
 8040cca:	089b      	lsrs	r3, r3, #2
 8040ccc:	3302      	adds	r3, #2
 8040cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8040cd4:	69fb      	ldr	r3, [r7, #28]
 8040cd6:	f003 0303 	and.w	r3, r3, #3
 8040cda:	009b      	lsls	r3, r3, #2
 8040cdc:	220f      	movs	r2, #15
 8040cde:	fa02 f303 	lsl.w	r3, r2, r3
 8040ce2:	43db      	mvns	r3, r3
 8040ce4:	69ba      	ldr	r2, [r7, #24]
 8040ce6:	4013      	ands	r3, r2
 8040ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8040cea:	687b      	ldr	r3, [r7, #4]
 8040cec:	4a49      	ldr	r2, [pc, #292]	; (8040e14 <HAL_GPIO_Init+0x2f0>)
 8040cee:	4293      	cmp	r3, r2
 8040cf0:	d019      	beq.n	8040d26 <HAL_GPIO_Init+0x202>
 8040cf2:	687b      	ldr	r3, [r7, #4]
 8040cf4:	4a48      	ldr	r2, [pc, #288]	; (8040e18 <HAL_GPIO_Init+0x2f4>)
 8040cf6:	4293      	cmp	r3, r2
 8040cf8:	d013      	beq.n	8040d22 <HAL_GPIO_Init+0x1fe>
 8040cfa:	687b      	ldr	r3, [r7, #4]
 8040cfc:	4a47      	ldr	r2, [pc, #284]	; (8040e1c <HAL_GPIO_Init+0x2f8>)
 8040cfe:	4293      	cmp	r3, r2
 8040d00:	d00d      	beq.n	8040d1e <HAL_GPIO_Init+0x1fa>
 8040d02:	687b      	ldr	r3, [r7, #4]
 8040d04:	4a46      	ldr	r2, [pc, #280]	; (8040e20 <HAL_GPIO_Init+0x2fc>)
 8040d06:	4293      	cmp	r3, r2
 8040d08:	d007      	beq.n	8040d1a <HAL_GPIO_Init+0x1f6>
 8040d0a:	687b      	ldr	r3, [r7, #4]
 8040d0c:	4a45      	ldr	r2, [pc, #276]	; (8040e24 <HAL_GPIO_Init+0x300>)
 8040d0e:	4293      	cmp	r3, r2
 8040d10:	d101      	bne.n	8040d16 <HAL_GPIO_Init+0x1f2>
 8040d12:	2304      	movs	r3, #4
 8040d14:	e008      	b.n	8040d28 <HAL_GPIO_Init+0x204>
 8040d16:	2307      	movs	r3, #7
 8040d18:	e006      	b.n	8040d28 <HAL_GPIO_Init+0x204>
 8040d1a:	2303      	movs	r3, #3
 8040d1c:	e004      	b.n	8040d28 <HAL_GPIO_Init+0x204>
 8040d1e:	2302      	movs	r3, #2
 8040d20:	e002      	b.n	8040d28 <HAL_GPIO_Init+0x204>
 8040d22:	2301      	movs	r3, #1
 8040d24:	e000      	b.n	8040d28 <HAL_GPIO_Init+0x204>
 8040d26:	2300      	movs	r3, #0
 8040d28:	69fa      	ldr	r2, [r7, #28]
 8040d2a:	f002 0203 	and.w	r2, r2, #3
 8040d2e:	0092      	lsls	r2, r2, #2
 8040d30:	4093      	lsls	r3, r2
 8040d32:	69ba      	ldr	r2, [r7, #24]
 8040d34:	4313      	orrs	r3, r2
 8040d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8040d38:	4935      	ldr	r1, [pc, #212]	; (8040e10 <HAL_GPIO_Init+0x2ec>)
 8040d3a:	69fb      	ldr	r3, [r7, #28]
 8040d3c:	089b      	lsrs	r3, r3, #2
 8040d3e:	3302      	adds	r3, #2
 8040d40:	69ba      	ldr	r2, [r7, #24]
 8040d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8040d46:	4b38      	ldr	r3, [pc, #224]	; (8040e28 <HAL_GPIO_Init+0x304>)
 8040d48:	689b      	ldr	r3, [r3, #8]
 8040d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040d4c:	693b      	ldr	r3, [r7, #16]
 8040d4e:	43db      	mvns	r3, r3
 8040d50:	69ba      	ldr	r2, [r7, #24]
 8040d52:	4013      	ands	r3, r2
 8040d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8040d56:	683b      	ldr	r3, [r7, #0]
 8040d58:	685b      	ldr	r3, [r3, #4]
 8040d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8040d5e:	2b00      	cmp	r3, #0
 8040d60:	d003      	beq.n	8040d6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8040d62:	69ba      	ldr	r2, [r7, #24]
 8040d64:	693b      	ldr	r3, [r7, #16]
 8040d66:	4313      	orrs	r3, r2
 8040d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8040d6a:	4a2f      	ldr	r2, [pc, #188]	; (8040e28 <HAL_GPIO_Init+0x304>)
 8040d6c:	69bb      	ldr	r3, [r7, #24]
 8040d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8040d70:	4b2d      	ldr	r3, [pc, #180]	; (8040e28 <HAL_GPIO_Init+0x304>)
 8040d72:	68db      	ldr	r3, [r3, #12]
 8040d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040d76:	693b      	ldr	r3, [r7, #16]
 8040d78:	43db      	mvns	r3, r3
 8040d7a:	69ba      	ldr	r2, [r7, #24]
 8040d7c:	4013      	ands	r3, r2
 8040d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8040d80:	683b      	ldr	r3, [r7, #0]
 8040d82:	685b      	ldr	r3, [r3, #4]
 8040d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8040d88:	2b00      	cmp	r3, #0
 8040d8a:	d003      	beq.n	8040d94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8040d8c:	69ba      	ldr	r2, [r7, #24]
 8040d8e:	693b      	ldr	r3, [r7, #16]
 8040d90:	4313      	orrs	r3, r2
 8040d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8040d94:	4a24      	ldr	r2, [pc, #144]	; (8040e28 <HAL_GPIO_Init+0x304>)
 8040d96:	69bb      	ldr	r3, [r7, #24]
 8040d98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8040d9a:	4b23      	ldr	r3, [pc, #140]	; (8040e28 <HAL_GPIO_Init+0x304>)
 8040d9c:	685b      	ldr	r3, [r3, #4]
 8040d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040da0:	693b      	ldr	r3, [r7, #16]
 8040da2:	43db      	mvns	r3, r3
 8040da4:	69ba      	ldr	r2, [r7, #24]
 8040da6:	4013      	ands	r3, r2
 8040da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8040daa:	683b      	ldr	r3, [r7, #0]
 8040dac:	685b      	ldr	r3, [r3, #4]
 8040dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040db2:	2b00      	cmp	r3, #0
 8040db4:	d003      	beq.n	8040dbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8040db6:	69ba      	ldr	r2, [r7, #24]
 8040db8:	693b      	ldr	r3, [r7, #16]
 8040dba:	4313      	orrs	r3, r2
 8040dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8040dbe:	4a1a      	ldr	r2, [pc, #104]	; (8040e28 <HAL_GPIO_Init+0x304>)
 8040dc0:	69bb      	ldr	r3, [r7, #24]
 8040dc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8040dc4:	4b18      	ldr	r3, [pc, #96]	; (8040e28 <HAL_GPIO_Init+0x304>)
 8040dc6:	681b      	ldr	r3, [r3, #0]
 8040dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040dca:	693b      	ldr	r3, [r7, #16]
 8040dcc:	43db      	mvns	r3, r3
 8040dce:	69ba      	ldr	r2, [r7, #24]
 8040dd0:	4013      	ands	r3, r2
 8040dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8040dd4:	683b      	ldr	r3, [r7, #0]
 8040dd6:	685b      	ldr	r3, [r3, #4]
 8040dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8040ddc:	2b00      	cmp	r3, #0
 8040dde:	d003      	beq.n	8040de8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8040de0:	69ba      	ldr	r2, [r7, #24]
 8040de2:	693b      	ldr	r3, [r7, #16]
 8040de4:	4313      	orrs	r3, r2
 8040de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8040de8:	4a0f      	ldr	r2, [pc, #60]	; (8040e28 <HAL_GPIO_Init+0x304>)
 8040dea:	69bb      	ldr	r3, [r7, #24]
 8040dec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8040dee:	69fb      	ldr	r3, [r7, #28]
 8040df0:	3301      	adds	r3, #1
 8040df2:	61fb      	str	r3, [r7, #28]
 8040df4:	69fb      	ldr	r3, [r7, #28]
 8040df6:	2b0f      	cmp	r3, #15
 8040df8:	f67f aea2 	bls.w	8040b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8040dfc:	bf00      	nop
 8040dfe:	bf00      	nop
 8040e00:	3724      	adds	r7, #36	; 0x24
 8040e02:	46bd      	mov	sp, r7
 8040e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e08:	4770      	bx	lr
 8040e0a:	bf00      	nop
 8040e0c:	40023800 	.word	0x40023800
 8040e10:	40013800 	.word	0x40013800
 8040e14:	40020000 	.word	0x40020000
 8040e18:	40020400 	.word	0x40020400
 8040e1c:	40020800 	.word	0x40020800
 8040e20:	40020c00 	.word	0x40020c00
 8040e24:	40021000 	.word	0x40021000
 8040e28:	40013c00 	.word	0x40013c00

08040e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8040e2c:	b480      	push	{r7}
 8040e2e:	b083      	sub	sp, #12
 8040e30:	af00      	add	r7, sp, #0
 8040e32:	6078      	str	r0, [r7, #4]
 8040e34:	460b      	mov	r3, r1
 8040e36:	807b      	strh	r3, [r7, #2]
 8040e38:	4613      	mov	r3, r2
 8040e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8040e3c:	787b      	ldrb	r3, [r7, #1]
 8040e3e:	2b00      	cmp	r3, #0
 8040e40:	d003      	beq.n	8040e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8040e42:	887a      	ldrh	r2, [r7, #2]
 8040e44:	687b      	ldr	r3, [r7, #4]
 8040e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8040e48:	e003      	b.n	8040e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8040e4a:	887b      	ldrh	r3, [r7, #2]
 8040e4c:	041a      	lsls	r2, r3, #16
 8040e4e:	687b      	ldr	r3, [r7, #4]
 8040e50:	619a      	str	r2, [r3, #24]
}
 8040e52:	bf00      	nop
 8040e54:	370c      	adds	r7, #12
 8040e56:	46bd      	mov	sp, r7
 8040e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e5c:	4770      	bx	lr

08040e5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8040e5e:	b480      	push	{r7}
 8040e60:	b085      	sub	sp, #20
 8040e62:	af00      	add	r7, sp, #0
 8040e64:	6078      	str	r0, [r7, #4]
 8040e66:	460b      	mov	r3, r1
 8040e68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8040e6a:	687b      	ldr	r3, [r7, #4]
 8040e6c:	695b      	ldr	r3, [r3, #20]
 8040e6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8040e70:	887a      	ldrh	r2, [r7, #2]
 8040e72:	68fb      	ldr	r3, [r7, #12]
 8040e74:	4013      	ands	r3, r2
 8040e76:	041a      	lsls	r2, r3, #16
 8040e78:	68fb      	ldr	r3, [r7, #12]
 8040e7a:	43d9      	mvns	r1, r3
 8040e7c:	887b      	ldrh	r3, [r7, #2]
 8040e7e:	400b      	ands	r3, r1
 8040e80:	431a      	orrs	r2, r3
 8040e82:	687b      	ldr	r3, [r7, #4]
 8040e84:	619a      	str	r2, [r3, #24]
}
 8040e86:	bf00      	nop
 8040e88:	3714      	adds	r7, #20
 8040e8a:	46bd      	mov	sp, r7
 8040e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e90:	4770      	bx	lr

08040e92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8040e92:	b580      	push	{r7, lr}
 8040e94:	b086      	sub	sp, #24
 8040e96:	af02      	add	r7, sp, #8
 8040e98:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8040e9a:	687b      	ldr	r3, [r7, #4]
 8040e9c:	2b00      	cmp	r3, #0
 8040e9e:	d101      	bne.n	8040ea4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8040ea0:	2301      	movs	r3, #1
 8040ea2:	e101      	b.n	80410a8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8040ea4:	687b      	ldr	r3, [r7, #4]
 8040ea6:	681b      	ldr	r3, [r3, #0]
 8040ea8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8040eaa:	687b      	ldr	r3, [r7, #4]
 8040eac:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8040eb0:	b2db      	uxtb	r3, r3
 8040eb2:	2b00      	cmp	r3, #0
 8040eb4:	d106      	bne.n	8040ec4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8040eb6:	687b      	ldr	r3, [r7, #4]
 8040eb8:	2200      	movs	r2, #0
 8040eba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8040ebe:	6878      	ldr	r0, [r7, #4]
 8040ec0:	f005 fb12 	bl	80464e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8040ec4:	687b      	ldr	r3, [r7, #4]
 8040ec6:	2203      	movs	r2, #3
 8040ec8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8040ecc:	68bb      	ldr	r3, [r7, #8]
 8040ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8040ed2:	d102      	bne.n	8040eda <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8040ed4:	687b      	ldr	r3, [r7, #4]
 8040ed6:	2200      	movs	r2, #0
 8040ed8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8040eda:	687b      	ldr	r3, [r7, #4]
 8040edc:	681b      	ldr	r3, [r3, #0]
 8040ede:	4618      	mov	r0, r3
 8040ee0:	f001 ff6f 	bl	8042dc2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8040ee4:	687b      	ldr	r3, [r7, #4]
 8040ee6:	6818      	ldr	r0, [r3, #0]
 8040ee8:	687b      	ldr	r3, [r7, #4]
 8040eea:	7c1a      	ldrb	r2, [r3, #16]
 8040eec:	f88d 2000 	strb.w	r2, [sp]
 8040ef0:	3304      	adds	r3, #4
 8040ef2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8040ef4:	f001 fe4e 	bl	8042b94 <USB_CoreInit>
 8040ef8:	4603      	mov	r3, r0
 8040efa:	2b00      	cmp	r3, #0
 8040efc:	d005      	beq.n	8040f0a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8040efe:	687b      	ldr	r3, [r7, #4]
 8040f00:	2202      	movs	r2, #2
 8040f02:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8040f06:	2301      	movs	r3, #1
 8040f08:	e0ce      	b.n	80410a8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8040f0a:	687b      	ldr	r3, [r7, #4]
 8040f0c:	681b      	ldr	r3, [r3, #0]
 8040f0e:	2100      	movs	r1, #0
 8040f10:	4618      	mov	r0, r3
 8040f12:	f001 ff67 	bl	8042de4 <USB_SetCurrentMode>
 8040f16:	4603      	mov	r3, r0
 8040f18:	2b00      	cmp	r3, #0
 8040f1a:	d005      	beq.n	8040f28 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8040f1c:	687b      	ldr	r3, [r7, #4]
 8040f1e:	2202      	movs	r2, #2
 8040f20:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8040f24:	2301      	movs	r3, #1
 8040f26:	e0bf      	b.n	80410a8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8040f28:	2300      	movs	r3, #0
 8040f2a:	73fb      	strb	r3, [r7, #15]
 8040f2c:	e04a      	b.n	8040fc4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8040f2e:	7bfa      	ldrb	r2, [r7, #15]
 8040f30:	6879      	ldr	r1, [r7, #4]
 8040f32:	4613      	mov	r3, r2
 8040f34:	00db      	lsls	r3, r3, #3
 8040f36:	4413      	add	r3, r2
 8040f38:	009b      	lsls	r3, r3, #2
 8040f3a:	440b      	add	r3, r1
 8040f3c:	3315      	adds	r3, #21
 8040f3e:	2201      	movs	r2, #1
 8040f40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8040f42:	7bfa      	ldrb	r2, [r7, #15]
 8040f44:	6879      	ldr	r1, [r7, #4]
 8040f46:	4613      	mov	r3, r2
 8040f48:	00db      	lsls	r3, r3, #3
 8040f4a:	4413      	add	r3, r2
 8040f4c:	009b      	lsls	r3, r3, #2
 8040f4e:	440b      	add	r3, r1
 8040f50:	3314      	adds	r3, #20
 8040f52:	7bfa      	ldrb	r2, [r7, #15]
 8040f54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8040f56:	7bfa      	ldrb	r2, [r7, #15]
 8040f58:	7bfb      	ldrb	r3, [r7, #15]
 8040f5a:	b298      	uxth	r0, r3
 8040f5c:	6879      	ldr	r1, [r7, #4]
 8040f5e:	4613      	mov	r3, r2
 8040f60:	00db      	lsls	r3, r3, #3
 8040f62:	4413      	add	r3, r2
 8040f64:	009b      	lsls	r3, r3, #2
 8040f66:	440b      	add	r3, r1
 8040f68:	332e      	adds	r3, #46	; 0x2e
 8040f6a:	4602      	mov	r2, r0
 8040f6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8040f6e:	7bfa      	ldrb	r2, [r7, #15]
 8040f70:	6879      	ldr	r1, [r7, #4]
 8040f72:	4613      	mov	r3, r2
 8040f74:	00db      	lsls	r3, r3, #3
 8040f76:	4413      	add	r3, r2
 8040f78:	009b      	lsls	r3, r3, #2
 8040f7a:	440b      	add	r3, r1
 8040f7c:	3318      	adds	r3, #24
 8040f7e:	2200      	movs	r2, #0
 8040f80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8040f82:	7bfa      	ldrb	r2, [r7, #15]
 8040f84:	6879      	ldr	r1, [r7, #4]
 8040f86:	4613      	mov	r3, r2
 8040f88:	00db      	lsls	r3, r3, #3
 8040f8a:	4413      	add	r3, r2
 8040f8c:	009b      	lsls	r3, r3, #2
 8040f8e:	440b      	add	r3, r1
 8040f90:	331c      	adds	r3, #28
 8040f92:	2200      	movs	r2, #0
 8040f94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8040f96:	7bfa      	ldrb	r2, [r7, #15]
 8040f98:	6879      	ldr	r1, [r7, #4]
 8040f9a:	4613      	mov	r3, r2
 8040f9c:	00db      	lsls	r3, r3, #3
 8040f9e:	4413      	add	r3, r2
 8040fa0:	009b      	lsls	r3, r3, #2
 8040fa2:	440b      	add	r3, r1
 8040fa4:	3320      	adds	r3, #32
 8040fa6:	2200      	movs	r2, #0
 8040fa8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8040faa:	7bfa      	ldrb	r2, [r7, #15]
 8040fac:	6879      	ldr	r1, [r7, #4]
 8040fae:	4613      	mov	r3, r2
 8040fb0:	00db      	lsls	r3, r3, #3
 8040fb2:	4413      	add	r3, r2
 8040fb4:	009b      	lsls	r3, r3, #2
 8040fb6:	440b      	add	r3, r1
 8040fb8:	3324      	adds	r3, #36	; 0x24
 8040fba:	2200      	movs	r2, #0
 8040fbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8040fbe:	7bfb      	ldrb	r3, [r7, #15]
 8040fc0:	3301      	adds	r3, #1
 8040fc2:	73fb      	strb	r3, [r7, #15]
 8040fc4:	687b      	ldr	r3, [r7, #4]
 8040fc6:	791b      	ldrb	r3, [r3, #4]
 8040fc8:	7bfa      	ldrb	r2, [r7, #15]
 8040fca:	429a      	cmp	r2, r3
 8040fcc:	d3af      	bcc.n	8040f2e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8040fce:	2300      	movs	r3, #0
 8040fd0:	73fb      	strb	r3, [r7, #15]
 8040fd2:	e044      	b.n	804105e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8040fd4:	7bfa      	ldrb	r2, [r7, #15]
 8040fd6:	6879      	ldr	r1, [r7, #4]
 8040fd8:	4613      	mov	r3, r2
 8040fda:	00db      	lsls	r3, r3, #3
 8040fdc:	4413      	add	r3, r2
 8040fde:	009b      	lsls	r3, r3, #2
 8040fe0:	440b      	add	r3, r1
 8040fe2:	f203 2355 	addw	r3, r3, #597	; 0x255
 8040fe6:	2200      	movs	r2, #0
 8040fe8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8040fea:	7bfa      	ldrb	r2, [r7, #15]
 8040fec:	6879      	ldr	r1, [r7, #4]
 8040fee:	4613      	mov	r3, r2
 8040ff0:	00db      	lsls	r3, r3, #3
 8040ff2:	4413      	add	r3, r2
 8040ff4:	009b      	lsls	r3, r3, #2
 8040ff6:	440b      	add	r3, r1
 8040ff8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8040ffc:	7bfa      	ldrb	r2, [r7, #15]
 8040ffe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8041000:	7bfa      	ldrb	r2, [r7, #15]
 8041002:	6879      	ldr	r1, [r7, #4]
 8041004:	4613      	mov	r3, r2
 8041006:	00db      	lsls	r3, r3, #3
 8041008:	4413      	add	r3, r2
 804100a:	009b      	lsls	r3, r3, #2
 804100c:	440b      	add	r3, r1
 804100e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8041012:	2200      	movs	r2, #0
 8041014:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8041016:	7bfa      	ldrb	r2, [r7, #15]
 8041018:	6879      	ldr	r1, [r7, #4]
 804101a:	4613      	mov	r3, r2
 804101c:	00db      	lsls	r3, r3, #3
 804101e:	4413      	add	r3, r2
 8041020:	009b      	lsls	r3, r3, #2
 8041022:	440b      	add	r3, r1
 8041024:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8041028:	2200      	movs	r2, #0
 804102a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 804102c:	7bfa      	ldrb	r2, [r7, #15]
 804102e:	6879      	ldr	r1, [r7, #4]
 8041030:	4613      	mov	r3, r2
 8041032:	00db      	lsls	r3, r3, #3
 8041034:	4413      	add	r3, r2
 8041036:	009b      	lsls	r3, r3, #2
 8041038:	440b      	add	r3, r1
 804103a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 804103e:	2200      	movs	r2, #0
 8041040:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8041042:	7bfa      	ldrb	r2, [r7, #15]
 8041044:	6879      	ldr	r1, [r7, #4]
 8041046:	4613      	mov	r3, r2
 8041048:	00db      	lsls	r3, r3, #3
 804104a:	4413      	add	r3, r2
 804104c:	009b      	lsls	r3, r3, #2
 804104e:	440b      	add	r3, r1
 8041050:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8041054:	2200      	movs	r2, #0
 8041056:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041058:	7bfb      	ldrb	r3, [r7, #15]
 804105a:	3301      	adds	r3, #1
 804105c:	73fb      	strb	r3, [r7, #15]
 804105e:	687b      	ldr	r3, [r7, #4]
 8041060:	791b      	ldrb	r3, [r3, #4]
 8041062:	7bfa      	ldrb	r2, [r7, #15]
 8041064:	429a      	cmp	r2, r3
 8041066:	d3b5      	bcc.n	8040fd4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8041068:	687b      	ldr	r3, [r7, #4]
 804106a:	6818      	ldr	r0, [r3, #0]
 804106c:	687b      	ldr	r3, [r7, #4]
 804106e:	7c1a      	ldrb	r2, [r3, #16]
 8041070:	f88d 2000 	strb.w	r2, [sp]
 8041074:	3304      	adds	r3, #4
 8041076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8041078:	f001 ff00 	bl	8042e7c <USB_DevInit>
 804107c:	4603      	mov	r3, r0
 804107e:	2b00      	cmp	r3, #0
 8041080:	d005      	beq.n	804108e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8041082:	687b      	ldr	r3, [r7, #4]
 8041084:	2202      	movs	r2, #2
 8041086:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 804108a:	2301      	movs	r3, #1
 804108c:	e00c      	b.n	80410a8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 804108e:	687b      	ldr	r3, [r7, #4]
 8041090:	2200      	movs	r2, #0
 8041092:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8041094:	687b      	ldr	r3, [r7, #4]
 8041096:	2201      	movs	r2, #1
 8041098:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 804109c:	687b      	ldr	r3, [r7, #4]
 804109e:	681b      	ldr	r3, [r3, #0]
 80410a0:	4618      	mov	r0, r3
 80410a2:	f002 ff44 	bl	8043f2e <USB_DevDisconnect>

  return HAL_OK;
 80410a6:	2300      	movs	r3, #0
}
 80410a8:	4618      	mov	r0, r3
 80410aa:	3710      	adds	r7, #16
 80410ac:	46bd      	mov	sp, r7
 80410ae:	bd80      	pop	{r7, pc}

080410b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80410b0:	b580      	push	{r7, lr}
 80410b2:	b084      	sub	sp, #16
 80410b4:	af00      	add	r7, sp, #0
 80410b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80410b8:	687b      	ldr	r3, [r7, #4]
 80410ba:	681b      	ldr	r3, [r3, #0]
 80410bc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80410be:	687b      	ldr	r3, [r7, #4]
 80410c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80410c4:	2b01      	cmp	r3, #1
 80410c6:	d101      	bne.n	80410cc <HAL_PCD_Start+0x1c>
 80410c8:	2302      	movs	r3, #2
 80410ca:	e022      	b.n	8041112 <HAL_PCD_Start+0x62>
 80410cc:	687b      	ldr	r3, [r7, #4]
 80410ce:	2201      	movs	r2, #1
 80410d0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80410d4:	68fb      	ldr	r3, [r7, #12]
 80410d6:	68db      	ldr	r3, [r3, #12]
 80410d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80410dc:	2b00      	cmp	r3, #0
 80410de:	d009      	beq.n	80410f4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80410e0:	687b      	ldr	r3, [r7, #4]
 80410e2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80410e4:	2b01      	cmp	r3, #1
 80410e6:	d105      	bne.n	80410f4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80410e8:	68fb      	ldr	r3, [r7, #12]
 80410ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80410ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80410f0:	68fb      	ldr	r3, [r7, #12]
 80410f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80410f4:	687b      	ldr	r3, [r7, #4]
 80410f6:	681b      	ldr	r3, [r3, #0]
 80410f8:	4618      	mov	r0, r3
 80410fa:	f001 fe51 	bl	8042da0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80410fe:	687b      	ldr	r3, [r7, #4]
 8041100:	681b      	ldr	r3, [r3, #0]
 8041102:	4618      	mov	r0, r3
 8041104:	f002 fef2 	bl	8043eec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8041108:	687b      	ldr	r3, [r7, #4]
 804110a:	2200      	movs	r2, #0
 804110c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8041110:	2300      	movs	r3, #0
}
 8041112:	4618      	mov	r0, r3
 8041114:	3710      	adds	r7, #16
 8041116:	46bd      	mov	sp, r7
 8041118:	bd80      	pop	{r7, pc}

0804111a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 804111a:	b590      	push	{r4, r7, lr}
 804111c:	b08d      	sub	sp, #52	; 0x34
 804111e:	af00      	add	r7, sp, #0
 8041120:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8041122:	687b      	ldr	r3, [r7, #4]
 8041124:	681b      	ldr	r3, [r3, #0]
 8041126:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8041128:	6a3b      	ldr	r3, [r7, #32]
 804112a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 804112c:	687b      	ldr	r3, [r7, #4]
 804112e:	681b      	ldr	r3, [r3, #0]
 8041130:	4618      	mov	r0, r3
 8041132:	f002 ffb0 	bl	8044096 <USB_GetMode>
 8041136:	4603      	mov	r3, r0
 8041138:	2b00      	cmp	r3, #0
 804113a:	f040 848c 	bne.w	8041a56 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 804113e:	687b      	ldr	r3, [r7, #4]
 8041140:	681b      	ldr	r3, [r3, #0]
 8041142:	4618      	mov	r0, r3
 8041144:	f002 ff14 	bl	8043f70 <USB_ReadInterrupts>
 8041148:	4603      	mov	r3, r0
 804114a:	2b00      	cmp	r3, #0
 804114c:	f000 8482 	beq.w	8041a54 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8041150:	69fb      	ldr	r3, [r7, #28]
 8041152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8041156:	689b      	ldr	r3, [r3, #8]
 8041158:	0a1b      	lsrs	r3, r3, #8
 804115a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 804115e:	687b      	ldr	r3, [r7, #4]
 8041160:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8041164:	687b      	ldr	r3, [r7, #4]
 8041166:	681b      	ldr	r3, [r3, #0]
 8041168:	4618      	mov	r0, r3
 804116a:	f002 ff01 	bl	8043f70 <USB_ReadInterrupts>
 804116e:	4603      	mov	r3, r0
 8041170:	f003 0302 	and.w	r3, r3, #2
 8041174:	2b02      	cmp	r3, #2
 8041176:	d107      	bne.n	8041188 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8041178:	687b      	ldr	r3, [r7, #4]
 804117a:	681b      	ldr	r3, [r3, #0]
 804117c:	695a      	ldr	r2, [r3, #20]
 804117e:	687b      	ldr	r3, [r7, #4]
 8041180:	681b      	ldr	r3, [r3, #0]
 8041182:	f002 0202 	and.w	r2, r2, #2
 8041186:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8041188:	687b      	ldr	r3, [r7, #4]
 804118a:	681b      	ldr	r3, [r3, #0]
 804118c:	4618      	mov	r0, r3
 804118e:	f002 feef 	bl	8043f70 <USB_ReadInterrupts>
 8041192:	4603      	mov	r3, r0
 8041194:	f003 0310 	and.w	r3, r3, #16
 8041198:	2b10      	cmp	r3, #16
 804119a:	d161      	bne.n	8041260 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 804119c:	687b      	ldr	r3, [r7, #4]
 804119e:	681b      	ldr	r3, [r3, #0]
 80411a0:	699a      	ldr	r2, [r3, #24]
 80411a2:	687b      	ldr	r3, [r7, #4]
 80411a4:	681b      	ldr	r3, [r3, #0]
 80411a6:	f022 0210 	bic.w	r2, r2, #16
 80411aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80411ac:	6a3b      	ldr	r3, [r7, #32]
 80411ae:	6a1b      	ldr	r3, [r3, #32]
 80411b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80411b2:	69bb      	ldr	r3, [r7, #24]
 80411b4:	f003 020f 	and.w	r2, r3, #15
 80411b8:	4613      	mov	r3, r2
 80411ba:	00db      	lsls	r3, r3, #3
 80411bc:	4413      	add	r3, r2
 80411be:	009b      	lsls	r3, r3, #2
 80411c0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80411c4:	687a      	ldr	r2, [r7, #4]
 80411c6:	4413      	add	r3, r2
 80411c8:	3304      	adds	r3, #4
 80411ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80411cc:	69bb      	ldr	r3, [r7, #24]
 80411ce:	0c5b      	lsrs	r3, r3, #17
 80411d0:	f003 030f 	and.w	r3, r3, #15
 80411d4:	2b02      	cmp	r3, #2
 80411d6:	d124      	bne.n	8041222 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80411d8:	69ba      	ldr	r2, [r7, #24]
 80411da:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80411de:	4013      	ands	r3, r2
 80411e0:	2b00      	cmp	r3, #0
 80411e2:	d035      	beq.n	8041250 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80411e4:	697b      	ldr	r3, [r7, #20]
 80411e6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80411e8:	69bb      	ldr	r3, [r7, #24]
 80411ea:	091b      	lsrs	r3, r3, #4
 80411ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80411ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80411f2:	b29b      	uxth	r3, r3
 80411f4:	461a      	mov	r2, r3
 80411f6:	6a38      	ldr	r0, [r7, #32]
 80411f8:	f002 fd26 	bl	8043c48 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80411fc:	697b      	ldr	r3, [r7, #20]
 80411fe:	68da      	ldr	r2, [r3, #12]
 8041200:	69bb      	ldr	r3, [r7, #24]
 8041202:	091b      	lsrs	r3, r3, #4
 8041204:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041208:	441a      	add	r2, r3
 804120a:	697b      	ldr	r3, [r7, #20]
 804120c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 804120e:	697b      	ldr	r3, [r7, #20]
 8041210:	695a      	ldr	r2, [r3, #20]
 8041212:	69bb      	ldr	r3, [r7, #24]
 8041214:	091b      	lsrs	r3, r3, #4
 8041216:	f3c3 030a 	ubfx	r3, r3, #0, #11
 804121a:	441a      	add	r2, r3
 804121c:	697b      	ldr	r3, [r7, #20]
 804121e:	615a      	str	r2, [r3, #20]
 8041220:	e016      	b.n	8041250 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8041222:	69bb      	ldr	r3, [r7, #24]
 8041224:	0c5b      	lsrs	r3, r3, #17
 8041226:	f003 030f 	and.w	r3, r3, #15
 804122a:	2b06      	cmp	r3, #6
 804122c:	d110      	bne.n	8041250 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 804122e:	687b      	ldr	r3, [r7, #4]
 8041230:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8041234:	2208      	movs	r2, #8
 8041236:	4619      	mov	r1, r3
 8041238:	6a38      	ldr	r0, [r7, #32]
 804123a:	f002 fd05 	bl	8043c48 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 804123e:	697b      	ldr	r3, [r7, #20]
 8041240:	695a      	ldr	r2, [r3, #20]
 8041242:	69bb      	ldr	r3, [r7, #24]
 8041244:	091b      	lsrs	r3, r3, #4
 8041246:	f3c3 030a 	ubfx	r3, r3, #0, #11
 804124a:	441a      	add	r2, r3
 804124c:	697b      	ldr	r3, [r7, #20]
 804124e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8041250:	687b      	ldr	r3, [r7, #4]
 8041252:	681b      	ldr	r3, [r3, #0]
 8041254:	699a      	ldr	r2, [r3, #24]
 8041256:	687b      	ldr	r3, [r7, #4]
 8041258:	681b      	ldr	r3, [r3, #0]
 804125a:	f042 0210 	orr.w	r2, r2, #16
 804125e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8041260:	687b      	ldr	r3, [r7, #4]
 8041262:	681b      	ldr	r3, [r3, #0]
 8041264:	4618      	mov	r0, r3
 8041266:	f002 fe83 	bl	8043f70 <USB_ReadInterrupts>
 804126a:	4603      	mov	r3, r0
 804126c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8041270:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8041274:	f040 80a7 	bne.w	80413c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8041278:	2300      	movs	r3, #0
 804127a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 804127c:	687b      	ldr	r3, [r7, #4]
 804127e:	681b      	ldr	r3, [r3, #0]
 8041280:	4618      	mov	r0, r3
 8041282:	f002 fe88 	bl	8043f96 <USB_ReadDevAllOutEpInterrupt>
 8041286:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8041288:	e099      	b.n	80413be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 804128a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804128c:	f003 0301 	and.w	r3, r3, #1
 8041290:	2b00      	cmp	r3, #0
 8041292:	f000 808e 	beq.w	80413b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8041296:	687b      	ldr	r3, [r7, #4]
 8041298:	681b      	ldr	r3, [r3, #0]
 804129a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804129c:	b2d2      	uxtb	r2, r2
 804129e:	4611      	mov	r1, r2
 80412a0:	4618      	mov	r0, r3
 80412a2:	f002 feac 	bl	8043ffe <USB_ReadDevOutEPInterrupt>
 80412a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80412a8:	693b      	ldr	r3, [r7, #16]
 80412aa:	f003 0301 	and.w	r3, r3, #1
 80412ae:	2b00      	cmp	r3, #0
 80412b0:	d00c      	beq.n	80412cc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80412b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80412b4:	015a      	lsls	r2, r3, #5
 80412b6:	69fb      	ldr	r3, [r7, #28]
 80412b8:	4413      	add	r3, r2
 80412ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80412be:	461a      	mov	r2, r3
 80412c0:	2301      	movs	r3, #1
 80412c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80412c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80412c6:	6878      	ldr	r0, [r7, #4]
 80412c8:	f000 fea2 	bl	8042010 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80412cc:	693b      	ldr	r3, [r7, #16]
 80412ce:	f003 0308 	and.w	r3, r3, #8
 80412d2:	2b00      	cmp	r3, #0
 80412d4:	d00c      	beq.n	80412f0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80412d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80412d8:	015a      	lsls	r2, r3, #5
 80412da:	69fb      	ldr	r3, [r7, #28]
 80412dc:	4413      	add	r3, r2
 80412de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80412e2:	461a      	mov	r2, r3
 80412e4:	2308      	movs	r3, #8
 80412e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80412e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80412ea:	6878      	ldr	r0, [r7, #4]
 80412ec:	f000 ff78 	bl	80421e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80412f0:	693b      	ldr	r3, [r7, #16]
 80412f2:	f003 0310 	and.w	r3, r3, #16
 80412f6:	2b00      	cmp	r3, #0
 80412f8:	d008      	beq.n	804130c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80412fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80412fc:	015a      	lsls	r2, r3, #5
 80412fe:	69fb      	ldr	r3, [r7, #28]
 8041300:	4413      	add	r3, r2
 8041302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8041306:	461a      	mov	r2, r3
 8041308:	2310      	movs	r3, #16
 804130a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 804130c:	693b      	ldr	r3, [r7, #16]
 804130e:	f003 0302 	and.w	r3, r3, #2
 8041312:	2b00      	cmp	r3, #0
 8041314:	d030      	beq.n	8041378 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8041316:	6a3b      	ldr	r3, [r7, #32]
 8041318:	695b      	ldr	r3, [r3, #20]
 804131a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804131e:	2b80      	cmp	r3, #128	; 0x80
 8041320:	d109      	bne.n	8041336 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8041322:	69fb      	ldr	r3, [r7, #28]
 8041324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8041328:	685b      	ldr	r3, [r3, #4]
 804132a:	69fa      	ldr	r2, [r7, #28]
 804132c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8041330:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8041334:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8041336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8041338:	4613      	mov	r3, r2
 804133a:	00db      	lsls	r3, r3, #3
 804133c:	4413      	add	r3, r2
 804133e:	009b      	lsls	r3, r3, #2
 8041340:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8041344:	687a      	ldr	r2, [r7, #4]
 8041346:	4413      	add	r3, r2
 8041348:	3304      	adds	r3, #4
 804134a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 804134c:	697b      	ldr	r3, [r7, #20]
 804134e:	78db      	ldrb	r3, [r3, #3]
 8041350:	2b01      	cmp	r3, #1
 8041352:	d108      	bne.n	8041366 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8041354:	697b      	ldr	r3, [r7, #20]
 8041356:	2200      	movs	r2, #0
 8041358:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 804135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804135c:	b2db      	uxtb	r3, r3
 804135e:	4619      	mov	r1, r3
 8041360:	6878      	ldr	r0, [r7, #4]
 8041362:	f005 f9bd 	bl	80466e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8041366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041368:	015a      	lsls	r2, r3, #5
 804136a:	69fb      	ldr	r3, [r7, #28]
 804136c:	4413      	add	r3, r2
 804136e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8041372:	461a      	mov	r2, r3
 8041374:	2302      	movs	r3, #2
 8041376:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8041378:	693b      	ldr	r3, [r7, #16]
 804137a:	f003 0320 	and.w	r3, r3, #32
 804137e:	2b00      	cmp	r3, #0
 8041380:	d008      	beq.n	8041394 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8041382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041384:	015a      	lsls	r2, r3, #5
 8041386:	69fb      	ldr	r3, [r7, #28]
 8041388:	4413      	add	r3, r2
 804138a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804138e:	461a      	mov	r2, r3
 8041390:	2320      	movs	r3, #32
 8041392:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8041394:	693b      	ldr	r3, [r7, #16]
 8041396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 804139a:	2b00      	cmp	r3, #0
 804139c:	d009      	beq.n	80413b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 804139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80413a0:	015a      	lsls	r2, r3, #5
 80413a2:	69fb      	ldr	r3, [r7, #28]
 80413a4:	4413      	add	r3, r2
 80413a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80413aa:	461a      	mov	r2, r3
 80413ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80413b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80413b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80413b4:	3301      	adds	r3, #1
 80413b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80413b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80413ba:	085b      	lsrs	r3, r3, #1
 80413bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80413be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80413c0:	2b00      	cmp	r3, #0
 80413c2:	f47f af62 	bne.w	804128a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80413c6:	687b      	ldr	r3, [r7, #4]
 80413c8:	681b      	ldr	r3, [r3, #0]
 80413ca:	4618      	mov	r0, r3
 80413cc:	f002 fdd0 	bl	8043f70 <USB_ReadInterrupts>
 80413d0:	4603      	mov	r3, r0
 80413d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80413d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80413da:	f040 80db 	bne.w	8041594 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80413de:	687b      	ldr	r3, [r7, #4]
 80413e0:	681b      	ldr	r3, [r3, #0]
 80413e2:	4618      	mov	r0, r3
 80413e4:	f002 fdf1 	bl	8043fca <USB_ReadDevAllInEpInterrupt>
 80413e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80413ea:	2300      	movs	r3, #0
 80413ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80413ee:	e0cd      	b.n	804158c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80413f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80413f2:	f003 0301 	and.w	r3, r3, #1
 80413f6:	2b00      	cmp	r3, #0
 80413f8:	f000 80c2 	beq.w	8041580 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80413fc:	687b      	ldr	r3, [r7, #4]
 80413fe:	681b      	ldr	r3, [r3, #0]
 8041400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8041402:	b2d2      	uxtb	r2, r2
 8041404:	4611      	mov	r1, r2
 8041406:	4618      	mov	r0, r3
 8041408:	f002 fe17 	bl	804403a <USB_ReadDevInEPInterrupt>
 804140c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 804140e:	693b      	ldr	r3, [r7, #16]
 8041410:	f003 0301 	and.w	r3, r3, #1
 8041414:	2b00      	cmp	r3, #0
 8041416:	d057      	beq.n	80414c8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8041418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804141a:	f003 030f 	and.w	r3, r3, #15
 804141e:	2201      	movs	r2, #1
 8041420:	fa02 f303 	lsl.w	r3, r2, r3
 8041424:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8041426:	69fb      	ldr	r3, [r7, #28]
 8041428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 804142c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 804142e:	68fb      	ldr	r3, [r7, #12]
 8041430:	43db      	mvns	r3, r3
 8041432:	69f9      	ldr	r1, [r7, #28]
 8041434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8041438:	4013      	ands	r3, r2
 804143a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 804143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804143e:	015a      	lsls	r2, r3, #5
 8041440:	69fb      	ldr	r3, [r7, #28]
 8041442:	4413      	add	r3, r2
 8041444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8041448:	461a      	mov	r2, r3
 804144a:	2301      	movs	r3, #1
 804144c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 804144e:	687b      	ldr	r3, [r7, #4]
 8041450:	799b      	ldrb	r3, [r3, #6]
 8041452:	2b01      	cmp	r3, #1
 8041454:	d132      	bne.n	80414bc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8041456:	6879      	ldr	r1, [r7, #4]
 8041458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804145a:	4613      	mov	r3, r2
 804145c:	00db      	lsls	r3, r3, #3
 804145e:	4413      	add	r3, r2
 8041460:	009b      	lsls	r3, r3, #2
 8041462:	440b      	add	r3, r1
 8041464:	3320      	adds	r3, #32
 8041466:	6819      	ldr	r1, [r3, #0]
 8041468:	6878      	ldr	r0, [r7, #4]
 804146a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804146c:	4613      	mov	r3, r2
 804146e:	00db      	lsls	r3, r3, #3
 8041470:	4413      	add	r3, r2
 8041472:	009b      	lsls	r3, r3, #2
 8041474:	4403      	add	r3, r0
 8041476:	331c      	adds	r3, #28
 8041478:	681b      	ldr	r3, [r3, #0]
 804147a:	4419      	add	r1, r3
 804147c:	6878      	ldr	r0, [r7, #4]
 804147e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8041480:	4613      	mov	r3, r2
 8041482:	00db      	lsls	r3, r3, #3
 8041484:	4413      	add	r3, r2
 8041486:	009b      	lsls	r3, r3, #2
 8041488:	4403      	add	r3, r0
 804148a:	3320      	adds	r3, #32
 804148c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 804148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041490:	2b00      	cmp	r3, #0
 8041492:	d113      	bne.n	80414bc <HAL_PCD_IRQHandler+0x3a2>
 8041494:	6879      	ldr	r1, [r7, #4]
 8041496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8041498:	4613      	mov	r3, r2
 804149a:	00db      	lsls	r3, r3, #3
 804149c:	4413      	add	r3, r2
 804149e:	009b      	lsls	r3, r3, #2
 80414a0:	440b      	add	r3, r1
 80414a2:	3324      	adds	r3, #36	; 0x24
 80414a4:	681b      	ldr	r3, [r3, #0]
 80414a6:	2b00      	cmp	r3, #0
 80414a8:	d108      	bne.n	80414bc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80414aa:	687b      	ldr	r3, [r7, #4]
 80414ac:	6818      	ldr	r0, [r3, #0]
 80414ae:	687b      	ldr	r3, [r7, #4]
 80414b0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80414b4:	461a      	mov	r2, r3
 80414b6:	2101      	movs	r1, #1
 80414b8:	f002 fe1e 	bl	80440f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80414bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80414be:	b2db      	uxtb	r3, r3
 80414c0:	4619      	mov	r1, r3
 80414c2:	6878      	ldr	r0, [r7, #4]
 80414c4:	f005 f891 	bl	80465ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80414c8:	693b      	ldr	r3, [r7, #16]
 80414ca:	f003 0308 	and.w	r3, r3, #8
 80414ce:	2b00      	cmp	r3, #0
 80414d0:	d008      	beq.n	80414e4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80414d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80414d4:	015a      	lsls	r2, r3, #5
 80414d6:	69fb      	ldr	r3, [r7, #28]
 80414d8:	4413      	add	r3, r2
 80414da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80414de:	461a      	mov	r2, r3
 80414e0:	2308      	movs	r3, #8
 80414e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80414e4:	693b      	ldr	r3, [r7, #16]
 80414e6:	f003 0310 	and.w	r3, r3, #16
 80414ea:	2b00      	cmp	r3, #0
 80414ec:	d008      	beq.n	8041500 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80414ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80414f0:	015a      	lsls	r2, r3, #5
 80414f2:	69fb      	ldr	r3, [r7, #28]
 80414f4:	4413      	add	r3, r2
 80414f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80414fa:	461a      	mov	r2, r3
 80414fc:	2310      	movs	r3, #16
 80414fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8041500:	693b      	ldr	r3, [r7, #16]
 8041502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041506:	2b00      	cmp	r3, #0
 8041508:	d008      	beq.n	804151c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 804150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804150c:	015a      	lsls	r2, r3, #5
 804150e:	69fb      	ldr	r3, [r7, #28]
 8041510:	4413      	add	r3, r2
 8041512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8041516:	461a      	mov	r2, r3
 8041518:	2340      	movs	r3, #64	; 0x40
 804151a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 804151c:	693b      	ldr	r3, [r7, #16]
 804151e:	f003 0302 	and.w	r3, r3, #2
 8041522:	2b00      	cmp	r3, #0
 8041524:	d023      	beq.n	804156e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8041526:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8041528:	6a38      	ldr	r0, [r7, #32]
 804152a:	f001 fe0b 	bl	8043144 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 804152e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8041530:	4613      	mov	r3, r2
 8041532:	00db      	lsls	r3, r3, #3
 8041534:	4413      	add	r3, r2
 8041536:	009b      	lsls	r3, r3, #2
 8041538:	3310      	adds	r3, #16
 804153a:	687a      	ldr	r2, [r7, #4]
 804153c:	4413      	add	r3, r2
 804153e:	3304      	adds	r3, #4
 8041540:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8041542:	697b      	ldr	r3, [r7, #20]
 8041544:	78db      	ldrb	r3, [r3, #3]
 8041546:	2b01      	cmp	r3, #1
 8041548:	d108      	bne.n	804155c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 804154a:	697b      	ldr	r3, [r7, #20]
 804154c:	2200      	movs	r2, #0
 804154e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8041550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041552:	b2db      	uxtb	r3, r3
 8041554:	4619      	mov	r1, r3
 8041556:	6878      	ldr	r0, [r7, #4]
 8041558:	f005 f8d4 	bl	8046704 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 804155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804155e:	015a      	lsls	r2, r3, #5
 8041560:	69fb      	ldr	r3, [r7, #28]
 8041562:	4413      	add	r3, r2
 8041564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8041568:	461a      	mov	r2, r3
 804156a:	2302      	movs	r3, #2
 804156c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 804156e:	693b      	ldr	r3, [r7, #16]
 8041570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041574:	2b00      	cmp	r3, #0
 8041576:	d003      	beq.n	8041580 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8041578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 804157a:	6878      	ldr	r0, [r7, #4]
 804157c:	f000 fcbb 	bl	8041ef6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8041580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041582:	3301      	adds	r3, #1
 8041584:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8041586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041588:	085b      	lsrs	r3, r3, #1
 804158a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 804158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804158e:	2b00      	cmp	r3, #0
 8041590:	f47f af2e 	bne.w	80413f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8041594:	687b      	ldr	r3, [r7, #4]
 8041596:	681b      	ldr	r3, [r3, #0]
 8041598:	4618      	mov	r0, r3
 804159a:	f002 fce9 	bl	8043f70 <USB_ReadInterrupts>
 804159e:	4603      	mov	r3, r0
 80415a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80415a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80415a8:	d122      	bne.n	80415f0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80415aa:	69fb      	ldr	r3, [r7, #28]
 80415ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80415b0:	685b      	ldr	r3, [r3, #4]
 80415b2:	69fa      	ldr	r2, [r7, #28]
 80415b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80415b8:	f023 0301 	bic.w	r3, r3, #1
 80415bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80415be:	687b      	ldr	r3, [r7, #4]
 80415c0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80415c4:	2b01      	cmp	r3, #1
 80415c6:	d108      	bne.n	80415da <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80415c8:	687b      	ldr	r3, [r7, #4]
 80415ca:	2200      	movs	r2, #0
 80415cc:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80415d0:	2100      	movs	r1, #0
 80415d2:	6878      	ldr	r0, [r7, #4]
 80415d4:	f000 fea2 	bl	804231c <HAL_PCDEx_LPM_Callback>
 80415d8:	e002      	b.n	80415e0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80415da:	6878      	ldr	r0, [r7, #4]
 80415dc:	f005 f872 	bl	80466c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80415e0:	687b      	ldr	r3, [r7, #4]
 80415e2:	681b      	ldr	r3, [r3, #0]
 80415e4:	695a      	ldr	r2, [r3, #20]
 80415e6:	687b      	ldr	r3, [r7, #4]
 80415e8:	681b      	ldr	r3, [r3, #0]
 80415ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80415ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80415f0:	687b      	ldr	r3, [r7, #4]
 80415f2:	681b      	ldr	r3, [r3, #0]
 80415f4:	4618      	mov	r0, r3
 80415f6:	f002 fcbb 	bl	8043f70 <USB_ReadInterrupts>
 80415fa:	4603      	mov	r3, r0
 80415fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8041604:	d112      	bne.n	804162c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8041606:	69fb      	ldr	r3, [r7, #28]
 8041608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 804160c:	689b      	ldr	r3, [r3, #8]
 804160e:	f003 0301 	and.w	r3, r3, #1
 8041612:	2b01      	cmp	r3, #1
 8041614:	d102      	bne.n	804161c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8041616:	6878      	ldr	r0, [r7, #4]
 8041618:	f005 f82e 	bl	8046678 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 804161c:	687b      	ldr	r3, [r7, #4]
 804161e:	681b      	ldr	r3, [r3, #0]
 8041620:	695a      	ldr	r2, [r3, #20]
 8041622:	687b      	ldr	r3, [r7, #4]
 8041624:	681b      	ldr	r3, [r3, #0]
 8041626:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 804162a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 804162c:	687b      	ldr	r3, [r7, #4]
 804162e:	681b      	ldr	r3, [r3, #0]
 8041630:	4618      	mov	r0, r3
 8041632:	f002 fc9d 	bl	8043f70 <USB_ReadInterrupts>
 8041636:	4603      	mov	r3, r0
 8041638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804163c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8041640:	f040 80b7 	bne.w	80417b2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8041644:	69fb      	ldr	r3, [r7, #28]
 8041646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 804164a:	685b      	ldr	r3, [r3, #4]
 804164c:	69fa      	ldr	r2, [r7, #28]
 804164e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8041652:	f023 0301 	bic.w	r3, r3, #1
 8041656:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8041658:	687b      	ldr	r3, [r7, #4]
 804165a:	681b      	ldr	r3, [r3, #0]
 804165c:	2110      	movs	r1, #16
 804165e:	4618      	mov	r0, r3
 8041660:	f001 fd70 	bl	8043144 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041664:	2300      	movs	r3, #0
 8041666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8041668:	e046      	b.n	80416f8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 804166a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804166c:	015a      	lsls	r2, r3, #5
 804166e:	69fb      	ldr	r3, [r7, #28]
 8041670:	4413      	add	r3, r2
 8041672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8041676:	461a      	mov	r2, r3
 8041678:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 804167c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 804167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041680:	015a      	lsls	r2, r3, #5
 8041682:	69fb      	ldr	r3, [r7, #28]
 8041684:	4413      	add	r3, r2
 8041686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 804168a:	681b      	ldr	r3, [r3, #0]
 804168c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804168e:	0151      	lsls	r1, r2, #5
 8041690:	69fa      	ldr	r2, [r7, #28]
 8041692:	440a      	add	r2, r1
 8041694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8041698:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 804169c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 804169e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80416a0:	015a      	lsls	r2, r3, #5
 80416a2:	69fb      	ldr	r3, [r7, #28]
 80416a4:	4413      	add	r3, r2
 80416a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80416aa:	461a      	mov	r2, r3
 80416ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80416b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80416b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80416b4:	015a      	lsls	r2, r3, #5
 80416b6:	69fb      	ldr	r3, [r7, #28]
 80416b8:	4413      	add	r3, r2
 80416ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80416be:	681b      	ldr	r3, [r3, #0]
 80416c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80416c2:	0151      	lsls	r1, r2, #5
 80416c4:	69fa      	ldr	r2, [r7, #28]
 80416c6:	440a      	add	r2, r1
 80416c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80416cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80416d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80416d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80416d4:	015a      	lsls	r2, r3, #5
 80416d6:	69fb      	ldr	r3, [r7, #28]
 80416d8:	4413      	add	r3, r2
 80416da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80416de:	681b      	ldr	r3, [r3, #0]
 80416e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80416e2:	0151      	lsls	r1, r2, #5
 80416e4:	69fa      	ldr	r2, [r7, #28]
 80416e6:	440a      	add	r2, r1
 80416e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80416ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80416f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80416f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80416f4:	3301      	adds	r3, #1
 80416f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80416f8:	687b      	ldr	r3, [r7, #4]
 80416fa:	791b      	ldrb	r3, [r3, #4]
 80416fc:	461a      	mov	r2, r3
 80416fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041700:	4293      	cmp	r3, r2
 8041702:	d3b2      	bcc.n	804166a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8041704:	69fb      	ldr	r3, [r7, #28]
 8041706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 804170a:	69db      	ldr	r3, [r3, #28]
 804170c:	69fa      	ldr	r2, [r7, #28]
 804170e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8041712:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8041716:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8041718:	687b      	ldr	r3, [r7, #4]
 804171a:	7bdb      	ldrb	r3, [r3, #15]
 804171c:	2b00      	cmp	r3, #0
 804171e:	d016      	beq.n	804174e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8041720:	69fb      	ldr	r3, [r7, #28]
 8041722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8041726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804172a:	69fa      	ldr	r2, [r7, #28]
 804172c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8041730:	f043 030b 	orr.w	r3, r3, #11
 8041734:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8041738:	69fb      	ldr	r3, [r7, #28]
 804173a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 804173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041740:	69fa      	ldr	r2, [r7, #28]
 8041742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8041746:	f043 030b 	orr.w	r3, r3, #11
 804174a:	6453      	str	r3, [r2, #68]	; 0x44
 804174c:	e015      	b.n	804177a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 804174e:	69fb      	ldr	r3, [r7, #28]
 8041750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8041754:	695b      	ldr	r3, [r3, #20]
 8041756:	69fa      	ldr	r2, [r7, #28]
 8041758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 804175c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8041760:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8041764:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8041766:	69fb      	ldr	r3, [r7, #28]
 8041768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 804176c:	691b      	ldr	r3, [r3, #16]
 804176e:	69fa      	ldr	r2, [r7, #28]
 8041770:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8041774:	f043 030b 	orr.w	r3, r3, #11
 8041778:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 804177a:	69fb      	ldr	r3, [r7, #28]
 804177c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8041780:	681b      	ldr	r3, [r3, #0]
 8041782:	69fa      	ldr	r2, [r7, #28]
 8041784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8041788:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 804178c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 804178e:	687b      	ldr	r3, [r7, #4]
 8041790:	6818      	ldr	r0, [r3, #0]
 8041792:	687b      	ldr	r3, [r7, #4]
 8041794:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8041796:	687b      	ldr	r3, [r7, #4]
 8041798:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 804179c:	461a      	mov	r2, r3
 804179e:	f002 fcab 	bl	80440f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80417a2:	687b      	ldr	r3, [r7, #4]
 80417a4:	681b      	ldr	r3, [r3, #0]
 80417a6:	695a      	ldr	r2, [r3, #20]
 80417a8:	687b      	ldr	r3, [r7, #4]
 80417aa:	681b      	ldr	r3, [r3, #0]
 80417ac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80417b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80417b2:	687b      	ldr	r3, [r7, #4]
 80417b4:	681b      	ldr	r3, [r3, #0]
 80417b6:	4618      	mov	r0, r3
 80417b8:	f002 fbda 	bl	8043f70 <USB_ReadInterrupts>
 80417bc:	4603      	mov	r3, r0
 80417be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80417c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80417c6:	d123      	bne.n	8041810 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80417c8:	687b      	ldr	r3, [r7, #4]
 80417ca:	681b      	ldr	r3, [r3, #0]
 80417cc:	4618      	mov	r0, r3
 80417ce:	f002 fc70 	bl	80440b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80417d2:	687b      	ldr	r3, [r7, #4]
 80417d4:	681b      	ldr	r3, [r3, #0]
 80417d6:	4618      	mov	r0, r3
 80417d8:	f001 fd2d 	bl	8043236 <USB_GetDevSpeed>
 80417dc:	4603      	mov	r3, r0
 80417de:	461a      	mov	r2, r3
 80417e0:	687b      	ldr	r3, [r7, #4]
 80417e2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80417e4:	687b      	ldr	r3, [r7, #4]
 80417e6:	681c      	ldr	r4, [r3, #0]
 80417e8:	f001 f9c8 	bl	8042b7c <HAL_RCC_GetHCLKFreq>
 80417ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80417ee:	687b      	ldr	r3, [r7, #4]
 80417f0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80417f2:	461a      	mov	r2, r3
 80417f4:	4620      	mov	r0, r4
 80417f6:	f001 fa31 	bl	8042c5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80417fa:	6878      	ldr	r0, [r7, #4]
 80417fc:	f004 ff1d 	bl	804663a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8041800:	687b      	ldr	r3, [r7, #4]
 8041802:	681b      	ldr	r3, [r3, #0]
 8041804:	695a      	ldr	r2, [r3, #20]
 8041806:	687b      	ldr	r3, [r7, #4]
 8041808:	681b      	ldr	r3, [r3, #0]
 804180a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 804180e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8041810:	687b      	ldr	r3, [r7, #4]
 8041812:	681b      	ldr	r3, [r3, #0]
 8041814:	4618      	mov	r0, r3
 8041816:	f002 fbab 	bl	8043f70 <USB_ReadInterrupts>
 804181a:	4603      	mov	r3, r0
 804181c:	f003 0308 	and.w	r3, r3, #8
 8041820:	2b08      	cmp	r3, #8
 8041822:	d10a      	bne.n	804183a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8041824:	6878      	ldr	r0, [r7, #4]
 8041826:	f004 fefa 	bl	804661e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 804182a:	687b      	ldr	r3, [r7, #4]
 804182c:	681b      	ldr	r3, [r3, #0]
 804182e:	695a      	ldr	r2, [r3, #20]
 8041830:	687b      	ldr	r3, [r7, #4]
 8041832:	681b      	ldr	r3, [r3, #0]
 8041834:	f002 0208 	and.w	r2, r2, #8
 8041838:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 804183a:	687b      	ldr	r3, [r7, #4]
 804183c:	681b      	ldr	r3, [r3, #0]
 804183e:	4618      	mov	r0, r3
 8041840:	f002 fb96 	bl	8043f70 <USB_ReadInterrupts>
 8041844:	4603      	mov	r3, r0
 8041846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804184a:	2b80      	cmp	r3, #128	; 0x80
 804184c:	d123      	bne.n	8041896 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 804184e:	6a3b      	ldr	r3, [r7, #32]
 8041850:	699b      	ldr	r3, [r3, #24]
 8041852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8041856:	6a3b      	ldr	r3, [r7, #32]
 8041858:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 804185a:	2301      	movs	r3, #1
 804185c:	627b      	str	r3, [r7, #36]	; 0x24
 804185e:	e014      	b.n	804188a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8041860:	6879      	ldr	r1, [r7, #4]
 8041862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8041864:	4613      	mov	r3, r2
 8041866:	00db      	lsls	r3, r3, #3
 8041868:	4413      	add	r3, r2
 804186a:	009b      	lsls	r3, r3, #2
 804186c:	440b      	add	r3, r1
 804186e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8041872:	781b      	ldrb	r3, [r3, #0]
 8041874:	2b01      	cmp	r3, #1
 8041876:	d105      	bne.n	8041884 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8041878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804187a:	b2db      	uxtb	r3, r3
 804187c:	4619      	mov	r1, r3
 804187e:	6878      	ldr	r0, [r7, #4]
 8041880:	f000 fb08 	bl	8041e94 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8041884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041886:	3301      	adds	r3, #1
 8041888:	627b      	str	r3, [r7, #36]	; 0x24
 804188a:	687b      	ldr	r3, [r7, #4]
 804188c:	791b      	ldrb	r3, [r3, #4]
 804188e:	461a      	mov	r2, r3
 8041890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041892:	4293      	cmp	r3, r2
 8041894:	d3e4      	bcc.n	8041860 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8041896:	687b      	ldr	r3, [r7, #4]
 8041898:	681b      	ldr	r3, [r3, #0]
 804189a:	4618      	mov	r0, r3
 804189c:	f002 fb68 	bl	8043f70 <USB_ReadInterrupts>
 80418a0:	4603      	mov	r3, r0
 80418a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80418a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80418aa:	d13c      	bne.n	8041926 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80418ac:	2301      	movs	r3, #1
 80418ae:	627b      	str	r3, [r7, #36]	; 0x24
 80418b0:	e02b      	b.n	804190a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80418b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80418b4:	015a      	lsls	r2, r3, #5
 80418b6:	69fb      	ldr	r3, [r7, #28]
 80418b8:	4413      	add	r3, r2
 80418ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80418be:	681b      	ldr	r3, [r3, #0]
 80418c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80418c2:	6879      	ldr	r1, [r7, #4]
 80418c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80418c6:	4613      	mov	r3, r2
 80418c8:	00db      	lsls	r3, r3, #3
 80418ca:	4413      	add	r3, r2
 80418cc:	009b      	lsls	r3, r3, #2
 80418ce:	440b      	add	r3, r1
 80418d0:	3318      	adds	r3, #24
 80418d2:	781b      	ldrb	r3, [r3, #0]
 80418d4:	2b01      	cmp	r3, #1
 80418d6:	d115      	bne.n	8041904 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80418d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80418da:	2b00      	cmp	r3, #0
 80418dc:	da12      	bge.n	8041904 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80418de:	6879      	ldr	r1, [r7, #4]
 80418e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80418e2:	4613      	mov	r3, r2
 80418e4:	00db      	lsls	r3, r3, #3
 80418e6:	4413      	add	r3, r2
 80418e8:	009b      	lsls	r3, r3, #2
 80418ea:	440b      	add	r3, r1
 80418ec:	3317      	adds	r3, #23
 80418ee:	2201      	movs	r2, #1
 80418f0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80418f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80418f4:	b2db      	uxtb	r3, r3
 80418f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80418fa:	b2db      	uxtb	r3, r3
 80418fc:	4619      	mov	r1, r3
 80418fe:	6878      	ldr	r0, [r7, #4]
 8041900:	f000 fac8 	bl	8041e94 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8041904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041906:	3301      	adds	r3, #1
 8041908:	627b      	str	r3, [r7, #36]	; 0x24
 804190a:	687b      	ldr	r3, [r7, #4]
 804190c:	791b      	ldrb	r3, [r3, #4]
 804190e:	461a      	mov	r2, r3
 8041910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041912:	4293      	cmp	r3, r2
 8041914:	d3cd      	bcc.n	80418b2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8041916:	687b      	ldr	r3, [r7, #4]
 8041918:	681b      	ldr	r3, [r3, #0]
 804191a:	695a      	ldr	r2, [r3, #20]
 804191c:	687b      	ldr	r3, [r7, #4]
 804191e:	681b      	ldr	r3, [r3, #0]
 8041920:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8041924:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8041926:	687b      	ldr	r3, [r7, #4]
 8041928:	681b      	ldr	r3, [r3, #0]
 804192a:	4618      	mov	r0, r3
 804192c:	f002 fb20 	bl	8043f70 <USB_ReadInterrupts>
 8041930:	4603      	mov	r3, r0
 8041932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041936:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 804193a:	d156      	bne.n	80419ea <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 804193c:	2301      	movs	r3, #1
 804193e:	627b      	str	r3, [r7, #36]	; 0x24
 8041940:	e045      	b.n	80419ce <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8041942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041944:	015a      	lsls	r2, r3, #5
 8041946:	69fb      	ldr	r3, [r7, #28]
 8041948:	4413      	add	r3, r2
 804194a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804194e:	681b      	ldr	r3, [r3, #0]
 8041950:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8041952:	6879      	ldr	r1, [r7, #4]
 8041954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8041956:	4613      	mov	r3, r2
 8041958:	00db      	lsls	r3, r3, #3
 804195a:	4413      	add	r3, r2
 804195c:	009b      	lsls	r3, r3, #2
 804195e:	440b      	add	r3, r1
 8041960:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8041964:	781b      	ldrb	r3, [r3, #0]
 8041966:	2b01      	cmp	r3, #1
 8041968:	d12e      	bne.n	80419c8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 804196a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 804196c:	2b00      	cmp	r3, #0
 804196e:	da2b      	bge.n	80419c8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8041970:	69bb      	ldr	r3, [r7, #24]
 8041972:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8041976:	687b      	ldr	r3, [r7, #4]
 8041978:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 804197c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8041980:	429a      	cmp	r2, r3
 8041982:	d121      	bne.n	80419c8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8041984:	6879      	ldr	r1, [r7, #4]
 8041986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8041988:	4613      	mov	r3, r2
 804198a:	00db      	lsls	r3, r3, #3
 804198c:	4413      	add	r3, r2
 804198e:	009b      	lsls	r3, r3, #2
 8041990:	440b      	add	r3, r1
 8041992:	f203 2357 	addw	r3, r3, #599	; 0x257
 8041996:	2201      	movs	r2, #1
 8041998:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 804199a:	6a3b      	ldr	r3, [r7, #32]
 804199c:	699b      	ldr	r3, [r3, #24]
 804199e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80419a2:	6a3b      	ldr	r3, [r7, #32]
 80419a4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80419a6:	6a3b      	ldr	r3, [r7, #32]
 80419a8:	695b      	ldr	r3, [r3, #20]
 80419aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80419ae:	2b00      	cmp	r3, #0
 80419b0:	d10a      	bne.n	80419c8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80419b2:	69fb      	ldr	r3, [r7, #28]
 80419b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80419b8:	685b      	ldr	r3, [r3, #4]
 80419ba:	69fa      	ldr	r2, [r7, #28]
 80419bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80419c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80419c4:	6053      	str	r3, [r2, #4]
            break;
 80419c6:	e008      	b.n	80419da <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80419c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80419ca:	3301      	adds	r3, #1
 80419cc:	627b      	str	r3, [r7, #36]	; 0x24
 80419ce:	687b      	ldr	r3, [r7, #4]
 80419d0:	791b      	ldrb	r3, [r3, #4]
 80419d2:	461a      	mov	r2, r3
 80419d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80419d6:	4293      	cmp	r3, r2
 80419d8:	d3b3      	bcc.n	8041942 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80419da:	687b      	ldr	r3, [r7, #4]
 80419dc:	681b      	ldr	r3, [r3, #0]
 80419de:	695a      	ldr	r2, [r3, #20]
 80419e0:	687b      	ldr	r3, [r7, #4]
 80419e2:	681b      	ldr	r3, [r3, #0]
 80419e4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80419e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80419ea:	687b      	ldr	r3, [r7, #4]
 80419ec:	681b      	ldr	r3, [r3, #0]
 80419ee:	4618      	mov	r0, r3
 80419f0:	f002 fabe 	bl	8043f70 <USB_ReadInterrupts>
 80419f4:	4603      	mov	r3, r0
 80419f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80419fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80419fe:	d10a      	bne.n	8041a16 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8041a00:	6878      	ldr	r0, [r7, #4]
 8041a02:	f004 fe91 	bl	8046728 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8041a06:	687b      	ldr	r3, [r7, #4]
 8041a08:	681b      	ldr	r3, [r3, #0]
 8041a0a:	695a      	ldr	r2, [r3, #20]
 8041a0c:	687b      	ldr	r3, [r7, #4]
 8041a0e:	681b      	ldr	r3, [r3, #0]
 8041a10:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8041a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8041a16:	687b      	ldr	r3, [r7, #4]
 8041a18:	681b      	ldr	r3, [r3, #0]
 8041a1a:	4618      	mov	r0, r3
 8041a1c:	f002 faa8 	bl	8043f70 <USB_ReadInterrupts>
 8041a20:	4603      	mov	r3, r0
 8041a22:	f003 0304 	and.w	r3, r3, #4
 8041a26:	2b04      	cmp	r3, #4
 8041a28:	d115      	bne.n	8041a56 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8041a2a:	687b      	ldr	r3, [r7, #4]
 8041a2c:	681b      	ldr	r3, [r3, #0]
 8041a2e:	685b      	ldr	r3, [r3, #4]
 8041a30:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8041a32:	69bb      	ldr	r3, [r7, #24]
 8041a34:	f003 0304 	and.w	r3, r3, #4
 8041a38:	2b00      	cmp	r3, #0
 8041a3a:	d002      	beq.n	8041a42 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8041a3c:	6878      	ldr	r0, [r7, #4]
 8041a3e:	f004 fe81 	bl	8046744 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8041a42:	687b      	ldr	r3, [r7, #4]
 8041a44:	681b      	ldr	r3, [r3, #0]
 8041a46:	6859      	ldr	r1, [r3, #4]
 8041a48:	687b      	ldr	r3, [r7, #4]
 8041a4a:	681b      	ldr	r3, [r3, #0]
 8041a4c:	69ba      	ldr	r2, [r7, #24]
 8041a4e:	430a      	orrs	r2, r1
 8041a50:	605a      	str	r2, [r3, #4]
 8041a52:	e000      	b.n	8041a56 <HAL_PCD_IRQHandler+0x93c>
      return;
 8041a54:	bf00      	nop
    }
  }
}
 8041a56:	3734      	adds	r7, #52	; 0x34
 8041a58:	46bd      	mov	sp, r7
 8041a5a:	bd90      	pop	{r4, r7, pc}

08041a5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8041a5c:	b580      	push	{r7, lr}
 8041a5e:	b082      	sub	sp, #8
 8041a60:	af00      	add	r7, sp, #0
 8041a62:	6078      	str	r0, [r7, #4]
 8041a64:	460b      	mov	r3, r1
 8041a66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8041a68:	687b      	ldr	r3, [r7, #4]
 8041a6a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8041a6e:	2b01      	cmp	r3, #1
 8041a70:	d101      	bne.n	8041a76 <HAL_PCD_SetAddress+0x1a>
 8041a72:	2302      	movs	r3, #2
 8041a74:	e012      	b.n	8041a9c <HAL_PCD_SetAddress+0x40>
 8041a76:	687b      	ldr	r3, [r7, #4]
 8041a78:	2201      	movs	r2, #1
 8041a7a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8041a7e:	687b      	ldr	r3, [r7, #4]
 8041a80:	78fa      	ldrb	r2, [r7, #3]
 8041a82:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8041a84:	687b      	ldr	r3, [r7, #4]
 8041a86:	681b      	ldr	r3, [r3, #0]
 8041a88:	78fa      	ldrb	r2, [r7, #3]
 8041a8a:	4611      	mov	r1, r2
 8041a8c:	4618      	mov	r0, r3
 8041a8e:	f002 fa07 	bl	8043ea0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8041a92:	687b      	ldr	r3, [r7, #4]
 8041a94:	2200      	movs	r2, #0
 8041a96:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8041a9a:	2300      	movs	r3, #0
}
 8041a9c:	4618      	mov	r0, r3
 8041a9e:	3708      	adds	r7, #8
 8041aa0:	46bd      	mov	sp, r7
 8041aa2:	bd80      	pop	{r7, pc}

08041aa4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8041aa4:	b580      	push	{r7, lr}
 8041aa6:	b084      	sub	sp, #16
 8041aa8:	af00      	add	r7, sp, #0
 8041aaa:	6078      	str	r0, [r7, #4]
 8041aac:	4608      	mov	r0, r1
 8041aae:	4611      	mov	r1, r2
 8041ab0:	461a      	mov	r2, r3
 8041ab2:	4603      	mov	r3, r0
 8041ab4:	70fb      	strb	r3, [r7, #3]
 8041ab6:	460b      	mov	r3, r1
 8041ab8:	803b      	strh	r3, [r7, #0]
 8041aba:	4613      	mov	r3, r2
 8041abc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8041abe:	2300      	movs	r3, #0
 8041ac0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8041ac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8041ac6:	2b00      	cmp	r3, #0
 8041ac8:	da0f      	bge.n	8041aea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8041aca:	78fb      	ldrb	r3, [r7, #3]
 8041acc:	f003 020f 	and.w	r2, r3, #15
 8041ad0:	4613      	mov	r3, r2
 8041ad2:	00db      	lsls	r3, r3, #3
 8041ad4:	4413      	add	r3, r2
 8041ad6:	009b      	lsls	r3, r3, #2
 8041ad8:	3310      	adds	r3, #16
 8041ada:	687a      	ldr	r2, [r7, #4]
 8041adc:	4413      	add	r3, r2
 8041ade:	3304      	adds	r3, #4
 8041ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8041ae2:	68fb      	ldr	r3, [r7, #12]
 8041ae4:	2201      	movs	r2, #1
 8041ae6:	705a      	strb	r2, [r3, #1]
 8041ae8:	e00f      	b.n	8041b0a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8041aea:	78fb      	ldrb	r3, [r7, #3]
 8041aec:	f003 020f 	and.w	r2, r3, #15
 8041af0:	4613      	mov	r3, r2
 8041af2:	00db      	lsls	r3, r3, #3
 8041af4:	4413      	add	r3, r2
 8041af6:	009b      	lsls	r3, r3, #2
 8041af8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8041afc:	687a      	ldr	r2, [r7, #4]
 8041afe:	4413      	add	r3, r2
 8041b00:	3304      	adds	r3, #4
 8041b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8041b04:	68fb      	ldr	r3, [r7, #12]
 8041b06:	2200      	movs	r2, #0
 8041b08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8041b0a:	78fb      	ldrb	r3, [r7, #3]
 8041b0c:	f003 030f 	and.w	r3, r3, #15
 8041b10:	b2da      	uxtb	r2, r3
 8041b12:	68fb      	ldr	r3, [r7, #12]
 8041b14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8041b16:	883a      	ldrh	r2, [r7, #0]
 8041b18:	68fb      	ldr	r3, [r7, #12]
 8041b1a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8041b1c:	68fb      	ldr	r3, [r7, #12]
 8041b1e:	78ba      	ldrb	r2, [r7, #2]
 8041b20:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8041b22:	68fb      	ldr	r3, [r7, #12]
 8041b24:	785b      	ldrb	r3, [r3, #1]
 8041b26:	2b00      	cmp	r3, #0
 8041b28:	d004      	beq.n	8041b34 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8041b2a:	68fb      	ldr	r3, [r7, #12]
 8041b2c:	781b      	ldrb	r3, [r3, #0]
 8041b2e:	b29a      	uxth	r2, r3
 8041b30:	68fb      	ldr	r3, [r7, #12]
 8041b32:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8041b34:	78bb      	ldrb	r3, [r7, #2]
 8041b36:	2b02      	cmp	r3, #2
 8041b38:	d102      	bne.n	8041b40 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8041b3a:	68fb      	ldr	r3, [r7, #12]
 8041b3c:	2200      	movs	r2, #0
 8041b3e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8041b40:	687b      	ldr	r3, [r7, #4]
 8041b42:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8041b46:	2b01      	cmp	r3, #1
 8041b48:	d101      	bne.n	8041b4e <HAL_PCD_EP_Open+0xaa>
 8041b4a:	2302      	movs	r3, #2
 8041b4c:	e00e      	b.n	8041b6c <HAL_PCD_EP_Open+0xc8>
 8041b4e:	687b      	ldr	r3, [r7, #4]
 8041b50:	2201      	movs	r2, #1
 8041b52:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8041b56:	687b      	ldr	r3, [r7, #4]
 8041b58:	681b      	ldr	r3, [r3, #0]
 8041b5a:	68f9      	ldr	r1, [r7, #12]
 8041b5c:	4618      	mov	r0, r3
 8041b5e:	f001 fb8f 	bl	8043280 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8041b62:	687b      	ldr	r3, [r7, #4]
 8041b64:	2200      	movs	r2, #0
 8041b66:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8041b6a:	7afb      	ldrb	r3, [r7, #11]
}
 8041b6c:	4618      	mov	r0, r3
 8041b6e:	3710      	adds	r7, #16
 8041b70:	46bd      	mov	sp, r7
 8041b72:	bd80      	pop	{r7, pc}

08041b74 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8041b74:	b580      	push	{r7, lr}
 8041b76:	b084      	sub	sp, #16
 8041b78:	af00      	add	r7, sp, #0
 8041b7a:	6078      	str	r0, [r7, #4]
 8041b7c:	460b      	mov	r3, r1
 8041b7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8041b80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8041b84:	2b00      	cmp	r3, #0
 8041b86:	da0f      	bge.n	8041ba8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8041b88:	78fb      	ldrb	r3, [r7, #3]
 8041b8a:	f003 020f 	and.w	r2, r3, #15
 8041b8e:	4613      	mov	r3, r2
 8041b90:	00db      	lsls	r3, r3, #3
 8041b92:	4413      	add	r3, r2
 8041b94:	009b      	lsls	r3, r3, #2
 8041b96:	3310      	adds	r3, #16
 8041b98:	687a      	ldr	r2, [r7, #4]
 8041b9a:	4413      	add	r3, r2
 8041b9c:	3304      	adds	r3, #4
 8041b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8041ba0:	68fb      	ldr	r3, [r7, #12]
 8041ba2:	2201      	movs	r2, #1
 8041ba4:	705a      	strb	r2, [r3, #1]
 8041ba6:	e00f      	b.n	8041bc8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8041ba8:	78fb      	ldrb	r3, [r7, #3]
 8041baa:	f003 020f 	and.w	r2, r3, #15
 8041bae:	4613      	mov	r3, r2
 8041bb0:	00db      	lsls	r3, r3, #3
 8041bb2:	4413      	add	r3, r2
 8041bb4:	009b      	lsls	r3, r3, #2
 8041bb6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8041bba:	687a      	ldr	r2, [r7, #4]
 8041bbc:	4413      	add	r3, r2
 8041bbe:	3304      	adds	r3, #4
 8041bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8041bc2:	68fb      	ldr	r3, [r7, #12]
 8041bc4:	2200      	movs	r2, #0
 8041bc6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8041bc8:	78fb      	ldrb	r3, [r7, #3]
 8041bca:	f003 030f 	and.w	r3, r3, #15
 8041bce:	b2da      	uxtb	r2, r3
 8041bd0:	68fb      	ldr	r3, [r7, #12]
 8041bd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8041bd4:	687b      	ldr	r3, [r7, #4]
 8041bd6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8041bda:	2b01      	cmp	r3, #1
 8041bdc:	d101      	bne.n	8041be2 <HAL_PCD_EP_Close+0x6e>
 8041bde:	2302      	movs	r3, #2
 8041be0:	e00e      	b.n	8041c00 <HAL_PCD_EP_Close+0x8c>
 8041be2:	687b      	ldr	r3, [r7, #4]
 8041be4:	2201      	movs	r2, #1
 8041be6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8041bea:	687b      	ldr	r3, [r7, #4]
 8041bec:	681b      	ldr	r3, [r3, #0]
 8041bee:	68f9      	ldr	r1, [r7, #12]
 8041bf0:	4618      	mov	r0, r3
 8041bf2:	f001 fbcd 	bl	8043390 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8041bf6:	687b      	ldr	r3, [r7, #4]
 8041bf8:	2200      	movs	r2, #0
 8041bfa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8041bfe:	2300      	movs	r3, #0
}
 8041c00:	4618      	mov	r0, r3
 8041c02:	3710      	adds	r7, #16
 8041c04:	46bd      	mov	sp, r7
 8041c06:	bd80      	pop	{r7, pc}

08041c08 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8041c08:	b580      	push	{r7, lr}
 8041c0a:	b086      	sub	sp, #24
 8041c0c:	af00      	add	r7, sp, #0
 8041c0e:	60f8      	str	r0, [r7, #12]
 8041c10:	607a      	str	r2, [r7, #4]
 8041c12:	603b      	str	r3, [r7, #0]
 8041c14:	460b      	mov	r3, r1
 8041c16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8041c18:	7afb      	ldrb	r3, [r7, #11]
 8041c1a:	f003 020f 	and.w	r2, r3, #15
 8041c1e:	4613      	mov	r3, r2
 8041c20:	00db      	lsls	r3, r3, #3
 8041c22:	4413      	add	r3, r2
 8041c24:	009b      	lsls	r3, r3, #2
 8041c26:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8041c2a:	68fa      	ldr	r2, [r7, #12]
 8041c2c:	4413      	add	r3, r2
 8041c2e:	3304      	adds	r3, #4
 8041c30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8041c32:	697b      	ldr	r3, [r7, #20]
 8041c34:	687a      	ldr	r2, [r7, #4]
 8041c36:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8041c38:	697b      	ldr	r3, [r7, #20]
 8041c3a:	683a      	ldr	r2, [r7, #0]
 8041c3c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8041c3e:	697b      	ldr	r3, [r7, #20]
 8041c40:	2200      	movs	r2, #0
 8041c42:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8041c44:	697b      	ldr	r3, [r7, #20]
 8041c46:	2200      	movs	r2, #0
 8041c48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8041c4a:	7afb      	ldrb	r3, [r7, #11]
 8041c4c:	f003 030f 	and.w	r3, r3, #15
 8041c50:	b2da      	uxtb	r2, r3
 8041c52:	697b      	ldr	r3, [r7, #20]
 8041c54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8041c56:	68fb      	ldr	r3, [r7, #12]
 8041c58:	799b      	ldrb	r3, [r3, #6]
 8041c5a:	2b01      	cmp	r3, #1
 8041c5c:	d102      	bne.n	8041c64 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8041c5e:	687a      	ldr	r2, [r7, #4]
 8041c60:	697b      	ldr	r3, [r7, #20]
 8041c62:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8041c64:	68fb      	ldr	r3, [r7, #12]
 8041c66:	6818      	ldr	r0, [r3, #0]
 8041c68:	68fb      	ldr	r3, [r7, #12]
 8041c6a:	799b      	ldrb	r3, [r3, #6]
 8041c6c:	461a      	mov	r2, r3
 8041c6e:	6979      	ldr	r1, [r7, #20]
 8041c70:	f001 fc6a 	bl	8043548 <USB_EPStartXfer>

  return HAL_OK;
 8041c74:	2300      	movs	r3, #0
}
 8041c76:	4618      	mov	r0, r3
 8041c78:	3718      	adds	r7, #24
 8041c7a:	46bd      	mov	sp, r7
 8041c7c:	bd80      	pop	{r7, pc}

08041c7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8041c7e:	b480      	push	{r7}
 8041c80:	b083      	sub	sp, #12
 8041c82:	af00      	add	r7, sp, #0
 8041c84:	6078      	str	r0, [r7, #4]
 8041c86:	460b      	mov	r3, r1
 8041c88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8041c8a:	78fb      	ldrb	r3, [r7, #3]
 8041c8c:	f003 020f 	and.w	r2, r3, #15
 8041c90:	6879      	ldr	r1, [r7, #4]
 8041c92:	4613      	mov	r3, r2
 8041c94:	00db      	lsls	r3, r3, #3
 8041c96:	4413      	add	r3, r2
 8041c98:	009b      	lsls	r3, r3, #2
 8041c9a:	440b      	add	r3, r1
 8041c9c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8041ca0:	681b      	ldr	r3, [r3, #0]
}
 8041ca2:	4618      	mov	r0, r3
 8041ca4:	370c      	adds	r7, #12
 8041ca6:	46bd      	mov	sp, r7
 8041ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041cac:	4770      	bx	lr

08041cae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8041cae:	b580      	push	{r7, lr}
 8041cb0:	b086      	sub	sp, #24
 8041cb2:	af00      	add	r7, sp, #0
 8041cb4:	60f8      	str	r0, [r7, #12]
 8041cb6:	607a      	str	r2, [r7, #4]
 8041cb8:	603b      	str	r3, [r7, #0]
 8041cba:	460b      	mov	r3, r1
 8041cbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8041cbe:	7afb      	ldrb	r3, [r7, #11]
 8041cc0:	f003 020f 	and.w	r2, r3, #15
 8041cc4:	4613      	mov	r3, r2
 8041cc6:	00db      	lsls	r3, r3, #3
 8041cc8:	4413      	add	r3, r2
 8041cca:	009b      	lsls	r3, r3, #2
 8041ccc:	3310      	adds	r3, #16
 8041cce:	68fa      	ldr	r2, [r7, #12]
 8041cd0:	4413      	add	r3, r2
 8041cd2:	3304      	adds	r3, #4
 8041cd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8041cd6:	697b      	ldr	r3, [r7, #20]
 8041cd8:	687a      	ldr	r2, [r7, #4]
 8041cda:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8041cdc:	697b      	ldr	r3, [r7, #20]
 8041cde:	683a      	ldr	r2, [r7, #0]
 8041ce0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8041ce2:	697b      	ldr	r3, [r7, #20]
 8041ce4:	2200      	movs	r2, #0
 8041ce6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8041ce8:	697b      	ldr	r3, [r7, #20]
 8041cea:	2201      	movs	r2, #1
 8041cec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8041cee:	7afb      	ldrb	r3, [r7, #11]
 8041cf0:	f003 030f 	and.w	r3, r3, #15
 8041cf4:	b2da      	uxtb	r2, r3
 8041cf6:	697b      	ldr	r3, [r7, #20]
 8041cf8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8041cfa:	68fb      	ldr	r3, [r7, #12]
 8041cfc:	799b      	ldrb	r3, [r3, #6]
 8041cfe:	2b01      	cmp	r3, #1
 8041d00:	d102      	bne.n	8041d08 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8041d02:	687a      	ldr	r2, [r7, #4]
 8041d04:	697b      	ldr	r3, [r7, #20]
 8041d06:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8041d08:	68fb      	ldr	r3, [r7, #12]
 8041d0a:	6818      	ldr	r0, [r3, #0]
 8041d0c:	68fb      	ldr	r3, [r7, #12]
 8041d0e:	799b      	ldrb	r3, [r3, #6]
 8041d10:	461a      	mov	r2, r3
 8041d12:	6979      	ldr	r1, [r7, #20]
 8041d14:	f001 fc18 	bl	8043548 <USB_EPStartXfer>

  return HAL_OK;
 8041d18:	2300      	movs	r3, #0
}
 8041d1a:	4618      	mov	r0, r3
 8041d1c:	3718      	adds	r7, #24
 8041d1e:	46bd      	mov	sp, r7
 8041d20:	bd80      	pop	{r7, pc}

08041d22 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8041d22:	b580      	push	{r7, lr}
 8041d24:	b084      	sub	sp, #16
 8041d26:	af00      	add	r7, sp, #0
 8041d28:	6078      	str	r0, [r7, #4]
 8041d2a:	460b      	mov	r3, r1
 8041d2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8041d2e:	78fb      	ldrb	r3, [r7, #3]
 8041d30:	f003 030f 	and.w	r3, r3, #15
 8041d34:	687a      	ldr	r2, [r7, #4]
 8041d36:	7912      	ldrb	r2, [r2, #4]
 8041d38:	4293      	cmp	r3, r2
 8041d3a:	d901      	bls.n	8041d40 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8041d3c:	2301      	movs	r3, #1
 8041d3e:	e04f      	b.n	8041de0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8041d40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8041d44:	2b00      	cmp	r3, #0
 8041d46:	da0f      	bge.n	8041d68 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8041d48:	78fb      	ldrb	r3, [r7, #3]
 8041d4a:	f003 020f 	and.w	r2, r3, #15
 8041d4e:	4613      	mov	r3, r2
 8041d50:	00db      	lsls	r3, r3, #3
 8041d52:	4413      	add	r3, r2
 8041d54:	009b      	lsls	r3, r3, #2
 8041d56:	3310      	adds	r3, #16
 8041d58:	687a      	ldr	r2, [r7, #4]
 8041d5a:	4413      	add	r3, r2
 8041d5c:	3304      	adds	r3, #4
 8041d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8041d60:	68fb      	ldr	r3, [r7, #12]
 8041d62:	2201      	movs	r2, #1
 8041d64:	705a      	strb	r2, [r3, #1]
 8041d66:	e00d      	b.n	8041d84 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8041d68:	78fa      	ldrb	r2, [r7, #3]
 8041d6a:	4613      	mov	r3, r2
 8041d6c:	00db      	lsls	r3, r3, #3
 8041d6e:	4413      	add	r3, r2
 8041d70:	009b      	lsls	r3, r3, #2
 8041d72:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8041d76:	687a      	ldr	r2, [r7, #4]
 8041d78:	4413      	add	r3, r2
 8041d7a:	3304      	adds	r3, #4
 8041d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8041d7e:	68fb      	ldr	r3, [r7, #12]
 8041d80:	2200      	movs	r2, #0
 8041d82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8041d84:	68fb      	ldr	r3, [r7, #12]
 8041d86:	2201      	movs	r2, #1
 8041d88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8041d8a:	78fb      	ldrb	r3, [r7, #3]
 8041d8c:	f003 030f 	and.w	r3, r3, #15
 8041d90:	b2da      	uxtb	r2, r3
 8041d92:	68fb      	ldr	r3, [r7, #12]
 8041d94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8041d96:	687b      	ldr	r3, [r7, #4]
 8041d98:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8041d9c:	2b01      	cmp	r3, #1
 8041d9e:	d101      	bne.n	8041da4 <HAL_PCD_EP_SetStall+0x82>
 8041da0:	2302      	movs	r3, #2
 8041da2:	e01d      	b.n	8041de0 <HAL_PCD_EP_SetStall+0xbe>
 8041da4:	687b      	ldr	r3, [r7, #4]
 8041da6:	2201      	movs	r2, #1
 8041da8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8041dac:	687b      	ldr	r3, [r7, #4]
 8041dae:	681b      	ldr	r3, [r3, #0]
 8041db0:	68f9      	ldr	r1, [r7, #12]
 8041db2:	4618      	mov	r0, r3
 8041db4:	f001 ffa0 	bl	8043cf8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8041db8:	78fb      	ldrb	r3, [r7, #3]
 8041dba:	f003 030f 	and.w	r3, r3, #15
 8041dbe:	2b00      	cmp	r3, #0
 8041dc0:	d109      	bne.n	8041dd6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8041dc2:	687b      	ldr	r3, [r7, #4]
 8041dc4:	6818      	ldr	r0, [r3, #0]
 8041dc6:	687b      	ldr	r3, [r7, #4]
 8041dc8:	7999      	ldrb	r1, [r3, #6]
 8041dca:	687b      	ldr	r3, [r7, #4]
 8041dcc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8041dd0:	461a      	mov	r2, r3
 8041dd2:	f002 f991 	bl	80440f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8041dd6:	687b      	ldr	r3, [r7, #4]
 8041dd8:	2200      	movs	r2, #0
 8041dda:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8041dde:	2300      	movs	r3, #0
}
 8041de0:	4618      	mov	r0, r3
 8041de2:	3710      	adds	r7, #16
 8041de4:	46bd      	mov	sp, r7
 8041de6:	bd80      	pop	{r7, pc}

08041de8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8041de8:	b580      	push	{r7, lr}
 8041dea:	b084      	sub	sp, #16
 8041dec:	af00      	add	r7, sp, #0
 8041dee:	6078      	str	r0, [r7, #4]
 8041df0:	460b      	mov	r3, r1
 8041df2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8041df4:	78fb      	ldrb	r3, [r7, #3]
 8041df6:	f003 030f 	and.w	r3, r3, #15
 8041dfa:	687a      	ldr	r2, [r7, #4]
 8041dfc:	7912      	ldrb	r2, [r2, #4]
 8041dfe:	4293      	cmp	r3, r2
 8041e00:	d901      	bls.n	8041e06 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8041e02:	2301      	movs	r3, #1
 8041e04:	e042      	b.n	8041e8c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8041e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8041e0a:	2b00      	cmp	r3, #0
 8041e0c:	da0f      	bge.n	8041e2e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8041e0e:	78fb      	ldrb	r3, [r7, #3]
 8041e10:	f003 020f 	and.w	r2, r3, #15
 8041e14:	4613      	mov	r3, r2
 8041e16:	00db      	lsls	r3, r3, #3
 8041e18:	4413      	add	r3, r2
 8041e1a:	009b      	lsls	r3, r3, #2
 8041e1c:	3310      	adds	r3, #16
 8041e1e:	687a      	ldr	r2, [r7, #4]
 8041e20:	4413      	add	r3, r2
 8041e22:	3304      	adds	r3, #4
 8041e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8041e26:	68fb      	ldr	r3, [r7, #12]
 8041e28:	2201      	movs	r2, #1
 8041e2a:	705a      	strb	r2, [r3, #1]
 8041e2c:	e00f      	b.n	8041e4e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8041e2e:	78fb      	ldrb	r3, [r7, #3]
 8041e30:	f003 020f 	and.w	r2, r3, #15
 8041e34:	4613      	mov	r3, r2
 8041e36:	00db      	lsls	r3, r3, #3
 8041e38:	4413      	add	r3, r2
 8041e3a:	009b      	lsls	r3, r3, #2
 8041e3c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8041e40:	687a      	ldr	r2, [r7, #4]
 8041e42:	4413      	add	r3, r2
 8041e44:	3304      	adds	r3, #4
 8041e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8041e48:	68fb      	ldr	r3, [r7, #12]
 8041e4a:	2200      	movs	r2, #0
 8041e4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8041e4e:	68fb      	ldr	r3, [r7, #12]
 8041e50:	2200      	movs	r2, #0
 8041e52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8041e54:	78fb      	ldrb	r3, [r7, #3]
 8041e56:	f003 030f 	and.w	r3, r3, #15
 8041e5a:	b2da      	uxtb	r2, r3
 8041e5c:	68fb      	ldr	r3, [r7, #12]
 8041e5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8041e60:	687b      	ldr	r3, [r7, #4]
 8041e62:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8041e66:	2b01      	cmp	r3, #1
 8041e68:	d101      	bne.n	8041e6e <HAL_PCD_EP_ClrStall+0x86>
 8041e6a:	2302      	movs	r3, #2
 8041e6c:	e00e      	b.n	8041e8c <HAL_PCD_EP_ClrStall+0xa4>
 8041e6e:	687b      	ldr	r3, [r7, #4]
 8041e70:	2201      	movs	r2, #1
 8041e72:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8041e76:	687b      	ldr	r3, [r7, #4]
 8041e78:	681b      	ldr	r3, [r3, #0]
 8041e7a:	68f9      	ldr	r1, [r7, #12]
 8041e7c:	4618      	mov	r0, r3
 8041e7e:	f001 ffa9 	bl	8043dd4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8041e82:	687b      	ldr	r3, [r7, #4]
 8041e84:	2200      	movs	r2, #0
 8041e86:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8041e8a:	2300      	movs	r3, #0
}
 8041e8c:	4618      	mov	r0, r3
 8041e8e:	3710      	adds	r7, #16
 8041e90:	46bd      	mov	sp, r7
 8041e92:	bd80      	pop	{r7, pc}

08041e94 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8041e94:	b580      	push	{r7, lr}
 8041e96:	b084      	sub	sp, #16
 8041e98:	af00      	add	r7, sp, #0
 8041e9a:	6078      	str	r0, [r7, #4]
 8041e9c:	460b      	mov	r3, r1
 8041e9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8041ea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8041ea4:	2b00      	cmp	r3, #0
 8041ea6:	da0c      	bge.n	8041ec2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8041ea8:	78fb      	ldrb	r3, [r7, #3]
 8041eaa:	f003 020f 	and.w	r2, r3, #15
 8041eae:	4613      	mov	r3, r2
 8041eb0:	00db      	lsls	r3, r3, #3
 8041eb2:	4413      	add	r3, r2
 8041eb4:	009b      	lsls	r3, r3, #2
 8041eb6:	3310      	adds	r3, #16
 8041eb8:	687a      	ldr	r2, [r7, #4]
 8041eba:	4413      	add	r3, r2
 8041ebc:	3304      	adds	r3, #4
 8041ebe:	60fb      	str	r3, [r7, #12]
 8041ec0:	e00c      	b.n	8041edc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8041ec2:	78fb      	ldrb	r3, [r7, #3]
 8041ec4:	f003 020f 	and.w	r2, r3, #15
 8041ec8:	4613      	mov	r3, r2
 8041eca:	00db      	lsls	r3, r3, #3
 8041ecc:	4413      	add	r3, r2
 8041ece:	009b      	lsls	r3, r3, #2
 8041ed0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8041ed4:	687a      	ldr	r2, [r7, #4]
 8041ed6:	4413      	add	r3, r2
 8041ed8:	3304      	adds	r3, #4
 8041eda:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8041edc:	687b      	ldr	r3, [r7, #4]
 8041ede:	681b      	ldr	r3, [r3, #0]
 8041ee0:	68f9      	ldr	r1, [r7, #12]
 8041ee2:	4618      	mov	r0, r3
 8041ee4:	f001 fdc8 	bl	8043a78 <USB_EPStopXfer>
 8041ee8:	4603      	mov	r3, r0
 8041eea:	72fb      	strb	r3, [r7, #11]

  return ret;
 8041eec:	7afb      	ldrb	r3, [r7, #11]
}
 8041eee:	4618      	mov	r0, r3
 8041ef0:	3710      	adds	r7, #16
 8041ef2:	46bd      	mov	sp, r7
 8041ef4:	bd80      	pop	{r7, pc}

08041ef6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8041ef6:	b580      	push	{r7, lr}
 8041ef8:	b08a      	sub	sp, #40	; 0x28
 8041efa:	af02      	add	r7, sp, #8
 8041efc:	6078      	str	r0, [r7, #4]
 8041efe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8041f00:	687b      	ldr	r3, [r7, #4]
 8041f02:	681b      	ldr	r3, [r3, #0]
 8041f04:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8041f06:	697b      	ldr	r3, [r7, #20]
 8041f08:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8041f0a:	683a      	ldr	r2, [r7, #0]
 8041f0c:	4613      	mov	r3, r2
 8041f0e:	00db      	lsls	r3, r3, #3
 8041f10:	4413      	add	r3, r2
 8041f12:	009b      	lsls	r3, r3, #2
 8041f14:	3310      	adds	r3, #16
 8041f16:	687a      	ldr	r2, [r7, #4]
 8041f18:	4413      	add	r3, r2
 8041f1a:	3304      	adds	r3, #4
 8041f1c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8041f1e:	68fb      	ldr	r3, [r7, #12]
 8041f20:	695a      	ldr	r2, [r3, #20]
 8041f22:	68fb      	ldr	r3, [r7, #12]
 8041f24:	691b      	ldr	r3, [r3, #16]
 8041f26:	429a      	cmp	r2, r3
 8041f28:	d901      	bls.n	8041f2e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8041f2a:	2301      	movs	r3, #1
 8041f2c:	e06b      	b.n	8042006 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8041f2e:	68fb      	ldr	r3, [r7, #12]
 8041f30:	691a      	ldr	r2, [r3, #16]
 8041f32:	68fb      	ldr	r3, [r7, #12]
 8041f34:	695b      	ldr	r3, [r3, #20]
 8041f36:	1ad3      	subs	r3, r2, r3
 8041f38:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8041f3a:	68fb      	ldr	r3, [r7, #12]
 8041f3c:	689b      	ldr	r3, [r3, #8]
 8041f3e:	69fa      	ldr	r2, [r7, #28]
 8041f40:	429a      	cmp	r2, r3
 8041f42:	d902      	bls.n	8041f4a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8041f44:	68fb      	ldr	r3, [r7, #12]
 8041f46:	689b      	ldr	r3, [r3, #8]
 8041f48:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8041f4a:	69fb      	ldr	r3, [r7, #28]
 8041f4c:	3303      	adds	r3, #3
 8041f4e:	089b      	lsrs	r3, r3, #2
 8041f50:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8041f52:	e02a      	b.n	8041faa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8041f54:	68fb      	ldr	r3, [r7, #12]
 8041f56:	691a      	ldr	r2, [r3, #16]
 8041f58:	68fb      	ldr	r3, [r7, #12]
 8041f5a:	695b      	ldr	r3, [r3, #20]
 8041f5c:	1ad3      	subs	r3, r2, r3
 8041f5e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8041f60:	68fb      	ldr	r3, [r7, #12]
 8041f62:	689b      	ldr	r3, [r3, #8]
 8041f64:	69fa      	ldr	r2, [r7, #28]
 8041f66:	429a      	cmp	r2, r3
 8041f68:	d902      	bls.n	8041f70 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8041f6a:	68fb      	ldr	r3, [r7, #12]
 8041f6c:	689b      	ldr	r3, [r3, #8]
 8041f6e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8041f70:	69fb      	ldr	r3, [r7, #28]
 8041f72:	3303      	adds	r3, #3
 8041f74:	089b      	lsrs	r3, r3, #2
 8041f76:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8041f78:	68fb      	ldr	r3, [r7, #12]
 8041f7a:	68d9      	ldr	r1, [r3, #12]
 8041f7c:	683b      	ldr	r3, [r7, #0]
 8041f7e:	b2da      	uxtb	r2, r3
 8041f80:	69fb      	ldr	r3, [r7, #28]
 8041f82:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8041f84:	687b      	ldr	r3, [r7, #4]
 8041f86:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8041f88:	9300      	str	r3, [sp, #0]
 8041f8a:	4603      	mov	r3, r0
 8041f8c:	6978      	ldr	r0, [r7, #20]
 8041f8e:	f001 fe1d 	bl	8043bcc <USB_WritePacket>

    ep->xfer_buff  += len;
 8041f92:	68fb      	ldr	r3, [r7, #12]
 8041f94:	68da      	ldr	r2, [r3, #12]
 8041f96:	69fb      	ldr	r3, [r7, #28]
 8041f98:	441a      	add	r2, r3
 8041f9a:	68fb      	ldr	r3, [r7, #12]
 8041f9c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8041f9e:	68fb      	ldr	r3, [r7, #12]
 8041fa0:	695a      	ldr	r2, [r3, #20]
 8041fa2:	69fb      	ldr	r3, [r7, #28]
 8041fa4:	441a      	add	r2, r3
 8041fa6:	68fb      	ldr	r3, [r7, #12]
 8041fa8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8041faa:	683b      	ldr	r3, [r7, #0]
 8041fac:	015a      	lsls	r2, r3, #5
 8041fae:	693b      	ldr	r3, [r7, #16]
 8041fb0:	4413      	add	r3, r2
 8041fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8041fb6:	699b      	ldr	r3, [r3, #24]
 8041fb8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8041fba:	69ba      	ldr	r2, [r7, #24]
 8041fbc:	429a      	cmp	r2, r3
 8041fbe:	d809      	bhi.n	8041fd4 <PCD_WriteEmptyTxFifo+0xde>
 8041fc0:	68fb      	ldr	r3, [r7, #12]
 8041fc2:	695a      	ldr	r2, [r3, #20]
 8041fc4:	68fb      	ldr	r3, [r7, #12]
 8041fc6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8041fc8:	429a      	cmp	r2, r3
 8041fca:	d203      	bcs.n	8041fd4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8041fcc:	68fb      	ldr	r3, [r7, #12]
 8041fce:	691b      	ldr	r3, [r3, #16]
 8041fd0:	2b00      	cmp	r3, #0
 8041fd2:	d1bf      	bne.n	8041f54 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8041fd4:	68fb      	ldr	r3, [r7, #12]
 8041fd6:	691a      	ldr	r2, [r3, #16]
 8041fd8:	68fb      	ldr	r3, [r7, #12]
 8041fda:	695b      	ldr	r3, [r3, #20]
 8041fdc:	429a      	cmp	r2, r3
 8041fde:	d811      	bhi.n	8042004 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8041fe0:	683b      	ldr	r3, [r7, #0]
 8041fe2:	f003 030f 	and.w	r3, r3, #15
 8041fe6:	2201      	movs	r2, #1
 8041fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8041fec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8041fee:	693b      	ldr	r3, [r7, #16]
 8041ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8041ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8041ff6:	68bb      	ldr	r3, [r7, #8]
 8041ff8:	43db      	mvns	r3, r3
 8041ffa:	6939      	ldr	r1, [r7, #16]
 8041ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8042000:	4013      	ands	r3, r2
 8042002:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8042004:	2300      	movs	r3, #0
}
 8042006:	4618      	mov	r0, r3
 8042008:	3720      	adds	r7, #32
 804200a:	46bd      	mov	sp, r7
 804200c:	bd80      	pop	{r7, pc}
	...

08042010 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8042010:	b580      	push	{r7, lr}
 8042012:	b088      	sub	sp, #32
 8042014:	af00      	add	r7, sp, #0
 8042016:	6078      	str	r0, [r7, #4]
 8042018:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 804201a:	687b      	ldr	r3, [r7, #4]
 804201c:	681b      	ldr	r3, [r3, #0]
 804201e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042020:	69fb      	ldr	r3, [r7, #28]
 8042022:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8042024:	69fb      	ldr	r3, [r7, #28]
 8042026:	333c      	adds	r3, #60	; 0x3c
 8042028:	3304      	adds	r3, #4
 804202a:	681b      	ldr	r3, [r3, #0]
 804202c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 804202e:	683b      	ldr	r3, [r7, #0]
 8042030:	015a      	lsls	r2, r3, #5
 8042032:	69bb      	ldr	r3, [r7, #24]
 8042034:	4413      	add	r3, r2
 8042036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804203a:	689b      	ldr	r3, [r3, #8]
 804203c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 804203e:	687b      	ldr	r3, [r7, #4]
 8042040:	799b      	ldrb	r3, [r3, #6]
 8042042:	2b01      	cmp	r3, #1
 8042044:	d17b      	bne.n	804213e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8042046:	693b      	ldr	r3, [r7, #16]
 8042048:	f003 0308 	and.w	r3, r3, #8
 804204c:	2b00      	cmp	r3, #0
 804204e:	d015      	beq.n	804207c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042050:	697b      	ldr	r3, [r7, #20]
 8042052:	4a61      	ldr	r2, [pc, #388]	; (80421d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8042054:	4293      	cmp	r3, r2
 8042056:	f240 80b9 	bls.w	80421cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 804205a:	693b      	ldr	r3, [r7, #16]
 804205c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042060:	2b00      	cmp	r3, #0
 8042062:	f000 80b3 	beq.w	80421cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042066:	683b      	ldr	r3, [r7, #0]
 8042068:	015a      	lsls	r2, r3, #5
 804206a:	69bb      	ldr	r3, [r7, #24]
 804206c:	4413      	add	r3, r2
 804206e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8042072:	461a      	mov	r2, r3
 8042074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8042078:	6093      	str	r3, [r2, #8]
 804207a:	e0a7      	b.n	80421cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 804207c:	693b      	ldr	r3, [r7, #16]
 804207e:	f003 0320 	and.w	r3, r3, #32
 8042082:	2b00      	cmp	r3, #0
 8042084:	d009      	beq.n	804209a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8042086:	683b      	ldr	r3, [r7, #0]
 8042088:	015a      	lsls	r2, r3, #5
 804208a:	69bb      	ldr	r3, [r7, #24]
 804208c:	4413      	add	r3, r2
 804208e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8042092:	461a      	mov	r2, r3
 8042094:	2320      	movs	r3, #32
 8042096:	6093      	str	r3, [r2, #8]
 8042098:	e098      	b.n	80421cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 804209a:	693b      	ldr	r3, [r7, #16]
 804209c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80420a0:	2b00      	cmp	r3, #0
 80420a2:	f040 8093 	bne.w	80421cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80420a6:	697b      	ldr	r3, [r7, #20]
 80420a8:	4a4b      	ldr	r2, [pc, #300]	; (80421d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80420aa:	4293      	cmp	r3, r2
 80420ac:	d90f      	bls.n	80420ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80420ae:	693b      	ldr	r3, [r7, #16]
 80420b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80420b4:	2b00      	cmp	r3, #0
 80420b6:	d00a      	beq.n	80420ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80420b8:	683b      	ldr	r3, [r7, #0]
 80420ba:	015a      	lsls	r2, r3, #5
 80420bc:	69bb      	ldr	r3, [r7, #24]
 80420be:	4413      	add	r3, r2
 80420c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80420c4:	461a      	mov	r2, r3
 80420c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80420ca:	6093      	str	r3, [r2, #8]
 80420cc:	e07e      	b.n	80421cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80420ce:	683a      	ldr	r2, [r7, #0]
 80420d0:	4613      	mov	r3, r2
 80420d2:	00db      	lsls	r3, r3, #3
 80420d4:	4413      	add	r3, r2
 80420d6:	009b      	lsls	r3, r3, #2
 80420d8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80420dc:	687a      	ldr	r2, [r7, #4]
 80420de:	4413      	add	r3, r2
 80420e0:	3304      	adds	r3, #4
 80420e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80420e4:	68fb      	ldr	r3, [r7, #12]
 80420e6:	6a1a      	ldr	r2, [r3, #32]
 80420e8:	683b      	ldr	r3, [r7, #0]
 80420ea:	0159      	lsls	r1, r3, #5
 80420ec:	69bb      	ldr	r3, [r7, #24]
 80420ee:	440b      	add	r3, r1
 80420f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80420f4:	691b      	ldr	r3, [r3, #16]
 80420f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80420fa:	1ad2      	subs	r2, r2, r3
 80420fc:	68fb      	ldr	r3, [r7, #12]
 80420fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8042100:	683b      	ldr	r3, [r7, #0]
 8042102:	2b00      	cmp	r3, #0
 8042104:	d114      	bne.n	8042130 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8042106:	68fb      	ldr	r3, [r7, #12]
 8042108:	691b      	ldr	r3, [r3, #16]
 804210a:	2b00      	cmp	r3, #0
 804210c:	d109      	bne.n	8042122 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 804210e:	687b      	ldr	r3, [r7, #4]
 8042110:	6818      	ldr	r0, [r3, #0]
 8042112:	687b      	ldr	r3, [r7, #4]
 8042114:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8042118:	461a      	mov	r2, r3
 804211a:	2101      	movs	r1, #1
 804211c:	f001 ffec 	bl	80440f8 <USB_EP0_OutStart>
 8042120:	e006      	b.n	8042130 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8042122:	68fb      	ldr	r3, [r7, #12]
 8042124:	68da      	ldr	r2, [r3, #12]
 8042126:	68fb      	ldr	r3, [r7, #12]
 8042128:	695b      	ldr	r3, [r3, #20]
 804212a:	441a      	add	r2, r3
 804212c:	68fb      	ldr	r3, [r7, #12]
 804212e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8042130:	683b      	ldr	r3, [r7, #0]
 8042132:	b2db      	uxtb	r3, r3
 8042134:	4619      	mov	r1, r3
 8042136:	6878      	ldr	r0, [r7, #4]
 8042138:	f004 fa3c 	bl	80465b4 <HAL_PCD_DataOutStageCallback>
 804213c:	e046      	b.n	80421cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 804213e:	697b      	ldr	r3, [r7, #20]
 8042140:	4a26      	ldr	r2, [pc, #152]	; (80421dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8042142:	4293      	cmp	r3, r2
 8042144:	d124      	bne.n	8042190 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8042146:	693b      	ldr	r3, [r7, #16]
 8042148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804214c:	2b00      	cmp	r3, #0
 804214e:	d00a      	beq.n	8042166 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042150:	683b      	ldr	r3, [r7, #0]
 8042152:	015a      	lsls	r2, r3, #5
 8042154:	69bb      	ldr	r3, [r7, #24]
 8042156:	4413      	add	r3, r2
 8042158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804215c:	461a      	mov	r2, r3
 804215e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8042162:	6093      	str	r3, [r2, #8]
 8042164:	e032      	b.n	80421cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8042166:	693b      	ldr	r3, [r7, #16]
 8042168:	f003 0320 	and.w	r3, r3, #32
 804216c:	2b00      	cmp	r3, #0
 804216e:	d008      	beq.n	8042182 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8042170:	683b      	ldr	r3, [r7, #0]
 8042172:	015a      	lsls	r2, r3, #5
 8042174:	69bb      	ldr	r3, [r7, #24]
 8042176:	4413      	add	r3, r2
 8042178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804217c:	461a      	mov	r2, r3
 804217e:	2320      	movs	r3, #32
 8042180:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8042182:	683b      	ldr	r3, [r7, #0]
 8042184:	b2db      	uxtb	r3, r3
 8042186:	4619      	mov	r1, r3
 8042188:	6878      	ldr	r0, [r7, #4]
 804218a:	f004 fa13 	bl	80465b4 <HAL_PCD_DataOutStageCallback>
 804218e:	e01d      	b.n	80421cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8042190:	683b      	ldr	r3, [r7, #0]
 8042192:	2b00      	cmp	r3, #0
 8042194:	d114      	bne.n	80421c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8042196:	6879      	ldr	r1, [r7, #4]
 8042198:	683a      	ldr	r2, [r7, #0]
 804219a:	4613      	mov	r3, r2
 804219c:	00db      	lsls	r3, r3, #3
 804219e:	4413      	add	r3, r2
 80421a0:	009b      	lsls	r3, r3, #2
 80421a2:	440b      	add	r3, r1
 80421a4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80421a8:	681b      	ldr	r3, [r3, #0]
 80421aa:	2b00      	cmp	r3, #0
 80421ac:	d108      	bne.n	80421c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80421ae:	687b      	ldr	r3, [r7, #4]
 80421b0:	6818      	ldr	r0, [r3, #0]
 80421b2:	687b      	ldr	r3, [r7, #4]
 80421b4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80421b8:	461a      	mov	r2, r3
 80421ba:	2100      	movs	r1, #0
 80421bc:	f001 ff9c 	bl	80440f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80421c0:	683b      	ldr	r3, [r7, #0]
 80421c2:	b2db      	uxtb	r3, r3
 80421c4:	4619      	mov	r1, r3
 80421c6:	6878      	ldr	r0, [r7, #4]
 80421c8:	f004 f9f4 	bl	80465b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80421cc:	2300      	movs	r3, #0
}
 80421ce:	4618      	mov	r0, r3
 80421d0:	3720      	adds	r7, #32
 80421d2:	46bd      	mov	sp, r7
 80421d4:	bd80      	pop	{r7, pc}
 80421d6:	bf00      	nop
 80421d8:	4f54300a 	.word	0x4f54300a
 80421dc:	4f54310a 	.word	0x4f54310a

080421e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80421e0:	b580      	push	{r7, lr}
 80421e2:	b086      	sub	sp, #24
 80421e4:	af00      	add	r7, sp, #0
 80421e6:	6078      	str	r0, [r7, #4]
 80421e8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80421ea:	687b      	ldr	r3, [r7, #4]
 80421ec:	681b      	ldr	r3, [r3, #0]
 80421ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80421f0:	697b      	ldr	r3, [r7, #20]
 80421f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80421f4:	697b      	ldr	r3, [r7, #20]
 80421f6:	333c      	adds	r3, #60	; 0x3c
 80421f8:	3304      	adds	r3, #4
 80421fa:	681b      	ldr	r3, [r3, #0]
 80421fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80421fe:	683b      	ldr	r3, [r7, #0]
 8042200:	015a      	lsls	r2, r3, #5
 8042202:	693b      	ldr	r3, [r7, #16]
 8042204:	4413      	add	r3, r2
 8042206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804220a:	689b      	ldr	r3, [r3, #8]
 804220c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 804220e:	68fb      	ldr	r3, [r7, #12]
 8042210:	4a15      	ldr	r2, [pc, #84]	; (8042268 <PCD_EP_OutSetupPacket_int+0x88>)
 8042212:	4293      	cmp	r3, r2
 8042214:	d90e      	bls.n	8042234 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8042216:	68bb      	ldr	r3, [r7, #8]
 8042218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 804221c:	2b00      	cmp	r3, #0
 804221e:	d009      	beq.n	8042234 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042220:	683b      	ldr	r3, [r7, #0]
 8042222:	015a      	lsls	r2, r3, #5
 8042224:	693b      	ldr	r3, [r7, #16]
 8042226:	4413      	add	r3, r2
 8042228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804222c:	461a      	mov	r2, r3
 804222e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8042232:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8042234:	6878      	ldr	r0, [r7, #4]
 8042236:	f004 f9ab 	bl	8046590 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 804223a:	68fb      	ldr	r3, [r7, #12]
 804223c:	4a0a      	ldr	r2, [pc, #40]	; (8042268 <PCD_EP_OutSetupPacket_int+0x88>)
 804223e:	4293      	cmp	r3, r2
 8042240:	d90c      	bls.n	804225c <PCD_EP_OutSetupPacket_int+0x7c>
 8042242:	687b      	ldr	r3, [r7, #4]
 8042244:	799b      	ldrb	r3, [r3, #6]
 8042246:	2b01      	cmp	r3, #1
 8042248:	d108      	bne.n	804225c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 804224a:	687b      	ldr	r3, [r7, #4]
 804224c:	6818      	ldr	r0, [r3, #0]
 804224e:	687b      	ldr	r3, [r7, #4]
 8042250:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8042254:	461a      	mov	r2, r3
 8042256:	2101      	movs	r1, #1
 8042258:	f001 ff4e 	bl	80440f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 804225c:	2300      	movs	r3, #0
}
 804225e:	4618      	mov	r0, r3
 8042260:	3718      	adds	r7, #24
 8042262:	46bd      	mov	sp, r7
 8042264:	bd80      	pop	{r7, pc}
 8042266:	bf00      	nop
 8042268:	4f54300a 	.word	0x4f54300a

0804226c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 804226c:	b480      	push	{r7}
 804226e:	b085      	sub	sp, #20
 8042270:	af00      	add	r7, sp, #0
 8042272:	6078      	str	r0, [r7, #4]
 8042274:	460b      	mov	r3, r1
 8042276:	70fb      	strb	r3, [r7, #3]
 8042278:	4613      	mov	r3, r2
 804227a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 804227c:	687b      	ldr	r3, [r7, #4]
 804227e:	681b      	ldr	r3, [r3, #0]
 8042280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042282:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8042284:	78fb      	ldrb	r3, [r7, #3]
 8042286:	2b00      	cmp	r3, #0
 8042288:	d107      	bne.n	804229a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 804228a:	883b      	ldrh	r3, [r7, #0]
 804228c:	0419      	lsls	r1, r3, #16
 804228e:	687b      	ldr	r3, [r7, #4]
 8042290:	681b      	ldr	r3, [r3, #0]
 8042292:	68ba      	ldr	r2, [r7, #8]
 8042294:	430a      	orrs	r2, r1
 8042296:	629a      	str	r2, [r3, #40]	; 0x28
 8042298:	e028      	b.n	80422ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 804229a:	687b      	ldr	r3, [r7, #4]
 804229c:	681b      	ldr	r3, [r3, #0]
 804229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80422a0:	0c1b      	lsrs	r3, r3, #16
 80422a2:	68ba      	ldr	r2, [r7, #8]
 80422a4:	4413      	add	r3, r2
 80422a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80422a8:	2300      	movs	r3, #0
 80422aa:	73fb      	strb	r3, [r7, #15]
 80422ac:	e00d      	b.n	80422ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80422ae:	687b      	ldr	r3, [r7, #4]
 80422b0:	681a      	ldr	r2, [r3, #0]
 80422b2:	7bfb      	ldrb	r3, [r7, #15]
 80422b4:	3340      	adds	r3, #64	; 0x40
 80422b6:	009b      	lsls	r3, r3, #2
 80422b8:	4413      	add	r3, r2
 80422ba:	685b      	ldr	r3, [r3, #4]
 80422bc:	0c1b      	lsrs	r3, r3, #16
 80422be:	68ba      	ldr	r2, [r7, #8]
 80422c0:	4413      	add	r3, r2
 80422c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80422c4:	7bfb      	ldrb	r3, [r7, #15]
 80422c6:	3301      	adds	r3, #1
 80422c8:	73fb      	strb	r3, [r7, #15]
 80422ca:	7bfa      	ldrb	r2, [r7, #15]
 80422cc:	78fb      	ldrb	r3, [r7, #3]
 80422ce:	3b01      	subs	r3, #1
 80422d0:	429a      	cmp	r2, r3
 80422d2:	d3ec      	bcc.n	80422ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80422d4:	883b      	ldrh	r3, [r7, #0]
 80422d6:	0418      	lsls	r0, r3, #16
 80422d8:	687b      	ldr	r3, [r7, #4]
 80422da:	6819      	ldr	r1, [r3, #0]
 80422dc:	78fb      	ldrb	r3, [r7, #3]
 80422de:	3b01      	subs	r3, #1
 80422e0:	68ba      	ldr	r2, [r7, #8]
 80422e2:	4302      	orrs	r2, r0
 80422e4:	3340      	adds	r3, #64	; 0x40
 80422e6:	009b      	lsls	r3, r3, #2
 80422e8:	440b      	add	r3, r1
 80422ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80422ec:	2300      	movs	r3, #0
}
 80422ee:	4618      	mov	r0, r3
 80422f0:	3714      	adds	r7, #20
 80422f2:	46bd      	mov	sp, r7
 80422f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80422f8:	4770      	bx	lr

080422fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80422fa:	b480      	push	{r7}
 80422fc:	b083      	sub	sp, #12
 80422fe:	af00      	add	r7, sp, #0
 8042300:	6078      	str	r0, [r7, #4]
 8042302:	460b      	mov	r3, r1
 8042304:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8042306:	687b      	ldr	r3, [r7, #4]
 8042308:	681b      	ldr	r3, [r3, #0]
 804230a:	887a      	ldrh	r2, [r7, #2]
 804230c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 804230e:	2300      	movs	r3, #0
}
 8042310:	4618      	mov	r0, r3
 8042312:	370c      	adds	r7, #12
 8042314:	46bd      	mov	sp, r7
 8042316:	f85d 7b04 	ldr.w	r7, [sp], #4
 804231a:	4770      	bx	lr

0804231c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 804231c:	b480      	push	{r7}
 804231e:	b083      	sub	sp, #12
 8042320:	af00      	add	r7, sp, #0
 8042322:	6078      	str	r0, [r7, #4]
 8042324:	460b      	mov	r3, r1
 8042326:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8042328:	bf00      	nop
 804232a:	370c      	adds	r7, #12
 804232c:	46bd      	mov	sp, r7
 804232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042332:	4770      	bx	lr

08042334 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8042334:	b580      	push	{r7, lr}
 8042336:	b086      	sub	sp, #24
 8042338:	af00      	add	r7, sp, #0
 804233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 804233c:	687b      	ldr	r3, [r7, #4]
 804233e:	2b00      	cmp	r3, #0
 8042340:	d101      	bne.n	8042346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8042342:	2301      	movs	r3, #1
 8042344:	e267      	b.n	8042816 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8042346:	687b      	ldr	r3, [r7, #4]
 8042348:	681b      	ldr	r3, [r3, #0]
 804234a:	f003 0301 	and.w	r3, r3, #1
 804234e:	2b00      	cmp	r3, #0
 8042350:	d075      	beq.n	804243e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8042352:	4b88      	ldr	r3, [pc, #544]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 8042354:	689b      	ldr	r3, [r3, #8]
 8042356:	f003 030c 	and.w	r3, r3, #12
 804235a:	2b04      	cmp	r3, #4
 804235c:	d00c      	beq.n	8042378 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804235e:	4b85      	ldr	r3, [pc, #532]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 8042360:	689b      	ldr	r3, [r3, #8]
 8042362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8042366:	2b08      	cmp	r3, #8
 8042368:	d112      	bne.n	8042390 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804236a:	4b82      	ldr	r3, [pc, #520]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 804236c:	685b      	ldr	r3, [r3, #4]
 804236e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042376:	d10b      	bne.n	8042390 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8042378:	4b7e      	ldr	r3, [pc, #504]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 804237a:	681b      	ldr	r3, [r3, #0]
 804237c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042380:	2b00      	cmp	r3, #0
 8042382:	d05b      	beq.n	804243c <HAL_RCC_OscConfig+0x108>
 8042384:	687b      	ldr	r3, [r7, #4]
 8042386:	685b      	ldr	r3, [r3, #4]
 8042388:	2b00      	cmp	r3, #0
 804238a:	d157      	bne.n	804243c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 804238c:	2301      	movs	r3, #1
 804238e:	e242      	b.n	8042816 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8042390:	687b      	ldr	r3, [r7, #4]
 8042392:	685b      	ldr	r3, [r3, #4]
 8042394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042398:	d106      	bne.n	80423a8 <HAL_RCC_OscConfig+0x74>
 804239a:	4b76      	ldr	r3, [pc, #472]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 804239c:	681b      	ldr	r3, [r3, #0]
 804239e:	4a75      	ldr	r2, [pc, #468]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 80423a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80423a4:	6013      	str	r3, [r2, #0]
 80423a6:	e01d      	b.n	80423e4 <HAL_RCC_OscConfig+0xb0>
 80423a8:	687b      	ldr	r3, [r7, #4]
 80423aa:	685b      	ldr	r3, [r3, #4]
 80423ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80423b0:	d10c      	bne.n	80423cc <HAL_RCC_OscConfig+0x98>
 80423b2:	4b70      	ldr	r3, [pc, #448]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 80423b4:	681b      	ldr	r3, [r3, #0]
 80423b6:	4a6f      	ldr	r2, [pc, #444]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 80423b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80423bc:	6013      	str	r3, [r2, #0]
 80423be:	4b6d      	ldr	r3, [pc, #436]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 80423c0:	681b      	ldr	r3, [r3, #0]
 80423c2:	4a6c      	ldr	r2, [pc, #432]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 80423c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80423c8:	6013      	str	r3, [r2, #0]
 80423ca:	e00b      	b.n	80423e4 <HAL_RCC_OscConfig+0xb0>
 80423cc:	4b69      	ldr	r3, [pc, #420]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 80423ce:	681b      	ldr	r3, [r3, #0]
 80423d0:	4a68      	ldr	r2, [pc, #416]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 80423d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80423d6:	6013      	str	r3, [r2, #0]
 80423d8:	4b66      	ldr	r3, [pc, #408]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 80423da:	681b      	ldr	r3, [r3, #0]
 80423dc:	4a65      	ldr	r2, [pc, #404]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 80423de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80423e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80423e4:	687b      	ldr	r3, [r7, #4]
 80423e6:	685b      	ldr	r3, [r3, #4]
 80423e8:	2b00      	cmp	r3, #0
 80423ea:	d013      	beq.n	8042414 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80423ec:	f7fe fa58 	bl	80408a0 <HAL_GetTick>
 80423f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80423f2:	e008      	b.n	8042406 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80423f4:	f7fe fa54 	bl	80408a0 <HAL_GetTick>
 80423f8:	4602      	mov	r2, r0
 80423fa:	693b      	ldr	r3, [r7, #16]
 80423fc:	1ad3      	subs	r3, r2, r3
 80423fe:	2b64      	cmp	r3, #100	; 0x64
 8042400:	d901      	bls.n	8042406 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8042402:	2303      	movs	r3, #3
 8042404:	e207      	b.n	8042816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8042406:	4b5b      	ldr	r3, [pc, #364]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 8042408:	681b      	ldr	r3, [r3, #0]
 804240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804240e:	2b00      	cmp	r3, #0
 8042410:	d0f0      	beq.n	80423f4 <HAL_RCC_OscConfig+0xc0>
 8042412:	e014      	b.n	804243e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8042414:	f7fe fa44 	bl	80408a0 <HAL_GetTick>
 8042418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804241a:	e008      	b.n	804242e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 804241c:	f7fe fa40 	bl	80408a0 <HAL_GetTick>
 8042420:	4602      	mov	r2, r0
 8042422:	693b      	ldr	r3, [r7, #16]
 8042424:	1ad3      	subs	r3, r2, r3
 8042426:	2b64      	cmp	r3, #100	; 0x64
 8042428:	d901      	bls.n	804242e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 804242a:	2303      	movs	r3, #3
 804242c:	e1f3      	b.n	8042816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804242e:	4b51      	ldr	r3, [pc, #324]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 8042430:	681b      	ldr	r3, [r3, #0]
 8042432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042436:	2b00      	cmp	r3, #0
 8042438:	d1f0      	bne.n	804241c <HAL_RCC_OscConfig+0xe8>
 804243a:	e000      	b.n	804243e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804243c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 804243e:	687b      	ldr	r3, [r7, #4]
 8042440:	681b      	ldr	r3, [r3, #0]
 8042442:	f003 0302 	and.w	r3, r3, #2
 8042446:	2b00      	cmp	r3, #0
 8042448:	d063      	beq.n	8042512 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 804244a:	4b4a      	ldr	r3, [pc, #296]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 804244c:	689b      	ldr	r3, [r3, #8]
 804244e:	f003 030c 	and.w	r3, r3, #12
 8042452:	2b00      	cmp	r3, #0
 8042454:	d00b      	beq.n	804246e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8042456:	4b47      	ldr	r3, [pc, #284]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 8042458:	689b      	ldr	r3, [r3, #8]
 804245a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 804245e:	2b08      	cmp	r3, #8
 8042460:	d11c      	bne.n	804249c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8042462:	4b44      	ldr	r3, [pc, #272]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 8042464:	685b      	ldr	r3, [r3, #4]
 8042466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804246a:	2b00      	cmp	r3, #0
 804246c:	d116      	bne.n	804249c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 804246e:	4b41      	ldr	r3, [pc, #260]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 8042470:	681b      	ldr	r3, [r3, #0]
 8042472:	f003 0302 	and.w	r3, r3, #2
 8042476:	2b00      	cmp	r3, #0
 8042478:	d005      	beq.n	8042486 <HAL_RCC_OscConfig+0x152>
 804247a:	687b      	ldr	r3, [r7, #4]
 804247c:	68db      	ldr	r3, [r3, #12]
 804247e:	2b01      	cmp	r3, #1
 8042480:	d001      	beq.n	8042486 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8042482:	2301      	movs	r3, #1
 8042484:	e1c7      	b.n	8042816 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8042486:	4b3b      	ldr	r3, [pc, #236]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 8042488:	681b      	ldr	r3, [r3, #0]
 804248a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 804248e:	687b      	ldr	r3, [r7, #4]
 8042490:	691b      	ldr	r3, [r3, #16]
 8042492:	00db      	lsls	r3, r3, #3
 8042494:	4937      	ldr	r1, [pc, #220]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 8042496:	4313      	orrs	r3, r2
 8042498:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 804249a:	e03a      	b.n	8042512 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 804249c:	687b      	ldr	r3, [r7, #4]
 804249e:	68db      	ldr	r3, [r3, #12]
 80424a0:	2b00      	cmp	r3, #0
 80424a2:	d020      	beq.n	80424e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80424a4:	4b34      	ldr	r3, [pc, #208]	; (8042578 <HAL_RCC_OscConfig+0x244>)
 80424a6:	2201      	movs	r2, #1
 80424a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80424aa:	f7fe f9f9 	bl	80408a0 <HAL_GetTick>
 80424ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80424b0:	e008      	b.n	80424c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80424b2:	f7fe f9f5 	bl	80408a0 <HAL_GetTick>
 80424b6:	4602      	mov	r2, r0
 80424b8:	693b      	ldr	r3, [r7, #16]
 80424ba:	1ad3      	subs	r3, r2, r3
 80424bc:	2b02      	cmp	r3, #2
 80424be:	d901      	bls.n	80424c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80424c0:	2303      	movs	r3, #3
 80424c2:	e1a8      	b.n	8042816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80424c4:	4b2b      	ldr	r3, [pc, #172]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 80424c6:	681b      	ldr	r3, [r3, #0]
 80424c8:	f003 0302 	and.w	r3, r3, #2
 80424cc:	2b00      	cmp	r3, #0
 80424ce:	d0f0      	beq.n	80424b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80424d0:	4b28      	ldr	r3, [pc, #160]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 80424d2:	681b      	ldr	r3, [r3, #0]
 80424d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80424d8:	687b      	ldr	r3, [r7, #4]
 80424da:	691b      	ldr	r3, [r3, #16]
 80424dc:	00db      	lsls	r3, r3, #3
 80424de:	4925      	ldr	r1, [pc, #148]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 80424e0:	4313      	orrs	r3, r2
 80424e2:	600b      	str	r3, [r1, #0]
 80424e4:	e015      	b.n	8042512 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80424e6:	4b24      	ldr	r3, [pc, #144]	; (8042578 <HAL_RCC_OscConfig+0x244>)
 80424e8:	2200      	movs	r2, #0
 80424ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80424ec:	f7fe f9d8 	bl	80408a0 <HAL_GetTick>
 80424f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80424f2:	e008      	b.n	8042506 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80424f4:	f7fe f9d4 	bl	80408a0 <HAL_GetTick>
 80424f8:	4602      	mov	r2, r0
 80424fa:	693b      	ldr	r3, [r7, #16]
 80424fc:	1ad3      	subs	r3, r2, r3
 80424fe:	2b02      	cmp	r3, #2
 8042500:	d901      	bls.n	8042506 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8042502:	2303      	movs	r3, #3
 8042504:	e187      	b.n	8042816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8042506:	4b1b      	ldr	r3, [pc, #108]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 8042508:	681b      	ldr	r3, [r3, #0]
 804250a:	f003 0302 	and.w	r3, r3, #2
 804250e:	2b00      	cmp	r3, #0
 8042510:	d1f0      	bne.n	80424f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8042512:	687b      	ldr	r3, [r7, #4]
 8042514:	681b      	ldr	r3, [r3, #0]
 8042516:	f003 0308 	and.w	r3, r3, #8
 804251a:	2b00      	cmp	r3, #0
 804251c:	d036      	beq.n	804258c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 804251e:	687b      	ldr	r3, [r7, #4]
 8042520:	695b      	ldr	r3, [r3, #20]
 8042522:	2b00      	cmp	r3, #0
 8042524:	d016      	beq.n	8042554 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8042526:	4b15      	ldr	r3, [pc, #84]	; (804257c <HAL_RCC_OscConfig+0x248>)
 8042528:	2201      	movs	r2, #1
 804252a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804252c:	f7fe f9b8 	bl	80408a0 <HAL_GetTick>
 8042530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8042532:	e008      	b.n	8042546 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8042534:	f7fe f9b4 	bl	80408a0 <HAL_GetTick>
 8042538:	4602      	mov	r2, r0
 804253a:	693b      	ldr	r3, [r7, #16]
 804253c:	1ad3      	subs	r3, r2, r3
 804253e:	2b02      	cmp	r3, #2
 8042540:	d901      	bls.n	8042546 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8042542:	2303      	movs	r3, #3
 8042544:	e167      	b.n	8042816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8042546:	4b0b      	ldr	r3, [pc, #44]	; (8042574 <HAL_RCC_OscConfig+0x240>)
 8042548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804254a:	f003 0302 	and.w	r3, r3, #2
 804254e:	2b00      	cmp	r3, #0
 8042550:	d0f0      	beq.n	8042534 <HAL_RCC_OscConfig+0x200>
 8042552:	e01b      	b.n	804258c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8042554:	4b09      	ldr	r3, [pc, #36]	; (804257c <HAL_RCC_OscConfig+0x248>)
 8042556:	2200      	movs	r2, #0
 8042558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 804255a:	f7fe f9a1 	bl	80408a0 <HAL_GetTick>
 804255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8042560:	e00e      	b.n	8042580 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8042562:	f7fe f99d 	bl	80408a0 <HAL_GetTick>
 8042566:	4602      	mov	r2, r0
 8042568:	693b      	ldr	r3, [r7, #16]
 804256a:	1ad3      	subs	r3, r2, r3
 804256c:	2b02      	cmp	r3, #2
 804256e:	d907      	bls.n	8042580 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8042570:	2303      	movs	r3, #3
 8042572:	e150      	b.n	8042816 <HAL_RCC_OscConfig+0x4e2>
 8042574:	40023800 	.word	0x40023800
 8042578:	42470000 	.word	0x42470000
 804257c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8042580:	4b88      	ldr	r3, [pc, #544]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 8042582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042584:	f003 0302 	and.w	r3, r3, #2
 8042588:	2b00      	cmp	r3, #0
 804258a:	d1ea      	bne.n	8042562 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 804258c:	687b      	ldr	r3, [r7, #4]
 804258e:	681b      	ldr	r3, [r3, #0]
 8042590:	f003 0304 	and.w	r3, r3, #4
 8042594:	2b00      	cmp	r3, #0
 8042596:	f000 8097 	beq.w	80426c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 804259a:	2300      	movs	r3, #0
 804259c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 804259e:	4b81      	ldr	r3, [pc, #516]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 80425a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80425a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80425a6:	2b00      	cmp	r3, #0
 80425a8:	d10f      	bne.n	80425ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80425aa:	2300      	movs	r3, #0
 80425ac:	60bb      	str	r3, [r7, #8]
 80425ae:	4b7d      	ldr	r3, [pc, #500]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 80425b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80425b2:	4a7c      	ldr	r2, [pc, #496]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 80425b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80425b8:	6413      	str	r3, [r2, #64]	; 0x40
 80425ba:	4b7a      	ldr	r3, [pc, #488]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 80425bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80425be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80425c2:	60bb      	str	r3, [r7, #8]
 80425c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80425c6:	2301      	movs	r3, #1
 80425c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80425ca:	4b77      	ldr	r3, [pc, #476]	; (80427a8 <HAL_RCC_OscConfig+0x474>)
 80425cc:	681b      	ldr	r3, [r3, #0]
 80425ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80425d2:	2b00      	cmp	r3, #0
 80425d4:	d118      	bne.n	8042608 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80425d6:	4b74      	ldr	r3, [pc, #464]	; (80427a8 <HAL_RCC_OscConfig+0x474>)
 80425d8:	681b      	ldr	r3, [r3, #0]
 80425da:	4a73      	ldr	r2, [pc, #460]	; (80427a8 <HAL_RCC_OscConfig+0x474>)
 80425dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80425e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80425e2:	f7fe f95d 	bl	80408a0 <HAL_GetTick>
 80425e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80425e8:	e008      	b.n	80425fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80425ea:	f7fe f959 	bl	80408a0 <HAL_GetTick>
 80425ee:	4602      	mov	r2, r0
 80425f0:	693b      	ldr	r3, [r7, #16]
 80425f2:	1ad3      	subs	r3, r2, r3
 80425f4:	2b02      	cmp	r3, #2
 80425f6:	d901      	bls.n	80425fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80425f8:	2303      	movs	r3, #3
 80425fa:	e10c      	b.n	8042816 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80425fc:	4b6a      	ldr	r3, [pc, #424]	; (80427a8 <HAL_RCC_OscConfig+0x474>)
 80425fe:	681b      	ldr	r3, [r3, #0]
 8042600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042604:	2b00      	cmp	r3, #0
 8042606:	d0f0      	beq.n	80425ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8042608:	687b      	ldr	r3, [r7, #4]
 804260a:	689b      	ldr	r3, [r3, #8]
 804260c:	2b01      	cmp	r3, #1
 804260e:	d106      	bne.n	804261e <HAL_RCC_OscConfig+0x2ea>
 8042610:	4b64      	ldr	r3, [pc, #400]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 8042612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042614:	4a63      	ldr	r2, [pc, #396]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 8042616:	f043 0301 	orr.w	r3, r3, #1
 804261a:	6713      	str	r3, [r2, #112]	; 0x70
 804261c:	e01c      	b.n	8042658 <HAL_RCC_OscConfig+0x324>
 804261e:	687b      	ldr	r3, [r7, #4]
 8042620:	689b      	ldr	r3, [r3, #8]
 8042622:	2b05      	cmp	r3, #5
 8042624:	d10c      	bne.n	8042640 <HAL_RCC_OscConfig+0x30c>
 8042626:	4b5f      	ldr	r3, [pc, #380]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 8042628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804262a:	4a5e      	ldr	r2, [pc, #376]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 804262c:	f043 0304 	orr.w	r3, r3, #4
 8042630:	6713      	str	r3, [r2, #112]	; 0x70
 8042632:	4b5c      	ldr	r3, [pc, #368]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 8042634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042636:	4a5b      	ldr	r2, [pc, #364]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 8042638:	f043 0301 	orr.w	r3, r3, #1
 804263c:	6713      	str	r3, [r2, #112]	; 0x70
 804263e:	e00b      	b.n	8042658 <HAL_RCC_OscConfig+0x324>
 8042640:	4b58      	ldr	r3, [pc, #352]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 8042642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042644:	4a57      	ldr	r2, [pc, #348]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 8042646:	f023 0301 	bic.w	r3, r3, #1
 804264a:	6713      	str	r3, [r2, #112]	; 0x70
 804264c:	4b55      	ldr	r3, [pc, #340]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 804264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042650:	4a54      	ldr	r2, [pc, #336]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 8042652:	f023 0304 	bic.w	r3, r3, #4
 8042656:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8042658:	687b      	ldr	r3, [r7, #4]
 804265a:	689b      	ldr	r3, [r3, #8]
 804265c:	2b00      	cmp	r3, #0
 804265e:	d015      	beq.n	804268c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8042660:	f7fe f91e 	bl	80408a0 <HAL_GetTick>
 8042664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8042666:	e00a      	b.n	804267e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8042668:	f7fe f91a 	bl	80408a0 <HAL_GetTick>
 804266c:	4602      	mov	r2, r0
 804266e:	693b      	ldr	r3, [r7, #16]
 8042670:	1ad3      	subs	r3, r2, r3
 8042672:	f241 3288 	movw	r2, #5000	; 0x1388
 8042676:	4293      	cmp	r3, r2
 8042678:	d901      	bls.n	804267e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 804267a:	2303      	movs	r3, #3
 804267c:	e0cb      	b.n	8042816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804267e:	4b49      	ldr	r3, [pc, #292]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 8042680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042682:	f003 0302 	and.w	r3, r3, #2
 8042686:	2b00      	cmp	r3, #0
 8042688:	d0ee      	beq.n	8042668 <HAL_RCC_OscConfig+0x334>
 804268a:	e014      	b.n	80426b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 804268c:	f7fe f908 	bl	80408a0 <HAL_GetTick>
 8042690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8042692:	e00a      	b.n	80426aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8042694:	f7fe f904 	bl	80408a0 <HAL_GetTick>
 8042698:	4602      	mov	r2, r0
 804269a:	693b      	ldr	r3, [r7, #16]
 804269c:	1ad3      	subs	r3, r2, r3
 804269e:	f241 3288 	movw	r2, #5000	; 0x1388
 80426a2:	4293      	cmp	r3, r2
 80426a4:	d901      	bls.n	80426aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80426a6:	2303      	movs	r3, #3
 80426a8:	e0b5      	b.n	8042816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80426aa:	4b3e      	ldr	r3, [pc, #248]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 80426ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80426ae:	f003 0302 	and.w	r3, r3, #2
 80426b2:	2b00      	cmp	r3, #0
 80426b4:	d1ee      	bne.n	8042694 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80426b6:	7dfb      	ldrb	r3, [r7, #23]
 80426b8:	2b01      	cmp	r3, #1
 80426ba:	d105      	bne.n	80426c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80426bc:	4b39      	ldr	r3, [pc, #228]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 80426be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80426c0:	4a38      	ldr	r2, [pc, #224]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 80426c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80426c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80426c8:	687b      	ldr	r3, [r7, #4]
 80426ca:	699b      	ldr	r3, [r3, #24]
 80426cc:	2b00      	cmp	r3, #0
 80426ce:	f000 80a1 	beq.w	8042814 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80426d2:	4b34      	ldr	r3, [pc, #208]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 80426d4:	689b      	ldr	r3, [r3, #8]
 80426d6:	f003 030c 	and.w	r3, r3, #12
 80426da:	2b08      	cmp	r3, #8
 80426dc:	d05c      	beq.n	8042798 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80426de:	687b      	ldr	r3, [r7, #4]
 80426e0:	699b      	ldr	r3, [r3, #24]
 80426e2:	2b02      	cmp	r3, #2
 80426e4:	d141      	bne.n	804276a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80426e6:	4b31      	ldr	r3, [pc, #196]	; (80427ac <HAL_RCC_OscConfig+0x478>)
 80426e8:	2200      	movs	r2, #0
 80426ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80426ec:	f7fe f8d8 	bl	80408a0 <HAL_GetTick>
 80426f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80426f2:	e008      	b.n	8042706 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80426f4:	f7fe f8d4 	bl	80408a0 <HAL_GetTick>
 80426f8:	4602      	mov	r2, r0
 80426fa:	693b      	ldr	r3, [r7, #16]
 80426fc:	1ad3      	subs	r3, r2, r3
 80426fe:	2b02      	cmp	r3, #2
 8042700:	d901      	bls.n	8042706 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8042702:	2303      	movs	r3, #3
 8042704:	e087      	b.n	8042816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8042706:	4b27      	ldr	r3, [pc, #156]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 8042708:	681b      	ldr	r3, [r3, #0]
 804270a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804270e:	2b00      	cmp	r3, #0
 8042710:	d1f0      	bne.n	80426f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8042712:	687b      	ldr	r3, [r7, #4]
 8042714:	69da      	ldr	r2, [r3, #28]
 8042716:	687b      	ldr	r3, [r7, #4]
 8042718:	6a1b      	ldr	r3, [r3, #32]
 804271a:	431a      	orrs	r2, r3
 804271c:	687b      	ldr	r3, [r7, #4]
 804271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042720:	019b      	lsls	r3, r3, #6
 8042722:	431a      	orrs	r2, r3
 8042724:	687b      	ldr	r3, [r7, #4]
 8042726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042728:	085b      	lsrs	r3, r3, #1
 804272a:	3b01      	subs	r3, #1
 804272c:	041b      	lsls	r3, r3, #16
 804272e:	431a      	orrs	r2, r3
 8042730:	687b      	ldr	r3, [r7, #4]
 8042732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042734:	061b      	lsls	r3, r3, #24
 8042736:	491b      	ldr	r1, [pc, #108]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 8042738:	4313      	orrs	r3, r2
 804273a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 804273c:	4b1b      	ldr	r3, [pc, #108]	; (80427ac <HAL_RCC_OscConfig+0x478>)
 804273e:	2201      	movs	r2, #1
 8042740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8042742:	f7fe f8ad 	bl	80408a0 <HAL_GetTick>
 8042746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8042748:	e008      	b.n	804275c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 804274a:	f7fe f8a9 	bl	80408a0 <HAL_GetTick>
 804274e:	4602      	mov	r2, r0
 8042750:	693b      	ldr	r3, [r7, #16]
 8042752:	1ad3      	subs	r3, r2, r3
 8042754:	2b02      	cmp	r3, #2
 8042756:	d901      	bls.n	804275c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8042758:	2303      	movs	r3, #3
 804275a:	e05c      	b.n	8042816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804275c:	4b11      	ldr	r3, [pc, #68]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 804275e:	681b      	ldr	r3, [r3, #0]
 8042760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042764:	2b00      	cmp	r3, #0
 8042766:	d0f0      	beq.n	804274a <HAL_RCC_OscConfig+0x416>
 8042768:	e054      	b.n	8042814 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804276a:	4b10      	ldr	r3, [pc, #64]	; (80427ac <HAL_RCC_OscConfig+0x478>)
 804276c:	2200      	movs	r2, #0
 804276e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8042770:	f7fe f896 	bl	80408a0 <HAL_GetTick>
 8042774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8042776:	e008      	b.n	804278a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8042778:	f7fe f892 	bl	80408a0 <HAL_GetTick>
 804277c:	4602      	mov	r2, r0
 804277e:	693b      	ldr	r3, [r7, #16]
 8042780:	1ad3      	subs	r3, r2, r3
 8042782:	2b02      	cmp	r3, #2
 8042784:	d901      	bls.n	804278a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8042786:	2303      	movs	r3, #3
 8042788:	e045      	b.n	8042816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804278a:	4b06      	ldr	r3, [pc, #24]	; (80427a4 <HAL_RCC_OscConfig+0x470>)
 804278c:	681b      	ldr	r3, [r3, #0]
 804278e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042792:	2b00      	cmp	r3, #0
 8042794:	d1f0      	bne.n	8042778 <HAL_RCC_OscConfig+0x444>
 8042796:	e03d      	b.n	8042814 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8042798:	687b      	ldr	r3, [r7, #4]
 804279a:	699b      	ldr	r3, [r3, #24]
 804279c:	2b01      	cmp	r3, #1
 804279e:	d107      	bne.n	80427b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80427a0:	2301      	movs	r3, #1
 80427a2:	e038      	b.n	8042816 <HAL_RCC_OscConfig+0x4e2>
 80427a4:	40023800 	.word	0x40023800
 80427a8:	40007000 	.word	0x40007000
 80427ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80427b0:	4b1b      	ldr	r3, [pc, #108]	; (8042820 <HAL_RCC_OscConfig+0x4ec>)
 80427b2:	685b      	ldr	r3, [r3, #4]
 80427b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80427b6:	687b      	ldr	r3, [r7, #4]
 80427b8:	699b      	ldr	r3, [r3, #24]
 80427ba:	2b01      	cmp	r3, #1
 80427bc:	d028      	beq.n	8042810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80427be:	68fb      	ldr	r3, [r7, #12]
 80427c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80427c4:	687b      	ldr	r3, [r7, #4]
 80427c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80427c8:	429a      	cmp	r2, r3
 80427ca:	d121      	bne.n	8042810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80427cc:	68fb      	ldr	r3, [r7, #12]
 80427ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80427d2:	687b      	ldr	r3, [r7, #4]
 80427d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80427d6:	429a      	cmp	r2, r3
 80427d8:	d11a      	bne.n	8042810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80427da:	68fa      	ldr	r2, [r7, #12]
 80427dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80427e0:	4013      	ands	r3, r2
 80427e2:	687a      	ldr	r2, [r7, #4]
 80427e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80427e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80427e8:	4293      	cmp	r3, r2
 80427ea:	d111      	bne.n	8042810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80427ec:	68fb      	ldr	r3, [r7, #12]
 80427ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80427f2:	687b      	ldr	r3, [r7, #4]
 80427f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80427f6:	085b      	lsrs	r3, r3, #1
 80427f8:	3b01      	subs	r3, #1
 80427fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80427fc:	429a      	cmp	r2, r3
 80427fe:	d107      	bne.n	8042810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8042800:	68fb      	ldr	r3, [r7, #12]
 8042802:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8042806:	687b      	ldr	r3, [r7, #4]
 8042808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804280a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 804280c:	429a      	cmp	r2, r3
 804280e:	d001      	beq.n	8042814 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8042810:	2301      	movs	r3, #1
 8042812:	e000      	b.n	8042816 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8042814:	2300      	movs	r3, #0
}
 8042816:	4618      	mov	r0, r3
 8042818:	3718      	adds	r7, #24
 804281a:	46bd      	mov	sp, r7
 804281c:	bd80      	pop	{r7, pc}
 804281e:	bf00      	nop
 8042820:	40023800 	.word	0x40023800

08042824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8042824:	b580      	push	{r7, lr}
 8042826:	b084      	sub	sp, #16
 8042828:	af00      	add	r7, sp, #0
 804282a:	6078      	str	r0, [r7, #4]
 804282c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 804282e:	687b      	ldr	r3, [r7, #4]
 8042830:	2b00      	cmp	r3, #0
 8042832:	d101      	bne.n	8042838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8042834:	2301      	movs	r3, #1
 8042836:	e0cc      	b.n	80429d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8042838:	4b68      	ldr	r3, [pc, #416]	; (80429dc <HAL_RCC_ClockConfig+0x1b8>)
 804283a:	681b      	ldr	r3, [r3, #0]
 804283c:	f003 0307 	and.w	r3, r3, #7
 8042840:	683a      	ldr	r2, [r7, #0]
 8042842:	429a      	cmp	r2, r3
 8042844:	d90c      	bls.n	8042860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8042846:	4b65      	ldr	r3, [pc, #404]	; (80429dc <HAL_RCC_ClockConfig+0x1b8>)
 8042848:	683a      	ldr	r2, [r7, #0]
 804284a:	b2d2      	uxtb	r2, r2
 804284c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 804284e:	4b63      	ldr	r3, [pc, #396]	; (80429dc <HAL_RCC_ClockConfig+0x1b8>)
 8042850:	681b      	ldr	r3, [r3, #0]
 8042852:	f003 0307 	and.w	r3, r3, #7
 8042856:	683a      	ldr	r2, [r7, #0]
 8042858:	429a      	cmp	r2, r3
 804285a:	d001      	beq.n	8042860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 804285c:	2301      	movs	r3, #1
 804285e:	e0b8      	b.n	80429d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8042860:	687b      	ldr	r3, [r7, #4]
 8042862:	681b      	ldr	r3, [r3, #0]
 8042864:	f003 0302 	and.w	r3, r3, #2
 8042868:	2b00      	cmp	r3, #0
 804286a:	d020      	beq.n	80428ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 804286c:	687b      	ldr	r3, [r7, #4]
 804286e:	681b      	ldr	r3, [r3, #0]
 8042870:	f003 0304 	and.w	r3, r3, #4
 8042874:	2b00      	cmp	r3, #0
 8042876:	d005      	beq.n	8042884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8042878:	4b59      	ldr	r3, [pc, #356]	; (80429e0 <HAL_RCC_ClockConfig+0x1bc>)
 804287a:	689b      	ldr	r3, [r3, #8]
 804287c:	4a58      	ldr	r2, [pc, #352]	; (80429e0 <HAL_RCC_ClockConfig+0x1bc>)
 804287e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8042882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8042884:	687b      	ldr	r3, [r7, #4]
 8042886:	681b      	ldr	r3, [r3, #0]
 8042888:	f003 0308 	and.w	r3, r3, #8
 804288c:	2b00      	cmp	r3, #0
 804288e:	d005      	beq.n	804289c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8042890:	4b53      	ldr	r3, [pc, #332]	; (80429e0 <HAL_RCC_ClockConfig+0x1bc>)
 8042892:	689b      	ldr	r3, [r3, #8]
 8042894:	4a52      	ldr	r2, [pc, #328]	; (80429e0 <HAL_RCC_ClockConfig+0x1bc>)
 8042896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 804289a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804289c:	4b50      	ldr	r3, [pc, #320]	; (80429e0 <HAL_RCC_ClockConfig+0x1bc>)
 804289e:	689b      	ldr	r3, [r3, #8]
 80428a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80428a4:	687b      	ldr	r3, [r7, #4]
 80428a6:	689b      	ldr	r3, [r3, #8]
 80428a8:	494d      	ldr	r1, [pc, #308]	; (80429e0 <HAL_RCC_ClockConfig+0x1bc>)
 80428aa:	4313      	orrs	r3, r2
 80428ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80428ae:	687b      	ldr	r3, [r7, #4]
 80428b0:	681b      	ldr	r3, [r3, #0]
 80428b2:	f003 0301 	and.w	r3, r3, #1
 80428b6:	2b00      	cmp	r3, #0
 80428b8:	d044      	beq.n	8042944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80428ba:	687b      	ldr	r3, [r7, #4]
 80428bc:	685b      	ldr	r3, [r3, #4]
 80428be:	2b01      	cmp	r3, #1
 80428c0:	d107      	bne.n	80428d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80428c2:	4b47      	ldr	r3, [pc, #284]	; (80429e0 <HAL_RCC_ClockConfig+0x1bc>)
 80428c4:	681b      	ldr	r3, [r3, #0]
 80428c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80428ca:	2b00      	cmp	r3, #0
 80428cc:	d119      	bne.n	8042902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80428ce:	2301      	movs	r3, #1
 80428d0:	e07f      	b.n	80429d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80428d2:	687b      	ldr	r3, [r7, #4]
 80428d4:	685b      	ldr	r3, [r3, #4]
 80428d6:	2b02      	cmp	r3, #2
 80428d8:	d003      	beq.n	80428e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80428da:	687b      	ldr	r3, [r7, #4]
 80428dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80428de:	2b03      	cmp	r3, #3
 80428e0:	d107      	bne.n	80428f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80428e2:	4b3f      	ldr	r3, [pc, #252]	; (80429e0 <HAL_RCC_ClockConfig+0x1bc>)
 80428e4:	681b      	ldr	r3, [r3, #0]
 80428e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80428ea:	2b00      	cmp	r3, #0
 80428ec:	d109      	bne.n	8042902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80428ee:	2301      	movs	r3, #1
 80428f0:	e06f      	b.n	80429d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80428f2:	4b3b      	ldr	r3, [pc, #236]	; (80429e0 <HAL_RCC_ClockConfig+0x1bc>)
 80428f4:	681b      	ldr	r3, [r3, #0]
 80428f6:	f003 0302 	and.w	r3, r3, #2
 80428fa:	2b00      	cmp	r3, #0
 80428fc:	d101      	bne.n	8042902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80428fe:	2301      	movs	r3, #1
 8042900:	e067      	b.n	80429d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8042902:	4b37      	ldr	r3, [pc, #220]	; (80429e0 <HAL_RCC_ClockConfig+0x1bc>)
 8042904:	689b      	ldr	r3, [r3, #8]
 8042906:	f023 0203 	bic.w	r2, r3, #3
 804290a:	687b      	ldr	r3, [r7, #4]
 804290c:	685b      	ldr	r3, [r3, #4]
 804290e:	4934      	ldr	r1, [pc, #208]	; (80429e0 <HAL_RCC_ClockConfig+0x1bc>)
 8042910:	4313      	orrs	r3, r2
 8042912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8042914:	f7fd ffc4 	bl	80408a0 <HAL_GetTick>
 8042918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804291a:	e00a      	b.n	8042932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 804291c:	f7fd ffc0 	bl	80408a0 <HAL_GetTick>
 8042920:	4602      	mov	r2, r0
 8042922:	68fb      	ldr	r3, [r7, #12]
 8042924:	1ad3      	subs	r3, r2, r3
 8042926:	f241 3288 	movw	r2, #5000	; 0x1388
 804292a:	4293      	cmp	r3, r2
 804292c:	d901      	bls.n	8042932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 804292e:	2303      	movs	r3, #3
 8042930:	e04f      	b.n	80429d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8042932:	4b2b      	ldr	r3, [pc, #172]	; (80429e0 <HAL_RCC_ClockConfig+0x1bc>)
 8042934:	689b      	ldr	r3, [r3, #8]
 8042936:	f003 020c 	and.w	r2, r3, #12
 804293a:	687b      	ldr	r3, [r7, #4]
 804293c:	685b      	ldr	r3, [r3, #4]
 804293e:	009b      	lsls	r3, r3, #2
 8042940:	429a      	cmp	r2, r3
 8042942:	d1eb      	bne.n	804291c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8042944:	4b25      	ldr	r3, [pc, #148]	; (80429dc <HAL_RCC_ClockConfig+0x1b8>)
 8042946:	681b      	ldr	r3, [r3, #0]
 8042948:	f003 0307 	and.w	r3, r3, #7
 804294c:	683a      	ldr	r2, [r7, #0]
 804294e:	429a      	cmp	r2, r3
 8042950:	d20c      	bcs.n	804296c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8042952:	4b22      	ldr	r3, [pc, #136]	; (80429dc <HAL_RCC_ClockConfig+0x1b8>)
 8042954:	683a      	ldr	r2, [r7, #0]
 8042956:	b2d2      	uxtb	r2, r2
 8042958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 804295a:	4b20      	ldr	r3, [pc, #128]	; (80429dc <HAL_RCC_ClockConfig+0x1b8>)
 804295c:	681b      	ldr	r3, [r3, #0]
 804295e:	f003 0307 	and.w	r3, r3, #7
 8042962:	683a      	ldr	r2, [r7, #0]
 8042964:	429a      	cmp	r2, r3
 8042966:	d001      	beq.n	804296c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8042968:	2301      	movs	r3, #1
 804296a:	e032      	b.n	80429d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 804296c:	687b      	ldr	r3, [r7, #4]
 804296e:	681b      	ldr	r3, [r3, #0]
 8042970:	f003 0304 	and.w	r3, r3, #4
 8042974:	2b00      	cmp	r3, #0
 8042976:	d008      	beq.n	804298a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8042978:	4b19      	ldr	r3, [pc, #100]	; (80429e0 <HAL_RCC_ClockConfig+0x1bc>)
 804297a:	689b      	ldr	r3, [r3, #8]
 804297c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8042980:	687b      	ldr	r3, [r7, #4]
 8042982:	68db      	ldr	r3, [r3, #12]
 8042984:	4916      	ldr	r1, [pc, #88]	; (80429e0 <HAL_RCC_ClockConfig+0x1bc>)
 8042986:	4313      	orrs	r3, r2
 8042988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 804298a:	687b      	ldr	r3, [r7, #4]
 804298c:	681b      	ldr	r3, [r3, #0]
 804298e:	f003 0308 	and.w	r3, r3, #8
 8042992:	2b00      	cmp	r3, #0
 8042994:	d009      	beq.n	80429aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8042996:	4b12      	ldr	r3, [pc, #72]	; (80429e0 <HAL_RCC_ClockConfig+0x1bc>)
 8042998:	689b      	ldr	r3, [r3, #8]
 804299a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 804299e:	687b      	ldr	r3, [r7, #4]
 80429a0:	691b      	ldr	r3, [r3, #16]
 80429a2:	00db      	lsls	r3, r3, #3
 80429a4:	490e      	ldr	r1, [pc, #56]	; (80429e0 <HAL_RCC_ClockConfig+0x1bc>)
 80429a6:	4313      	orrs	r3, r2
 80429a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80429aa:	f000 f821 	bl	80429f0 <HAL_RCC_GetSysClockFreq>
 80429ae:	4602      	mov	r2, r0
 80429b0:	4b0b      	ldr	r3, [pc, #44]	; (80429e0 <HAL_RCC_ClockConfig+0x1bc>)
 80429b2:	689b      	ldr	r3, [r3, #8]
 80429b4:	091b      	lsrs	r3, r3, #4
 80429b6:	f003 030f 	and.w	r3, r3, #15
 80429ba:	490a      	ldr	r1, [pc, #40]	; (80429e4 <HAL_RCC_ClockConfig+0x1c0>)
 80429bc:	5ccb      	ldrb	r3, [r1, r3]
 80429be:	fa22 f303 	lsr.w	r3, r2, r3
 80429c2:	4a09      	ldr	r2, [pc, #36]	; (80429e8 <HAL_RCC_ClockConfig+0x1c4>)
 80429c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80429c6:	4b09      	ldr	r3, [pc, #36]	; (80429ec <HAL_RCC_ClockConfig+0x1c8>)
 80429c8:	681b      	ldr	r3, [r3, #0]
 80429ca:	4618      	mov	r0, r3
 80429cc:	f7fd ff24 	bl	8040818 <HAL_InitTick>

  return HAL_OK;
 80429d0:	2300      	movs	r3, #0
}
 80429d2:	4618      	mov	r0, r3
 80429d4:	3710      	adds	r7, #16
 80429d6:	46bd      	mov	sp, r7
 80429d8:	bd80      	pop	{r7, pc}
 80429da:	bf00      	nop
 80429dc:	40023c00 	.word	0x40023c00
 80429e0:	40023800 	.word	0x40023800
 80429e4:	08046bb4 	.word	0x08046bb4
 80429e8:	20000000 	.word	0x20000000
 80429ec:	20000004 	.word	0x20000004

080429f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80429f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80429f4:	b090      	sub	sp, #64	; 0x40
 80429f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80429f8:	2300      	movs	r3, #0
 80429fa:	637b      	str	r3, [r7, #52]	; 0x34
 80429fc:	2300      	movs	r3, #0
 80429fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8042a00:	2300      	movs	r3, #0
 8042a02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8042a04:	2300      	movs	r3, #0
 8042a06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8042a08:	4b59      	ldr	r3, [pc, #356]	; (8042b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8042a0a:	689b      	ldr	r3, [r3, #8]
 8042a0c:	f003 030c 	and.w	r3, r3, #12
 8042a10:	2b08      	cmp	r3, #8
 8042a12:	d00d      	beq.n	8042a30 <HAL_RCC_GetSysClockFreq+0x40>
 8042a14:	2b08      	cmp	r3, #8
 8042a16:	f200 80a1 	bhi.w	8042b5c <HAL_RCC_GetSysClockFreq+0x16c>
 8042a1a:	2b00      	cmp	r3, #0
 8042a1c:	d002      	beq.n	8042a24 <HAL_RCC_GetSysClockFreq+0x34>
 8042a1e:	2b04      	cmp	r3, #4
 8042a20:	d003      	beq.n	8042a2a <HAL_RCC_GetSysClockFreq+0x3a>
 8042a22:	e09b      	b.n	8042b5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8042a24:	4b53      	ldr	r3, [pc, #332]	; (8042b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8042a26:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8042a28:	e09b      	b.n	8042b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8042a2a:	4b53      	ldr	r3, [pc, #332]	; (8042b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8042a2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8042a2e:	e098      	b.n	8042b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8042a30:	4b4f      	ldr	r3, [pc, #316]	; (8042b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8042a32:	685b      	ldr	r3, [r3, #4]
 8042a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8042a38:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8042a3a:	4b4d      	ldr	r3, [pc, #308]	; (8042b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8042a3c:	685b      	ldr	r3, [r3, #4]
 8042a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042a42:	2b00      	cmp	r3, #0
 8042a44:	d028      	beq.n	8042a98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8042a46:	4b4a      	ldr	r3, [pc, #296]	; (8042b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8042a48:	685b      	ldr	r3, [r3, #4]
 8042a4a:	099b      	lsrs	r3, r3, #6
 8042a4c:	2200      	movs	r2, #0
 8042a4e:	623b      	str	r3, [r7, #32]
 8042a50:	627a      	str	r2, [r7, #36]	; 0x24
 8042a52:	6a3b      	ldr	r3, [r7, #32]
 8042a54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8042a58:	2100      	movs	r1, #0
 8042a5a:	4b47      	ldr	r3, [pc, #284]	; (8042b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8042a5c:	fb03 f201 	mul.w	r2, r3, r1
 8042a60:	2300      	movs	r3, #0
 8042a62:	fb00 f303 	mul.w	r3, r0, r3
 8042a66:	4413      	add	r3, r2
 8042a68:	4a43      	ldr	r2, [pc, #268]	; (8042b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8042a6a:	fba0 1202 	umull	r1, r2, r0, r2
 8042a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8042a70:	460a      	mov	r2, r1
 8042a72:	62ba      	str	r2, [r7, #40]	; 0x28
 8042a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8042a76:	4413      	add	r3, r2
 8042a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8042a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8042a7c:	2200      	movs	r2, #0
 8042a7e:	61bb      	str	r3, [r7, #24]
 8042a80:	61fa      	str	r2, [r7, #28]
 8042a82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8042a86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8042a8a:	f7fd fba5 	bl	80401d8 <__aeabi_uldivmod>
 8042a8e:	4602      	mov	r2, r0
 8042a90:	460b      	mov	r3, r1
 8042a92:	4613      	mov	r3, r2
 8042a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8042a96:	e053      	b.n	8042b40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8042a98:	4b35      	ldr	r3, [pc, #212]	; (8042b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8042a9a:	685b      	ldr	r3, [r3, #4]
 8042a9c:	099b      	lsrs	r3, r3, #6
 8042a9e:	2200      	movs	r2, #0
 8042aa0:	613b      	str	r3, [r7, #16]
 8042aa2:	617a      	str	r2, [r7, #20]
 8042aa4:	693b      	ldr	r3, [r7, #16]
 8042aa6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8042aaa:	f04f 0b00 	mov.w	fp, #0
 8042aae:	4652      	mov	r2, sl
 8042ab0:	465b      	mov	r3, fp
 8042ab2:	f04f 0000 	mov.w	r0, #0
 8042ab6:	f04f 0100 	mov.w	r1, #0
 8042aba:	0159      	lsls	r1, r3, #5
 8042abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8042ac0:	0150      	lsls	r0, r2, #5
 8042ac2:	4602      	mov	r2, r0
 8042ac4:	460b      	mov	r3, r1
 8042ac6:	ebb2 080a 	subs.w	r8, r2, sl
 8042aca:	eb63 090b 	sbc.w	r9, r3, fp
 8042ace:	f04f 0200 	mov.w	r2, #0
 8042ad2:	f04f 0300 	mov.w	r3, #0
 8042ad6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8042ada:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8042ade:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8042ae2:	ebb2 0408 	subs.w	r4, r2, r8
 8042ae6:	eb63 0509 	sbc.w	r5, r3, r9
 8042aea:	f04f 0200 	mov.w	r2, #0
 8042aee:	f04f 0300 	mov.w	r3, #0
 8042af2:	00eb      	lsls	r3, r5, #3
 8042af4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8042af8:	00e2      	lsls	r2, r4, #3
 8042afa:	4614      	mov	r4, r2
 8042afc:	461d      	mov	r5, r3
 8042afe:	eb14 030a 	adds.w	r3, r4, sl
 8042b02:	603b      	str	r3, [r7, #0]
 8042b04:	eb45 030b 	adc.w	r3, r5, fp
 8042b08:	607b      	str	r3, [r7, #4]
 8042b0a:	f04f 0200 	mov.w	r2, #0
 8042b0e:	f04f 0300 	mov.w	r3, #0
 8042b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8042b16:	4629      	mov	r1, r5
 8042b18:	028b      	lsls	r3, r1, #10
 8042b1a:	4621      	mov	r1, r4
 8042b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8042b20:	4621      	mov	r1, r4
 8042b22:	028a      	lsls	r2, r1, #10
 8042b24:	4610      	mov	r0, r2
 8042b26:	4619      	mov	r1, r3
 8042b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8042b2a:	2200      	movs	r2, #0
 8042b2c:	60bb      	str	r3, [r7, #8]
 8042b2e:	60fa      	str	r2, [r7, #12]
 8042b30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8042b34:	f7fd fb50 	bl	80401d8 <__aeabi_uldivmod>
 8042b38:	4602      	mov	r2, r0
 8042b3a:	460b      	mov	r3, r1
 8042b3c:	4613      	mov	r3, r2
 8042b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8042b40:	4b0b      	ldr	r3, [pc, #44]	; (8042b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8042b42:	685b      	ldr	r3, [r3, #4]
 8042b44:	0c1b      	lsrs	r3, r3, #16
 8042b46:	f003 0303 	and.w	r3, r3, #3
 8042b4a:	3301      	adds	r3, #1
 8042b4c:	005b      	lsls	r3, r3, #1
 8042b4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8042b50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8042b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8042b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8042b58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8042b5a:	e002      	b.n	8042b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8042b5c:	4b05      	ldr	r3, [pc, #20]	; (8042b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8042b5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8042b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8042b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8042b64:	4618      	mov	r0, r3
 8042b66:	3740      	adds	r7, #64	; 0x40
 8042b68:	46bd      	mov	sp, r7
 8042b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8042b6e:	bf00      	nop
 8042b70:	40023800 	.word	0x40023800
 8042b74:	00f42400 	.word	0x00f42400
 8042b78:	017d7840 	.word	0x017d7840

08042b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8042b7c:	b480      	push	{r7}
 8042b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8042b80:	4b03      	ldr	r3, [pc, #12]	; (8042b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8042b82:	681b      	ldr	r3, [r3, #0]
}
 8042b84:	4618      	mov	r0, r3
 8042b86:	46bd      	mov	sp, r7
 8042b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042b8c:	4770      	bx	lr
 8042b8e:	bf00      	nop
 8042b90:	20000000 	.word	0x20000000

08042b94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8042b94:	b084      	sub	sp, #16
 8042b96:	b580      	push	{r7, lr}
 8042b98:	b084      	sub	sp, #16
 8042b9a:	af00      	add	r7, sp, #0
 8042b9c:	6078      	str	r0, [r7, #4]
 8042b9e:	f107 001c 	add.w	r0, r7, #28
 8042ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8042ba6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8042baa:	2b01      	cmp	r3, #1
 8042bac:	d123      	bne.n	8042bf6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8042bae:	687b      	ldr	r3, [r7, #4]
 8042bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042bb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8042bb6:	687b      	ldr	r3, [r7, #4]
 8042bb8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8042bba:	687b      	ldr	r3, [r7, #4]
 8042bbc:	68db      	ldr	r3, [r3, #12]
 8042bbe:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8042bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8042bc6:	687a      	ldr	r2, [r7, #4]
 8042bc8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8042bca:	687b      	ldr	r3, [r7, #4]
 8042bcc:	68db      	ldr	r3, [r3, #12]
 8042bce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8042bd2:	687b      	ldr	r3, [r7, #4]
 8042bd4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8042bd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8042bda:	2b01      	cmp	r3, #1
 8042bdc:	d105      	bne.n	8042bea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8042bde:	687b      	ldr	r3, [r7, #4]
 8042be0:	68db      	ldr	r3, [r3, #12]
 8042be2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8042be6:	687b      	ldr	r3, [r7, #4]
 8042be8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8042bea:	6878      	ldr	r0, [r7, #4]
 8042bec:	f001 fae2 	bl	80441b4 <USB_CoreReset>
 8042bf0:	4603      	mov	r3, r0
 8042bf2:	73fb      	strb	r3, [r7, #15]
 8042bf4:	e01b      	b.n	8042c2e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8042bf6:	687b      	ldr	r3, [r7, #4]
 8042bf8:	68db      	ldr	r3, [r3, #12]
 8042bfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8042bfe:	687b      	ldr	r3, [r7, #4]
 8042c00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8042c02:	6878      	ldr	r0, [r7, #4]
 8042c04:	f001 fad6 	bl	80441b4 <USB_CoreReset>
 8042c08:	4603      	mov	r3, r0
 8042c0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8042c0c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8042c10:	2b00      	cmp	r3, #0
 8042c12:	d106      	bne.n	8042c22 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8042c14:	687b      	ldr	r3, [r7, #4]
 8042c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042c18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8042c1c:	687b      	ldr	r3, [r7, #4]
 8042c1e:	639a      	str	r2, [r3, #56]	; 0x38
 8042c20:	e005      	b.n	8042c2e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8042c22:	687b      	ldr	r3, [r7, #4]
 8042c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042c26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8042c2a:	687b      	ldr	r3, [r7, #4]
 8042c2c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8042c2e:	7fbb      	ldrb	r3, [r7, #30]
 8042c30:	2b01      	cmp	r3, #1
 8042c32:	d10b      	bne.n	8042c4c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8042c34:	687b      	ldr	r3, [r7, #4]
 8042c36:	689b      	ldr	r3, [r3, #8]
 8042c38:	f043 0206 	orr.w	r2, r3, #6
 8042c3c:	687b      	ldr	r3, [r7, #4]
 8042c3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8042c40:	687b      	ldr	r3, [r7, #4]
 8042c42:	689b      	ldr	r3, [r3, #8]
 8042c44:	f043 0220 	orr.w	r2, r3, #32
 8042c48:	687b      	ldr	r3, [r7, #4]
 8042c4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8042c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8042c4e:	4618      	mov	r0, r3
 8042c50:	3710      	adds	r7, #16
 8042c52:	46bd      	mov	sp, r7
 8042c54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8042c58:	b004      	add	sp, #16
 8042c5a:	4770      	bx	lr

08042c5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8042c5c:	b480      	push	{r7}
 8042c5e:	b087      	sub	sp, #28
 8042c60:	af00      	add	r7, sp, #0
 8042c62:	60f8      	str	r0, [r7, #12]
 8042c64:	60b9      	str	r1, [r7, #8]
 8042c66:	4613      	mov	r3, r2
 8042c68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8042c6a:	79fb      	ldrb	r3, [r7, #7]
 8042c6c:	2b02      	cmp	r3, #2
 8042c6e:	d165      	bne.n	8042d3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8042c70:	68bb      	ldr	r3, [r7, #8]
 8042c72:	4a41      	ldr	r2, [pc, #260]	; (8042d78 <USB_SetTurnaroundTime+0x11c>)
 8042c74:	4293      	cmp	r3, r2
 8042c76:	d906      	bls.n	8042c86 <USB_SetTurnaroundTime+0x2a>
 8042c78:	68bb      	ldr	r3, [r7, #8]
 8042c7a:	4a40      	ldr	r2, [pc, #256]	; (8042d7c <USB_SetTurnaroundTime+0x120>)
 8042c7c:	4293      	cmp	r3, r2
 8042c7e:	d202      	bcs.n	8042c86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8042c80:	230f      	movs	r3, #15
 8042c82:	617b      	str	r3, [r7, #20]
 8042c84:	e062      	b.n	8042d4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8042c86:	68bb      	ldr	r3, [r7, #8]
 8042c88:	4a3c      	ldr	r2, [pc, #240]	; (8042d7c <USB_SetTurnaroundTime+0x120>)
 8042c8a:	4293      	cmp	r3, r2
 8042c8c:	d306      	bcc.n	8042c9c <USB_SetTurnaroundTime+0x40>
 8042c8e:	68bb      	ldr	r3, [r7, #8]
 8042c90:	4a3b      	ldr	r2, [pc, #236]	; (8042d80 <USB_SetTurnaroundTime+0x124>)
 8042c92:	4293      	cmp	r3, r2
 8042c94:	d202      	bcs.n	8042c9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8042c96:	230e      	movs	r3, #14
 8042c98:	617b      	str	r3, [r7, #20]
 8042c9a:	e057      	b.n	8042d4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8042c9c:	68bb      	ldr	r3, [r7, #8]
 8042c9e:	4a38      	ldr	r2, [pc, #224]	; (8042d80 <USB_SetTurnaroundTime+0x124>)
 8042ca0:	4293      	cmp	r3, r2
 8042ca2:	d306      	bcc.n	8042cb2 <USB_SetTurnaroundTime+0x56>
 8042ca4:	68bb      	ldr	r3, [r7, #8]
 8042ca6:	4a37      	ldr	r2, [pc, #220]	; (8042d84 <USB_SetTurnaroundTime+0x128>)
 8042ca8:	4293      	cmp	r3, r2
 8042caa:	d202      	bcs.n	8042cb2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8042cac:	230d      	movs	r3, #13
 8042cae:	617b      	str	r3, [r7, #20]
 8042cb0:	e04c      	b.n	8042d4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8042cb2:	68bb      	ldr	r3, [r7, #8]
 8042cb4:	4a33      	ldr	r2, [pc, #204]	; (8042d84 <USB_SetTurnaroundTime+0x128>)
 8042cb6:	4293      	cmp	r3, r2
 8042cb8:	d306      	bcc.n	8042cc8 <USB_SetTurnaroundTime+0x6c>
 8042cba:	68bb      	ldr	r3, [r7, #8]
 8042cbc:	4a32      	ldr	r2, [pc, #200]	; (8042d88 <USB_SetTurnaroundTime+0x12c>)
 8042cbe:	4293      	cmp	r3, r2
 8042cc0:	d802      	bhi.n	8042cc8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8042cc2:	230c      	movs	r3, #12
 8042cc4:	617b      	str	r3, [r7, #20]
 8042cc6:	e041      	b.n	8042d4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8042cc8:	68bb      	ldr	r3, [r7, #8]
 8042cca:	4a2f      	ldr	r2, [pc, #188]	; (8042d88 <USB_SetTurnaroundTime+0x12c>)
 8042ccc:	4293      	cmp	r3, r2
 8042cce:	d906      	bls.n	8042cde <USB_SetTurnaroundTime+0x82>
 8042cd0:	68bb      	ldr	r3, [r7, #8]
 8042cd2:	4a2e      	ldr	r2, [pc, #184]	; (8042d8c <USB_SetTurnaroundTime+0x130>)
 8042cd4:	4293      	cmp	r3, r2
 8042cd6:	d802      	bhi.n	8042cde <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8042cd8:	230b      	movs	r3, #11
 8042cda:	617b      	str	r3, [r7, #20]
 8042cdc:	e036      	b.n	8042d4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8042cde:	68bb      	ldr	r3, [r7, #8]
 8042ce0:	4a2a      	ldr	r2, [pc, #168]	; (8042d8c <USB_SetTurnaroundTime+0x130>)
 8042ce2:	4293      	cmp	r3, r2
 8042ce4:	d906      	bls.n	8042cf4 <USB_SetTurnaroundTime+0x98>
 8042ce6:	68bb      	ldr	r3, [r7, #8]
 8042ce8:	4a29      	ldr	r2, [pc, #164]	; (8042d90 <USB_SetTurnaroundTime+0x134>)
 8042cea:	4293      	cmp	r3, r2
 8042cec:	d802      	bhi.n	8042cf4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8042cee:	230a      	movs	r3, #10
 8042cf0:	617b      	str	r3, [r7, #20]
 8042cf2:	e02b      	b.n	8042d4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8042cf4:	68bb      	ldr	r3, [r7, #8]
 8042cf6:	4a26      	ldr	r2, [pc, #152]	; (8042d90 <USB_SetTurnaroundTime+0x134>)
 8042cf8:	4293      	cmp	r3, r2
 8042cfa:	d906      	bls.n	8042d0a <USB_SetTurnaroundTime+0xae>
 8042cfc:	68bb      	ldr	r3, [r7, #8]
 8042cfe:	4a25      	ldr	r2, [pc, #148]	; (8042d94 <USB_SetTurnaroundTime+0x138>)
 8042d00:	4293      	cmp	r3, r2
 8042d02:	d202      	bcs.n	8042d0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8042d04:	2309      	movs	r3, #9
 8042d06:	617b      	str	r3, [r7, #20]
 8042d08:	e020      	b.n	8042d4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8042d0a:	68bb      	ldr	r3, [r7, #8]
 8042d0c:	4a21      	ldr	r2, [pc, #132]	; (8042d94 <USB_SetTurnaroundTime+0x138>)
 8042d0e:	4293      	cmp	r3, r2
 8042d10:	d306      	bcc.n	8042d20 <USB_SetTurnaroundTime+0xc4>
 8042d12:	68bb      	ldr	r3, [r7, #8]
 8042d14:	4a20      	ldr	r2, [pc, #128]	; (8042d98 <USB_SetTurnaroundTime+0x13c>)
 8042d16:	4293      	cmp	r3, r2
 8042d18:	d802      	bhi.n	8042d20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8042d1a:	2308      	movs	r3, #8
 8042d1c:	617b      	str	r3, [r7, #20]
 8042d1e:	e015      	b.n	8042d4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8042d20:	68bb      	ldr	r3, [r7, #8]
 8042d22:	4a1d      	ldr	r2, [pc, #116]	; (8042d98 <USB_SetTurnaroundTime+0x13c>)
 8042d24:	4293      	cmp	r3, r2
 8042d26:	d906      	bls.n	8042d36 <USB_SetTurnaroundTime+0xda>
 8042d28:	68bb      	ldr	r3, [r7, #8]
 8042d2a:	4a1c      	ldr	r2, [pc, #112]	; (8042d9c <USB_SetTurnaroundTime+0x140>)
 8042d2c:	4293      	cmp	r3, r2
 8042d2e:	d202      	bcs.n	8042d36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8042d30:	2307      	movs	r3, #7
 8042d32:	617b      	str	r3, [r7, #20]
 8042d34:	e00a      	b.n	8042d4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8042d36:	2306      	movs	r3, #6
 8042d38:	617b      	str	r3, [r7, #20]
 8042d3a:	e007      	b.n	8042d4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8042d3c:	79fb      	ldrb	r3, [r7, #7]
 8042d3e:	2b00      	cmp	r3, #0
 8042d40:	d102      	bne.n	8042d48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8042d42:	2309      	movs	r3, #9
 8042d44:	617b      	str	r3, [r7, #20]
 8042d46:	e001      	b.n	8042d4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8042d48:	2309      	movs	r3, #9
 8042d4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8042d4c:	68fb      	ldr	r3, [r7, #12]
 8042d4e:	68db      	ldr	r3, [r3, #12]
 8042d50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8042d54:	68fb      	ldr	r3, [r7, #12]
 8042d56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8042d58:	68fb      	ldr	r3, [r7, #12]
 8042d5a:	68da      	ldr	r2, [r3, #12]
 8042d5c:	697b      	ldr	r3, [r7, #20]
 8042d5e:	029b      	lsls	r3, r3, #10
 8042d60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8042d64:	431a      	orrs	r2, r3
 8042d66:	68fb      	ldr	r3, [r7, #12]
 8042d68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8042d6a:	2300      	movs	r3, #0
}
 8042d6c:	4618      	mov	r0, r3
 8042d6e:	371c      	adds	r7, #28
 8042d70:	46bd      	mov	sp, r7
 8042d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042d76:	4770      	bx	lr
 8042d78:	00d8acbf 	.word	0x00d8acbf
 8042d7c:	00e4e1c0 	.word	0x00e4e1c0
 8042d80:	00f42400 	.word	0x00f42400
 8042d84:	01067380 	.word	0x01067380
 8042d88:	011a499f 	.word	0x011a499f
 8042d8c:	01312cff 	.word	0x01312cff
 8042d90:	014ca43f 	.word	0x014ca43f
 8042d94:	016e3600 	.word	0x016e3600
 8042d98:	01a6ab1f 	.word	0x01a6ab1f
 8042d9c:	01e84800 	.word	0x01e84800

08042da0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8042da0:	b480      	push	{r7}
 8042da2:	b083      	sub	sp, #12
 8042da4:	af00      	add	r7, sp, #0
 8042da6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8042da8:	687b      	ldr	r3, [r7, #4]
 8042daa:	689b      	ldr	r3, [r3, #8]
 8042dac:	f043 0201 	orr.w	r2, r3, #1
 8042db0:	687b      	ldr	r3, [r7, #4]
 8042db2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8042db4:	2300      	movs	r3, #0
}
 8042db6:	4618      	mov	r0, r3
 8042db8:	370c      	adds	r7, #12
 8042dba:	46bd      	mov	sp, r7
 8042dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042dc0:	4770      	bx	lr

08042dc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8042dc2:	b480      	push	{r7}
 8042dc4:	b083      	sub	sp, #12
 8042dc6:	af00      	add	r7, sp, #0
 8042dc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8042dca:	687b      	ldr	r3, [r7, #4]
 8042dcc:	689b      	ldr	r3, [r3, #8]
 8042dce:	f023 0201 	bic.w	r2, r3, #1
 8042dd2:	687b      	ldr	r3, [r7, #4]
 8042dd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8042dd6:	2300      	movs	r3, #0
}
 8042dd8:	4618      	mov	r0, r3
 8042dda:	370c      	adds	r7, #12
 8042ddc:	46bd      	mov	sp, r7
 8042dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042de2:	4770      	bx	lr

08042de4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8042de4:	b580      	push	{r7, lr}
 8042de6:	b084      	sub	sp, #16
 8042de8:	af00      	add	r7, sp, #0
 8042dea:	6078      	str	r0, [r7, #4]
 8042dec:	460b      	mov	r3, r1
 8042dee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8042df0:	2300      	movs	r3, #0
 8042df2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8042df4:	687b      	ldr	r3, [r7, #4]
 8042df6:	68db      	ldr	r3, [r3, #12]
 8042df8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8042dfc:	687b      	ldr	r3, [r7, #4]
 8042dfe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8042e00:	78fb      	ldrb	r3, [r7, #3]
 8042e02:	2b01      	cmp	r3, #1
 8042e04:	d115      	bne.n	8042e32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8042e06:	687b      	ldr	r3, [r7, #4]
 8042e08:	68db      	ldr	r3, [r3, #12]
 8042e0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8042e0e:	687b      	ldr	r3, [r7, #4]
 8042e10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8042e12:	200a      	movs	r0, #10
 8042e14:	f7fd fd50 	bl	80408b8 <HAL_Delay>
      ms += 10U;
 8042e18:	68fb      	ldr	r3, [r7, #12]
 8042e1a:	330a      	adds	r3, #10
 8042e1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8042e1e:	6878      	ldr	r0, [r7, #4]
 8042e20:	f001 f939 	bl	8044096 <USB_GetMode>
 8042e24:	4603      	mov	r3, r0
 8042e26:	2b01      	cmp	r3, #1
 8042e28:	d01e      	beq.n	8042e68 <USB_SetCurrentMode+0x84>
 8042e2a:	68fb      	ldr	r3, [r7, #12]
 8042e2c:	2bc7      	cmp	r3, #199	; 0xc7
 8042e2e:	d9f0      	bls.n	8042e12 <USB_SetCurrentMode+0x2e>
 8042e30:	e01a      	b.n	8042e68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8042e32:	78fb      	ldrb	r3, [r7, #3]
 8042e34:	2b00      	cmp	r3, #0
 8042e36:	d115      	bne.n	8042e64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8042e38:	687b      	ldr	r3, [r7, #4]
 8042e3a:	68db      	ldr	r3, [r3, #12]
 8042e3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8042e40:	687b      	ldr	r3, [r7, #4]
 8042e42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8042e44:	200a      	movs	r0, #10
 8042e46:	f7fd fd37 	bl	80408b8 <HAL_Delay>
      ms += 10U;
 8042e4a:	68fb      	ldr	r3, [r7, #12]
 8042e4c:	330a      	adds	r3, #10
 8042e4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8042e50:	6878      	ldr	r0, [r7, #4]
 8042e52:	f001 f920 	bl	8044096 <USB_GetMode>
 8042e56:	4603      	mov	r3, r0
 8042e58:	2b00      	cmp	r3, #0
 8042e5a:	d005      	beq.n	8042e68 <USB_SetCurrentMode+0x84>
 8042e5c:	68fb      	ldr	r3, [r7, #12]
 8042e5e:	2bc7      	cmp	r3, #199	; 0xc7
 8042e60:	d9f0      	bls.n	8042e44 <USB_SetCurrentMode+0x60>
 8042e62:	e001      	b.n	8042e68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8042e64:	2301      	movs	r3, #1
 8042e66:	e005      	b.n	8042e74 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8042e68:	68fb      	ldr	r3, [r7, #12]
 8042e6a:	2bc8      	cmp	r3, #200	; 0xc8
 8042e6c:	d101      	bne.n	8042e72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8042e6e:	2301      	movs	r3, #1
 8042e70:	e000      	b.n	8042e74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8042e72:	2300      	movs	r3, #0
}
 8042e74:	4618      	mov	r0, r3
 8042e76:	3710      	adds	r7, #16
 8042e78:	46bd      	mov	sp, r7
 8042e7a:	bd80      	pop	{r7, pc}

08042e7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8042e7c:	b084      	sub	sp, #16
 8042e7e:	b580      	push	{r7, lr}
 8042e80:	b086      	sub	sp, #24
 8042e82:	af00      	add	r7, sp, #0
 8042e84:	6078      	str	r0, [r7, #4]
 8042e86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8042e8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8042e8e:	2300      	movs	r3, #0
 8042e90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042e92:	687b      	ldr	r3, [r7, #4]
 8042e94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8042e96:	2300      	movs	r3, #0
 8042e98:	613b      	str	r3, [r7, #16]
 8042e9a:	e009      	b.n	8042eb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8042e9c:	687a      	ldr	r2, [r7, #4]
 8042e9e:	693b      	ldr	r3, [r7, #16]
 8042ea0:	3340      	adds	r3, #64	; 0x40
 8042ea2:	009b      	lsls	r3, r3, #2
 8042ea4:	4413      	add	r3, r2
 8042ea6:	2200      	movs	r2, #0
 8042ea8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8042eaa:	693b      	ldr	r3, [r7, #16]
 8042eac:	3301      	adds	r3, #1
 8042eae:	613b      	str	r3, [r7, #16]
 8042eb0:	693b      	ldr	r3, [r7, #16]
 8042eb2:	2b0e      	cmp	r3, #14
 8042eb4:	d9f2      	bls.n	8042e9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8042eb6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8042eba:	2b00      	cmp	r3, #0
 8042ebc:	d11c      	bne.n	8042ef8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8042ebe:	68fb      	ldr	r3, [r7, #12]
 8042ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8042ec4:	685b      	ldr	r3, [r3, #4]
 8042ec6:	68fa      	ldr	r2, [r7, #12]
 8042ec8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8042ecc:	f043 0302 	orr.w	r3, r3, #2
 8042ed0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8042ed2:	687b      	ldr	r3, [r7, #4]
 8042ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042ed6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8042eda:	687b      	ldr	r3, [r7, #4]
 8042edc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8042ede:	687b      	ldr	r3, [r7, #4]
 8042ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042ee2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8042ee6:	687b      	ldr	r3, [r7, #4]
 8042ee8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8042eea:	687b      	ldr	r3, [r7, #4]
 8042eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042eee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8042ef2:	687b      	ldr	r3, [r7, #4]
 8042ef4:	639a      	str	r2, [r3, #56]	; 0x38
 8042ef6:	e00b      	b.n	8042f10 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8042ef8:	687b      	ldr	r3, [r7, #4]
 8042efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042efc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8042f00:	687b      	ldr	r3, [r7, #4]
 8042f02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8042f04:	687b      	ldr	r3, [r7, #4]
 8042f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042f08:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8042f0c:	687b      	ldr	r3, [r7, #4]
 8042f0e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8042f10:	68fb      	ldr	r3, [r7, #12]
 8042f12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8042f16:	461a      	mov	r2, r3
 8042f18:	2300      	movs	r3, #0
 8042f1a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8042f1c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8042f20:	2b01      	cmp	r3, #1
 8042f22:	d10d      	bne.n	8042f40 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8042f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8042f28:	2b00      	cmp	r3, #0
 8042f2a:	d104      	bne.n	8042f36 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8042f2c:	2100      	movs	r1, #0
 8042f2e:	6878      	ldr	r0, [r7, #4]
 8042f30:	f000 f968 	bl	8043204 <USB_SetDevSpeed>
 8042f34:	e008      	b.n	8042f48 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8042f36:	2101      	movs	r1, #1
 8042f38:	6878      	ldr	r0, [r7, #4]
 8042f3a:	f000 f963 	bl	8043204 <USB_SetDevSpeed>
 8042f3e:	e003      	b.n	8042f48 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8042f40:	2103      	movs	r1, #3
 8042f42:	6878      	ldr	r0, [r7, #4]
 8042f44:	f000 f95e 	bl	8043204 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8042f48:	2110      	movs	r1, #16
 8042f4a:	6878      	ldr	r0, [r7, #4]
 8042f4c:	f000 f8fa 	bl	8043144 <USB_FlushTxFifo>
 8042f50:	4603      	mov	r3, r0
 8042f52:	2b00      	cmp	r3, #0
 8042f54:	d001      	beq.n	8042f5a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8042f56:	2301      	movs	r3, #1
 8042f58:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8042f5a:	6878      	ldr	r0, [r7, #4]
 8042f5c:	f000 f924 	bl	80431a8 <USB_FlushRxFifo>
 8042f60:	4603      	mov	r3, r0
 8042f62:	2b00      	cmp	r3, #0
 8042f64:	d001      	beq.n	8042f6a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8042f66:	2301      	movs	r3, #1
 8042f68:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8042f6a:	68fb      	ldr	r3, [r7, #12]
 8042f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8042f70:	461a      	mov	r2, r3
 8042f72:	2300      	movs	r3, #0
 8042f74:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8042f76:	68fb      	ldr	r3, [r7, #12]
 8042f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8042f7c:	461a      	mov	r2, r3
 8042f7e:	2300      	movs	r3, #0
 8042f80:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8042f82:	68fb      	ldr	r3, [r7, #12]
 8042f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8042f88:	461a      	mov	r2, r3
 8042f8a:	2300      	movs	r3, #0
 8042f8c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8042f8e:	2300      	movs	r3, #0
 8042f90:	613b      	str	r3, [r7, #16]
 8042f92:	e043      	b.n	804301c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8042f94:	693b      	ldr	r3, [r7, #16]
 8042f96:	015a      	lsls	r2, r3, #5
 8042f98:	68fb      	ldr	r3, [r7, #12]
 8042f9a:	4413      	add	r3, r2
 8042f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8042fa0:	681b      	ldr	r3, [r3, #0]
 8042fa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8042fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8042faa:	d118      	bne.n	8042fde <USB_DevInit+0x162>
    {
      if (i == 0U)
 8042fac:	693b      	ldr	r3, [r7, #16]
 8042fae:	2b00      	cmp	r3, #0
 8042fb0:	d10a      	bne.n	8042fc8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8042fb2:	693b      	ldr	r3, [r7, #16]
 8042fb4:	015a      	lsls	r2, r3, #5
 8042fb6:	68fb      	ldr	r3, [r7, #12]
 8042fb8:	4413      	add	r3, r2
 8042fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8042fbe:	461a      	mov	r2, r3
 8042fc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8042fc4:	6013      	str	r3, [r2, #0]
 8042fc6:	e013      	b.n	8042ff0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8042fc8:	693b      	ldr	r3, [r7, #16]
 8042fca:	015a      	lsls	r2, r3, #5
 8042fcc:	68fb      	ldr	r3, [r7, #12]
 8042fce:	4413      	add	r3, r2
 8042fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8042fd4:	461a      	mov	r2, r3
 8042fd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8042fda:	6013      	str	r3, [r2, #0]
 8042fdc:	e008      	b.n	8042ff0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8042fde:	693b      	ldr	r3, [r7, #16]
 8042fe0:	015a      	lsls	r2, r3, #5
 8042fe2:	68fb      	ldr	r3, [r7, #12]
 8042fe4:	4413      	add	r3, r2
 8042fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8042fea:	461a      	mov	r2, r3
 8042fec:	2300      	movs	r3, #0
 8042fee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8042ff0:	693b      	ldr	r3, [r7, #16]
 8042ff2:	015a      	lsls	r2, r3, #5
 8042ff4:	68fb      	ldr	r3, [r7, #12]
 8042ff6:	4413      	add	r3, r2
 8042ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8042ffc:	461a      	mov	r2, r3
 8042ffe:	2300      	movs	r3, #0
 8043000:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8043002:	693b      	ldr	r3, [r7, #16]
 8043004:	015a      	lsls	r2, r3, #5
 8043006:	68fb      	ldr	r3, [r7, #12]
 8043008:	4413      	add	r3, r2
 804300a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 804300e:	461a      	mov	r2, r3
 8043010:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8043014:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8043016:	693b      	ldr	r3, [r7, #16]
 8043018:	3301      	adds	r3, #1
 804301a:	613b      	str	r3, [r7, #16]
 804301c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8043020:	461a      	mov	r2, r3
 8043022:	693b      	ldr	r3, [r7, #16]
 8043024:	4293      	cmp	r3, r2
 8043026:	d3b5      	bcc.n	8042f94 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8043028:	2300      	movs	r3, #0
 804302a:	613b      	str	r3, [r7, #16]
 804302c:	e043      	b.n	80430b6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 804302e:	693b      	ldr	r3, [r7, #16]
 8043030:	015a      	lsls	r2, r3, #5
 8043032:	68fb      	ldr	r3, [r7, #12]
 8043034:	4413      	add	r3, r2
 8043036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804303a:	681b      	ldr	r3, [r3, #0]
 804303c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8043040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8043044:	d118      	bne.n	8043078 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8043046:	693b      	ldr	r3, [r7, #16]
 8043048:	2b00      	cmp	r3, #0
 804304a:	d10a      	bne.n	8043062 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 804304c:	693b      	ldr	r3, [r7, #16]
 804304e:	015a      	lsls	r2, r3, #5
 8043050:	68fb      	ldr	r3, [r7, #12]
 8043052:	4413      	add	r3, r2
 8043054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043058:	461a      	mov	r2, r3
 804305a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 804305e:	6013      	str	r3, [r2, #0]
 8043060:	e013      	b.n	804308a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8043062:	693b      	ldr	r3, [r7, #16]
 8043064:	015a      	lsls	r2, r3, #5
 8043066:	68fb      	ldr	r3, [r7, #12]
 8043068:	4413      	add	r3, r2
 804306a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804306e:	461a      	mov	r2, r3
 8043070:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8043074:	6013      	str	r3, [r2, #0]
 8043076:	e008      	b.n	804308a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8043078:	693b      	ldr	r3, [r7, #16]
 804307a:	015a      	lsls	r2, r3, #5
 804307c:	68fb      	ldr	r3, [r7, #12]
 804307e:	4413      	add	r3, r2
 8043080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043084:	461a      	mov	r2, r3
 8043086:	2300      	movs	r3, #0
 8043088:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 804308a:	693b      	ldr	r3, [r7, #16]
 804308c:	015a      	lsls	r2, r3, #5
 804308e:	68fb      	ldr	r3, [r7, #12]
 8043090:	4413      	add	r3, r2
 8043092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043096:	461a      	mov	r2, r3
 8043098:	2300      	movs	r3, #0
 804309a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 804309c:	693b      	ldr	r3, [r7, #16]
 804309e:	015a      	lsls	r2, r3, #5
 80430a0:	68fb      	ldr	r3, [r7, #12]
 80430a2:	4413      	add	r3, r2
 80430a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80430a8:	461a      	mov	r2, r3
 80430aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80430ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80430b0:	693b      	ldr	r3, [r7, #16]
 80430b2:	3301      	adds	r3, #1
 80430b4:	613b      	str	r3, [r7, #16]
 80430b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80430ba:	461a      	mov	r2, r3
 80430bc:	693b      	ldr	r3, [r7, #16]
 80430be:	4293      	cmp	r3, r2
 80430c0:	d3b5      	bcc.n	804302e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80430c2:	68fb      	ldr	r3, [r7, #12]
 80430c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80430c8:	691b      	ldr	r3, [r3, #16]
 80430ca:	68fa      	ldr	r2, [r7, #12]
 80430cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80430d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80430d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80430d6:	687b      	ldr	r3, [r7, #4]
 80430d8:	2200      	movs	r2, #0
 80430da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80430dc:	687b      	ldr	r3, [r7, #4]
 80430de:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80430e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80430e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80430e8:	2b00      	cmp	r3, #0
 80430ea:	d105      	bne.n	80430f8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80430ec:	687b      	ldr	r3, [r7, #4]
 80430ee:	699b      	ldr	r3, [r3, #24]
 80430f0:	f043 0210 	orr.w	r2, r3, #16
 80430f4:	687b      	ldr	r3, [r7, #4]
 80430f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80430f8:	687b      	ldr	r3, [r7, #4]
 80430fa:	699a      	ldr	r2, [r3, #24]
 80430fc:	4b10      	ldr	r3, [pc, #64]	; (8043140 <USB_DevInit+0x2c4>)
 80430fe:	4313      	orrs	r3, r2
 8043100:	687a      	ldr	r2, [r7, #4]
 8043102:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8043104:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8043108:	2b00      	cmp	r3, #0
 804310a:	d005      	beq.n	8043118 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 804310c:	687b      	ldr	r3, [r7, #4]
 804310e:	699b      	ldr	r3, [r3, #24]
 8043110:	f043 0208 	orr.w	r2, r3, #8
 8043114:	687b      	ldr	r3, [r7, #4]
 8043116:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8043118:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 804311c:	2b01      	cmp	r3, #1
 804311e:	d107      	bne.n	8043130 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8043120:	687b      	ldr	r3, [r7, #4]
 8043122:	699b      	ldr	r3, [r3, #24]
 8043124:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8043128:	f043 0304 	orr.w	r3, r3, #4
 804312c:	687a      	ldr	r2, [r7, #4]
 804312e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8043130:	7dfb      	ldrb	r3, [r7, #23]
}
 8043132:	4618      	mov	r0, r3
 8043134:	3718      	adds	r7, #24
 8043136:	46bd      	mov	sp, r7
 8043138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 804313c:	b004      	add	sp, #16
 804313e:	4770      	bx	lr
 8043140:	803c3800 	.word	0x803c3800

08043144 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8043144:	b480      	push	{r7}
 8043146:	b085      	sub	sp, #20
 8043148:	af00      	add	r7, sp, #0
 804314a:	6078      	str	r0, [r7, #4]
 804314c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 804314e:	2300      	movs	r3, #0
 8043150:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8043152:	68fb      	ldr	r3, [r7, #12]
 8043154:	3301      	adds	r3, #1
 8043156:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8043158:	68fb      	ldr	r3, [r7, #12]
 804315a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 804315e:	d901      	bls.n	8043164 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8043160:	2303      	movs	r3, #3
 8043162:	e01b      	b.n	804319c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8043164:	687b      	ldr	r3, [r7, #4]
 8043166:	691b      	ldr	r3, [r3, #16]
 8043168:	2b00      	cmp	r3, #0
 804316a:	daf2      	bge.n	8043152 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 804316c:	2300      	movs	r3, #0
 804316e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8043170:	683b      	ldr	r3, [r7, #0]
 8043172:	019b      	lsls	r3, r3, #6
 8043174:	f043 0220 	orr.w	r2, r3, #32
 8043178:	687b      	ldr	r3, [r7, #4]
 804317a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 804317c:	68fb      	ldr	r3, [r7, #12]
 804317e:	3301      	adds	r3, #1
 8043180:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8043182:	68fb      	ldr	r3, [r7, #12]
 8043184:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8043188:	d901      	bls.n	804318e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 804318a:	2303      	movs	r3, #3
 804318c:	e006      	b.n	804319c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 804318e:	687b      	ldr	r3, [r7, #4]
 8043190:	691b      	ldr	r3, [r3, #16]
 8043192:	f003 0320 	and.w	r3, r3, #32
 8043196:	2b20      	cmp	r3, #32
 8043198:	d0f0      	beq.n	804317c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 804319a:	2300      	movs	r3, #0
}
 804319c:	4618      	mov	r0, r3
 804319e:	3714      	adds	r7, #20
 80431a0:	46bd      	mov	sp, r7
 80431a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80431a6:	4770      	bx	lr

080431a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80431a8:	b480      	push	{r7}
 80431aa:	b085      	sub	sp, #20
 80431ac:	af00      	add	r7, sp, #0
 80431ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80431b0:	2300      	movs	r3, #0
 80431b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80431b4:	68fb      	ldr	r3, [r7, #12]
 80431b6:	3301      	adds	r3, #1
 80431b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80431ba:	68fb      	ldr	r3, [r7, #12]
 80431bc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80431c0:	d901      	bls.n	80431c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80431c2:	2303      	movs	r3, #3
 80431c4:	e018      	b.n	80431f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80431c6:	687b      	ldr	r3, [r7, #4]
 80431c8:	691b      	ldr	r3, [r3, #16]
 80431ca:	2b00      	cmp	r3, #0
 80431cc:	daf2      	bge.n	80431b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80431ce:	2300      	movs	r3, #0
 80431d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80431d2:	687b      	ldr	r3, [r7, #4]
 80431d4:	2210      	movs	r2, #16
 80431d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80431d8:	68fb      	ldr	r3, [r7, #12]
 80431da:	3301      	adds	r3, #1
 80431dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80431de:	68fb      	ldr	r3, [r7, #12]
 80431e0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80431e4:	d901      	bls.n	80431ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80431e6:	2303      	movs	r3, #3
 80431e8:	e006      	b.n	80431f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80431ea:	687b      	ldr	r3, [r7, #4]
 80431ec:	691b      	ldr	r3, [r3, #16]
 80431ee:	f003 0310 	and.w	r3, r3, #16
 80431f2:	2b10      	cmp	r3, #16
 80431f4:	d0f0      	beq.n	80431d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80431f6:	2300      	movs	r3, #0
}
 80431f8:	4618      	mov	r0, r3
 80431fa:	3714      	adds	r7, #20
 80431fc:	46bd      	mov	sp, r7
 80431fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043202:	4770      	bx	lr

08043204 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8043204:	b480      	push	{r7}
 8043206:	b085      	sub	sp, #20
 8043208:	af00      	add	r7, sp, #0
 804320a:	6078      	str	r0, [r7, #4]
 804320c:	460b      	mov	r3, r1
 804320e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043210:	687b      	ldr	r3, [r7, #4]
 8043212:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8043214:	68fb      	ldr	r3, [r7, #12]
 8043216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 804321a:	681a      	ldr	r2, [r3, #0]
 804321c:	78fb      	ldrb	r3, [r7, #3]
 804321e:	68f9      	ldr	r1, [r7, #12]
 8043220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8043224:	4313      	orrs	r3, r2
 8043226:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8043228:	2300      	movs	r3, #0
}
 804322a:	4618      	mov	r0, r3
 804322c:	3714      	adds	r7, #20
 804322e:	46bd      	mov	sp, r7
 8043230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043234:	4770      	bx	lr

08043236 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8043236:	b480      	push	{r7}
 8043238:	b087      	sub	sp, #28
 804323a:	af00      	add	r7, sp, #0
 804323c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804323e:	687b      	ldr	r3, [r7, #4]
 8043240:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8043242:	693b      	ldr	r3, [r7, #16]
 8043244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8043248:	689b      	ldr	r3, [r3, #8]
 804324a:	f003 0306 	and.w	r3, r3, #6
 804324e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8043250:	68fb      	ldr	r3, [r7, #12]
 8043252:	2b00      	cmp	r3, #0
 8043254:	d102      	bne.n	804325c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8043256:	2300      	movs	r3, #0
 8043258:	75fb      	strb	r3, [r7, #23]
 804325a:	e00a      	b.n	8043272 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 804325c:	68fb      	ldr	r3, [r7, #12]
 804325e:	2b02      	cmp	r3, #2
 8043260:	d002      	beq.n	8043268 <USB_GetDevSpeed+0x32>
 8043262:	68fb      	ldr	r3, [r7, #12]
 8043264:	2b06      	cmp	r3, #6
 8043266:	d102      	bne.n	804326e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8043268:	2302      	movs	r3, #2
 804326a:	75fb      	strb	r3, [r7, #23]
 804326c:	e001      	b.n	8043272 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 804326e:	230f      	movs	r3, #15
 8043270:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8043272:	7dfb      	ldrb	r3, [r7, #23]
}
 8043274:	4618      	mov	r0, r3
 8043276:	371c      	adds	r7, #28
 8043278:	46bd      	mov	sp, r7
 804327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804327e:	4770      	bx	lr

08043280 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8043280:	b480      	push	{r7}
 8043282:	b085      	sub	sp, #20
 8043284:	af00      	add	r7, sp, #0
 8043286:	6078      	str	r0, [r7, #4]
 8043288:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804328a:	687b      	ldr	r3, [r7, #4]
 804328c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 804328e:	683b      	ldr	r3, [r7, #0]
 8043290:	781b      	ldrb	r3, [r3, #0]
 8043292:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8043294:	683b      	ldr	r3, [r7, #0]
 8043296:	785b      	ldrb	r3, [r3, #1]
 8043298:	2b01      	cmp	r3, #1
 804329a:	d13a      	bne.n	8043312 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 804329c:	68fb      	ldr	r3, [r7, #12]
 804329e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80432a2:	69da      	ldr	r2, [r3, #28]
 80432a4:	683b      	ldr	r3, [r7, #0]
 80432a6:	781b      	ldrb	r3, [r3, #0]
 80432a8:	f003 030f 	and.w	r3, r3, #15
 80432ac:	2101      	movs	r1, #1
 80432ae:	fa01 f303 	lsl.w	r3, r1, r3
 80432b2:	b29b      	uxth	r3, r3
 80432b4:	68f9      	ldr	r1, [r7, #12]
 80432b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80432ba:	4313      	orrs	r3, r2
 80432bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80432be:	68bb      	ldr	r3, [r7, #8]
 80432c0:	015a      	lsls	r2, r3, #5
 80432c2:	68fb      	ldr	r3, [r7, #12]
 80432c4:	4413      	add	r3, r2
 80432c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80432ca:	681b      	ldr	r3, [r3, #0]
 80432cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80432d0:	2b00      	cmp	r3, #0
 80432d2:	d155      	bne.n	8043380 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80432d4:	68bb      	ldr	r3, [r7, #8]
 80432d6:	015a      	lsls	r2, r3, #5
 80432d8:	68fb      	ldr	r3, [r7, #12]
 80432da:	4413      	add	r3, r2
 80432dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80432e0:	681a      	ldr	r2, [r3, #0]
 80432e2:	683b      	ldr	r3, [r7, #0]
 80432e4:	689b      	ldr	r3, [r3, #8]
 80432e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80432ea:	683b      	ldr	r3, [r7, #0]
 80432ec:	791b      	ldrb	r3, [r3, #4]
 80432ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80432f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80432f2:	68bb      	ldr	r3, [r7, #8]
 80432f4:	059b      	lsls	r3, r3, #22
 80432f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80432f8:	4313      	orrs	r3, r2
 80432fa:	68ba      	ldr	r2, [r7, #8]
 80432fc:	0151      	lsls	r1, r2, #5
 80432fe:	68fa      	ldr	r2, [r7, #12]
 8043300:	440a      	add	r2, r1
 8043302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8043306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804330a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 804330e:	6013      	str	r3, [r2, #0]
 8043310:	e036      	b.n	8043380 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8043312:	68fb      	ldr	r3, [r7, #12]
 8043314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8043318:	69da      	ldr	r2, [r3, #28]
 804331a:	683b      	ldr	r3, [r7, #0]
 804331c:	781b      	ldrb	r3, [r3, #0]
 804331e:	f003 030f 	and.w	r3, r3, #15
 8043322:	2101      	movs	r1, #1
 8043324:	fa01 f303 	lsl.w	r3, r1, r3
 8043328:	041b      	lsls	r3, r3, #16
 804332a:	68f9      	ldr	r1, [r7, #12]
 804332c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8043330:	4313      	orrs	r3, r2
 8043332:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8043334:	68bb      	ldr	r3, [r7, #8]
 8043336:	015a      	lsls	r2, r3, #5
 8043338:	68fb      	ldr	r3, [r7, #12]
 804333a:	4413      	add	r3, r2
 804333c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043340:	681b      	ldr	r3, [r3, #0]
 8043342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8043346:	2b00      	cmp	r3, #0
 8043348:	d11a      	bne.n	8043380 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 804334a:	68bb      	ldr	r3, [r7, #8]
 804334c:	015a      	lsls	r2, r3, #5
 804334e:	68fb      	ldr	r3, [r7, #12]
 8043350:	4413      	add	r3, r2
 8043352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043356:	681a      	ldr	r2, [r3, #0]
 8043358:	683b      	ldr	r3, [r7, #0]
 804335a:	689b      	ldr	r3, [r3, #8]
 804335c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8043360:	683b      	ldr	r3, [r7, #0]
 8043362:	791b      	ldrb	r3, [r3, #4]
 8043364:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8043366:	430b      	orrs	r3, r1
 8043368:	4313      	orrs	r3, r2
 804336a:	68ba      	ldr	r2, [r7, #8]
 804336c:	0151      	lsls	r1, r2, #5
 804336e:	68fa      	ldr	r2, [r7, #12]
 8043370:	440a      	add	r2, r1
 8043372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8043376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804337a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 804337e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8043380:	2300      	movs	r3, #0
}
 8043382:	4618      	mov	r0, r3
 8043384:	3714      	adds	r7, #20
 8043386:	46bd      	mov	sp, r7
 8043388:	f85d 7b04 	ldr.w	r7, [sp], #4
 804338c:	4770      	bx	lr
	...

08043390 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8043390:	b480      	push	{r7}
 8043392:	b085      	sub	sp, #20
 8043394:	af00      	add	r7, sp, #0
 8043396:	6078      	str	r0, [r7, #4]
 8043398:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804339a:	687b      	ldr	r3, [r7, #4]
 804339c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 804339e:	683b      	ldr	r3, [r7, #0]
 80433a0:	781b      	ldrb	r3, [r3, #0]
 80433a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80433a4:	683b      	ldr	r3, [r7, #0]
 80433a6:	785b      	ldrb	r3, [r3, #1]
 80433a8:	2b01      	cmp	r3, #1
 80433aa:	d161      	bne.n	8043470 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80433ac:	68bb      	ldr	r3, [r7, #8]
 80433ae:	015a      	lsls	r2, r3, #5
 80433b0:	68fb      	ldr	r3, [r7, #12]
 80433b2:	4413      	add	r3, r2
 80433b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80433b8:	681b      	ldr	r3, [r3, #0]
 80433ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80433be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80433c2:	d11f      	bne.n	8043404 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80433c4:	68bb      	ldr	r3, [r7, #8]
 80433c6:	015a      	lsls	r2, r3, #5
 80433c8:	68fb      	ldr	r3, [r7, #12]
 80433ca:	4413      	add	r3, r2
 80433cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80433d0:	681b      	ldr	r3, [r3, #0]
 80433d2:	68ba      	ldr	r2, [r7, #8]
 80433d4:	0151      	lsls	r1, r2, #5
 80433d6:	68fa      	ldr	r2, [r7, #12]
 80433d8:	440a      	add	r2, r1
 80433da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80433de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80433e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80433e4:	68bb      	ldr	r3, [r7, #8]
 80433e6:	015a      	lsls	r2, r3, #5
 80433e8:	68fb      	ldr	r3, [r7, #12]
 80433ea:	4413      	add	r3, r2
 80433ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80433f0:	681b      	ldr	r3, [r3, #0]
 80433f2:	68ba      	ldr	r2, [r7, #8]
 80433f4:	0151      	lsls	r1, r2, #5
 80433f6:	68fa      	ldr	r2, [r7, #12]
 80433f8:	440a      	add	r2, r1
 80433fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80433fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8043402:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8043404:	68fb      	ldr	r3, [r7, #12]
 8043406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 804340a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 804340c:	683b      	ldr	r3, [r7, #0]
 804340e:	781b      	ldrb	r3, [r3, #0]
 8043410:	f003 030f 	and.w	r3, r3, #15
 8043414:	2101      	movs	r1, #1
 8043416:	fa01 f303 	lsl.w	r3, r1, r3
 804341a:	b29b      	uxth	r3, r3
 804341c:	43db      	mvns	r3, r3
 804341e:	68f9      	ldr	r1, [r7, #12]
 8043420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8043424:	4013      	ands	r3, r2
 8043426:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8043428:	68fb      	ldr	r3, [r7, #12]
 804342a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 804342e:	69da      	ldr	r2, [r3, #28]
 8043430:	683b      	ldr	r3, [r7, #0]
 8043432:	781b      	ldrb	r3, [r3, #0]
 8043434:	f003 030f 	and.w	r3, r3, #15
 8043438:	2101      	movs	r1, #1
 804343a:	fa01 f303 	lsl.w	r3, r1, r3
 804343e:	b29b      	uxth	r3, r3
 8043440:	43db      	mvns	r3, r3
 8043442:	68f9      	ldr	r1, [r7, #12]
 8043444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8043448:	4013      	ands	r3, r2
 804344a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 804344c:	68bb      	ldr	r3, [r7, #8]
 804344e:	015a      	lsls	r2, r3, #5
 8043450:	68fb      	ldr	r3, [r7, #12]
 8043452:	4413      	add	r3, r2
 8043454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043458:	681a      	ldr	r2, [r3, #0]
 804345a:	68bb      	ldr	r3, [r7, #8]
 804345c:	0159      	lsls	r1, r3, #5
 804345e:	68fb      	ldr	r3, [r7, #12]
 8043460:	440b      	add	r3, r1
 8043462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043466:	4619      	mov	r1, r3
 8043468:	4b35      	ldr	r3, [pc, #212]	; (8043540 <USB_DeactivateEndpoint+0x1b0>)
 804346a:	4013      	ands	r3, r2
 804346c:	600b      	str	r3, [r1, #0]
 804346e:	e060      	b.n	8043532 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8043470:	68bb      	ldr	r3, [r7, #8]
 8043472:	015a      	lsls	r2, r3, #5
 8043474:	68fb      	ldr	r3, [r7, #12]
 8043476:	4413      	add	r3, r2
 8043478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804347c:	681b      	ldr	r3, [r3, #0]
 804347e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8043482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8043486:	d11f      	bne.n	80434c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8043488:	68bb      	ldr	r3, [r7, #8]
 804348a:	015a      	lsls	r2, r3, #5
 804348c:	68fb      	ldr	r3, [r7, #12]
 804348e:	4413      	add	r3, r2
 8043490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043494:	681b      	ldr	r3, [r3, #0]
 8043496:	68ba      	ldr	r2, [r7, #8]
 8043498:	0151      	lsls	r1, r2, #5
 804349a:	68fa      	ldr	r2, [r7, #12]
 804349c:	440a      	add	r2, r1
 804349e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80434a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80434a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80434a8:	68bb      	ldr	r3, [r7, #8]
 80434aa:	015a      	lsls	r2, r3, #5
 80434ac:	68fb      	ldr	r3, [r7, #12]
 80434ae:	4413      	add	r3, r2
 80434b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80434b4:	681b      	ldr	r3, [r3, #0]
 80434b6:	68ba      	ldr	r2, [r7, #8]
 80434b8:	0151      	lsls	r1, r2, #5
 80434ba:	68fa      	ldr	r2, [r7, #12]
 80434bc:	440a      	add	r2, r1
 80434be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80434c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80434c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80434c8:	68fb      	ldr	r3, [r7, #12]
 80434ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80434ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80434d0:	683b      	ldr	r3, [r7, #0]
 80434d2:	781b      	ldrb	r3, [r3, #0]
 80434d4:	f003 030f 	and.w	r3, r3, #15
 80434d8:	2101      	movs	r1, #1
 80434da:	fa01 f303 	lsl.w	r3, r1, r3
 80434de:	041b      	lsls	r3, r3, #16
 80434e0:	43db      	mvns	r3, r3
 80434e2:	68f9      	ldr	r1, [r7, #12]
 80434e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80434e8:	4013      	ands	r3, r2
 80434ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80434ec:	68fb      	ldr	r3, [r7, #12]
 80434ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80434f2:	69da      	ldr	r2, [r3, #28]
 80434f4:	683b      	ldr	r3, [r7, #0]
 80434f6:	781b      	ldrb	r3, [r3, #0]
 80434f8:	f003 030f 	and.w	r3, r3, #15
 80434fc:	2101      	movs	r1, #1
 80434fe:	fa01 f303 	lsl.w	r3, r1, r3
 8043502:	041b      	lsls	r3, r3, #16
 8043504:	43db      	mvns	r3, r3
 8043506:	68f9      	ldr	r1, [r7, #12]
 8043508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 804350c:	4013      	ands	r3, r2
 804350e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8043510:	68bb      	ldr	r3, [r7, #8]
 8043512:	015a      	lsls	r2, r3, #5
 8043514:	68fb      	ldr	r3, [r7, #12]
 8043516:	4413      	add	r3, r2
 8043518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804351c:	681a      	ldr	r2, [r3, #0]
 804351e:	68bb      	ldr	r3, [r7, #8]
 8043520:	0159      	lsls	r1, r3, #5
 8043522:	68fb      	ldr	r3, [r7, #12]
 8043524:	440b      	add	r3, r1
 8043526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804352a:	4619      	mov	r1, r3
 804352c:	4b05      	ldr	r3, [pc, #20]	; (8043544 <USB_DeactivateEndpoint+0x1b4>)
 804352e:	4013      	ands	r3, r2
 8043530:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8043532:	2300      	movs	r3, #0
}
 8043534:	4618      	mov	r0, r3
 8043536:	3714      	adds	r7, #20
 8043538:	46bd      	mov	sp, r7
 804353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804353e:	4770      	bx	lr
 8043540:	ec337800 	.word	0xec337800
 8043544:	eff37800 	.word	0xeff37800

08043548 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8043548:	b580      	push	{r7, lr}
 804354a:	b08a      	sub	sp, #40	; 0x28
 804354c:	af02      	add	r7, sp, #8
 804354e:	60f8      	str	r0, [r7, #12]
 8043550:	60b9      	str	r1, [r7, #8]
 8043552:	4613      	mov	r3, r2
 8043554:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043556:	68fb      	ldr	r3, [r7, #12]
 8043558:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 804355a:	68bb      	ldr	r3, [r7, #8]
 804355c:	781b      	ldrb	r3, [r3, #0]
 804355e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8043560:	68bb      	ldr	r3, [r7, #8]
 8043562:	785b      	ldrb	r3, [r3, #1]
 8043564:	2b01      	cmp	r3, #1
 8043566:	f040 817a 	bne.w	804385e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 804356a:	68bb      	ldr	r3, [r7, #8]
 804356c:	691b      	ldr	r3, [r3, #16]
 804356e:	2b00      	cmp	r3, #0
 8043570:	d132      	bne.n	80435d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8043572:	69bb      	ldr	r3, [r7, #24]
 8043574:	015a      	lsls	r2, r3, #5
 8043576:	69fb      	ldr	r3, [r7, #28]
 8043578:	4413      	add	r3, r2
 804357a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 804357e:	691b      	ldr	r3, [r3, #16]
 8043580:	69ba      	ldr	r2, [r7, #24]
 8043582:	0151      	lsls	r1, r2, #5
 8043584:	69fa      	ldr	r2, [r7, #28]
 8043586:	440a      	add	r2, r1
 8043588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 804358c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8043590:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8043594:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8043596:	69bb      	ldr	r3, [r7, #24]
 8043598:	015a      	lsls	r2, r3, #5
 804359a:	69fb      	ldr	r3, [r7, #28]
 804359c:	4413      	add	r3, r2
 804359e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80435a2:	691b      	ldr	r3, [r3, #16]
 80435a4:	69ba      	ldr	r2, [r7, #24]
 80435a6:	0151      	lsls	r1, r2, #5
 80435a8:	69fa      	ldr	r2, [r7, #28]
 80435aa:	440a      	add	r2, r1
 80435ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80435b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80435b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80435b6:	69bb      	ldr	r3, [r7, #24]
 80435b8:	015a      	lsls	r2, r3, #5
 80435ba:	69fb      	ldr	r3, [r7, #28]
 80435bc:	4413      	add	r3, r2
 80435be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80435c2:	691b      	ldr	r3, [r3, #16]
 80435c4:	69ba      	ldr	r2, [r7, #24]
 80435c6:	0151      	lsls	r1, r2, #5
 80435c8:	69fa      	ldr	r2, [r7, #28]
 80435ca:	440a      	add	r2, r1
 80435cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80435d0:	0cdb      	lsrs	r3, r3, #19
 80435d2:	04db      	lsls	r3, r3, #19
 80435d4:	6113      	str	r3, [r2, #16]
 80435d6:	e092      	b.n	80436fe <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80435d8:	69bb      	ldr	r3, [r7, #24]
 80435da:	015a      	lsls	r2, r3, #5
 80435dc:	69fb      	ldr	r3, [r7, #28]
 80435de:	4413      	add	r3, r2
 80435e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80435e4:	691b      	ldr	r3, [r3, #16]
 80435e6:	69ba      	ldr	r2, [r7, #24]
 80435e8:	0151      	lsls	r1, r2, #5
 80435ea:	69fa      	ldr	r2, [r7, #28]
 80435ec:	440a      	add	r2, r1
 80435ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80435f2:	0cdb      	lsrs	r3, r3, #19
 80435f4:	04db      	lsls	r3, r3, #19
 80435f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80435f8:	69bb      	ldr	r3, [r7, #24]
 80435fa:	015a      	lsls	r2, r3, #5
 80435fc:	69fb      	ldr	r3, [r7, #28]
 80435fe:	4413      	add	r3, r2
 8043600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043604:	691b      	ldr	r3, [r3, #16]
 8043606:	69ba      	ldr	r2, [r7, #24]
 8043608:	0151      	lsls	r1, r2, #5
 804360a:	69fa      	ldr	r2, [r7, #28]
 804360c:	440a      	add	r2, r1
 804360e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8043612:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8043616:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 804361a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 804361c:	69bb      	ldr	r3, [r7, #24]
 804361e:	2b00      	cmp	r3, #0
 8043620:	d11a      	bne.n	8043658 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8043622:	68bb      	ldr	r3, [r7, #8]
 8043624:	691a      	ldr	r2, [r3, #16]
 8043626:	68bb      	ldr	r3, [r7, #8]
 8043628:	689b      	ldr	r3, [r3, #8]
 804362a:	429a      	cmp	r2, r3
 804362c:	d903      	bls.n	8043636 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 804362e:	68bb      	ldr	r3, [r7, #8]
 8043630:	689a      	ldr	r2, [r3, #8]
 8043632:	68bb      	ldr	r3, [r7, #8]
 8043634:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8043636:	69bb      	ldr	r3, [r7, #24]
 8043638:	015a      	lsls	r2, r3, #5
 804363a:	69fb      	ldr	r3, [r7, #28]
 804363c:	4413      	add	r3, r2
 804363e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043642:	691b      	ldr	r3, [r3, #16]
 8043644:	69ba      	ldr	r2, [r7, #24]
 8043646:	0151      	lsls	r1, r2, #5
 8043648:	69fa      	ldr	r2, [r7, #28]
 804364a:	440a      	add	r2, r1
 804364c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8043650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8043654:	6113      	str	r3, [r2, #16]
 8043656:	e01b      	b.n	8043690 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8043658:	69bb      	ldr	r3, [r7, #24]
 804365a:	015a      	lsls	r2, r3, #5
 804365c:	69fb      	ldr	r3, [r7, #28]
 804365e:	4413      	add	r3, r2
 8043660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043664:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8043666:	68bb      	ldr	r3, [r7, #8]
 8043668:	6919      	ldr	r1, [r3, #16]
 804366a:	68bb      	ldr	r3, [r7, #8]
 804366c:	689b      	ldr	r3, [r3, #8]
 804366e:	440b      	add	r3, r1
 8043670:	1e59      	subs	r1, r3, #1
 8043672:	68bb      	ldr	r3, [r7, #8]
 8043674:	689b      	ldr	r3, [r3, #8]
 8043676:	fbb1 f3f3 	udiv	r3, r1, r3
 804367a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 804367c:	4ba2      	ldr	r3, [pc, #648]	; (8043908 <USB_EPStartXfer+0x3c0>)
 804367e:	400b      	ands	r3, r1
 8043680:	69b9      	ldr	r1, [r7, #24]
 8043682:	0148      	lsls	r0, r1, #5
 8043684:	69f9      	ldr	r1, [r7, #28]
 8043686:	4401      	add	r1, r0
 8043688:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 804368c:	4313      	orrs	r3, r2
 804368e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8043690:	69bb      	ldr	r3, [r7, #24]
 8043692:	015a      	lsls	r2, r3, #5
 8043694:	69fb      	ldr	r3, [r7, #28]
 8043696:	4413      	add	r3, r2
 8043698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 804369c:	691a      	ldr	r2, [r3, #16]
 804369e:	68bb      	ldr	r3, [r7, #8]
 80436a0:	691b      	ldr	r3, [r3, #16]
 80436a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80436a6:	69b9      	ldr	r1, [r7, #24]
 80436a8:	0148      	lsls	r0, r1, #5
 80436aa:	69f9      	ldr	r1, [r7, #28]
 80436ac:	4401      	add	r1, r0
 80436ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80436b2:	4313      	orrs	r3, r2
 80436b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80436b6:	68bb      	ldr	r3, [r7, #8]
 80436b8:	791b      	ldrb	r3, [r3, #4]
 80436ba:	2b01      	cmp	r3, #1
 80436bc:	d11f      	bne.n	80436fe <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80436be:	69bb      	ldr	r3, [r7, #24]
 80436c0:	015a      	lsls	r2, r3, #5
 80436c2:	69fb      	ldr	r3, [r7, #28]
 80436c4:	4413      	add	r3, r2
 80436c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80436ca:	691b      	ldr	r3, [r3, #16]
 80436cc:	69ba      	ldr	r2, [r7, #24]
 80436ce:	0151      	lsls	r1, r2, #5
 80436d0:	69fa      	ldr	r2, [r7, #28]
 80436d2:	440a      	add	r2, r1
 80436d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80436d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80436dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80436de:	69bb      	ldr	r3, [r7, #24]
 80436e0:	015a      	lsls	r2, r3, #5
 80436e2:	69fb      	ldr	r3, [r7, #28]
 80436e4:	4413      	add	r3, r2
 80436e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80436ea:	691b      	ldr	r3, [r3, #16]
 80436ec:	69ba      	ldr	r2, [r7, #24]
 80436ee:	0151      	lsls	r1, r2, #5
 80436f0:	69fa      	ldr	r2, [r7, #28]
 80436f2:	440a      	add	r2, r1
 80436f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80436f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80436fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80436fe:	79fb      	ldrb	r3, [r7, #7]
 8043700:	2b01      	cmp	r3, #1
 8043702:	d14b      	bne.n	804379c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8043704:	68bb      	ldr	r3, [r7, #8]
 8043706:	69db      	ldr	r3, [r3, #28]
 8043708:	2b00      	cmp	r3, #0
 804370a:	d009      	beq.n	8043720 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 804370c:	69bb      	ldr	r3, [r7, #24]
 804370e:	015a      	lsls	r2, r3, #5
 8043710:	69fb      	ldr	r3, [r7, #28]
 8043712:	4413      	add	r3, r2
 8043714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043718:	461a      	mov	r2, r3
 804371a:	68bb      	ldr	r3, [r7, #8]
 804371c:	69db      	ldr	r3, [r3, #28]
 804371e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8043720:	68bb      	ldr	r3, [r7, #8]
 8043722:	791b      	ldrb	r3, [r3, #4]
 8043724:	2b01      	cmp	r3, #1
 8043726:	d128      	bne.n	804377a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8043728:	69fb      	ldr	r3, [r7, #28]
 804372a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 804372e:	689b      	ldr	r3, [r3, #8]
 8043730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043734:	2b00      	cmp	r3, #0
 8043736:	d110      	bne.n	804375a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8043738:	69bb      	ldr	r3, [r7, #24]
 804373a:	015a      	lsls	r2, r3, #5
 804373c:	69fb      	ldr	r3, [r7, #28]
 804373e:	4413      	add	r3, r2
 8043740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043744:	681b      	ldr	r3, [r3, #0]
 8043746:	69ba      	ldr	r2, [r7, #24]
 8043748:	0151      	lsls	r1, r2, #5
 804374a:	69fa      	ldr	r2, [r7, #28]
 804374c:	440a      	add	r2, r1
 804374e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8043752:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8043756:	6013      	str	r3, [r2, #0]
 8043758:	e00f      	b.n	804377a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 804375a:	69bb      	ldr	r3, [r7, #24]
 804375c:	015a      	lsls	r2, r3, #5
 804375e:	69fb      	ldr	r3, [r7, #28]
 8043760:	4413      	add	r3, r2
 8043762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043766:	681b      	ldr	r3, [r3, #0]
 8043768:	69ba      	ldr	r2, [r7, #24]
 804376a:	0151      	lsls	r1, r2, #5
 804376c:	69fa      	ldr	r2, [r7, #28]
 804376e:	440a      	add	r2, r1
 8043770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8043774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8043778:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 804377a:	69bb      	ldr	r3, [r7, #24]
 804377c:	015a      	lsls	r2, r3, #5
 804377e:	69fb      	ldr	r3, [r7, #28]
 8043780:	4413      	add	r3, r2
 8043782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043786:	681b      	ldr	r3, [r3, #0]
 8043788:	69ba      	ldr	r2, [r7, #24]
 804378a:	0151      	lsls	r1, r2, #5
 804378c:	69fa      	ldr	r2, [r7, #28]
 804378e:	440a      	add	r2, r1
 8043790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8043794:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8043798:	6013      	str	r3, [r2, #0]
 804379a:	e165      	b.n	8043a68 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 804379c:	69bb      	ldr	r3, [r7, #24]
 804379e:	015a      	lsls	r2, r3, #5
 80437a0:	69fb      	ldr	r3, [r7, #28]
 80437a2:	4413      	add	r3, r2
 80437a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80437a8:	681b      	ldr	r3, [r3, #0]
 80437aa:	69ba      	ldr	r2, [r7, #24]
 80437ac:	0151      	lsls	r1, r2, #5
 80437ae:	69fa      	ldr	r2, [r7, #28]
 80437b0:	440a      	add	r2, r1
 80437b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80437b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80437ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80437bc:	68bb      	ldr	r3, [r7, #8]
 80437be:	791b      	ldrb	r3, [r3, #4]
 80437c0:	2b01      	cmp	r3, #1
 80437c2:	d015      	beq.n	80437f0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80437c4:	68bb      	ldr	r3, [r7, #8]
 80437c6:	691b      	ldr	r3, [r3, #16]
 80437c8:	2b00      	cmp	r3, #0
 80437ca:	f000 814d 	beq.w	8043a68 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80437ce:	69fb      	ldr	r3, [r7, #28]
 80437d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80437d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80437d6:	68bb      	ldr	r3, [r7, #8]
 80437d8:	781b      	ldrb	r3, [r3, #0]
 80437da:	f003 030f 	and.w	r3, r3, #15
 80437de:	2101      	movs	r1, #1
 80437e0:	fa01 f303 	lsl.w	r3, r1, r3
 80437e4:	69f9      	ldr	r1, [r7, #28]
 80437e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80437ea:	4313      	orrs	r3, r2
 80437ec:	634b      	str	r3, [r1, #52]	; 0x34
 80437ee:	e13b      	b.n	8043a68 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80437f0:	69fb      	ldr	r3, [r7, #28]
 80437f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80437f6:	689b      	ldr	r3, [r3, #8]
 80437f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80437fc:	2b00      	cmp	r3, #0
 80437fe:	d110      	bne.n	8043822 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8043800:	69bb      	ldr	r3, [r7, #24]
 8043802:	015a      	lsls	r2, r3, #5
 8043804:	69fb      	ldr	r3, [r7, #28]
 8043806:	4413      	add	r3, r2
 8043808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 804380c:	681b      	ldr	r3, [r3, #0]
 804380e:	69ba      	ldr	r2, [r7, #24]
 8043810:	0151      	lsls	r1, r2, #5
 8043812:	69fa      	ldr	r2, [r7, #28]
 8043814:	440a      	add	r2, r1
 8043816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 804381a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 804381e:	6013      	str	r3, [r2, #0]
 8043820:	e00f      	b.n	8043842 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8043822:	69bb      	ldr	r3, [r7, #24]
 8043824:	015a      	lsls	r2, r3, #5
 8043826:	69fb      	ldr	r3, [r7, #28]
 8043828:	4413      	add	r3, r2
 804382a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 804382e:	681b      	ldr	r3, [r3, #0]
 8043830:	69ba      	ldr	r2, [r7, #24]
 8043832:	0151      	lsls	r1, r2, #5
 8043834:	69fa      	ldr	r2, [r7, #28]
 8043836:	440a      	add	r2, r1
 8043838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 804383c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8043840:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8043842:	68bb      	ldr	r3, [r7, #8]
 8043844:	68d9      	ldr	r1, [r3, #12]
 8043846:	68bb      	ldr	r3, [r7, #8]
 8043848:	781a      	ldrb	r2, [r3, #0]
 804384a:	68bb      	ldr	r3, [r7, #8]
 804384c:	691b      	ldr	r3, [r3, #16]
 804384e:	b298      	uxth	r0, r3
 8043850:	79fb      	ldrb	r3, [r7, #7]
 8043852:	9300      	str	r3, [sp, #0]
 8043854:	4603      	mov	r3, r0
 8043856:	68f8      	ldr	r0, [r7, #12]
 8043858:	f000 f9b8 	bl	8043bcc <USB_WritePacket>
 804385c:	e104      	b.n	8043a68 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 804385e:	69bb      	ldr	r3, [r7, #24]
 8043860:	015a      	lsls	r2, r3, #5
 8043862:	69fb      	ldr	r3, [r7, #28]
 8043864:	4413      	add	r3, r2
 8043866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804386a:	691b      	ldr	r3, [r3, #16]
 804386c:	69ba      	ldr	r2, [r7, #24]
 804386e:	0151      	lsls	r1, r2, #5
 8043870:	69fa      	ldr	r2, [r7, #28]
 8043872:	440a      	add	r2, r1
 8043874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8043878:	0cdb      	lsrs	r3, r3, #19
 804387a:	04db      	lsls	r3, r3, #19
 804387c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 804387e:	69bb      	ldr	r3, [r7, #24]
 8043880:	015a      	lsls	r2, r3, #5
 8043882:	69fb      	ldr	r3, [r7, #28]
 8043884:	4413      	add	r3, r2
 8043886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804388a:	691b      	ldr	r3, [r3, #16]
 804388c:	69ba      	ldr	r2, [r7, #24]
 804388e:	0151      	lsls	r1, r2, #5
 8043890:	69fa      	ldr	r2, [r7, #28]
 8043892:	440a      	add	r2, r1
 8043894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8043898:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 804389c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80438a0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80438a2:	69bb      	ldr	r3, [r7, #24]
 80438a4:	2b00      	cmp	r3, #0
 80438a6:	d131      	bne.n	804390c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80438a8:	68bb      	ldr	r3, [r7, #8]
 80438aa:	691b      	ldr	r3, [r3, #16]
 80438ac:	2b00      	cmp	r3, #0
 80438ae:	d003      	beq.n	80438b8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80438b0:	68bb      	ldr	r3, [r7, #8]
 80438b2:	689a      	ldr	r2, [r3, #8]
 80438b4:	68bb      	ldr	r3, [r7, #8]
 80438b6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80438b8:	68bb      	ldr	r3, [r7, #8]
 80438ba:	689a      	ldr	r2, [r3, #8]
 80438bc:	68bb      	ldr	r3, [r7, #8]
 80438be:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80438c0:	69bb      	ldr	r3, [r7, #24]
 80438c2:	015a      	lsls	r2, r3, #5
 80438c4:	69fb      	ldr	r3, [r7, #28]
 80438c6:	4413      	add	r3, r2
 80438c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80438cc:	691a      	ldr	r2, [r3, #16]
 80438ce:	68bb      	ldr	r3, [r7, #8]
 80438d0:	6a1b      	ldr	r3, [r3, #32]
 80438d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80438d6:	69b9      	ldr	r1, [r7, #24]
 80438d8:	0148      	lsls	r0, r1, #5
 80438da:	69f9      	ldr	r1, [r7, #28]
 80438dc:	4401      	add	r1, r0
 80438de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80438e2:	4313      	orrs	r3, r2
 80438e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80438e6:	69bb      	ldr	r3, [r7, #24]
 80438e8:	015a      	lsls	r2, r3, #5
 80438ea:	69fb      	ldr	r3, [r7, #28]
 80438ec:	4413      	add	r3, r2
 80438ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80438f2:	691b      	ldr	r3, [r3, #16]
 80438f4:	69ba      	ldr	r2, [r7, #24]
 80438f6:	0151      	lsls	r1, r2, #5
 80438f8:	69fa      	ldr	r2, [r7, #28]
 80438fa:	440a      	add	r2, r1
 80438fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8043900:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8043904:	6113      	str	r3, [r2, #16]
 8043906:	e061      	b.n	80439cc <USB_EPStartXfer+0x484>
 8043908:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 804390c:	68bb      	ldr	r3, [r7, #8]
 804390e:	691b      	ldr	r3, [r3, #16]
 8043910:	2b00      	cmp	r3, #0
 8043912:	d123      	bne.n	804395c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8043914:	69bb      	ldr	r3, [r7, #24]
 8043916:	015a      	lsls	r2, r3, #5
 8043918:	69fb      	ldr	r3, [r7, #28]
 804391a:	4413      	add	r3, r2
 804391c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043920:	691a      	ldr	r2, [r3, #16]
 8043922:	68bb      	ldr	r3, [r7, #8]
 8043924:	689b      	ldr	r3, [r3, #8]
 8043926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 804392a:	69b9      	ldr	r1, [r7, #24]
 804392c:	0148      	lsls	r0, r1, #5
 804392e:	69f9      	ldr	r1, [r7, #28]
 8043930:	4401      	add	r1, r0
 8043932:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8043936:	4313      	orrs	r3, r2
 8043938:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 804393a:	69bb      	ldr	r3, [r7, #24]
 804393c:	015a      	lsls	r2, r3, #5
 804393e:	69fb      	ldr	r3, [r7, #28]
 8043940:	4413      	add	r3, r2
 8043942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043946:	691b      	ldr	r3, [r3, #16]
 8043948:	69ba      	ldr	r2, [r7, #24]
 804394a:	0151      	lsls	r1, r2, #5
 804394c:	69fa      	ldr	r2, [r7, #28]
 804394e:	440a      	add	r2, r1
 8043950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8043954:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8043958:	6113      	str	r3, [r2, #16]
 804395a:	e037      	b.n	80439cc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 804395c:	68bb      	ldr	r3, [r7, #8]
 804395e:	691a      	ldr	r2, [r3, #16]
 8043960:	68bb      	ldr	r3, [r7, #8]
 8043962:	689b      	ldr	r3, [r3, #8]
 8043964:	4413      	add	r3, r2
 8043966:	1e5a      	subs	r2, r3, #1
 8043968:	68bb      	ldr	r3, [r7, #8]
 804396a:	689b      	ldr	r3, [r3, #8]
 804396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8043970:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8043972:	68bb      	ldr	r3, [r7, #8]
 8043974:	689b      	ldr	r3, [r3, #8]
 8043976:	8afa      	ldrh	r2, [r7, #22]
 8043978:	fb03 f202 	mul.w	r2, r3, r2
 804397c:	68bb      	ldr	r3, [r7, #8]
 804397e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8043980:	69bb      	ldr	r3, [r7, #24]
 8043982:	015a      	lsls	r2, r3, #5
 8043984:	69fb      	ldr	r3, [r7, #28]
 8043986:	4413      	add	r3, r2
 8043988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804398c:	691a      	ldr	r2, [r3, #16]
 804398e:	8afb      	ldrh	r3, [r7, #22]
 8043990:	04d9      	lsls	r1, r3, #19
 8043992:	4b38      	ldr	r3, [pc, #224]	; (8043a74 <USB_EPStartXfer+0x52c>)
 8043994:	400b      	ands	r3, r1
 8043996:	69b9      	ldr	r1, [r7, #24]
 8043998:	0148      	lsls	r0, r1, #5
 804399a:	69f9      	ldr	r1, [r7, #28]
 804399c:	4401      	add	r1, r0
 804399e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80439a2:	4313      	orrs	r3, r2
 80439a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80439a6:	69bb      	ldr	r3, [r7, #24]
 80439a8:	015a      	lsls	r2, r3, #5
 80439aa:	69fb      	ldr	r3, [r7, #28]
 80439ac:	4413      	add	r3, r2
 80439ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80439b2:	691a      	ldr	r2, [r3, #16]
 80439b4:	68bb      	ldr	r3, [r7, #8]
 80439b6:	6a1b      	ldr	r3, [r3, #32]
 80439b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80439bc:	69b9      	ldr	r1, [r7, #24]
 80439be:	0148      	lsls	r0, r1, #5
 80439c0:	69f9      	ldr	r1, [r7, #28]
 80439c2:	4401      	add	r1, r0
 80439c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80439c8:	4313      	orrs	r3, r2
 80439ca:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80439cc:	79fb      	ldrb	r3, [r7, #7]
 80439ce:	2b01      	cmp	r3, #1
 80439d0:	d10d      	bne.n	80439ee <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80439d2:	68bb      	ldr	r3, [r7, #8]
 80439d4:	68db      	ldr	r3, [r3, #12]
 80439d6:	2b00      	cmp	r3, #0
 80439d8:	d009      	beq.n	80439ee <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80439da:	68bb      	ldr	r3, [r7, #8]
 80439dc:	68d9      	ldr	r1, [r3, #12]
 80439de:	69bb      	ldr	r3, [r7, #24]
 80439e0:	015a      	lsls	r2, r3, #5
 80439e2:	69fb      	ldr	r3, [r7, #28]
 80439e4:	4413      	add	r3, r2
 80439e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80439ea:	460a      	mov	r2, r1
 80439ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80439ee:	68bb      	ldr	r3, [r7, #8]
 80439f0:	791b      	ldrb	r3, [r3, #4]
 80439f2:	2b01      	cmp	r3, #1
 80439f4:	d128      	bne.n	8043a48 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80439f6:	69fb      	ldr	r3, [r7, #28]
 80439f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80439fc:	689b      	ldr	r3, [r3, #8]
 80439fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043a02:	2b00      	cmp	r3, #0
 8043a04:	d110      	bne.n	8043a28 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8043a06:	69bb      	ldr	r3, [r7, #24]
 8043a08:	015a      	lsls	r2, r3, #5
 8043a0a:	69fb      	ldr	r3, [r7, #28]
 8043a0c:	4413      	add	r3, r2
 8043a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043a12:	681b      	ldr	r3, [r3, #0]
 8043a14:	69ba      	ldr	r2, [r7, #24]
 8043a16:	0151      	lsls	r1, r2, #5
 8043a18:	69fa      	ldr	r2, [r7, #28]
 8043a1a:	440a      	add	r2, r1
 8043a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8043a20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8043a24:	6013      	str	r3, [r2, #0]
 8043a26:	e00f      	b.n	8043a48 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8043a28:	69bb      	ldr	r3, [r7, #24]
 8043a2a:	015a      	lsls	r2, r3, #5
 8043a2c:	69fb      	ldr	r3, [r7, #28]
 8043a2e:	4413      	add	r3, r2
 8043a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043a34:	681b      	ldr	r3, [r3, #0]
 8043a36:	69ba      	ldr	r2, [r7, #24]
 8043a38:	0151      	lsls	r1, r2, #5
 8043a3a:	69fa      	ldr	r2, [r7, #28]
 8043a3c:	440a      	add	r2, r1
 8043a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8043a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8043a46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8043a48:	69bb      	ldr	r3, [r7, #24]
 8043a4a:	015a      	lsls	r2, r3, #5
 8043a4c:	69fb      	ldr	r3, [r7, #28]
 8043a4e:	4413      	add	r3, r2
 8043a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043a54:	681b      	ldr	r3, [r3, #0]
 8043a56:	69ba      	ldr	r2, [r7, #24]
 8043a58:	0151      	lsls	r1, r2, #5
 8043a5a:	69fa      	ldr	r2, [r7, #28]
 8043a5c:	440a      	add	r2, r1
 8043a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8043a62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8043a66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8043a68:	2300      	movs	r3, #0
}
 8043a6a:	4618      	mov	r0, r3
 8043a6c:	3720      	adds	r7, #32
 8043a6e:	46bd      	mov	sp, r7
 8043a70:	bd80      	pop	{r7, pc}
 8043a72:	bf00      	nop
 8043a74:	1ff80000 	.word	0x1ff80000

08043a78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8043a78:	b480      	push	{r7}
 8043a7a:	b087      	sub	sp, #28
 8043a7c:	af00      	add	r7, sp, #0
 8043a7e:	6078      	str	r0, [r7, #4]
 8043a80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8043a82:	2300      	movs	r3, #0
 8043a84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8043a86:	2300      	movs	r3, #0
 8043a88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043a8a:	687b      	ldr	r3, [r7, #4]
 8043a8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8043a8e:	683b      	ldr	r3, [r7, #0]
 8043a90:	785b      	ldrb	r3, [r3, #1]
 8043a92:	2b01      	cmp	r3, #1
 8043a94:	d14a      	bne.n	8043b2c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8043a96:	683b      	ldr	r3, [r7, #0]
 8043a98:	781b      	ldrb	r3, [r3, #0]
 8043a9a:	015a      	lsls	r2, r3, #5
 8043a9c:	693b      	ldr	r3, [r7, #16]
 8043a9e:	4413      	add	r3, r2
 8043aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043aa4:	681b      	ldr	r3, [r3, #0]
 8043aa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8043aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8043aae:	f040 8086 	bne.w	8043bbe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8043ab2:	683b      	ldr	r3, [r7, #0]
 8043ab4:	781b      	ldrb	r3, [r3, #0]
 8043ab6:	015a      	lsls	r2, r3, #5
 8043ab8:	693b      	ldr	r3, [r7, #16]
 8043aba:	4413      	add	r3, r2
 8043abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043ac0:	681b      	ldr	r3, [r3, #0]
 8043ac2:	683a      	ldr	r2, [r7, #0]
 8043ac4:	7812      	ldrb	r2, [r2, #0]
 8043ac6:	0151      	lsls	r1, r2, #5
 8043ac8:	693a      	ldr	r2, [r7, #16]
 8043aca:	440a      	add	r2, r1
 8043acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8043ad0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8043ad4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8043ad6:	683b      	ldr	r3, [r7, #0]
 8043ad8:	781b      	ldrb	r3, [r3, #0]
 8043ada:	015a      	lsls	r2, r3, #5
 8043adc:	693b      	ldr	r3, [r7, #16]
 8043ade:	4413      	add	r3, r2
 8043ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043ae4:	681b      	ldr	r3, [r3, #0]
 8043ae6:	683a      	ldr	r2, [r7, #0]
 8043ae8:	7812      	ldrb	r2, [r2, #0]
 8043aea:	0151      	lsls	r1, r2, #5
 8043aec:	693a      	ldr	r2, [r7, #16]
 8043aee:	440a      	add	r2, r1
 8043af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8043af4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8043af8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8043afa:	68fb      	ldr	r3, [r7, #12]
 8043afc:	3301      	adds	r3, #1
 8043afe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8043b00:	68fb      	ldr	r3, [r7, #12]
 8043b02:	f242 7210 	movw	r2, #10000	; 0x2710
 8043b06:	4293      	cmp	r3, r2
 8043b08:	d902      	bls.n	8043b10 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8043b0a:	2301      	movs	r3, #1
 8043b0c:	75fb      	strb	r3, [r7, #23]
          break;
 8043b0e:	e056      	b.n	8043bbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8043b10:	683b      	ldr	r3, [r7, #0]
 8043b12:	781b      	ldrb	r3, [r3, #0]
 8043b14:	015a      	lsls	r2, r3, #5
 8043b16:	693b      	ldr	r3, [r7, #16]
 8043b18:	4413      	add	r3, r2
 8043b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043b1e:	681b      	ldr	r3, [r3, #0]
 8043b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8043b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8043b28:	d0e7      	beq.n	8043afa <USB_EPStopXfer+0x82>
 8043b2a:	e048      	b.n	8043bbe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8043b2c:	683b      	ldr	r3, [r7, #0]
 8043b2e:	781b      	ldrb	r3, [r3, #0]
 8043b30:	015a      	lsls	r2, r3, #5
 8043b32:	693b      	ldr	r3, [r7, #16]
 8043b34:	4413      	add	r3, r2
 8043b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043b3a:	681b      	ldr	r3, [r3, #0]
 8043b3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8043b40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8043b44:	d13b      	bne.n	8043bbe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8043b46:	683b      	ldr	r3, [r7, #0]
 8043b48:	781b      	ldrb	r3, [r3, #0]
 8043b4a:	015a      	lsls	r2, r3, #5
 8043b4c:	693b      	ldr	r3, [r7, #16]
 8043b4e:	4413      	add	r3, r2
 8043b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043b54:	681b      	ldr	r3, [r3, #0]
 8043b56:	683a      	ldr	r2, [r7, #0]
 8043b58:	7812      	ldrb	r2, [r2, #0]
 8043b5a:	0151      	lsls	r1, r2, #5
 8043b5c:	693a      	ldr	r2, [r7, #16]
 8043b5e:	440a      	add	r2, r1
 8043b60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8043b64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8043b68:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8043b6a:	683b      	ldr	r3, [r7, #0]
 8043b6c:	781b      	ldrb	r3, [r3, #0]
 8043b6e:	015a      	lsls	r2, r3, #5
 8043b70:	693b      	ldr	r3, [r7, #16]
 8043b72:	4413      	add	r3, r2
 8043b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043b78:	681b      	ldr	r3, [r3, #0]
 8043b7a:	683a      	ldr	r2, [r7, #0]
 8043b7c:	7812      	ldrb	r2, [r2, #0]
 8043b7e:	0151      	lsls	r1, r2, #5
 8043b80:	693a      	ldr	r2, [r7, #16]
 8043b82:	440a      	add	r2, r1
 8043b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8043b88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8043b8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8043b8e:	68fb      	ldr	r3, [r7, #12]
 8043b90:	3301      	adds	r3, #1
 8043b92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8043b94:	68fb      	ldr	r3, [r7, #12]
 8043b96:	f242 7210 	movw	r2, #10000	; 0x2710
 8043b9a:	4293      	cmp	r3, r2
 8043b9c:	d902      	bls.n	8043ba4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8043b9e:	2301      	movs	r3, #1
 8043ba0:	75fb      	strb	r3, [r7, #23]
          break;
 8043ba2:	e00c      	b.n	8043bbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8043ba4:	683b      	ldr	r3, [r7, #0]
 8043ba6:	781b      	ldrb	r3, [r3, #0]
 8043ba8:	015a      	lsls	r2, r3, #5
 8043baa:	693b      	ldr	r3, [r7, #16]
 8043bac:	4413      	add	r3, r2
 8043bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043bb2:	681b      	ldr	r3, [r3, #0]
 8043bb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8043bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8043bbc:	d0e7      	beq.n	8043b8e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8043bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8043bc0:	4618      	mov	r0, r3
 8043bc2:	371c      	adds	r7, #28
 8043bc4:	46bd      	mov	sp, r7
 8043bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043bca:	4770      	bx	lr

08043bcc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8043bcc:	b480      	push	{r7}
 8043bce:	b089      	sub	sp, #36	; 0x24
 8043bd0:	af00      	add	r7, sp, #0
 8043bd2:	60f8      	str	r0, [r7, #12]
 8043bd4:	60b9      	str	r1, [r7, #8]
 8043bd6:	4611      	mov	r1, r2
 8043bd8:	461a      	mov	r2, r3
 8043bda:	460b      	mov	r3, r1
 8043bdc:	71fb      	strb	r3, [r7, #7]
 8043bde:	4613      	mov	r3, r2
 8043be0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043be2:	68fb      	ldr	r3, [r7, #12]
 8043be4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8043be6:	68bb      	ldr	r3, [r7, #8]
 8043be8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8043bea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8043bee:	2b00      	cmp	r3, #0
 8043bf0:	d123      	bne.n	8043c3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8043bf2:	88bb      	ldrh	r3, [r7, #4]
 8043bf4:	3303      	adds	r3, #3
 8043bf6:	089b      	lsrs	r3, r3, #2
 8043bf8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8043bfa:	2300      	movs	r3, #0
 8043bfc:	61bb      	str	r3, [r7, #24]
 8043bfe:	e018      	b.n	8043c32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8043c00:	79fb      	ldrb	r3, [r7, #7]
 8043c02:	031a      	lsls	r2, r3, #12
 8043c04:	697b      	ldr	r3, [r7, #20]
 8043c06:	4413      	add	r3, r2
 8043c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043c0c:	461a      	mov	r2, r3
 8043c0e:	69fb      	ldr	r3, [r7, #28]
 8043c10:	681b      	ldr	r3, [r3, #0]
 8043c12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8043c14:	69fb      	ldr	r3, [r7, #28]
 8043c16:	3301      	adds	r3, #1
 8043c18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8043c1a:	69fb      	ldr	r3, [r7, #28]
 8043c1c:	3301      	adds	r3, #1
 8043c1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8043c20:	69fb      	ldr	r3, [r7, #28]
 8043c22:	3301      	adds	r3, #1
 8043c24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8043c26:	69fb      	ldr	r3, [r7, #28]
 8043c28:	3301      	adds	r3, #1
 8043c2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8043c2c:	69bb      	ldr	r3, [r7, #24]
 8043c2e:	3301      	adds	r3, #1
 8043c30:	61bb      	str	r3, [r7, #24]
 8043c32:	69ba      	ldr	r2, [r7, #24]
 8043c34:	693b      	ldr	r3, [r7, #16]
 8043c36:	429a      	cmp	r2, r3
 8043c38:	d3e2      	bcc.n	8043c00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8043c3a:	2300      	movs	r3, #0
}
 8043c3c:	4618      	mov	r0, r3
 8043c3e:	3724      	adds	r7, #36	; 0x24
 8043c40:	46bd      	mov	sp, r7
 8043c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043c46:	4770      	bx	lr

08043c48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8043c48:	b480      	push	{r7}
 8043c4a:	b08b      	sub	sp, #44	; 0x2c
 8043c4c:	af00      	add	r7, sp, #0
 8043c4e:	60f8      	str	r0, [r7, #12]
 8043c50:	60b9      	str	r1, [r7, #8]
 8043c52:	4613      	mov	r3, r2
 8043c54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043c56:	68fb      	ldr	r3, [r7, #12]
 8043c58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8043c5a:	68bb      	ldr	r3, [r7, #8]
 8043c5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8043c5e:	88fb      	ldrh	r3, [r7, #6]
 8043c60:	089b      	lsrs	r3, r3, #2
 8043c62:	b29b      	uxth	r3, r3
 8043c64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8043c66:	88fb      	ldrh	r3, [r7, #6]
 8043c68:	f003 0303 	and.w	r3, r3, #3
 8043c6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8043c6e:	2300      	movs	r3, #0
 8043c70:	623b      	str	r3, [r7, #32]
 8043c72:	e014      	b.n	8043c9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8043c74:	69bb      	ldr	r3, [r7, #24]
 8043c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043c7a:	681a      	ldr	r2, [r3, #0]
 8043c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043c7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8043c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043c82:	3301      	adds	r3, #1
 8043c84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8043c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043c88:	3301      	adds	r3, #1
 8043c8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8043c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043c8e:	3301      	adds	r3, #1
 8043c90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8043c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043c94:	3301      	adds	r3, #1
 8043c96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8043c98:	6a3b      	ldr	r3, [r7, #32]
 8043c9a:	3301      	adds	r3, #1
 8043c9c:	623b      	str	r3, [r7, #32]
 8043c9e:	6a3a      	ldr	r2, [r7, #32]
 8043ca0:	697b      	ldr	r3, [r7, #20]
 8043ca2:	429a      	cmp	r2, r3
 8043ca4:	d3e6      	bcc.n	8043c74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8043ca6:	8bfb      	ldrh	r3, [r7, #30]
 8043ca8:	2b00      	cmp	r3, #0
 8043caa:	d01e      	beq.n	8043cea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8043cac:	2300      	movs	r3, #0
 8043cae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8043cb0:	69bb      	ldr	r3, [r7, #24]
 8043cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043cb6:	461a      	mov	r2, r3
 8043cb8:	f107 0310 	add.w	r3, r7, #16
 8043cbc:	6812      	ldr	r2, [r2, #0]
 8043cbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8043cc0:	693a      	ldr	r2, [r7, #16]
 8043cc2:	6a3b      	ldr	r3, [r7, #32]
 8043cc4:	b2db      	uxtb	r3, r3
 8043cc6:	00db      	lsls	r3, r3, #3
 8043cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8043ccc:	b2da      	uxtb	r2, r3
 8043cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043cd0:	701a      	strb	r2, [r3, #0]
      i++;
 8043cd2:	6a3b      	ldr	r3, [r7, #32]
 8043cd4:	3301      	adds	r3, #1
 8043cd6:	623b      	str	r3, [r7, #32]
      pDest++;
 8043cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043cda:	3301      	adds	r3, #1
 8043cdc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8043cde:	8bfb      	ldrh	r3, [r7, #30]
 8043ce0:	3b01      	subs	r3, #1
 8043ce2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8043ce4:	8bfb      	ldrh	r3, [r7, #30]
 8043ce6:	2b00      	cmp	r3, #0
 8043ce8:	d1ea      	bne.n	8043cc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8043cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8043cec:	4618      	mov	r0, r3
 8043cee:	372c      	adds	r7, #44	; 0x2c
 8043cf0:	46bd      	mov	sp, r7
 8043cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043cf6:	4770      	bx	lr

08043cf8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8043cf8:	b480      	push	{r7}
 8043cfa:	b085      	sub	sp, #20
 8043cfc:	af00      	add	r7, sp, #0
 8043cfe:	6078      	str	r0, [r7, #4]
 8043d00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043d02:	687b      	ldr	r3, [r7, #4]
 8043d04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8043d06:	683b      	ldr	r3, [r7, #0]
 8043d08:	781b      	ldrb	r3, [r3, #0]
 8043d0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8043d0c:	683b      	ldr	r3, [r7, #0]
 8043d0e:	785b      	ldrb	r3, [r3, #1]
 8043d10:	2b01      	cmp	r3, #1
 8043d12:	d12c      	bne.n	8043d6e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8043d14:	68bb      	ldr	r3, [r7, #8]
 8043d16:	015a      	lsls	r2, r3, #5
 8043d18:	68fb      	ldr	r3, [r7, #12]
 8043d1a:	4413      	add	r3, r2
 8043d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043d20:	681b      	ldr	r3, [r3, #0]
 8043d22:	2b00      	cmp	r3, #0
 8043d24:	db12      	blt.n	8043d4c <USB_EPSetStall+0x54>
 8043d26:	68bb      	ldr	r3, [r7, #8]
 8043d28:	2b00      	cmp	r3, #0
 8043d2a:	d00f      	beq.n	8043d4c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8043d2c:	68bb      	ldr	r3, [r7, #8]
 8043d2e:	015a      	lsls	r2, r3, #5
 8043d30:	68fb      	ldr	r3, [r7, #12]
 8043d32:	4413      	add	r3, r2
 8043d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043d38:	681b      	ldr	r3, [r3, #0]
 8043d3a:	68ba      	ldr	r2, [r7, #8]
 8043d3c:	0151      	lsls	r1, r2, #5
 8043d3e:	68fa      	ldr	r2, [r7, #12]
 8043d40:	440a      	add	r2, r1
 8043d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8043d46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8043d4a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8043d4c:	68bb      	ldr	r3, [r7, #8]
 8043d4e:	015a      	lsls	r2, r3, #5
 8043d50:	68fb      	ldr	r3, [r7, #12]
 8043d52:	4413      	add	r3, r2
 8043d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043d58:	681b      	ldr	r3, [r3, #0]
 8043d5a:	68ba      	ldr	r2, [r7, #8]
 8043d5c:	0151      	lsls	r1, r2, #5
 8043d5e:	68fa      	ldr	r2, [r7, #12]
 8043d60:	440a      	add	r2, r1
 8043d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8043d66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8043d6a:	6013      	str	r3, [r2, #0]
 8043d6c:	e02b      	b.n	8043dc6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8043d6e:	68bb      	ldr	r3, [r7, #8]
 8043d70:	015a      	lsls	r2, r3, #5
 8043d72:	68fb      	ldr	r3, [r7, #12]
 8043d74:	4413      	add	r3, r2
 8043d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043d7a:	681b      	ldr	r3, [r3, #0]
 8043d7c:	2b00      	cmp	r3, #0
 8043d7e:	db12      	blt.n	8043da6 <USB_EPSetStall+0xae>
 8043d80:	68bb      	ldr	r3, [r7, #8]
 8043d82:	2b00      	cmp	r3, #0
 8043d84:	d00f      	beq.n	8043da6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8043d86:	68bb      	ldr	r3, [r7, #8]
 8043d88:	015a      	lsls	r2, r3, #5
 8043d8a:	68fb      	ldr	r3, [r7, #12]
 8043d8c:	4413      	add	r3, r2
 8043d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043d92:	681b      	ldr	r3, [r3, #0]
 8043d94:	68ba      	ldr	r2, [r7, #8]
 8043d96:	0151      	lsls	r1, r2, #5
 8043d98:	68fa      	ldr	r2, [r7, #12]
 8043d9a:	440a      	add	r2, r1
 8043d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8043da0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8043da4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8043da6:	68bb      	ldr	r3, [r7, #8]
 8043da8:	015a      	lsls	r2, r3, #5
 8043daa:	68fb      	ldr	r3, [r7, #12]
 8043dac:	4413      	add	r3, r2
 8043dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043db2:	681b      	ldr	r3, [r3, #0]
 8043db4:	68ba      	ldr	r2, [r7, #8]
 8043db6:	0151      	lsls	r1, r2, #5
 8043db8:	68fa      	ldr	r2, [r7, #12]
 8043dba:	440a      	add	r2, r1
 8043dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8043dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8043dc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8043dc6:	2300      	movs	r3, #0
}
 8043dc8:	4618      	mov	r0, r3
 8043dca:	3714      	adds	r7, #20
 8043dcc:	46bd      	mov	sp, r7
 8043dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043dd2:	4770      	bx	lr

08043dd4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8043dd4:	b480      	push	{r7}
 8043dd6:	b085      	sub	sp, #20
 8043dd8:	af00      	add	r7, sp, #0
 8043dda:	6078      	str	r0, [r7, #4]
 8043ddc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043dde:	687b      	ldr	r3, [r7, #4]
 8043de0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8043de2:	683b      	ldr	r3, [r7, #0]
 8043de4:	781b      	ldrb	r3, [r3, #0]
 8043de6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8043de8:	683b      	ldr	r3, [r7, #0]
 8043dea:	785b      	ldrb	r3, [r3, #1]
 8043dec:	2b01      	cmp	r3, #1
 8043dee:	d128      	bne.n	8043e42 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8043df0:	68bb      	ldr	r3, [r7, #8]
 8043df2:	015a      	lsls	r2, r3, #5
 8043df4:	68fb      	ldr	r3, [r7, #12]
 8043df6:	4413      	add	r3, r2
 8043df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043dfc:	681b      	ldr	r3, [r3, #0]
 8043dfe:	68ba      	ldr	r2, [r7, #8]
 8043e00:	0151      	lsls	r1, r2, #5
 8043e02:	68fa      	ldr	r2, [r7, #12]
 8043e04:	440a      	add	r2, r1
 8043e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8043e0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8043e0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8043e10:	683b      	ldr	r3, [r7, #0]
 8043e12:	791b      	ldrb	r3, [r3, #4]
 8043e14:	2b03      	cmp	r3, #3
 8043e16:	d003      	beq.n	8043e20 <USB_EPClearStall+0x4c>
 8043e18:	683b      	ldr	r3, [r7, #0]
 8043e1a:	791b      	ldrb	r3, [r3, #4]
 8043e1c:	2b02      	cmp	r3, #2
 8043e1e:	d138      	bne.n	8043e92 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8043e20:	68bb      	ldr	r3, [r7, #8]
 8043e22:	015a      	lsls	r2, r3, #5
 8043e24:	68fb      	ldr	r3, [r7, #12]
 8043e26:	4413      	add	r3, r2
 8043e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8043e2c:	681b      	ldr	r3, [r3, #0]
 8043e2e:	68ba      	ldr	r2, [r7, #8]
 8043e30:	0151      	lsls	r1, r2, #5
 8043e32:	68fa      	ldr	r2, [r7, #12]
 8043e34:	440a      	add	r2, r1
 8043e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8043e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8043e3e:	6013      	str	r3, [r2, #0]
 8043e40:	e027      	b.n	8043e92 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8043e42:	68bb      	ldr	r3, [r7, #8]
 8043e44:	015a      	lsls	r2, r3, #5
 8043e46:	68fb      	ldr	r3, [r7, #12]
 8043e48:	4413      	add	r3, r2
 8043e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043e4e:	681b      	ldr	r3, [r3, #0]
 8043e50:	68ba      	ldr	r2, [r7, #8]
 8043e52:	0151      	lsls	r1, r2, #5
 8043e54:	68fa      	ldr	r2, [r7, #12]
 8043e56:	440a      	add	r2, r1
 8043e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8043e5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8043e60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8043e62:	683b      	ldr	r3, [r7, #0]
 8043e64:	791b      	ldrb	r3, [r3, #4]
 8043e66:	2b03      	cmp	r3, #3
 8043e68:	d003      	beq.n	8043e72 <USB_EPClearStall+0x9e>
 8043e6a:	683b      	ldr	r3, [r7, #0]
 8043e6c:	791b      	ldrb	r3, [r3, #4]
 8043e6e:	2b02      	cmp	r3, #2
 8043e70:	d10f      	bne.n	8043e92 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8043e72:	68bb      	ldr	r3, [r7, #8]
 8043e74:	015a      	lsls	r2, r3, #5
 8043e76:	68fb      	ldr	r3, [r7, #12]
 8043e78:	4413      	add	r3, r2
 8043e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8043e7e:	681b      	ldr	r3, [r3, #0]
 8043e80:	68ba      	ldr	r2, [r7, #8]
 8043e82:	0151      	lsls	r1, r2, #5
 8043e84:	68fa      	ldr	r2, [r7, #12]
 8043e86:	440a      	add	r2, r1
 8043e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8043e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8043e90:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8043e92:	2300      	movs	r3, #0
}
 8043e94:	4618      	mov	r0, r3
 8043e96:	3714      	adds	r7, #20
 8043e98:	46bd      	mov	sp, r7
 8043e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e9e:	4770      	bx	lr

08043ea0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8043ea0:	b480      	push	{r7}
 8043ea2:	b085      	sub	sp, #20
 8043ea4:	af00      	add	r7, sp, #0
 8043ea6:	6078      	str	r0, [r7, #4]
 8043ea8:	460b      	mov	r3, r1
 8043eaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043eac:	687b      	ldr	r3, [r7, #4]
 8043eae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8043eb0:	68fb      	ldr	r3, [r7, #12]
 8043eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8043eb6:	681b      	ldr	r3, [r3, #0]
 8043eb8:	68fa      	ldr	r2, [r7, #12]
 8043eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8043ebe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8043ec2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8043ec4:	68fb      	ldr	r3, [r7, #12]
 8043ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8043eca:	681a      	ldr	r2, [r3, #0]
 8043ecc:	78fb      	ldrb	r3, [r7, #3]
 8043ece:	011b      	lsls	r3, r3, #4
 8043ed0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8043ed4:	68f9      	ldr	r1, [r7, #12]
 8043ed6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8043eda:	4313      	orrs	r3, r2
 8043edc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8043ede:	2300      	movs	r3, #0
}
 8043ee0:	4618      	mov	r0, r3
 8043ee2:	3714      	adds	r7, #20
 8043ee4:	46bd      	mov	sp, r7
 8043ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043eea:	4770      	bx	lr

08043eec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8043eec:	b480      	push	{r7}
 8043eee:	b085      	sub	sp, #20
 8043ef0:	af00      	add	r7, sp, #0
 8043ef2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043ef4:	687b      	ldr	r3, [r7, #4]
 8043ef6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8043ef8:	68fb      	ldr	r3, [r7, #12]
 8043efa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8043efe:	681b      	ldr	r3, [r3, #0]
 8043f00:	68fa      	ldr	r2, [r7, #12]
 8043f02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8043f06:	f023 0303 	bic.w	r3, r3, #3
 8043f0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8043f0c:	68fb      	ldr	r3, [r7, #12]
 8043f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8043f12:	685b      	ldr	r3, [r3, #4]
 8043f14:	68fa      	ldr	r2, [r7, #12]
 8043f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8043f1a:	f023 0302 	bic.w	r3, r3, #2
 8043f1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8043f20:	2300      	movs	r3, #0
}
 8043f22:	4618      	mov	r0, r3
 8043f24:	3714      	adds	r7, #20
 8043f26:	46bd      	mov	sp, r7
 8043f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f2c:	4770      	bx	lr

08043f2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8043f2e:	b480      	push	{r7}
 8043f30:	b085      	sub	sp, #20
 8043f32:	af00      	add	r7, sp, #0
 8043f34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043f36:	687b      	ldr	r3, [r7, #4]
 8043f38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8043f3a:	68fb      	ldr	r3, [r7, #12]
 8043f3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8043f40:	681b      	ldr	r3, [r3, #0]
 8043f42:	68fa      	ldr	r2, [r7, #12]
 8043f44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8043f48:	f023 0303 	bic.w	r3, r3, #3
 8043f4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8043f4e:	68fb      	ldr	r3, [r7, #12]
 8043f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8043f54:	685b      	ldr	r3, [r3, #4]
 8043f56:	68fa      	ldr	r2, [r7, #12]
 8043f58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8043f5c:	f043 0302 	orr.w	r3, r3, #2
 8043f60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8043f62:	2300      	movs	r3, #0
}
 8043f64:	4618      	mov	r0, r3
 8043f66:	3714      	adds	r7, #20
 8043f68:	46bd      	mov	sp, r7
 8043f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f6e:	4770      	bx	lr

08043f70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8043f70:	b480      	push	{r7}
 8043f72:	b085      	sub	sp, #20
 8043f74:	af00      	add	r7, sp, #0
 8043f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8043f78:	687b      	ldr	r3, [r7, #4]
 8043f7a:	695b      	ldr	r3, [r3, #20]
 8043f7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8043f7e:	687b      	ldr	r3, [r7, #4]
 8043f80:	699b      	ldr	r3, [r3, #24]
 8043f82:	68fa      	ldr	r2, [r7, #12]
 8043f84:	4013      	ands	r3, r2
 8043f86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8043f88:	68fb      	ldr	r3, [r7, #12]
}
 8043f8a:	4618      	mov	r0, r3
 8043f8c:	3714      	adds	r7, #20
 8043f8e:	46bd      	mov	sp, r7
 8043f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f94:	4770      	bx	lr

08043f96 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8043f96:	b480      	push	{r7}
 8043f98:	b085      	sub	sp, #20
 8043f9a:	af00      	add	r7, sp, #0
 8043f9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043f9e:	687b      	ldr	r3, [r7, #4]
 8043fa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8043fa2:	68fb      	ldr	r3, [r7, #12]
 8043fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8043fa8:	699b      	ldr	r3, [r3, #24]
 8043faa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8043fac:	68fb      	ldr	r3, [r7, #12]
 8043fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8043fb2:	69db      	ldr	r3, [r3, #28]
 8043fb4:	68ba      	ldr	r2, [r7, #8]
 8043fb6:	4013      	ands	r3, r2
 8043fb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8043fba:	68bb      	ldr	r3, [r7, #8]
 8043fbc:	0c1b      	lsrs	r3, r3, #16
}
 8043fbe:	4618      	mov	r0, r3
 8043fc0:	3714      	adds	r7, #20
 8043fc2:	46bd      	mov	sp, r7
 8043fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043fc8:	4770      	bx	lr

08043fca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8043fca:	b480      	push	{r7}
 8043fcc:	b085      	sub	sp, #20
 8043fce:	af00      	add	r7, sp, #0
 8043fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043fd2:	687b      	ldr	r3, [r7, #4]
 8043fd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8043fd6:	68fb      	ldr	r3, [r7, #12]
 8043fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8043fdc:	699b      	ldr	r3, [r3, #24]
 8043fde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8043fe0:	68fb      	ldr	r3, [r7, #12]
 8043fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8043fe6:	69db      	ldr	r3, [r3, #28]
 8043fe8:	68ba      	ldr	r2, [r7, #8]
 8043fea:	4013      	ands	r3, r2
 8043fec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8043fee:	68bb      	ldr	r3, [r7, #8]
 8043ff0:	b29b      	uxth	r3, r3
}
 8043ff2:	4618      	mov	r0, r3
 8043ff4:	3714      	adds	r7, #20
 8043ff6:	46bd      	mov	sp, r7
 8043ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043ffc:	4770      	bx	lr

08043ffe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8043ffe:	b480      	push	{r7}
 8044000:	b085      	sub	sp, #20
 8044002:	af00      	add	r7, sp, #0
 8044004:	6078      	str	r0, [r7, #4]
 8044006:	460b      	mov	r3, r1
 8044008:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804400a:	687b      	ldr	r3, [r7, #4]
 804400c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 804400e:	78fb      	ldrb	r3, [r7, #3]
 8044010:	015a      	lsls	r2, r3, #5
 8044012:	68fb      	ldr	r3, [r7, #12]
 8044014:	4413      	add	r3, r2
 8044016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804401a:	689b      	ldr	r3, [r3, #8]
 804401c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 804401e:	68fb      	ldr	r3, [r7, #12]
 8044020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8044024:	695b      	ldr	r3, [r3, #20]
 8044026:	68ba      	ldr	r2, [r7, #8]
 8044028:	4013      	ands	r3, r2
 804402a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 804402c:	68bb      	ldr	r3, [r7, #8]
}
 804402e:	4618      	mov	r0, r3
 8044030:	3714      	adds	r7, #20
 8044032:	46bd      	mov	sp, r7
 8044034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044038:	4770      	bx	lr

0804403a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 804403a:	b480      	push	{r7}
 804403c:	b087      	sub	sp, #28
 804403e:	af00      	add	r7, sp, #0
 8044040:	6078      	str	r0, [r7, #4]
 8044042:	460b      	mov	r3, r1
 8044044:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8044046:	687b      	ldr	r3, [r7, #4]
 8044048:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 804404a:	697b      	ldr	r3, [r7, #20]
 804404c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8044050:	691b      	ldr	r3, [r3, #16]
 8044052:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8044054:	697b      	ldr	r3, [r7, #20]
 8044056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 804405a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804405c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 804405e:	78fb      	ldrb	r3, [r7, #3]
 8044060:	f003 030f 	and.w	r3, r3, #15
 8044064:	68fa      	ldr	r2, [r7, #12]
 8044066:	fa22 f303 	lsr.w	r3, r2, r3
 804406a:	01db      	lsls	r3, r3, #7
 804406c:	b2db      	uxtb	r3, r3
 804406e:	693a      	ldr	r2, [r7, #16]
 8044070:	4313      	orrs	r3, r2
 8044072:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8044074:	78fb      	ldrb	r3, [r7, #3]
 8044076:	015a      	lsls	r2, r3, #5
 8044078:	697b      	ldr	r3, [r7, #20]
 804407a:	4413      	add	r3, r2
 804407c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8044080:	689b      	ldr	r3, [r3, #8]
 8044082:	693a      	ldr	r2, [r7, #16]
 8044084:	4013      	ands	r3, r2
 8044086:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8044088:	68bb      	ldr	r3, [r7, #8]
}
 804408a:	4618      	mov	r0, r3
 804408c:	371c      	adds	r7, #28
 804408e:	46bd      	mov	sp, r7
 8044090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044094:	4770      	bx	lr

08044096 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8044096:	b480      	push	{r7}
 8044098:	b083      	sub	sp, #12
 804409a:	af00      	add	r7, sp, #0
 804409c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 804409e:	687b      	ldr	r3, [r7, #4]
 80440a0:	695b      	ldr	r3, [r3, #20]
 80440a2:	f003 0301 	and.w	r3, r3, #1
}
 80440a6:	4618      	mov	r0, r3
 80440a8:	370c      	adds	r7, #12
 80440aa:	46bd      	mov	sp, r7
 80440ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80440b0:	4770      	bx	lr

080440b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80440b2:	b480      	push	{r7}
 80440b4:	b085      	sub	sp, #20
 80440b6:	af00      	add	r7, sp, #0
 80440b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80440ba:	687b      	ldr	r3, [r7, #4]
 80440bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80440be:	68fb      	ldr	r3, [r7, #12]
 80440c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80440c4:	681b      	ldr	r3, [r3, #0]
 80440c6:	68fa      	ldr	r2, [r7, #12]
 80440c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80440cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80440d0:	f023 0307 	bic.w	r3, r3, #7
 80440d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80440d6:	68fb      	ldr	r3, [r7, #12]
 80440d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80440dc:	685b      	ldr	r3, [r3, #4]
 80440de:	68fa      	ldr	r2, [r7, #12]
 80440e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80440e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80440e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80440ea:	2300      	movs	r3, #0
}
 80440ec:	4618      	mov	r0, r3
 80440ee:	3714      	adds	r7, #20
 80440f0:	46bd      	mov	sp, r7
 80440f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80440f6:	4770      	bx	lr

080440f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80440f8:	b480      	push	{r7}
 80440fa:	b087      	sub	sp, #28
 80440fc:	af00      	add	r7, sp, #0
 80440fe:	60f8      	str	r0, [r7, #12]
 8044100:	460b      	mov	r3, r1
 8044102:	607a      	str	r2, [r7, #4]
 8044104:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8044106:	68fb      	ldr	r3, [r7, #12]
 8044108:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 804410a:	68fb      	ldr	r3, [r7, #12]
 804410c:	333c      	adds	r3, #60	; 0x3c
 804410e:	3304      	adds	r3, #4
 8044110:	681b      	ldr	r3, [r3, #0]
 8044112:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8044114:	693b      	ldr	r3, [r7, #16]
 8044116:	4a26      	ldr	r2, [pc, #152]	; (80441b0 <USB_EP0_OutStart+0xb8>)
 8044118:	4293      	cmp	r3, r2
 804411a:	d90a      	bls.n	8044132 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 804411c:	697b      	ldr	r3, [r7, #20]
 804411e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8044122:	681b      	ldr	r3, [r3, #0]
 8044124:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8044128:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804412c:	d101      	bne.n	8044132 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 804412e:	2300      	movs	r3, #0
 8044130:	e037      	b.n	80441a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8044132:	697b      	ldr	r3, [r7, #20]
 8044134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8044138:	461a      	mov	r2, r3
 804413a:	2300      	movs	r3, #0
 804413c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 804413e:	697b      	ldr	r3, [r7, #20]
 8044140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8044144:	691b      	ldr	r3, [r3, #16]
 8044146:	697a      	ldr	r2, [r7, #20]
 8044148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 804414c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8044150:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8044152:	697b      	ldr	r3, [r7, #20]
 8044154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8044158:	691b      	ldr	r3, [r3, #16]
 804415a:	697a      	ldr	r2, [r7, #20]
 804415c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8044160:	f043 0318 	orr.w	r3, r3, #24
 8044164:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8044166:	697b      	ldr	r3, [r7, #20]
 8044168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 804416c:	691b      	ldr	r3, [r3, #16]
 804416e:	697a      	ldr	r2, [r7, #20]
 8044170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8044174:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8044178:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 804417a:	7afb      	ldrb	r3, [r7, #11]
 804417c:	2b01      	cmp	r3, #1
 804417e:	d10f      	bne.n	80441a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8044180:	697b      	ldr	r3, [r7, #20]
 8044182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8044186:	461a      	mov	r2, r3
 8044188:	687b      	ldr	r3, [r7, #4]
 804418a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 804418c:	697b      	ldr	r3, [r7, #20]
 804418e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8044192:	681b      	ldr	r3, [r3, #0]
 8044194:	697a      	ldr	r2, [r7, #20]
 8044196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 804419a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 804419e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80441a0:	2300      	movs	r3, #0
}
 80441a2:	4618      	mov	r0, r3
 80441a4:	371c      	adds	r7, #28
 80441a6:	46bd      	mov	sp, r7
 80441a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80441ac:	4770      	bx	lr
 80441ae:	bf00      	nop
 80441b0:	4f54300a 	.word	0x4f54300a

080441b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80441b4:	b480      	push	{r7}
 80441b6:	b085      	sub	sp, #20
 80441b8:	af00      	add	r7, sp, #0
 80441ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80441bc:	2300      	movs	r3, #0
 80441be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80441c0:	68fb      	ldr	r3, [r7, #12]
 80441c2:	3301      	adds	r3, #1
 80441c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80441c6:	68fb      	ldr	r3, [r7, #12]
 80441c8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80441cc:	d901      	bls.n	80441d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80441ce:	2303      	movs	r3, #3
 80441d0:	e01b      	b.n	804420a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80441d2:	687b      	ldr	r3, [r7, #4]
 80441d4:	691b      	ldr	r3, [r3, #16]
 80441d6:	2b00      	cmp	r3, #0
 80441d8:	daf2      	bge.n	80441c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80441da:	2300      	movs	r3, #0
 80441dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80441de:	687b      	ldr	r3, [r7, #4]
 80441e0:	691b      	ldr	r3, [r3, #16]
 80441e2:	f043 0201 	orr.w	r2, r3, #1
 80441e6:	687b      	ldr	r3, [r7, #4]
 80441e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80441ea:	68fb      	ldr	r3, [r7, #12]
 80441ec:	3301      	adds	r3, #1
 80441ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80441f0:	68fb      	ldr	r3, [r7, #12]
 80441f2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80441f6:	d901      	bls.n	80441fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80441f8:	2303      	movs	r3, #3
 80441fa:	e006      	b.n	804420a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80441fc:	687b      	ldr	r3, [r7, #4]
 80441fe:	691b      	ldr	r3, [r3, #16]
 8044200:	f003 0301 	and.w	r3, r3, #1
 8044204:	2b01      	cmp	r3, #1
 8044206:	d0f0      	beq.n	80441ea <USB_CoreReset+0x36>

  return HAL_OK;
 8044208:	2300      	movs	r3, #0
}
 804420a:	4618      	mov	r0, r3
 804420c:	3714      	adds	r7, #20
 804420e:	46bd      	mov	sp, r7
 8044210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044214:	4770      	bx	lr
	...

08044218 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8044218:	b580      	push	{r7, lr}
 804421a:	b084      	sub	sp, #16
 804421c:	af00      	add	r7, sp, #0
 804421e:	6078      	str	r0, [r7, #4]
 8044220:	460b      	mov	r3, r1
 8044222:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8044224:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8044228:	f002 fc24 	bl	8046a74 <USBD_static_malloc>
 804422c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 804422e:	68fb      	ldr	r3, [r7, #12]
 8044230:	2b00      	cmp	r3, #0
 8044232:	d109      	bne.n	8044248 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8044234:	687b      	ldr	r3, [r7, #4]
 8044236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 804423a:	687b      	ldr	r3, [r7, #4]
 804423c:	32b0      	adds	r2, #176	; 0xb0
 804423e:	2100      	movs	r1, #0
 8044240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8044244:	2302      	movs	r3, #2
 8044246:	e0d4      	b.n	80443f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8044248:	f44f 7207 	mov.w	r2, #540	; 0x21c
 804424c:	2100      	movs	r1, #0
 804424e:	68f8      	ldr	r0, [r7, #12]
 8044250:	f002 fc54 	bl	8046afc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8044254:	687b      	ldr	r3, [r7, #4]
 8044256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 804425a:	687b      	ldr	r3, [r7, #4]
 804425c:	32b0      	adds	r2, #176	; 0xb0
 804425e:	68f9      	ldr	r1, [r7, #12]
 8044260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8044264:	687b      	ldr	r3, [r7, #4]
 8044266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 804426a:	687b      	ldr	r3, [r7, #4]
 804426c:	32b0      	adds	r2, #176	; 0xb0
 804426e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8044272:	687b      	ldr	r3, [r7, #4]
 8044274:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8044278:	687b      	ldr	r3, [r7, #4]
 804427a:	7c1b      	ldrb	r3, [r3, #16]
 804427c:	2b00      	cmp	r3, #0
 804427e:	d138      	bne.n	80442f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8044280:	4b5e      	ldr	r3, [pc, #376]	; (80443fc <USBD_CDC_Init+0x1e4>)
 8044282:	7819      	ldrb	r1, [r3, #0]
 8044284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8044288:	2202      	movs	r2, #2
 804428a:	6878      	ldr	r0, [r7, #4]
 804428c:	f002 facf 	bl	804682e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8044290:	4b5a      	ldr	r3, [pc, #360]	; (80443fc <USBD_CDC_Init+0x1e4>)
 8044292:	781b      	ldrb	r3, [r3, #0]
 8044294:	f003 020f 	and.w	r2, r3, #15
 8044298:	6879      	ldr	r1, [r7, #4]
 804429a:	4613      	mov	r3, r2
 804429c:	009b      	lsls	r3, r3, #2
 804429e:	4413      	add	r3, r2
 80442a0:	009b      	lsls	r3, r3, #2
 80442a2:	440b      	add	r3, r1
 80442a4:	3324      	adds	r3, #36	; 0x24
 80442a6:	2201      	movs	r2, #1
 80442a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80442aa:	4b55      	ldr	r3, [pc, #340]	; (8044400 <USBD_CDC_Init+0x1e8>)
 80442ac:	7819      	ldrb	r1, [r3, #0]
 80442ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80442b2:	2202      	movs	r2, #2
 80442b4:	6878      	ldr	r0, [r7, #4]
 80442b6:	f002 faba 	bl	804682e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80442ba:	4b51      	ldr	r3, [pc, #324]	; (8044400 <USBD_CDC_Init+0x1e8>)
 80442bc:	781b      	ldrb	r3, [r3, #0]
 80442be:	f003 020f 	and.w	r2, r3, #15
 80442c2:	6879      	ldr	r1, [r7, #4]
 80442c4:	4613      	mov	r3, r2
 80442c6:	009b      	lsls	r3, r3, #2
 80442c8:	4413      	add	r3, r2
 80442ca:	009b      	lsls	r3, r3, #2
 80442cc:	440b      	add	r3, r1
 80442ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80442d2:	2201      	movs	r2, #1
 80442d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80442d6:	4b4b      	ldr	r3, [pc, #300]	; (8044404 <USBD_CDC_Init+0x1ec>)
 80442d8:	781b      	ldrb	r3, [r3, #0]
 80442da:	f003 020f 	and.w	r2, r3, #15
 80442de:	6879      	ldr	r1, [r7, #4]
 80442e0:	4613      	mov	r3, r2
 80442e2:	009b      	lsls	r3, r3, #2
 80442e4:	4413      	add	r3, r2
 80442e6:	009b      	lsls	r3, r3, #2
 80442e8:	440b      	add	r3, r1
 80442ea:	3326      	adds	r3, #38	; 0x26
 80442ec:	2210      	movs	r2, #16
 80442ee:	801a      	strh	r2, [r3, #0]
 80442f0:	e035      	b.n	804435e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80442f2:	4b42      	ldr	r3, [pc, #264]	; (80443fc <USBD_CDC_Init+0x1e4>)
 80442f4:	7819      	ldrb	r1, [r3, #0]
 80442f6:	2340      	movs	r3, #64	; 0x40
 80442f8:	2202      	movs	r2, #2
 80442fa:	6878      	ldr	r0, [r7, #4]
 80442fc:	f002 fa97 	bl	804682e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8044300:	4b3e      	ldr	r3, [pc, #248]	; (80443fc <USBD_CDC_Init+0x1e4>)
 8044302:	781b      	ldrb	r3, [r3, #0]
 8044304:	f003 020f 	and.w	r2, r3, #15
 8044308:	6879      	ldr	r1, [r7, #4]
 804430a:	4613      	mov	r3, r2
 804430c:	009b      	lsls	r3, r3, #2
 804430e:	4413      	add	r3, r2
 8044310:	009b      	lsls	r3, r3, #2
 8044312:	440b      	add	r3, r1
 8044314:	3324      	adds	r3, #36	; 0x24
 8044316:	2201      	movs	r2, #1
 8044318:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 804431a:	4b39      	ldr	r3, [pc, #228]	; (8044400 <USBD_CDC_Init+0x1e8>)
 804431c:	7819      	ldrb	r1, [r3, #0]
 804431e:	2340      	movs	r3, #64	; 0x40
 8044320:	2202      	movs	r2, #2
 8044322:	6878      	ldr	r0, [r7, #4]
 8044324:	f002 fa83 	bl	804682e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8044328:	4b35      	ldr	r3, [pc, #212]	; (8044400 <USBD_CDC_Init+0x1e8>)
 804432a:	781b      	ldrb	r3, [r3, #0]
 804432c:	f003 020f 	and.w	r2, r3, #15
 8044330:	6879      	ldr	r1, [r7, #4]
 8044332:	4613      	mov	r3, r2
 8044334:	009b      	lsls	r3, r3, #2
 8044336:	4413      	add	r3, r2
 8044338:	009b      	lsls	r3, r3, #2
 804433a:	440b      	add	r3, r1
 804433c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8044340:	2201      	movs	r2, #1
 8044342:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8044344:	4b2f      	ldr	r3, [pc, #188]	; (8044404 <USBD_CDC_Init+0x1ec>)
 8044346:	781b      	ldrb	r3, [r3, #0]
 8044348:	f003 020f 	and.w	r2, r3, #15
 804434c:	6879      	ldr	r1, [r7, #4]
 804434e:	4613      	mov	r3, r2
 8044350:	009b      	lsls	r3, r3, #2
 8044352:	4413      	add	r3, r2
 8044354:	009b      	lsls	r3, r3, #2
 8044356:	440b      	add	r3, r1
 8044358:	3326      	adds	r3, #38	; 0x26
 804435a:	2210      	movs	r2, #16
 804435c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 804435e:	4b29      	ldr	r3, [pc, #164]	; (8044404 <USBD_CDC_Init+0x1ec>)
 8044360:	7819      	ldrb	r1, [r3, #0]
 8044362:	2308      	movs	r3, #8
 8044364:	2203      	movs	r2, #3
 8044366:	6878      	ldr	r0, [r7, #4]
 8044368:	f002 fa61 	bl	804682e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 804436c:	4b25      	ldr	r3, [pc, #148]	; (8044404 <USBD_CDC_Init+0x1ec>)
 804436e:	781b      	ldrb	r3, [r3, #0]
 8044370:	f003 020f 	and.w	r2, r3, #15
 8044374:	6879      	ldr	r1, [r7, #4]
 8044376:	4613      	mov	r3, r2
 8044378:	009b      	lsls	r3, r3, #2
 804437a:	4413      	add	r3, r2
 804437c:	009b      	lsls	r3, r3, #2
 804437e:	440b      	add	r3, r1
 8044380:	3324      	adds	r3, #36	; 0x24
 8044382:	2201      	movs	r2, #1
 8044384:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8044386:	68fb      	ldr	r3, [r7, #12]
 8044388:	2200      	movs	r2, #0
 804438a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 804438e:	687b      	ldr	r3, [r7, #4]
 8044390:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8044394:	687a      	ldr	r2, [r7, #4]
 8044396:	33b0      	adds	r3, #176	; 0xb0
 8044398:	009b      	lsls	r3, r3, #2
 804439a:	4413      	add	r3, r2
 804439c:	685b      	ldr	r3, [r3, #4]
 804439e:	681b      	ldr	r3, [r3, #0]
 80443a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80443a2:	68fb      	ldr	r3, [r7, #12]
 80443a4:	2200      	movs	r2, #0
 80443a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80443aa:	68fb      	ldr	r3, [r7, #12]
 80443ac:	2200      	movs	r2, #0
 80443ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80443b2:	68fb      	ldr	r3, [r7, #12]
 80443b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80443b8:	2b00      	cmp	r3, #0
 80443ba:	d101      	bne.n	80443c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80443bc:	2302      	movs	r3, #2
 80443be:	e018      	b.n	80443f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80443c0:	687b      	ldr	r3, [r7, #4]
 80443c2:	7c1b      	ldrb	r3, [r3, #16]
 80443c4:	2b00      	cmp	r3, #0
 80443c6:	d10a      	bne.n	80443de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80443c8:	4b0d      	ldr	r3, [pc, #52]	; (8044400 <USBD_CDC_Init+0x1e8>)
 80443ca:	7819      	ldrb	r1, [r3, #0]
 80443cc:	68fb      	ldr	r3, [r7, #12]
 80443ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80443d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80443d6:	6878      	ldr	r0, [r7, #4]
 80443d8:	f002 fb18 	bl	8046a0c <USBD_LL_PrepareReceive>
 80443dc:	e008      	b.n	80443f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80443de:	4b08      	ldr	r3, [pc, #32]	; (8044400 <USBD_CDC_Init+0x1e8>)
 80443e0:	7819      	ldrb	r1, [r3, #0]
 80443e2:	68fb      	ldr	r3, [r7, #12]
 80443e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80443e8:	2340      	movs	r3, #64	; 0x40
 80443ea:	6878      	ldr	r0, [r7, #4]
 80443ec:	f002 fb0e 	bl	8046a0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80443f0:	2300      	movs	r3, #0
}
 80443f2:	4618      	mov	r0, r3
 80443f4:	3710      	adds	r7, #16
 80443f6:	46bd      	mov	sp, r7
 80443f8:	bd80      	pop	{r7, pc}
 80443fa:	bf00      	nop
 80443fc:	20000093 	.word	0x20000093
 8044400:	20000094 	.word	0x20000094
 8044404:	20000095 	.word	0x20000095

08044408 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8044408:	b580      	push	{r7, lr}
 804440a:	b082      	sub	sp, #8
 804440c:	af00      	add	r7, sp, #0
 804440e:	6078      	str	r0, [r7, #4]
 8044410:	460b      	mov	r3, r1
 8044412:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8044414:	4b3a      	ldr	r3, [pc, #232]	; (8044500 <USBD_CDC_DeInit+0xf8>)
 8044416:	781b      	ldrb	r3, [r3, #0]
 8044418:	4619      	mov	r1, r3
 804441a:	6878      	ldr	r0, [r7, #4]
 804441c:	f002 fa2d 	bl	804687a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8044420:	4b37      	ldr	r3, [pc, #220]	; (8044500 <USBD_CDC_DeInit+0xf8>)
 8044422:	781b      	ldrb	r3, [r3, #0]
 8044424:	f003 020f 	and.w	r2, r3, #15
 8044428:	6879      	ldr	r1, [r7, #4]
 804442a:	4613      	mov	r3, r2
 804442c:	009b      	lsls	r3, r3, #2
 804442e:	4413      	add	r3, r2
 8044430:	009b      	lsls	r3, r3, #2
 8044432:	440b      	add	r3, r1
 8044434:	3324      	adds	r3, #36	; 0x24
 8044436:	2200      	movs	r2, #0
 8044438:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 804443a:	4b32      	ldr	r3, [pc, #200]	; (8044504 <USBD_CDC_DeInit+0xfc>)
 804443c:	781b      	ldrb	r3, [r3, #0]
 804443e:	4619      	mov	r1, r3
 8044440:	6878      	ldr	r0, [r7, #4]
 8044442:	f002 fa1a 	bl	804687a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8044446:	4b2f      	ldr	r3, [pc, #188]	; (8044504 <USBD_CDC_DeInit+0xfc>)
 8044448:	781b      	ldrb	r3, [r3, #0]
 804444a:	f003 020f 	and.w	r2, r3, #15
 804444e:	6879      	ldr	r1, [r7, #4]
 8044450:	4613      	mov	r3, r2
 8044452:	009b      	lsls	r3, r3, #2
 8044454:	4413      	add	r3, r2
 8044456:	009b      	lsls	r3, r3, #2
 8044458:	440b      	add	r3, r1
 804445a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 804445e:	2200      	movs	r2, #0
 8044460:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8044462:	4b29      	ldr	r3, [pc, #164]	; (8044508 <USBD_CDC_DeInit+0x100>)
 8044464:	781b      	ldrb	r3, [r3, #0]
 8044466:	4619      	mov	r1, r3
 8044468:	6878      	ldr	r0, [r7, #4]
 804446a:	f002 fa06 	bl	804687a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 804446e:	4b26      	ldr	r3, [pc, #152]	; (8044508 <USBD_CDC_DeInit+0x100>)
 8044470:	781b      	ldrb	r3, [r3, #0]
 8044472:	f003 020f 	and.w	r2, r3, #15
 8044476:	6879      	ldr	r1, [r7, #4]
 8044478:	4613      	mov	r3, r2
 804447a:	009b      	lsls	r3, r3, #2
 804447c:	4413      	add	r3, r2
 804447e:	009b      	lsls	r3, r3, #2
 8044480:	440b      	add	r3, r1
 8044482:	3324      	adds	r3, #36	; 0x24
 8044484:	2200      	movs	r2, #0
 8044486:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8044488:	4b1f      	ldr	r3, [pc, #124]	; (8044508 <USBD_CDC_DeInit+0x100>)
 804448a:	781b      	ldrb	r3, [r3, #0]
 804448c:	f003 020f 	and.w	r2, r3, #15
 8044490:	6879      	ldr	r1, [r7, #4]
 8044492:	4613      	mov	r3, r2
 8044494:	009b      	lsls	r3, r3, #2
 8044496:	4413      	add	r3, r2
 8044498:	009b      	lsls	r3, r3, #2
 804449a:	440b      	add	r3, r1
 804449c:	3326      	adds	r3, #38	; 0x26
 804449e:	2200      	movs	r2, #0
 80444a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80444a2:	687b      	ldr	r3, [r7, #4]
 80444a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80444a8:	687b      	ldr	r3, [r7, #4]
 80444aa:	32b0      	adds	r2, #176	; 0xb0
 80444ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80444b0:	2b00      	cmp	r3, #0
 80444b2:	d01f      	beq.n	80444f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80444b4:	687b      	ldr	r3, [r7, #4]
 80444b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80444ba:	687a      	ldr	r2, [r7, #4]
 80444bc:	33b0      	adds	r3, #176	; 0xb0
 80444be:	009b      	lsls	r3, r3, #2
 80444c0:	4413      	add	r3, r2
 80444c2:	685b      	ldr	r3, [r3, #4]
 80444c4:	685b      	ldr	r3, [r3, #4]
 80444c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80444c8:	687b      	ldr	r3, [r7, #4]
 80444ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80444ce:	687b      	ldr	r3, [r7, #4]
 80444d0:	32b0      	adds	r2, #176	; 0xb0
 80444d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80444d6:	4618      	mov	r0, r3
 80444d8:	f002 fada 	bl	8046a90 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80444dc:	687b      	ldr	r3, [r7, #4]
 80444de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80444e2:	687b      	ldr	r3, [r7, #4]
 80444e4:	32b0      	adds	r2, #176	; 0xb0
 80444e6:	2100      	movs	r1, #0
 80444e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80444ec:	687b      	ldr	r3, [r7, #4]
 80444ee:	2200      	movs	r2, #0
 80444f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80444f4:	2300      	movs	r3, #0
}
 80444f6:	4618      	mov	r0, r3
 80444f8:	3708      	adds	r7, #8
 80444fa:	46bd      	mov	sp, r7
 80444fc:	bd80      	pop	{r7, pc}
 80444fe:	bf00      	nop
 8044500:	20000093 	.word	0x20000093
 8044504:	20000094 	.word	0x20000094
 8044508:	20000095 	.word	0x20000095

0804450c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 804450c:	b580      	push	{r7, lr}
 804450e:	b086      	sub	sp, #24
 8044510:	af00      	add	r7, sp, #0
 8044512:	6078      	str	r0, [r7, #4]
 8044514:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8044516:	687b      	ldr	r3, [r7, #4]
 8044518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 804451c:	687b      	ldr	r3, [r7, #4]
 804451e:	32b0      	adds	r2, #176	; 0xb0
 8044520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044524:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8044526:	2300      	movs	r3, #0
 8044528:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 804452a:	2300      	movs	r3, #0
 804452c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 804452e:	2300      	movs	r3, #0
 8044530:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8044532:	693b      	ldr	r3, [r7, #16]
 8044534:	2b00      	cmp	r3, #0
 8044536:	d101      	bne.n	804453c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8044538:	2303      	movs	r3, #3
 804453a:	e0bf      	b.n	80446bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 804453c:	683b      	ldr	r3, [r7, #0]
 804453e:	781b      	ldrb	r3, [r3, #0]
 8044540:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8044544:	2b00      	cmp	r3, #0
 8044546:	d050      	beq.n	80445ea <USBD_CDC_Setup+0xde>
 8044548:	2b20      	cmp	r3, #32
 804454a:	f040 80af 	bne.w	80446ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 804454e:	683b      	ldr	r3, [r7, #0]
 8044550:	88db      	ldrh	r3, [r3, #6]
 8044552:	2b00      	cmp	r3, #0
 8044554:	d03a      	beq.n	80445cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8044556:	683b      	ldr	r3, [r7, #0]
 8044558:	781b      	ldrb	r3, [r3, #0]
 804455a:	b25b      	sxtb	r3, r3
 804455c:	2b00      	cmp	r3, #0
 804455e:	da1b      	bge.n	8044598 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8044560:	687b      	ldr	r3, [r7, #4]
 8044562:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8044566:	687a      	ldr	r2, [r7, #4]
 8044568:	33b0      	adds	r3, #176	; 0xb0
 804456a:	009b      	lsls	r3, r3, #2
 804456c:	4413      	add	r3, r2
 804456e:	685b      	ldr	r3, [r3, #4]
 8044570:	689b      	ldr	r3, [r3, #8]
 8044572:	683a      	ldr	r2, [r7, #0]
 8044574:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8044576:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8044578:	683a      	ldr	r2, [r7, #0]
 804457a:	88d2      	ldrh	r2, [r2, #6]
 804457c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 804457e:	683b      	ldr	r3, [r7, #0]
 8044580:	88db      	ldrh	r3, [r3, #6]
 8044582:	2b07      	cmp	r3, #7
 8044584:	bf28      	it	cs
 8044586:	2307      	movcs	r3, #7
 8044588:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 804458a:	693b      	ldr	r3, [r7, #16]
 804458c:	89fa      	ldrh	r2, [r7, #14]
 804458e:	4619      	mov	r1, r3
 8044590:	6878      	ldr	r0, [r7, #4]
 8044592:	f001 fd49 	bl	8046028 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8044596:	e090      	b.n	80446ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8044598:	683b      	ldr	r3, [r7, #0]
 804459a:	785a      	ldrb	r2, [r3, #1]
 804459c:	693b      	ldr	r3, [r7, #16]
 804459e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80445a2:	683b      	ldr	r3, [r7, #0]
 80445a4:	88db      	ldrh	r3, [r3, #6]
 80445a6:	2b3f      	cmp	r3, #63	; 0x3f
 80445a8:	d803      	bhi.n	80445b2 <USBD_CDC_Setup+0xa6>
 80445aa:	683b      	ldr	r3, [r7, #0]
 80445ac:	88db      	ldrh	r3, [r3, #6]
 80445ae:	b2da      	uxtb	r2, r3
 80445b0:	e000      	b.n	80445b4 <USBD_CDC_Setup+0xa8>
 80445b2:	2240      	movs	r2, #64	; 0x40
 80445b4:	693b      	ldr	r3, [r7, #16]
 80445b6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80445ba:	6939      	ldr	r1, [r7, #16]
 80445bc:	693b      	ldr	r3, [r7, #16]
 80445be:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80445c2:	461a      	mov	r2, r3
 80445c4:	6878      	ldr	r0, [r7, #4]
 80445c6:	f001 fd5b 	bl	8046080 <USBD_CtlPrepareRx>
      break;
 80445ca:	e076      	b.n	80446ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80445cc:	687b      	ldr	r3, [r7, #4]
 80445ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80445d2:	687a      	ldr	r2, [r7, #4]
 80445d4:	33b0      	adds	r3, #176	; 0xb0
 80445d6:	009b      	lsls	r3, r3, #2
 80445d8:	4413      	add	r3, r2
 80445da:	685b      	ldr	r3, [r3, #4]
 80445dc:	689b      	ldr	r3, [r3, #8]
 80445de:	683a      	ldr	r2, [r7, #0]
 80445e0:	7850      	ldrb	r0, [r2, #1]
 80445e2:	2200      	movs	r2, #0
 80445e4:	6839      	ldr	r1, [r7, #0]
 80445e6:	4798      	blx	r3
      break;
 80445e8:	e067      	b.n	80446ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80445ea:	683b      	ldr	r3, [r7, #0]
 80445ec:	785b      	ldrb	r3, [r3, #1]
 80445ee:	2b0b      	cmp	r3, #11
 80445f0:	d851      	bhi.n	8044696 <USBD_CDC_Setup+0x18a>
 80445f2:	a201      	add	r2, pc, #4	; (adr r2, 80445f8 <USBD_CDC_Setup+0xec>)
 80445f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80445f8:	08044629 	.word	0x08044629
 80445fc:	080446a5 	.word	0x080446a5
 8044600:	08044697 	.word	0x08044697
 8044604:	08044697 	.word	0x08044697
 8044608:	08044697 	.word	0x08044697
 804460c:	08044697 	.word	0x08044697
 8044610:	08044697 	.word	0x08044697
 8044614:	08044697 	.word	0x08044697
 8044618:	08044697 	.word	0x08044697
 804461c:	08044697 	.word	0x08044697
 8044620:	08044653 	.word	0x08044653
 8044624:	0804467d 	.word	0x0804467d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8044628:	687b      	ldr	r3, [r7, #4]
 804462a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 804462e:	b2db      	uxtb	r3, r3
 8044630:	2b03      	cmp	r3, #3
 8044632:	d107      	bne.n	8044644 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8044634:	f107 030a 	add.w	r3, r7, #10
 8044638:	2202      	movs	r2, #2
 804463a:	4619      	mov	r1, r3
 804463c:	6878      	ldr	r0, [r7, #4]
 804463e:	f001 fcf3 	bl	8046028 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8044642:	e032      	b.n	80446aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8044644:	6839      	ldr	r1, [r7, #0]
 8044646:	6878      	ldr	r0, [r7, #4]
 8044648:	f001 fc7d 	bl	8045f46 <USBD_CtlError>
            ret = USBD_FAIL;
 804464c:	2303      	movs	r3, #3
 804464e:	75fb      	strb	r3, [r7, #23]
          break;
 8044650:	e02b      	b.n	80446aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8044652:	687b      	ldr	r3, [r7, #4]
 8044654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8044658:	b2db      	uxtb	r3, r3
 804465a:	2b03      	cmp	r3, #3
 804465c:	d107      	bne.n	804466e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 804465e:	f107 030d 	add.w	r3, r7, #13
 8044662:	2201      	movs	r2, #1
 8044664:	4619      	mov	r1, r3
 8044666:	6878      	ldr	r0, [r7, #4]
 8044668:	f001 fcde 	bl	8046028 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 804466c:	e01d      	b.n	80446aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 804466e:	6839      	ldr	r1, [r7, #0]
 8044670:	6878      	ldr	r0, [r7, #4]
 8044672:	f001 fc68 	bl	8045f46 <USBD_CtlError>
            ret = USBD_FAIL;
 8044676:	2303      	movs	r3, #3
 8044678:	75fb      	strb	r3, [r7, #23]
          break;
 804467a:	e016      	b.n	80446aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 804467c:	687b      	ldr	r3, [r7, #4]
 804467e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8044682:	b2db      	uxtb	r3, r3
 8044684:	2b03      	cmp	r3, #3
 8044686:	d00f      	beq.n	80446a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8044688:	6839      	ldr	r1, [r7, #0]
 804468a:	6878      	ldr	r0, [r7, #4]
 804468c:	f001 fc5b 	bl	8045f46 <USBD_CtlError>
            ret = USBD_FAIL;
 8044690:	2303      	movs	r3, #3
 8044692:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8044694:	e008      	b.n	80446a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8044696:	6839      	ldr	r1, [r7, #0]
 8044698:	6878      	ldr	r0, [r7, #4]
 804469a:	f001 fc54 	bl	8045f46 <USBD_CtlError>
          ret = USBD_FAIL;
 804469e:	2303      	movs	r3, #3
 80446a0:	75fb      	strb	r3, [r7, #23]
          break;
 80446a2:	e002      	b.n	80446aa <USBD_CDC_Setup+0x19e>
          break;
 80446a4:	bf00      	nop
 80446a6:	e008      	b.n	80446ba <USBD_CDC_Setup+0x1ae>
          break;
 80446a8:	bf00      	nop
      }
      break;
 80446aa:	e006      	b.n	80446ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80446ac:	6839      	ldr	r1, [r7, #0]
 80446ae:	6878      	ldr	r0, [r7, #4]
 80446b0:	f001 fc49 	bl	8045f46 <USBD_CtlError>
      ret = USBD_FAIL;
 80446b4:	2303      	movs	r3, #3
 80446b6:	75fb      	strb	r3, [r7, #23]
      break;
 80446b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80446ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80446bc:	4618      	mov	r0, r3
 80446be:	3718      	adds	r7, #24
 80446c0:	46bd      	mov	sp, r7
 80446c2:	bd80      	pop	{r7, pc}

080446c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80446c4:	b580      	push	{r7, lr}
 80446c6:	b084      	sub	sp, #16
 80446c8:	af00      	add	r7, sp, #0
 80446ca:	6078      	str	r0, [r7, #4]
 80446cc:	460b      	mov	r3, r1
 80446ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80446d0:	687b      	ldr	r3, [r7, #4]
 80446d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80446d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80446d8:	687b      	ldr	r3, [r7, #4]
 80446da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80446de:	687b      	ldr	r3, [r7, #4]
 80446e0:	32b0      	adds	r2, #176	; 0xb0
 80446e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80446e6:	2b00      	cmp	r3, #0
 80446e8:	d101      	bne.n	80446ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80446ea:	2303      	movs	r3, #3
 80446ec:	e065      	b.n	80447ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80446ee:	687b      	ldr	r3, [r7, #4]
 80446f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80446f4:	687b      	ldr	r3, [r7, #4]
 80446f6:	32b0      	adds	r2, #176	; 0xb0
 80446f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80446fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80446fe:	78fb      	ldrb	r3, [r7, #3]
 8044700:	f003 020f 	and.w	r2, r3, #15
 8044704:	6879      	ldr	r1, [r7, #4]
 8044706:	4613      	mov	r3, r2
 8044708:	009b      	lsls	r3, r3, #2
 804470a:	4413      	add	r3, r2
 804470c:	009b      	lsls	r3, r3, #2
 804470e:	440b      	add	r3, r1
 8044710:	3318      	adds	r3, #24
 8044712:	681b      	ldr	r3, [r3, #0]
 8044714:	2b00      	cmp	r3, #0
 8044716:	d02f      	beq.n	8044778 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8044718:	78fb      	ldrb	r3, [r7, #3]
 804471a:	f003 020f 	and.w	r2, r3, #15
 804471e:	6879      	ldr	r1, [r7, #4]
 8044720:	4613      	mov	r3, r2
 8044722:	009b      	lsls	r3, r3, #2
 8044724:	4413      	add	r3, r2
 8044726:	009b      	lsls	r3, r3, #2
 8044728:	440b      	add	r3, r1
 804472a:	3318      	adds	r3, #24
 804472c:	681a      	ldr	r2, [r3, #0]
 804472e:	78fb      	ldrb	r3, [r7, #3]
 8044730:	f003 010f 	and.w	r1, r3, #15
 8044734:	68f8      	ldr	r0, [r7, #12]
 8044736:	460b      	mov	r3, r1
 8044738:	00db      	lsls	r3, r3, #3
 804473a:	440b      	add	r3, r1
 804473c:	009b      	lsls	r3, r3, #2
 804473e:	4403      	add	r3, r0
 8044740:	331c      	adds	r3, #28
 8044742:	681b      	ldr	r3, [r3, #0]
 8044744:	fbb2 f1f3 	udiv	r1, r2, r3
 8044748:	fb01 f303 	mul.w	r3, r1, r3
 804474c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 804474e:	2b00      	cmp	r3, #0
 8044750:	d112      	bne.n	8044778 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8044752:	78fb      	ldrb	r3, [r7, #3]
 8044754:	f003 020f 	and.w	r2, r3, #15
 8044758:	6879      	ldr	r1, [r7, #4]
 804475a:	4613      	mov	r3, r2
 804475c:	009b      	lsls	r3, r3, #2
 804475e:	4413      	add	r3, r2
 8044760:	009b      	lsls	r3, r3, #2
 8044762:	440b      	add	r3, r1
 8044764:	3318      	adds	r3, #24
 8044766:	2200      	movs	r2, #0
 8044768:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 804476a:	78f9      	ldrb	r1, [r7, #3]
 804476c:	2300      	movs	r3, #0
 804476e:	2200      	movs	r2, #0
 8044770:	6878      	ldr	r0, [r7, #4]
 8044772:	f002 f92a 	bl	80469ca <USBD_LL_Transmit>
 8044776:	e01f      	b.n	80447b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8044778:	68bb      	ldr	r3, [r7, #8]
 804477a:	2200      	movs	r2, #0
 804477c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8044780:	687b      	ldr	r3, [r7, #4]
 8044782:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8044786:	687a      	ldr	r2, [r7, #4]
 8044788:	33b0      	adds	r3, #176	; 0xb0
 804478a:	009b      	lsls	r3, r3, #2
 804478c:	4413      	add	r3, r2
 804478e:	685b      	ldr	r3, [r3, #4]
 8044790:	691b      	ldr	r3, [r3, #16]
 8044792:	2b00      	cmp	r3, #0
 8044794:	d010      	beq.n	80447b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8044796:	687b      	ldr	r3, [r7, #4]
 8044798:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 804479c:	687a      	ldr	r2, [r7, #4]
 804479e:	33b0      	adds	r3, #176	; 0xb0
 80447a0:	009b      	lsls	r3, r3, #2
 80447a2:	4413      	add	r3, r2
 80447a4:	685b      	ldr	r3, [r3, #4]
 80447a6:	691b      	ldr	r3, [r3, #16]
 80447a8:	68ba      	ldr	r2, [r7, #8]
 80447aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80447ae:	68ba      	ldr	r2, [r7, #8]
 80447b0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80447b4:	78fa      	ldrb	r2, [r7, #3]
 80447b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80447b8:	2300      	movs	r3, #0
}
 80447ba:	4618      	mov	r0, r3
 80447bc:	3710      	adds	r7, #16
 80447be:	46bd      	mov	sp, r7
 80447c0:	bd80      	pop	{r7, pc}

080447c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80447c2:	b580      	push	{r7, lr}
 80447c4:	b084      	sub	sp, #16
 80447c6:	af00      	add	r7, sp, #0
 80447c8:	6078      	str	r0, [r7, #4]
 80447ca:	460b      	mov	r3, r1
 80447cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80447ce:	687b      	ldr	r3, [r7, #4]
 80447d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80447d4:	687b      	ldr	r3, [r7, #4]
 80447d6:	32b0      	adds	r2, #176	; 0xb0
 80447d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80447dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80447de:	687b      	ldr	r3, [r7, #4]
 80447e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80447e4:	687b      	ldr	r3, [r7, #4]
 80447e6:	32b0      	adds	r2, #176	; 0xb0
 80447e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80447ec:	2b00      	cmp	r3, #0
 80447ee:	d101      	bne.n	80447f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80447f0:	2303      	movs	r3, #3
 80447f2:	e01a      	b.n	804482a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80447f4:	78fb      	ldrb	r3, [r7, #3]
 80447f6:	4619      	mov	r1, r3
 80447f8:	6878      	ldr	r0, [r7, #4]
 80447fa:	f002 f928 	bl	8046a4e <USBD_LL_GetRxDataSize>
 80447fe:	4602      	mov	r2, r0
 8044800:	68fb      	ldr	r3, [r7, #12]
 8044802:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8044806:	687b      	ldr	r3, [r7, #4]
 8044808:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 804480c:	687a      	ldr	r2, [r7, #4]
 804480e:	33b0      	adds	r3, #176	; 0xb0
 8044810:	009b      	lsls	r3, r3, #2
 8044812:	4413      	add	r3, r2
 8044814:	685b      	ldr	r3, [r3, #4]
 8044816:	68db      	ldr	r3, [r3, #12]
 8044818:	68fa      	ldr	r2, [r7, #12]
 804481a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 804481e:	68fa      	ldr	r2, [r7, #12]
 8044820:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8044824:	4611      	mov	r1, r2
 8044826:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8044828:	2300      	movs	r3, #0
}
 804482a:	4618      	mov	r0, r3
 804482c:	3710      	adds	r7, #16
 804482e:	46bd      	mov	sp, r7
 8044830:	bd80      	pop	{r7, pc}

08044832 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8044832:	b580      	push	{r7, lr}
 8044834:	b084      	sub	sp, #16
 8044836:	af00      	add	r7, sp, #0
 8044838:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 804483a:	687b      	ldr	r3, [r7, #4]
 804483c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8044840:	687b      	ldr	r3, [r7, #4]
 8044842:	32b0      	adds	r2, #176	; 0xb0
 8044844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044848:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 804484a:	68fb      	ldr	r3, [r7, #12]
 804484c:	2b00      	cmp	r3, #0
 804484e:	d101      	bne.n	8044854 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8044850:	2303      	movs	r3, #3
 8044852:	e025      	b.n	80448a0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8044854:	687b      	ldr	r3, [r7, #4]
 8044856:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 804485a:	687a      	ldr	r2, [r7, #4]
 804485c:	33b0      	adds	r3, #176	; 0xb0
 804485e:	009b      	lsls	r3, r3, #2
 8044860:	4413      	add	r3, r2
 8044862:	685b      	ldr	r3, [r3, #4]
 8044864:	2b00      	cmp	r3, #0
 8044866:	d01a      	beq.n	804489e <USBD_CDC_EP0_RxReady+0x6c>
 8044868:	68fb      	ldr	r3, [r7, #12]
 804486a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 804486e:	2bff      	cmp	r3, #255	; 0xff
 8044870:	d015      	beq.n	804489e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8044872:	687b      	ldr	r3, [r7, #4]
 8044874:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8044878:	687a      	ldr	r2, [r7, #4]
 804487a:	33b0      	adds	r3, #176	; 0xb0
 804487c:	009b      	lsls	r3, r3, #2
 804487e:	4413      	add	r3, r2
 8044880:	685b      	ldr	r3, [r3, #4]
 8044882:	689b      	ldr	r3, [r3, #8]
 8044884:	68fa      	ldr	r2, [r7, #12]
 8044886:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 804488a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 804488c:	68fa      	ldr	r2, [r7, #12]
 804488e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8044892:	b292      	uxth	r2, r2
 8044894:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8044896:	68fb      	ldr	r3, [r7, #12]
 8044898:	22ff      	movs	r2, #255	; 0xff
 804489a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 804489e:	2300      	movs	r3, #0
}
 80448a0:	4618      	mov	r0, r3
 80448a2:	3710      	adds	r7, #16
 80448a4:	46bd      	mov	sp, r7
 80448a6:	bd80      	pop	{r7, pc}

080448a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80448a8:	b580      	push	{r7, lr}
 80448aa:	b086      	sub	sp, #24
 80448ac:	af00      	add	r7, sp, #0
 80448ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80448b0:	2182      	movs	r1, #130	; 0x82
 80448b2:	4818      	ldr	r0, [pc, #96]	; (8044914 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80448b4:	f000 fd0f 	bl	80452d6 <USBD_GetEpDesc>
 80448b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80448ba:	2101      	movs	r1, #1
 80448bc:	4815      	ldr	r0, [pc, #84]	; (8044914 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80448be:	f000 fd0a 	bl	80452d6 <USBD_GetEpDesc>
 80448c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80448c4:	2181      	movs	r1, #129	; 0x81
 80448c6:	4813      	ldr	r0, [pc, #76]	; (8044914 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80448c8:	f000 fd05 	bl	80452d6 <USBD_GetEpDesc>
 80448cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80448ce:	697b      	ldr	r3, [r7, #20]
 80448d0:	2b00      	cmp	r3, #0
 80448d2:	d002      	beq.n	80448da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80448d4:	697b      	ldr	r3, [r7, #20]
 80448d6:	2210      	movs	r2, #16
 80448d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80448da:	693b      	ldr	r3, [r7, #16]
 80448dc:	2b00      	cmp	r3, #0
 80448de:	d006      	beq.n	80448ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80448e0:	693b      	ldr	r3, [r7, #16]
 80448e2:	2200      	movs	r2, #0
 80448e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80448e8:	711a      	strb	r2, [r3, #4]
 80448ea:	2200      	movs	r2, #0
 80448ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80448ee:	68fb      	ldr	r3, [r7, #12]
 80448f0:	2b00      	cmp	r3, #0
 80448f2:	d006      	beq.n	8044902 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80448f4:	68fb      	ldr	r3, [r7, #12]
 80448f6:	2200      	movs	r2, #0
 80448f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80448fc:	711a      	strb	r2, [r3, #4]
 80448fe:	2200      	movs	r2, #0
 8044900:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8044902:	687b      	ldr	r3, [r7, #4]
 8044904:	2243      	movs	r2, #67	; 0x43
 8044906:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8044908:	4b02      	ldr	r3, [pc, #8]	; (8044914 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 804490a:	4618      	mov	r0, r3
 804490c:	3718      	adds	r7, #24
 804490e:	46bd      	mov	sp, r7
 8044910:	bd80      	pop	{r7, pc}
 8044912:	bf00      	nop
 8044914:	20000050 	.word	0x20000050

08044918 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8044918:	b580      	push	{r7, lr}
 804491a:	b086      	sub	sp, #24
 804491c:	af00      	add	r7, sp, #0
 804491e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8044920:	2182      	movs	r1, #130	; 0x82
 8044922:	4818      	ldr	r0, [pc, #96]	; (8044984 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8044924:	f000 fcd7 	bl	80452d6 <USBD_GetEpDesc>
 8044928:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 804492a:	2101      	movs	r1, #1
 804492c:	4815      	ldr	r0, [pc, #84]	; (8044984 <USBD_CDC_GetHSCfgDesc+0x6c>)
 804492e:	f000 fcd2 	bl	80452d6 <USBD_GetEpDesc>
 8044932:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8044934:	2181      	movs	r1, #129	; 0x81
 8044936:	4813      	ldr	r0, [pc, #76]	; (8044984 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8044938:	f000 fccd 	bl	80452d6 <USBD_GetEpDesc>
 804493c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 804493e:	697b      	ldr	r3, [r7, #20]
 8044940:	2b00      	cmp	r3, #0
 8044942:	d002      	beq.n	804494a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8044944:	697b      	ldr	r3, [r7, #20]
 8044946:	2210      	movs	r2, #16
 8044948:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 804494a:	693b      	ldr	r3, [r7, #16]
 804494c:	2b00      	cmp	r3, #0
 804494e:	d006      	beq.n	804495e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8044950:	693b      	ldr	r3, [r7, #16]
 8044952:	2200      	movs	r2, #0
 8044954:	711a      	strb	r2, [r3, #4]
 8044956:	2200      	movs	r2, #0
 8044958:	f042 0202 	orr.w	r2, r2, #2
 804495c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 804495e:	68fb      	ldr	r3, [r7, #12]
 8044960:	2b00      	cmp	r3, #0
 8044962:	d006      	beq.n	8044972 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8044964:	68fb      	ldr	r3, [r7, #12]
 8044966:	2200      	movs	r2, #0
 8044968:	711a      	strb	r2, [r3, #4]
 804496a:	2200      	movs	r2, #0
 804496c:	f042 0202 	orr.w	r2, r2, #2
 8044970:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8044972:	687b      	ldr	r3, [r7, #4]
 8044974:	2243      	movs	r2, #67	; 0x43
 8044976:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8044978:	4b02      	ldr	r3, [pc, #8]	; (8044984 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 804497a:	4618      	mov	r0, r3
 804497c:	3718      	adds	r7, #24
 804497e:	46bd      	mov	sp, r7
 8044980:	bd80      	pop	{r7, pc}
 8044982:	bf00      	nop
 8044984:	20000050 	.word	0x20000050

08044988 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8044988:	b580      	push	{r7, lr}
 804498a:	b086      	sub	sp, #24
 804498c:	af00      	add	r7, sp, #0
 804498e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8044990:	2182      	movs	r1, #130	; 0x82
 8044992:	4818      	ldr	r0, [pc, #96]	; (80449f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8044994:	f000 fc9f 	bl	80452d6 <USBD_GetEpDesc>
 8044998:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 804499a:	2101      	movs	r1, #1
 804499c:	4815      	ldr	r0, [pc, #84]	; (80449f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 804499e:	f000 fc9a 	bl	80452d6 <USBD_GetEpDesc>
 80449a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80449a4:	2181      	movs	r1, #129	; 0x81
 80449a6:	4813      	ldr	r0, [pc, #76]	; (80449f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80449a8:	f000 fc95 	bl	80452d6 <USBD_GetEpDesc>
 80449ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80449ae:	697b      	ldr	r3, [r7, #20]
 80449b0:	2b00      	cmp	r3, #0
 80449b2:	d002      	beq.n	80449ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80449b4:	697b      	ldr	r3, [r7, #20]
 80449b6:	2210      	movs	r2, #16
 80449b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80449ba:	693b      	ldr	r3, [r7, #16]
 80449bc:	2b00      	cmp	r3, #0
 80449be:	d006      	beq.n	80449ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80449c0:	693b      	ldr	r3, [r7, #16]
 80449c2:	2200      	movs	r2, #0
 80449c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80449c8:	711a      	strb	r2, [r3, #4]
 80449ca:	2200      	movs	r2, #0
 80449cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80449ce:	68fb      	ldr	r3, [r7, #12]
 80449d0:	2b00      	cmp	r3, #0
 80449d2:	d006      	beq.n	80449e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80449d4:	68fb      	ldr	r3, [r7, #12]
 80449d6:	2200      	movs	r2, #0
 80449d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80449dc:	711a      	strb	r2, [r3, #4]
 80449de:	2200      	movs	r2, #0
 80449e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80449e2:	687b      	ldr	r3, [r7, #4]
 80449e4:	2243      	movs	r2, #67	; 0x43
 80449e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80449e8:	4b02      	ldr	r3, [pc, #8]	; (80449f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80449ea:	4618      	mov	r0, r3
 80449ec:	3718      	adds	r7, #24
 80449ee:	46bd      	mov	sp, r7
 80449f0:	bd80      	pop	{r7, pc}
 80449f2:	bf00      	nop
 80449f4:	20000050 	.word	0x20000050

080449f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80449f8:	b480      	push	{r7}
 80449fa:	b083      	sub	sp, #12
 80449fc:	af00      	add	r7, sp, #0
 80449fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8044a00:	687b      	ldr	r3, [r7, #4]
 8044a02:	220a      	movs	r2, #10
 8044a04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8044a06:	4b03      	ldr	r3, [pc, #12]	; (8044a14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8044a08:	4618      	mov	r0, r3
 8044a0a:	370c      	adds	r7, #12
 8044a0c:	46bd      	mov	sp, r7
 8044a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044a12:	4770      	bx	lr
 8044a14:	2000000c 	.word	0x2000000c

08044a18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8044a18:	b480      	push	{r7}
 8044a1a:	b083      	sub	sp, #12
 8044a1c:	af00      	add	r7, sp, #0
 8044a1e:	6078      	str	r0, [r7, #4]
 8044a20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8044a22:	683b      	ldr	r3, [r7, #0]
 8044a24:	2b00      	cmp	r3, #0
 8044a26:	d101      	bne.n	8044a2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8044a28:	2303      	movs	r3, #3
 8044a2a:	e009      	b.n	8044a40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8044a2c:	687b      	ldr	r3, [r7, #4]
 8044a2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8044a32:	687a      	ldr	r2, [r7, #4]
 8044a34:	33b0      	adds	r3, #176	; 0xb0
 8044a36:	009b      	lsls	r3, r3, #2
 8044a38:	4413      	add	r3, r2
 8044a3a:	683a      	ldr	r2, [r7, #0]
 8044a3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8044a3e:	2300      	movs	r3, #0
}
 8044a40:	4618      	mov	r0, r3
 8044a42:	370c      	adds	r7, #12
 8044a44:	46bd      	mov	sp, r7
 8044a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044a4a:	4770      	bx	lr

08044a4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8044a4c:	b480      	push	{r7}
 8044a4e:	b087      	sub	sp, #28
 8044a50:	af00      	add	r7, sp, #0
 8044a52:	60f8      	str	r0, [r7, #12]
 8044a54:	60b9      	str	r1, [r7, #8]
 8044a56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8044a58:	68fb      	ldr	r3, [r7, #12]
 8044a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8044a5e:	68fb      	ldr	r3, [r7, #12]
 8044a60:	32b0      	adds	r2, #176	; 0xb0
 8044a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044a66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8044a68:	697b      	ldr	r3, [r7, #20]
 8044a6a:	2b00      	cmp	r3, #0
 8044a6c:	d101      	bne.n	8044a72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8044a6e:	2303      	movs	r3, #3
 8044a70:	e008      	b.n	8044a84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8044a72:	697b      	ldr	r3, [r7, #20]
 8044a74:	68ba      	ldr	r2, [r7, #8]
 8044a76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8044a7a:	697b      	ldr	r3, [r7, #20]
 8044a7c:	687a      	ldr	r2, [r7, #4]
 8044a7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8044a82:	2300      	movs	r3, #0
}
 8044a84:	4618      	mov	r0, r3
 8044a86:	371c      	adds	r7, #28
 8044a88:	46bd      	mov	sp, r7
 8044a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044a8e:	4770      	bx	lr

08044a90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8044a90:	b480      	push	{r7}
 8044a92:	b085      	sub	sp, #20
 8044a94:	af00      	add	r7, sp, #0
 8044a96:	6078      	str	r0, [r7, #4]
 8044a98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8044a9a:	687b      	ldr	r3, [r7, #4]
 8044a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8044aa0:	687b      	ldr	r3, [r7, #4]
 8044aa2:	32b0      	adds	r2, #176	; 0xb0
 8044aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044aa8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8044aaa:	68fb      	ldr	r3, [r7, #12]
 8044aac:	2b00      	cmp	r3, #0
 8044aae:	d101      	bne.n	8044ab4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8044ab0:	2303      	movs	r3, #3
 8044ab2:	e004      	b.n	8044abe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8044ab4:	68fb      	ldr	r3, [r7, #12]
 8044ab6:	683a      	ldr	r2, [r7, #0]
 8044ab8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8044abc:	2300      	movs	r3, #0
}
 8044abe:	4618      	mov	r0, r3
 8044ac0:	3714      	adds	r7, #20
 8044ac2:	46bd      	mov	sp, r7
 8044ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044ac8:	4770      	bx	lr
	...

08044acc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8044acc:	b580      	push	{r7, lr}
 8044ace:	b084      	sub	sp, #16
 8044ad0:	af00      	add	r7, sp, #0
 8044ad2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8044ad4:	687b      	ldr	r3, [r7, #4]
 8044ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8044ada:	687b      	ldr	r3, [r7, #4]
 8044adc:	32b0      	adds	r2, #176	; 0xb0
 8044ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044ae2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8044ae4:	687b      	ldr	r3, [r7, #4]
 8044ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8044aea:	687b      	ldr	r3, [r7, #4]
 8044aec:	32b0      	adds	r2, #176	; 0xb0
 8044aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044af2:	2b00      	cmp	r3, #0
 8044af4:	d101      	bne.n	8044afa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8044af6:	2303      	movs	r3, #3
 8044af8:	e018      	b.n	8044b2c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8044afa:	687b      	ldr	r3, [r7, #4]
 8044afc:	7c1b      	ldrb	r3, [r3, #16]
 8044afe:	2b00      	cmp	r3, #0
 8044b00:	d10a      	bne.n	8044b18 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8044b02:	4b0c      	ldr	r3, [pc, #48]	; (8044b34 <USBD_CDC_ReceivePacket+0x68>)
 8044b04:	7819      	ldrb	r1, [r3, #0]
 8044b06:	68fb      	ldr	r3, [r7, #12]
 8044b08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8044b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8044b10:	6878      	ldr	r0, [r7, #4]
 8044b12:	f001 ff7b 	bl	8046a0c <USBD_LL_PrepareReceive>
 8044b16:	e008      	b.n	8044b2a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8044b18:	4b06      	ldr	r3, [pc, #24]	; (8044b34 <USBD_CDC_ReceivePacket+0x68>)
 8044b1a:	7819      	ldrb	r1, [r3, #0]
 8044b1c:	68fb      	ldr	r3, [r7, #12]
 8044b1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8044b22:	2340      	movs	r3, #64	; 0x40
 8044b24:	6878      	ldr	r0, [r7, #4]
 8044b26:	f001 ff71 	bl	8046a0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8044b2a:	2300      	movs	r3, #0
}
 8044b2c:	4618      	mov	r0, r3
 8044b2e:	3710      	adds	r7, #16
 8044b30:	46bd      	mov	sp, r7
 8044b32:	bd80      	pop	{r7, pc}
 8044b34:	20000094 	.word	0x20000094

08044b38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8044b38:	b580      	push	{r7, lr}
 8044b3a:	b086      	sub	sp, #24
 8044b3c:	af00      	add	r7, sp, #0
 8044b3e:	60f8      	str	r0, [r7, #12]
 8044b40:	60b9      	str	r1, [r7, #8]
 8044b42:	4613      	mov	r3, r2
 8044b44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8044b46:	68fb      	ldr	r3, [r7, #12]
 8044b48:	2b00      	cmp	r3, #0
 8044b4a:	d101      	bne.n	8044b50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8044b4c:	2303      	movs	r3, #3
 8044b4e:	e01f      	b.n	8044b90 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8044b50:	68fb      	ldr	r3, [r7, #12]
 8044b52:	2200      	movs	r2, #0
 8044b54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8044b58:	68fb      	ldr	r3, [r7, #12]
 8044b5a:	2200      	movs	r2, #0
 8044b5c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8044b60:	68fb      	ldr	r3, [r7, #12]
 8044b62:	2200      	movs	r2, #0
 8044b64:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8044b68:	68bb      	ldr	r3, [r7, #8]
 8044b6a:	2b00      	cmp	r3, #0
 8044b6c:	d003      	beq.n	8044b76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8044b6e:	68fb      	ldr	r3, [r7, #12]
 8044b70:	68ba      	ldr	r2, [r7, #8]
 8044b72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8044b76:	68fb      	ldr	r3, [r7, #12]
 8044b78:	2201      	movs	r2, #1
 8044b7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8044b7e:	68fb      	ldr	r3, [r7, #12]
 8044b80:	79fa      	ldrb	r2, [r7, #7]
 8044b82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8044b84:	68f8      	ldr	r0, [r7, #12]
 8044b86:	f001 fdeb 	bl	8046760 <USBD_LL_Init>
 8044b8a:	4603      	mov	r3, r0
 8044b8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8044b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8044b90:	4618      	mov	r0, r3
 8044b92:	3718      	adds	r7, #24
 8044b94:	46bd      	mov	sp, r7
 8044b96:	bd80      	pop	{r7, pc}

08044b98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8044b98:	b580      	push	{r7, lr}
 8044b9a:	b084      	sub	sp, #16
 8044b9c:	af00      	add	r7, sp, #0
 8044b9e:	6078      	str	r0, [r7, #4]
 8044ba0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8044ba2:	2300      	movs	r3, #0
 8044ba4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8044ba6:	683b      	ldr	r3, [r7, #0]
 8044ba8:	2b00      	cmp	r3, #0
 8044baa:	d101      	bne.n	8044bb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8044bac:	2303      	movs	r3, #3
 8044bae:	e025      	b.n	8044bfc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8044bb0:	687b      	ldr	r3, [r7, #4]
 8044bb2:	683a      	ldr	r2, [r7, #0]
 8044bb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8044bb8:	687b      	ldr	r3, [r7, #4]
 8044bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8044bbe:	687b      	ldr	r3, [r7, #4]
 8044bc0:	32ae      	adds	r2, #174	; 0xae
 8044bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044bc8:	2b00      	cmp	r3, #0
 8044bca:	d00f      	beq.n	8044bec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8044bcc:	687b      	ldr	r3, [r7, #4]
 8044bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8044bd2:	687b      	ldr	r3, [r7, #4]
 8044bd4:	32ae      	adds	r2, #174	; 0xae
 8044bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044bdc:	f107 020e 	add.w	r2, r7, #14
 8044be0:	4610      	mov	r0, r2
 8044be2:	4798      	blx	r3
 8044be4:	4602      	mov	r2, r0
 8044be6:	687b      	ldr	r3, [r7, #4]
 8044be8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8044bec:	687b      	ldr	r3, [r7, #4]
 8044bee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8044bf2:	1c5a      	adds	r2, r3, #1
 8044bf4:	687b      	ldr	r3, [r7, #4]
 8044bf6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8044bfa:	2300      	movs	r3, #0
}
 8044bfc:	4618      	mov	r0, r3
 8044bfe:	3710      	adds	r7, #16
 8044c00:	46bd      	mov	sp, r7
 8044c02:	bd80      	pop	{r7, pc}

08044c04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8044c04:	b580      	push	{r7, lr}
 8044c06:	b082      	sub	sp, #8
 8044c08:	af00      	add	r7, sp, #0
 8044c0a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8044c0c:	6878      	ldr	r0, [r7, #4]
 8044c0e:	f001 fdf3 	bl	80467f8 <USBD_LL_Start>
 8044c12:	4603      	mov	r3, r0
}
 8044c14:	4618      	mov	r0, r3
 8044c16:	3708      	adds	r7, #8
 8044c18:	46bd      	mov	sp, r7
 8044c1a:	bd80      	pop	{r7, pc}

08044c1c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8044c1c:	b480      	push	{r7}
 8044c1e:	b083      	sub	sp, #12
 8044c20:	af00      	add	r7, sp, #0
 8044c22:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8044c24:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8044c26:	4618      	mov	r0, r3
 8044c28:	370c      	adds	r7, #12
 8044c2a:	46bd      	mov	sp, r7
 8044c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044c30:	4770      	bx	lr

08044c32 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8044c32:	b580      	push	{r7, lr}
 8044c34:	b084      	sub	sp, #16
 8044c36:	af00      	add	r7, sp, #0
 8044c38:	6078      	str	r0, [r7, #4]
 8044c3a:	460b      	mov	r3, r1
 8044c3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8044c3e:	2300      	movs	r3, #0
 8044c40:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8044c42:	687b      	ldr	r3, [r7, #4]
 8044c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8044c48:	2b00      	cmp	r3, #0
 8044c4a:	d009      	beq.n	8044c60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8044c4c:	687b      	ldr	r3, [r7, #4]
 8044c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8044c52:	681b      	ldr	r3, [r3, #0]
 8044c54:	78fa      	ldrb	r2, [r7, #3]
 8044c56:	4611      	mov	r1, r2
 8044c58:	6878      	ldr	r0, [r7, #4]
 8044c5a:	4798      	blx	r3
 8044c5c:	4603      	mov	r3, r0
 8044c5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8044c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8044c62:	4618      	mov	r0, r3
 8044c64:	3710      	adds	r7, #16
 8044c66:	46bd      	mov	sp, r7
 8044c68:	bd80      	pop	{r7, pc}

08044c6a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8044c6a:	b580      	push	{r7, lr}
 8044c6c:	b084      	sub	sp, #16
 8044c6e:	af00      	add	r7, sp, #0
 8044c70:	6078      	str	r0, [r7, #4]
 8044c72:	460b      	mov	r3, r1
 8044c74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8044c76:	2300      	movs	r3, #0
 8044c78:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8044c7a:	687b      	ldr	r3, [r7, #4]
 8044c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8044c80:	685b      	ldr	r3, [r3, #4]
 8044c82:	78fa      	ldrb	r2, [r7, #3]
 8044c84:	4611      	mov	r1, r2
 8044c86:	6878      	ldr	r0, [r7, #4]
 8044c88:	4798      	blx	r3
 8044c8a:	4603      	mov	r3, r0
 8044c8c:	2b00      	cmp	r3, #0
 8044c8e:	d001      	beq.n	8044c94 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8044c90:	2303      	movs	r3, #3
 8044c92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8044c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8044c96:	4618      	mov	r0, r3
 8044c98:	3710      	adds	r7, #16
 8044c9a:	46bd      	mov	sp, r7
 8044c9c:	bd80      	pop	{r7, pc}

08044c9e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8044c9e:	b580      	push	{r7, lr}
 8044ca0:	b084      	sub	sp, #16
 8044ca2:	af00      	add	r7, sp, #0
 8044ca4:	6078      	str	r0, [r7, #4]
 8044ca6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8044ca8:	687b      	ldr	r3, [r7, #4]
 8044caa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8044cae:	6839      	ldr	r1, [r7, #0]
 8044cb0:	4618      	mov	r0, r3
 8044cb2:	f001 f90e 	bl	8045ed2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8044cb6:	687b      	ldr	r3, [r7, #4]
 8044cb8:	2201      	movs	r2, #1
 8044cba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8044cbe:	687b      	ldr	r3, [r7, #4]
 8044cc0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8044cc4:	461a      	mov	r2, r3
 8044cc6:	687b      	ldr	r3, [r7, #4]
 8044cc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8044ccc:	687b      	ldr	r3, [r7, #4]
 8044cce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8044cd2:	f003 031f 	and.w	r3, r3, #31
 8044cd6:	2b02      	cmp	r3, #2
 8044cd8:	d01a      	beq.n	8044d10 <USBD_LL_SetupStage+0x72>
 8044cda:	2b02      	cmp	r3, #2
 8044cdc:	d822      	bhi.n	8044d24 <USBD_LL_SetupStage+0x86>
 8044cde:	2b00      	cmp	r3, #0
 8044ce0:	d002      	beq.n	8044ce8 <USBD_LL_SetupStage+0x4a>
 8044ce2:	2b01      	cmp	r3, #1
 8044ce4:	d00a      	beq.n	8044cfc <USBD_LL_SetupStage+0x5e>
 8044ce6:	e01d      	b.n	8044d24 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8044ce8:	687b      	ldr	r3, [r7, #4]
 8044cea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8044cee:	4619      	mov	r1, r3
 8044cf0:	6878      	ldr	r0, [r7, #4]
 8044cf2:	f000 fb65 	bl	80453c0 <USBD_StdDevReq>
 8044cf6:	4603      	mov	r3, r0
 8044cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8044cfa:	e020      	b.n	8044d3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8044cfc:	687b      	ldr	r3, [r7, #4]
 8044cfe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8044d02:	4619      	mov	r1, r3
 8044d04:	6878      	ldr	r0, [r7, #4]
 8044d06:	f000 fbcd 	bl	80454a4 <USBD_StdItfReq>
 8044d0a:	4603      	mov	r3, r0
 8044d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8044d0e:	e016      	b.n	8044d3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8044d10:	687b      	ldr	r3, [r7, #4]
 8044d12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8044d16:	4619      	mov	r1, r3
 8044d18:	6878      	ldr	r0, [r7, #4]
 8044d1a:	f000 fc2f 	bl	804557c <USBD_StdEPReq>
 8044d1e:	4603      	mov	r3, r0
 8044d20:	73fb      	strb	r3, [r7, #15]
      break;
 8044d22:	e00c      	b.n	8044d3e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8044d24:	687b      	ldr	r3, [r7, #4]
 8044d26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8044d2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8044d2e:	b2db      	uxtb	r3, r3
 8044d30:	4619      	mov	r1, r3
 8044d32:	6878      	ldr	r0, [r7, #4]
 8044d34:	f001 fdc0 	bl	80468b8 <USBD_LL_StallEP>
 8044d38:	4603      	mov	r3, r0
 8044d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8044d3c:	bf00      	nop
  }

  return ret;
 8044d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8044d40:	4618      	mov	r0, r3
 8044d42:	3710      	adds	r7, #16
 8044d44:	46bd      	mov	sp, r7
 8044d46:	bd80      	pop	{r7, pc}

08044d48 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8044d48:	b580      	push	{r7, lr}
 8044d4a:	b086      	sub	sp, #24
 8044d4c:	af00      	add	r7, sp, #0
 8044d4e:	60f8      	str	r0, [r7, #12]
 8044d50:	460b      	mov	r3, r1
 8044d52:	607a      	str	r2, [r7, #4]
 8044d54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8044d56:	2300      	movs	r3, #0
 8044d58:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8044d5a:	7afb      	ldrb	r3, [r7, #11]
 8044d5c:	2b00      	cmp	r3, #0
 8044d5e:	d16e      	bne.n	8044e3e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8044d60:	68fb      	ldr	r3, [r7, #12]
 8044d62:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8044d66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8044d68:	68fb      	ldr	r3, [r7, #12]
 8044d6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8044d6e:	2b03      	cmp	r3, #3
 8044d70:	f040 8098 	bne.w	8044ea4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8044d74:	693b      	ldr	r3, [r7, #16]
 8044d76:	689a      	ldr	r2, [r3, #8]
 8044d78:	693b      	ldr	r3, [r7, #16]
 8044d7a:	68db      	ldr	r3, [r3, #12]
 8044d7c:	429a      	cmp	r2, r3
 8044d7e:	d913      	bls.n	8044da8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8044d80:	693b      	ldr	r3, [r7, #16]
 8044d82:	689a      	ldr	r2, [r3, #8]
 8044d84:	693b      	ldr	r3, [r7, #16]
 8044d86:	68db      	ldr	r3, [r3, #12]
 8044d88:	1ad2      	subs	r2, r2, r3
 8044d8a:	693b      	ldr	r3, [r7, #16]
 8044d8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8044d8e:	693b      	ldr	r3, [r7, #16]
 8044d90:	68da      	ldr	r2, [r3, #12]
 8044d92:	693b      	ldr	r3, [r7, #16]
 8044d94:	689b      	ldr	r3, [r3, #8]
 8044d96:	4293      	cmp	r3, r2
 8044d98:	bf28      	it	cs
 8044d9a:	4613      	movcs	r3, r2
 8044d9c:	461a      	mov	r2, r3
 8044d9e:	6879      	ldr	r1, [r7, #4]
 8044da0:	68f8      	ldr	r0, [r7, #12]
 8044da2:	f001 f98a 	bl	80460ba <USBD_CtlContinueRx>
 8044da6:	e07d      	b.n	8044ea4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8044da8:	68fb      	ldr	r3, [r7, #12]
 8044daa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8044dae:	f003 031f 	and.w	r3, r3, #31
 8044db2:	2b02      	cmp	r3, #2
 8044db4:	d014      	beq.n	8044de0 <USBD_LL_DataOutStage+0x98>
 8044db6:	2b02      	cmp	r3, #2
 8044db8:	d81d      	bhi.n	8044df6 <USBD_LL_DataOutStage+0xae>
 8044dba:	2b00      	cmp	r3, #0
 8044dbc:	d002      	beq.n	8044dc4 <USBD_LL_DataOutStage+0x7c>
 8044dbe:	2b01      	cmp	r3, #1
 8044dc0:	d003      	beq.n	8044dca <USBD_LL_DataOutStage+0x82>
 8044dc2:	e018      	b.n	8044df6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8044dc4:	2300      	movs	r3, #0
 8044dc6:	75bb      	strb	r3, [r7, #22]
            break;
 8044dc8:	e018      	b.n	8044dfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8044dca:	68fb      	ldr	r3, [r7, #12]
 8044dcc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8044dd0:	b2db      	uxtb	r3, r3
 8044dd2:	4619      	mov	r1, r3
 8044dd4:	68f8      	ldr	r0, [r7, #12]
 8044dd6:	f000 fa64 	bl	80452a2 <USBD_CoreFindIF>
 8044dda:	4603      	mov	r3, r0
 8044ddc:	75bb      	strb	r3, [r7, #22]
            break;
 8044dde:	e00d      	b.n	8044dfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8044de0:	68fb      	ldr	r3, [r7, #12]
 8044de2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8044de6:	b2db      	uxtb	r3, r3
 8044de8:	4619      	mov	r1, r3
 8044dea:	68f8      	ldr	r0, [r7, #12]
 8044dec:	f000 fa66 	bl	80452bc <USBD_CoreFindEP>
 8044df0:	4603      	mov	r3, r0
 8044df2:	75bb      	strb	r3, [r7, #22]
            break;
 8044df4:	e002      	b.n	8044dfc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8044df6:	2300      	movs	r3, #0
 8044df8:	75bb      	strb	r3, [r7, #22]
            break;
 8044dfa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8044dfc:	7dbb      	ldrb	r3, [r7, #22]
 8044dfe:	2b00      	cmp	r3, #0
 8044e00:	d119      	bne.n	8044e36 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8044e02:	68fb      	ldr	r3, [r7, #12]
 8044e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8044e08:	b2db      	uxtb	r3, r3
 8044e0a:	2b03      	cmp	r3, #3
 8044e0c:	d113      	bne.n	8044e36 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8044e0e:	7dba      	ldrb	r2, [r7, #22]
 8044e10:	68fb      	ldr	r3, [r7, #12]
 8044e12:	32ae      	adds	r2, #174	; 0xae
 8044e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044e18:	691b      	ldr	r3, [r3, #16]
 8044e1a:	2b00      	cmp	r3, #0
 8044e1c:	d00b      	beq.n	8044e36 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8044e1e:	7dba      	ldrb	r2, [r7, #22]
 8044e20:	68fb      	ldr	r3, [r7, #12]
 8044e22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8044e26:	7dba      	ldrb	r2, [r7, #22]
 8044e28:	68fb      	ldr	r3, [r7, #12]
 8044e2a:	32ae      	adds	r2, #174	; 0xae
 8044e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044e30:	691b      	ldr	r3, [r3, #16]
 8044e32:	68f8      	ldr	r0, [r7, #12]
 8044e34:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8044e36:	68f8      	ldr	r0, [r7, #12]
 8044e38:	f001 f950 	bl	80460dc <USBD_CtlSendStatus>
 8044e3c:	e032      	b.n	8044ea4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8044e3e:	7afb      	ldrb	r3, [r7, #11]
 8044e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8044e44:	b2db      	uxtb	r3, r3
 8044e46:	4619      	mov	r1, r3
 8044e48:	68f8      	ldr	r0, [r7, #12]
 8044e4a:	f000 fa37 	bl	80452bc <USBD_CoreFindEP>
 8044e4e:	4603      	mov	r3, r0
 8044e50:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8044e52:	7dbb      	ldrb	r3, [r7, #22]
 8044e54:	2bff      	cmp	r3, #255	; 0xff
 8044e56:	d025      	beq.n	8044ea4 <USBD_LL_DataOutStage+0x15c>
 8044e58:	7dbb      	ldrb	r3, [r7, #22]
 8044e5a:	2b00      	cmp	r3, #0
 8044e5c:	d122      	bne.n	8044ea4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8044e5e:	68fb      	ldr	r3, [r7, #12]
 8044e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8044e64:	b2db      	uxtb	r3, r3
 8044e66:	2b03      	cmp	r3, #3
 8044e68:	d117      	bne.n	8044e9a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8044e6a:	7dba      	ldrb	r2, [r7, #22]
 8044e6c:	68fb      	ldr	r3, [r7, #12]
 8044e6e:	32ae      	adds	r2, #174	; 0xae
 8044e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044e74:	699b      	ldr	r3, [r3, #24]
 8044e76:	2b00      	cmp	r3, #0
 8044e78:	d00f      	beq.n	8044e9a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8044e7a:	7dba      	ldrb	r2, [r7, #22]
 8044e7c:	68fb      	ldr	r3, [r7, #12]
 8044e7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8044e82:	7dba      	ldrb	r2, [r7, #22]
 8044e84:	68fb      	ldr	r3, [r7, #12]
 8044e86:	32ae      	adds	r2, #174	; 0xae
 8044e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044e8c:	699b      	ldr	r3, [r3, #24]
 8044e8e:	7afa      	ldrb	r2, [r7, #11]
 8044e90:	4611      	mov	r1, r2
 8044e92:	68f8      	ldr	r0, [r7, #12]
 8044e94:	4798      	blx	r3
 8044e96:	4603      	mov	r3, r0
 8044e98:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8044e9a:	7dfb      	ldrb	r3, [r7, #23]
 8044e9c:	2b00      	cmp	r3, #0
 8044e9e:	d001      	beq.n	8044ea4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8044ea0:	7dfb      	ldrb	r3, [r7, #23]
 8044ea2:	e000      	b.n	8044ea6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8044ea4:	2300      	movs	r3, #0
}
 8044ea6:	4618      	mov	r0, r3
 8044ea8:	3718      	adds	r7, #24
 8044eaa:	46bd      	mov	sp, r7
 8044eac:	bd80      	pop	{r7, pc}

08044eae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8044eae:	b580      	push	{r7, lr}
 8044eb0:	b086      	sub	sp, #24
 8044eb2:	af00      	add	r7, sp, #0
 8044eb4:	60f8      	str	r0, [r7, #12]
 8044eb6:	460b      	mov	r3, r1
 8044eb8:	607a      	str	r2, [r7, #4]
 8044eba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8044ebc:	7afb      	ldrb	r3, [r7, #11]
 8044ebe:	2b00      	cmp	r3, #0
 8044ec0:	d16f      	bne.n	8044fa2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8044ec2:	68fb      	ldr	r3, [r7, #12]
 8044ec4:	3314      	adds	r3, #20
 8044ec6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8044ec8:	68fb      	ldr	r3, [r7, #12]
 8044eca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8044ece:	2b02      	cmp	r3, #2
 8044ed0:	d15a      	bne.n	8044f88 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8044ed2:	693b      	ldr	r3, [r7, #16]
 8044ed4:	689a      	ldr	r2, [r3, #8]
 8044ed6:	693b      	ldr	r3, [r7, #16]
 8044ed8:	68db      	ldr	r3, [r3, #12]
 8044eda:	429a      	cmp	r2, r3
 8044edc:	d914      	bls.n	8044f08 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8044ede:	693b      	ldr	r3, [r7, #16]
 8044ee0:	689a      	ldr	r2, [r3, #8]
 8044ee2:	693b      	ldr	r3, [r7, #16]
 8044ee4:	68db      	ldr	r3, [r3, #12]
 8044ee6:	1ad2      	subs	r2, r2, r3
 8044ee8:	693b      	ldr	r3, [r7, #16]
 8044eea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8044eec:	693b      	ldr	r3, [r7, #16]
 8044eee:	689b      	ldr	r3, [r3, #8]
 8044ef0:	461a      	mov	r2, r3
 8044ef2:	6879      	ldr	r1, [r7, #4]
 8044ef4:	68f8      	ldr	r0, [r7, #12]
 8044ef6:	f001 f8b2 	bl	804605e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8044efa:	2300      	movs	r3, #0
 8044efc:	2200      	movs	r2, #0
 8044efe:	2100      	movs	r1, #0
 8044f00:	68f8      	ldr	r0, [r7, #12]
 8044f02:	f001 fd83 	bl	8046a0c <USBD_LL_PrepareReceive>
 8044f06:	e03f      	b.n	8044f88 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8044f08:	693b      	ldr	r3, [r7, #16]
 8044f0a:	68da      	ldr	r2, [r3, #12]
 8044f0c:	693b      	ldr	r3, [r7, #16]
 8044f0e:	689b      	ldr	r3, [r3, #8]
 8044f10:	429a      	cmp	r2, r3
 8044f12:	d11c      	bne.n	8044f4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8044f14:	693b      	ldr	r3, [r7, #16]
 8044f16:	685a      	ldr	r2, [r3, #4]
 8044f18:	693b      	ldr	r3, [r7, #16]
 8044f1a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8044f1c:	429a      	cmp	r2, r3
 8044f1e:	d316      	bcc.n	8044f4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8044f20:	693b      	ldr	r3, [r7, #16]
 8044f22:	685a      	ldr	r2, [r3, #4]
 8044f24:	68fb      	ldr	r3, [r7, #12]
 8044f26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8044f2a:	429a      	cmp	r2, r3
 8044f2c:	d20f      	bcs.n	8044f4e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8044f2e:	2200      	movs	r2, #0
 8044f30:	2100      	movs	r1, #0
 8044f32:	68f8      	ldr	r0, [r7, #12]
 8044f34:	f001 f893 	bl	804605e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8044f38:	68fb      	ldr	r3, [r7, #12]
 8044f3a:	2200      	movs	r2, #0
 8044f3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8044f40:	2300      	movs	r3, #0
 8044f42:	2200      	movs	r2, #0
 8044f44:	2100      	movs	r1, #0
 8044f46:	68f8      	ldr	r0, [r7, #12]
 8044f48:	f001 fd60 	bl	8046a0c <USBD_LL_PrepareReceive>
 8044f4c:	e01c      	b.n	8044f88 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8044f4e:	68fb      	ldr	r3, [r7, #12]
 8044f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8044f54:	b2db      	uxtb	r3, r3
 8044f56:	2b03      	cmp	r3, #3
 8044f58:	d10f      	bne.n	8044f7a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8044f5a:	68fb      	ldr	r3, [r7, #12]
 8044f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8044f60:	68db      	ldr	r3, [r3, #12]
 8044f62:	2b00      	cmp	r3, #0
 8044f64:	d009      	beq.n	8044f7a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8044f66:	68fb      	ldr	r3, [r7, #12]
 8044f68:	2200      	movs	r2, #0
 8044f6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8044f6e:	68fb      	ldr	r3, [r7, #12]
 8044f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8044f74:	68db      	ldr	r3, [r3, #12]
 8044f76:	68f8      	ldr	r0, [r7, #12]
 8044f78:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8044f7a:	2180      	movs	r1, #128	; 0x80
 8044f7c:	68f8      	ldr	r0, [r7, #12]
 8044f7e:	f001 fc9b 	bl	80468b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8044f82:	68f8      	ldr	r0, [r7, #12]
 8044f84:	f001 f8bd 	bl	8046102 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8044f88:	68fb      	ldr	r3, [r7, #12]
 8044f8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8044f8e:	2b00      	cmp	r3, #0
 8044f90:	d03a      	beq.n	8045008 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8044f92:	68f8      	ldr	r0, [r7, #12]
 8044f94:	f7ff fe42 	bl	8044c1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8044f98:	68fb      	ldr	r3, [r7, #12]
 8044f9a:	2200      	movs	r2, #0
 8044f9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8044fa0:	e032      	b.n	8045008 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8044fa2:	7afb      	ldrb	r3, [r7, #11]
 8044fa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8044fa8:	b2db      	uxtb	r3, r3
 8044faa:	4619      	mov	r1, r3
 8044fac:	68f8      	ldr	r0, [r7, #12]
 8044fae:	f000 f985 	bl	80452bc <USBD_CoreFindEP>
 8044fb2:	4603      	mov	r3, r0
 8044fb4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8044fb6:	7dfb      	ldrb	r3, [r7, #23]
 8044fb8:	2bff      	cmp	r3, #255	; 0xff
 8044fba:	d025      	beq.n	8045008 <USBD_LL_DataInStage+0x15a>
 8044fbc:	7dfb      	ldrb	r3, [r7, #23]
 8044fbe:	2b00      	cmp	r3, #0
 8044fc0:	d122      	bne.n	8045008 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8044fc2:	68fb      	ldr	r3, [r7, #12]
 8044fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8044fc8:	b2db      	uxtb	r3, r3
 8044fca:	2b03      	cmp	r3, #3
 8044fcc:	d11c      	bne.n	8045008 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8044fce:	7dfa      	ldrb	r2, [r7, #23]
 8044fd0:	68fb      	ldr	r3, [r7, #12]
 8044fd2:	32ae      	adds	r2, #174	; 0xae
 8044fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044fd8:	695b      	ldr	r3, [r3, #20]
 8044fda:	2b00      	cmp	r3, #0
 8044fdc:	d014      	beq.n	8045008 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8044fde:	7dfa      	ldrb	r2, [r7, #23]
 8044fe0:	68fb      	ldr	r3, [r7, #12]
 8044fe2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8044fe6:	7dfa      	ldrb	r2, [r7, #23]
 8044fe8:	68fb      	ldr	r3, [r7, #12]
 8044fea:	32ae      	adds	r2, #174	; 0xae
 8044fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044ff0:	695b      	ldr	r3, [r3, #20]
 8044ff2:	7afa      	ldrb	r2, [r7, #11]
 8044ff4:	4611      	mov	r1, r2
 8044ff6:	68f8      	ldr	r0, [r7, #12]
 8044ff8:	4798      	blx	r3
 8044ffa:	4603      	mov	r3, r0
 8044ffc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8044ffe:	7dbb      	ldrb	r3, [r7, #22]
 8045000:	2b00      	cmp	r3, #0
 8045002:	d001      	beq.n	8045008 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8045004:	7dbb      	ldrb	r3, [r7, #22]
 8045006:	e000      	b.n	804500a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8045008:	2300      	movs	r3, #0
}
 804500a:	4618      	mov	r0, r3
 804500c:	3718      	adds	r7, #24
 804500e:	46bd      	mov	sp, r7
 8045010:	bd80      	pop	{r7, pc}

08045012 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8045012:	b580      	push	{r7, lr}
 8045014:	b084      	sub	sp, #16
 8045016:	af00      	add	r7, sp, #0
 8045018:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 804501a:	2300      	movs	r3, #0
 804501c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 804501e:	687b      	ldr	r3, [r7, #4]
 8045020:	2201      	movs	r2, #1
 8045022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8045026:	687b      	ldr	r3, [r7, #4]
 8045028:	2200      	movs	r2, #0
 804502a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 804502e:	687b      	ldr	r3, [r7, #4]
 8045030:	2200      	movs	r2, #0
 8045032:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8045034:	687b      	ldr	r3, [r7, #4]
 8045036:	2200      	movs	r2, #0
 8045038:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 804503c:	687b      	ldr	r3, [r7, #4]
 804503e:	2200      	movs	r2, #0
 8045040:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8045044:	687b      	ldr	r3, [r7, #4]
 8045046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 804504a:	2b00      	cmp	r3, #0
 804504c:	d014      	beq.n	8045078 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 804504e:	687b      	ldr	r3, [r7, #4]
 8045050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8045054:	685b      	ldr	r3, [r3, #4]
 8045056:	2b00      	cmp	r3, #0
 8045058:	d00e      	beq.n	8045078 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 804505a:	687b      	ldr	r3, [r7, #4]
 804505c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8045060:	685b      	ldr	r3, [r3, #4]
 8045062:	687a      	ldr	r2, [r7, #4]
 8045064:	6852      	ldr	r2, [r2, #4]
 8045066:	b2d2      	uxtb	r2, r2
 8045068:	4611      	mov	r1, r2
 804506a:	6878      	ldr	r0, [r7, #4]
 804506c:	4798      	blx	r3
 804506e:	4603      	mov	r3, r0
 8045070:	2b00      	cmp	r3, #0
 8045072:	d001      	beq.n	8045078 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8045074:	2303      	movs	r3, #3
 8045076:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8045078:	2340      	movs	r3, #64	; 0x40
 804507a:	2200      	movs	r2, #0
 804507c:	2100      	movs	r1, #0
 804507e:	6878      	ldr	r0, [r7, #4]
 8045080:	f001 fbd5 	bl	804682e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8045084:	687b      	ldr	r3, [r7, #4]
 8045086:	2201      	movs	r2, #1
 8045088:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 804508c:	687b      	ldr	r3, [r7, #4]
 804508e:	2240      	movs	r2, #64	; 0x40
 8045090:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8045094:	2340      	movs	r3, #64	; 0x40
 8045096:	2200      	movs	r2, #0
 8045098:	2180      	movs	r1, #128	; 0x80
 804509a:	6878      	ldr	r0, [r7, #4]
 804509c:	f001 fbc7 	bl	804682e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80450a0:	687b      	ldr	r3, [r7, #4]
 80450a2:	2201      	movs	r2, #1
 80450a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80450a6:	687b      	ldr	r3, [r7, #4]
 80450a8:	2240      	movs	r2, #64	; 0x40
 80450aa:	621a      	str	r2, [r3, #32]

  return ret;
 80450ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80450ae:	4618      	mov	r0, r3
 80450b0:	3710      	adds	r7, #16
 80450b2:	46bd      	mov	sp, r7
 80450b4:	bd80      	pop	{r7, pc}

080450b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80450b6:	b480      	push	{r7}
 80450b8:	b083      	sub	sp, #12
 80450ba:	af00      	add	r7, sp, #0
 80450bc:	6078      	str	r0, [r7, #4]
 80450be:	460b      	mov	r3, r1
 80450c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80450c2:	687b      	ldr	r3, [r7, #4]
 80450c4:	78fa      	ldrb	r2, [r7, #3]
 80450c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80450c8:	2300      	movs	r3, #0
}
 80450ca:	4618      	mov	r0, r3
 80450cc:	370c      	adds	r7, #12
 80450ce:	46bd      	mov	sp, r7
 80450d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80450d4:	4770      	bx	lr

080450d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80450d6:	b480      	push	{r7}
 80450d8:	b083      	sub	sp, #12
 80450da:	af00      	add	r7, sp, #0
 80450dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80450de:	687b      	ldr	r3, [r7, #4]
 80450e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80450e4:	b2db      	uxtb	r3, r3
 80450e6:	2b04      	cmp	r3, #4
 80450e8:	d006      	beq.n	80450f8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80450ea:	687b      	ldr	r3, [r7, #4]
 80450ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80450f0:	b2da      	uxtb	r2, r3
 80450f2:	687b      	ldr	r3, [r7, #4]
 80450f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80450f8:	687b      	ldr	r3, [r7, #4]
 80450fa:	2204      	movs	r2, #4
 80450fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8045100:	2300      	movs	r3, #0
}
 8045102:	4618      	mov	r0, r3
 8045104:	370c      	adds	r7, #12
 8045106:	46bd      	mov	sp, r7
 8045108:	f85d 7b04 	ldr.w	r7, [sp], #4
 804510c:	4770      	bx	lr

0804510e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 804510e:	b480      	push	{r7}
 8045110:	b083      	sub	sp, #12
 8045112:	af00      	add	r7, sp, #0
 8045114:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8045116:	687b      	ldr	r3, [r7, #4]
 8045118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 804511c:	b2db      	uxtb	r3, r3
 804511e:	2b04      	cmp	r3, #4
 8045120:	d106      	bne.n	8045130 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8045122:	687b      	ldr	r3, [r7, #4]
 8045124:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8045128:	b2da      	uxtb	r2, r3
 804512a:	687b      	ldr	r3, [r7, #4]
 804512c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8045130:	2300      	movs	r3, #0
}
 8045132:	4618      	mov	r0, r3
 8045134:	370c      	adds	r7, #12
 8045136:	46bd      	mov	sp, r7
 8045138:	f85d 7b04 	ldr.w	r7, [sp], #4
 804513c:	4770      	bx	lr

0804513e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 804513e:	b580      	push	{r7, lr}
 8045140:	b082      	sub	sp, #8
 8045142:	af00      	add	r7, sp, #0
 8045144:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8045146:	687b      	ldr	r3, [r7, #4]
 8045148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 804514c:	b2db      	uxtb	r3, r3
 804514e:	2b03      	cmp	r3, #3
 8045150:	d110      	bne.n	8045174 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8045152:	687b      	ldr	r3, [r7, #4]
 8045154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8045158:	2b00      	cmp	r3, #0
 804515a:	d00b      	beq.n	8045174 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 804515c:	687b      	ldr	r3, [r7, #4]
 804515e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8045162:	69db      	ldr	r3, [r3, #28]
 8045164:	2b00      	cmp	r3, #0
 8045166:	d005      	beq.n	8045174 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8045168:	687b      	ldr	r3, [r7, #4]
 804516a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 804516e:	69db      	ldr	r3, [r3, #28]
 8045170:	6878      	ldr	r0, [r7, #4]
 8045172:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8045174:	2300      	movs	r3, #0
}
 8045176:	4618      	mov	r0, r3
 8045178:	3708      	adds	r7, #8
 804517a:	46bd      	mov	sp, r7
 804517c:	bd80      	pop	{r7, pc}

0804517e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 804517e:	b580      	push	{r7, lr}
 8045180:	b082      	sub	sp, #8
 8045182:	af00      	add	r7, sp, #0
 8045184:	6078      	str	r0, [r7, #4]
 8045186:	460b      	mov	r3, r1
 8045188:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 804518a:	687b      	ldr	r3, [r7, #4]
 804518c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8045190:	687b      	ldr	r3, [r7, #4]
 8045192:	32ae      	adds	r2, #174	; 0xae
 8045194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8045198:	2b00      	cmp	r3, #0
 804519a:	d101      	bne.n	80451a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 804519c:	2303      	movs	r3, #3
 804519e:	e01c      	b.n	80451da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80451a0:	687b      	ldr	r3, [r7, #4]
 80451a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80451a6:	b2db      	uxtb	r3, r3
 80451a8:	2b03      	cmp	r3, #3
 80451aa:	d115      	bne.n	80451d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80451ac:	687b      	ldr	r3, [r7, #4]
 80451ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80451b2:	687b      	ldr	r3, [r7, #4]
 80451b4:	32ae      	adds	r2, #174	; 0xae
 80451b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80451ba:	6a1b      	ldr	r3, [r3, #32]
 80451bc:	2b00      	cmp	r3, #0
 80451be:	d00b      	beq.n	80451d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80451c0:	687b      	ldr	r3, [r7, #4]
 80451c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80451c6:	687b      	ldr	r3, [r7, #4]
 80451c8:	32ae      	adds	r2, #174	; 0xae
 80451ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80451ce:	6a1b      	ldr	r3, [r3, #32]
 80451d0:	78fa      	ldrb	r2, [r7, #3]
 80451d2:	4611      	mov	r1, r2
 80451d4:	6878      	ldr	r0, [r7, #4]
 80451d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80451d8:	2300      	movs	r3, #0
}
 80451da:	4618      	mov	r0, r3
 80451dc:	3708      	adds	r7, #8
 80451de:	46bd      	mov	sp, r7
 80451e0:	bd80      	pop	{r7, pc}

080451e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80451e2:	b580      	push	{r7, lr}
 80451e4:	b082      	sub	sp, #8
 80451e6:	af00      	add	r7, sp, #0
 80451e8:	6078      	str	r0, [r7, #4]
 80451ea:	460b      	mov	r3, r1
 80451ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80451ee:	687b      	ldr	r3, [r7, #4]
 80451f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80451f4:	687b      	ldr	r3, [r7, #4]
 80451f6:	32ae      	adds	r2, #174	; 0xae
 80451f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80451fc:	2b00      	cmp	r3, #0
 80451fe:	d101      	bne.n	8045204 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8045200:	2303      	movs	r3, #3
 8045202:	e01c      	b.n	804523e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8045204:	687b      	ldr	r3, [r7, #4]
 8045206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 804520a:	b2db      	uxtb	r3, r3
 804520c:	2b03      	cmp	r3, #3
 804520e:	d115      	bne.n	804523c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8045210:	687b      	ldr	r3, [r7, #4]
 8045212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8045216:	687b      	ldr	r3, [r7, #4]
 8045218:	32ae      	adds	r2, #174	; 0xae
 804521a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045220:	2b00      	cmp	r3, #0
 8045222:	d00b      	beq.n	804523c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8045224:	687b      	ldr	r3, [r7, #4]
 8045226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 804522a:	687b      	ldr	r3, [r7, #4]
 804522c:	32ae      	adds	r2, #174	; 0xae
 804522e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8045232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045234:	78fa      	ldrb	r2, [r7, #3]
 8045236:	4611      	mov	r1, r2
 8045238:	6878      	ldr	r0, [r7, #4]
 804523a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 804523c:	2300      	movs	r3, #0
}
 804523e:	4618      	mov	r0, r3
 8045240:	3708      	adds	r7, #8
 8045242:	46bd      	mov	sp, r7
 8045244:	bd80      	pop	{r7, pc}

08045246 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8045246:	b480      	push	{r7}
 8045248:	b083      	sub	sp, #12
 804524a:	af00      	add	r7, sp, #0
 804524c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 804524e:	2300      	movs	r3, #0
}
 8045250:	4618      	mov	r0, r3
 8045252:	370c      	adds	r7, #12
 8045254:	46bd      	mov	sp, r7
 8045256:	f85d 7b04 	ldr.w	r7, [sp], #4
 804525a:	4770      	bx	lr

0804525c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 804525c:	b580      	push	{r7, lr}
 804525e:	b084      	sub	sp, #16
 8045260:	af00      	add	r7, sp, #0
 8045262:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8045264:	2300      	movs	r3, #0
 8045266:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8045268:	687b      	ldr	r3, [r7, #4]
 804526a:	2201      	movs	r2, #1
 804526c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8045270:	687b      	ldr	r3, [r7, #4]
 8045272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8045276:	2b00      	cmp	r3, #0
 8045278:	d00e      	beq.n	8045298 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 804527a:	687b      	ldr	r3, [r7, #4]
 804527c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8045280:	685b      	ldr	r3, [r3, #4]
 8045282:	687a      	ldr	r2, [r7, #4]
 8045284:	6852      	ldr	r2, [r2, #4]
 8045286:	b2d2      	uxtb	r2, r2
 8045288:	4611      	mov	r1, r2
 804528a:	6878      	ldr	r0, [r7, #4]
 804528c:	4798      	blx	r3
 804528e:	4603      	mov	r3, r0
 8045290:	2b00      	cmp	r3, #0
 8045292:	d001      	beq.n	8045298 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8045294:	2303      	movs	r3, #3
 8045296:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8045298:	7bfb      	ldrb	r3, [r7, #15]
}
 804529a:	4618      	mov	r0, r3
 804529c:	3710      	adds	r7, #16
 804529e:	46bd      	mov	sp, r7
 80452a0:	bd80      	pop	{r7, pc}

080452a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80452a2:	b480      	push	{r7}
 80452a4:	b083      	sub	sp, #12
 80452a6:	af00      	add	r7, sp, #0
 80452a8:	6078      	str	r0, [r7, #4]
 80452aa:	460b      	mov	r3, r1
 80452ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80452ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80452b0:	4618      	mov	r0, r3
 80452b2:	370c      	adds	r7, #12
 80452b4:	46bd      	mov	sp, r7
 80452b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80452ba:	4770      	bx	lr

080452bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80452bc:	b480      	push	{r7}
 80452be:	b083      	sub	sp, #12
 80452c0:	af00      	add	r7, sp, #0
 80452c2:	6078      	str	r0, [r7, #4]
 80452c4:	460b      	mov	r3, r1
 80452c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80452c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80452ca:	4618      	mov	r0, r3
 80452cc:	370c      	adds	r7, #12
 80452ce:	46bd      	mov	sp, r7
 80452d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80452d4:	4770      	bx	lr

080452d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80452d6:	b580      	push	{r7, lr}
 80452d8:	b086      	sub	sp, #24
 80452da:	af00      	add	r7, sp, #0
 80452dc:	6078      	str	r0, [r7, #4]
 80452de:	460b      	mov	r3, r1
 80452e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80452e2:	687b      	ldr	r3, [r7, #4]
 80452e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80452e6:	687b      	ldr	r3, [r7, #4]
 80452e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80452ea:	2300      	movs	r3, #0
 80452ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80452ee:	68fb      	ldr	r3, [r7, #12]
 80452f0:	885b      	ldrh	r3, [r3, #2]
 80452f2:	b29a      	uxth	r2, r3
 80452f4:	68fb      	ldr	r3, [r7, #12]
 80452f6:	781b      	ldrb	r3, [r3, #0]
 80452f8:	b29b      	uxth	r3, r3
 80452fa:	429a      	cmp	r2, r3
 80452fc:	d920      	bls.n	8045340 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80452fe:	68fb      	ldr	r3, [r7, #12]
 8045300:	781b      	ldrb	r3, [r3, #0]
 8045302:	b29b      	uxth	r3, r3
 8045304:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8045306:	e013      	b.n	8045330 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8045308:	f107 030a 	add.w	r3, r7, #10
 804530c:	4619      	mov	r1, r3
 804530e:	6978      	ldr	r0, [r7, #20]
 8045310:	f000 f81b 	bl	804534a <USBD_GetNextDesc>
 8045314:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8045316:	697b      	ldr	r3, [r7, #20]
 8045318:	785b      	ldrb	r3, [r3, #1]
 804531a:	2b05      	cmp	r3, #5
 804531c:	d108      	bne.n	8045330 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 804531e:	697b      	ldr	r3, [r7, #20]
 8045320:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8045322:	693b      	ldr	r3, [r7, #16]
 8045324:	789b      	ldrb	r3, [r3, #2]
 8045326:	78fa      	ldrb	r2, [r7, #3]
 8045328:	429a      	cmp	r2, r3
 804532a:	d008      	beq.n	804533e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 804532c:	2300      	movs	r3, #0
 804532e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8045330:	68fb      	ldr	r3, [r7, #12]
 8045332:	885b      	ldrh	r3, [r3, #2]
 8045334:	b29a      	uxth	r2, r3
 8045336:	897b      	ldrh	r3, [r7, #10]
 8045338:	429a      	cmp	r2, r3
 804533a:	d8e5      	bhi.n	8045308 <USBD_GetEpDesc+0x32>
 804533c:	e000      	b.n	8045340 <USBD_GetEpDesc+0x6a>
          break;
 804533e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8045340:	693b      	ldr	r3, [r7, #16]
}
 8045342:	4618      	mov	r0, r3
 8045344:	3718      	adds	r7, #24
 8045346:	46bd      	mov	sp, r7
 8045348:	bd80      	pop	{r7, pc}

0804534a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 804534a:	b480      	push	{r7}
 804534c:	b085      	sub	sp, #20
 804534e:	af00      	add	r7, sp, #0
 8045350:	6078      	str	r0, [r7, #4]
 8045352:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8045354:	687b      	ldr	r3, [r7, #4]
 8045356:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8045358:	683b      	ldr	r3, [r7, #0]
 804535a:	881a      	ldrh	r2, [r3, #0]
 804535c:	68fb      	ldr	r3, [r7, #12]
 804535e:	781b      	ldrb	r3, [r3, #0]
 8045360:	b29b      	uxth	r3, r3
 8045362:	4413      	add	r3, r2
 8045364:	b29a      	uxth	r2, r3
 8045366:	683b      	ldr	r3, [r7, #0]
 8045368:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 804536a:	68fb      	ldr	r3, [r7, #12]
 804536c:	781b      	ldrb	r3, [r3, #0]
 804536e:	461a      	mov	r2, r3
 8045370:	687b      	ldr	r3, [r7, #4]
 8045372:	4413      	add	r3, r2
 8045374:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8045376:	68fb      	ldr	r3, [r7, #12]
}
 8045378:	4618      	mov	r0, r3
 804537a:	3714      	adds	r7, #20
 804537c:	46bd      	mov	sp, r7
 804537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045382:	4770      	bx	lr

08045384 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8045384:	b480      	push	{r7}
 8045386:	b087      	sub	sp, #28
 8045388:	af00      	add	r7, sp, #0
 804538a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 804538c:	687b      	ldr	r3, [r7, #4]
 804538e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8045390:	697b      	ldr	r3, [r7, #20]
 8045392:	781b      	ldrb	r3, [r3, #0]
 8045394:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8045396:	697b      	ldr	r3, [r7, #20]
 8045398:	3301      	adds	r3, #1
 804539a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 804539c:	697b      	ldr	r3, [r7, #20]
 804539e:	781b      	ldrb	r3, [r3, #0]
 80453a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80453a2:	8a3b      	ldrh	r3, [r7, #16]
 80453a4:	021b      	lsls	r3, r3, #8
 80453a6:	b21a      	sxth	r2, r3
 80453a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80453ac:	4313      	orrs	r3, r2
 80453ae:	b21b      	sxth	r3, r3
 80453b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80453b2:	89fb      	ldrh	r3, [r7, #14]
}
 80453b4:	4618      	mov	r0, r3
 80453b6:	371c      	adds	r7, #28
 80453b8:	46bd      	mov	sp, r7
 80453ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80453be:	4770      	bx	lr

080453c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80453c0:	b580      	push	{r7, lr}
 80453c2:	b084      	sub	sp, #16
 80453c4:	af00      	add	r7, sp, #0
 80453c6:	6078      	str	r0, [r7, #4]
 80453c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80453ca:	2300      	movs	r3, #0
 80453cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80453ce:	683b      	ldr	r3, [r7, #0]
 80453d0:	781b      	ldrb	r3, [r3, #0]
 80453d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80453d6:	2b40      	cmp	r3, #64	; 0x40
 80453d8:	d005      	beq.n	80453e6 <USBD_StdDevReq+0x26>
 80453da:	2b40      	cmp	r3, #64	; 0x40
 80453dc:	d857      	bhi.n	804548e <USBD_StdDevReq+0xce>
 80453de:	2b00      	cmp	r3, #0
 80453e0:	d00f      	beq.n	8045402 <USBD_StdDevReq+0x42>
 80453e2:	2b20      	cmp	r3, #32
 80453e4:	d153      	bne.n	804548e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80453e6:	687b      	ldr	r3, [r7, #4]
 80453e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80453ec:	687b      	ldr	r3, [r7, #4]
 80453ee:	32ae      	adds	r2, #174	; 0xae
 80453f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80453f4:	689b      	ldr	r3, [r3, #8]
 80453f6:	6839      	ldr	r1, [r7, #0]
 80453f8:	6878      	ldr	r0, [r7, #4]
 80453fa:	4798      	blx	r3
 80453fc:	4603      	mov	r3, r0
 80453fe:	73fb      	strb	r3, [r7, #15]
      break;
 8045400:	e04a      	b.n	8045498 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8045402:	683b      	ldr	r3, [r7, #0]
 8045404:	785b      	ldrb	r3, [r3, #1]
 8045406:	2b09      	cmp	r3, #9
 8045408:	d83b      	bhi.n	8045482 <USBD_StdDevReq+0xc2>
 804540a:	a201      	add	r2, pc, #4	; (adr r2, 8045410 <USBD_StdDevReq+0x50>)
 804540c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045410:	08045465 	.word	0x08045465
 8045414:	08045479 	.word	0x08045479
 8045418:	08045483 	.word	0x08045483
 804541c:	0804546f 	.word	0x0804546f
 8045420:	08045483 	.word	0x08045483
 8045424:	08045443 	.word	0x08045443
 8045428:	08045439 	.word	0x08045439
 804542c:	08045483 	.word	0x08045483
 8045430:	0804545b 	.word	0x0804545b
 8045434:	0804544d 	.word	0x0804544d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8045438:	6839      	ldr	r1, [r7, #0]
 804543a:	6878      	ldr	r0, [r7, #4]
 804543c:	f000 fa3c 	bl	80458b8 <USBD_GetDescriptor>
          break;
 8045440:	e024      	b.n	804548c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8045442:	6839      	ldr	r1, [r7, #0]
 8045444:	6878      	ldr	r0, [r7, #4]
 8045446:	f000 fba1 	bl	8045b8c <USBD_SetAddress>
          break;
 804544a:	e01f      	b.n	804548c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 804544c:	6839      	ldr	r1, [r7, #0]
 804544e:	6878      	ldr	r0, [r7, #4]
 8045450:	f000 fbe0 	bl	8045c14 <USBD_SetConfig>
 8045454:	4603      	mov	r3, r0
 8045456:	73fb      	strb	r3, [r7, #15]
          break;
 8045458:	e018      	b.n	804548c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 804545a:	6839      	ldr	r1, [r7, #0]
 804545c:	6878      	ldr	r0, [r7, #4]
 804545e:	f000 fc83 	bl	8045d68 <USBD_GetConfig>
          break;
 8045462:	e013      	b.n	804548c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8045464:	6839      	ldr	r1, [r7, #0]
 8045466:	6878      	ldr	r0, [r7, #4]
 8045468:	f000 fcb4 	bl	8045dd4 <USBD_GetStatus>
          break;
 804546c:	e00e      	b.n	804548c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 804546e:	6839      	ldr	r1, [r7, #0]
 8045470:	6878      	ldr	r0, [r7, #4]
 8045472:	f000 fce3 	bl	8045e3c <USBD_SetFeature>
          break;
 8045476:	e009      	b.n	804548c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8045478:	6839      	ldr	r1, [r7, #0]
 804547a:	6878      	ldr	r0, [r7, #4]
 804547c:	f000 fd07 	bl	8045e8e <USBD_ClrFeature>
          break;
 8045480:	e004      	b.n	804548c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8045482:	6839      	ldr	r1, [r7, #0]
 8045484:	6878      	ldr	r0, [r7, #4]
 8045486:	f000 fd5e 	bl	8045f46 <USBD_CtlError>
          break;
 804548a:	bf00      	nop
      }
      break;
 804548c:	e004      	b.n	8045498 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 804548e:	6839      	ldr	r1, [r7, #0]
 8045490:	6878      	ldr	r0, [r7, #4]
 8045492:	f000 fd58 	bl	8045f46 <USBD_CtlError>
      break;
 8045496:	bf00      	nop
  }

  return ret;
 8045498:	7bfb      	ldrb	r3, [r7, #15]
}
 804549a:	4618      	mov	r0, r3
 804549c:	3710      	adds	r7, #16
 804549e:	46bd      	mov	sp, r7
 80454a0:	bd80      	pop	{r7, pc}
 80454a2:	bf00      	nop

080454a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80454a4:	b580      	push	{r7, lr}
 80454a6:	b084      	sub	sp, #16
 80454a8:	af00      	add	r7, sp, #0
 80454aa:	6078      	str	r0, [r7, #4]
 80454ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80454ae:	2300      	movs	r3, #0
 80454b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80454b2:	683b      	ldr	r3, [r7, #0]
 80454b4:	781b      	ldrb	r3, [r3, #0]
 80454b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80454ba:	2b40      	cmp	r3, #64	; 0x40
 80454bc:	d005      	beq.n	80454ca <USBD_StdItfReq+0x26>
 80454be:	2b40      	cmp	r3, #64	; 0x40
 80454c0:	d852      	bhi.n	8045568 <USBD_StdItfReq+0xc4>
 80454c2:	2b00      	cmp	r3, #0
 80454c4:	d001      	beq.n	80454ca <USBD_StdItfReq+0x26>
 80454c6:	2b20      	cmp	r3, #32
 80454c8:	d14e      	bne.n	8045568 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80454ca:	687b      	ldr	r3, [r7, #4]
 80454cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80454d0:	b2db      	uxtb	r3, r3
 80454d2:	3b01      	subs	r3, #1
 80454d4:	2b02      	cmp	r3, #2
 80454d6:	d840      	bhi.n	804555a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80454d8:	683b      	ldr	r3, [r7, #0]
 80454da:	889b      	ldrh	r3, [r3, #4]
 80454dc:	b2db      	uxtb	r3, r3
 80454de:	2b01      	cmp	r3, #1
 80454e0:	d836      	bhi.n	8045550 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80454e2:	683b      	ldr	r3, [r7, #0]
 80454e4:	889b      	ldrh	r3, [r3, #4]
 80454e6:	b2db      	uxtb	r3, r3
 80454e8:	4619      	mov	r1, r3
 80454ea:	6878      	ldr	r0, [r7, #4]
 80454ec:	f7ff fed9 	bl	80452a2 <USBD_CoreFindIF>
 80454f0:	4603      	mov	r3, r0
 80454f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80454f4:	7bbb      	ldrb	r3, [r7, #14]
 80454f6:	2bff      	cmp	r3, #255	; 0xff
 80454f8:	d01d      	beq.n	8045536 <USBD_StdItfReq+0x92>
 80454fa:	7bbb      	ldrb	r3, [r7, #14]
 80454fc:	2b00      	cmp	r3, #0
 80454fe:	d11a      	bne.n	8045536 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8045500:	7bba      	ldrb	r2, [r7, #14]
 8045502:	687b      	ldr	r3, [r7, #4]
 8045504:	32ae      	adds	r2, #174	; 0xae
 8045506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804550a:	689b      	ldr	r3, [r3, #8]
 804550c:	2b00      	cmp	r3, #0
 804550e:	d00f      	beq.n	8045530 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8045510:	7bba      	ldrb	r2, [r7, #14]
 8045512:	687b      	ldr	r3, [r7, #4]
 8045514:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8045518:	7bba      	ldrb	r2, [r7, #14]
 804551a:	687b      	ldr	r3, [r7, #4]
 804551c:	32ae      	adds	r2, #174	; 0xae
 804551e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8045522:	689b      	ldr	r3, [r3, #8]
 8045524:	6839      	ldr	r1, [r7, #0]
 8045526:	6878      	ldr	r0, [r7, #4]
 8045528:	4798      	blx	r3
 804552a:	4603      	mov	r3, r0
 804552c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 804552e:	e004      	b.n	804553a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8045530:	2303      	movs	r3, #3
 8045532:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8045534:	e001      	b.n	804553a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8045536:	2303      	movs	r3, #3
 8045538:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 804553a:	683b      	ldr	r3, [r7, #0]
 804553c:	88db      	ldrh	r3, [r3, #6]
 804553e:	2b00      	cmp	r3, #0
 8045540:	d110      	bne.n	8045564 <USBD_StdItfReq+0xc0>
 8045542:	7bfb      	ldrb	r3, [r7, #15]
 8045544:	2b00      	cmp	r3, #0
 8045546:	d10d      	bne.n	8045564 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8045548:	6878      	ldr	r0, [r7, #4]
 804554a:	f000 fdc7 	bl	80460dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 804554e:	e009      	b.n	8045564 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8045550:	6839      	ldr	r1, [r7, #0]
 8045552:	6878      	ldr	r0, [r7, #4]
 8045554:	f000 fcf7 	bl	8045f46 <USBD_CtlError>
          break;
 8045558:	e004      	b.n	8045564 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 804555a:	6839      	ldr	r1, [r7, #0]
 804555c:	6878      	ldr	r0, [r7, #4]
 804555e:	f000 fcf2 	bl	8045f46 <USBD_CtlError>
          break;
 8045562:	e000      	b.n	8045566 <USBD_StdItfReq+0xc2>
          break;
 8045564:	bf00      	nop
      }
      break;
 8045566:	e004      	b.n	8045572 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8045568:	6839      	ldr	r1, [r7, #0]
 804556a:	6878      	ldr	r0, [r7, #4]
 804556c:	f000 fceb 	bl	8045f46 <USBD_CtlError>
      break;
 8045570:	bf00      	nop
  }

  return ret;
 8045572:	7bfb      	ldrb	r3, [r7, #15]
}
 8045574:	4618      	mov	r0, r3
 8045576:	3710      	adds	r7, #16
 8045578:	46bd      	mov	sp, r7
 804557a:	bd80      	pop	{r7, pc}

0804557c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 804557c:	b580      	push	{r7, lr}
 804557e:	b084      	sub	sp, #16
 8045580:	af00      	add	r7, sp, #0
 8045582:	6078      	str	r0, [r7, #4]
 8045584:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8045586:	2300      	movs	r3, #0
 8045588:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 804558a:	683b      	ldr	r3, [r7, #0]
 804558c:	889b      	ldrh	r3, [r3, #4]
 804558e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8045590:	683b      	ldr	r3, [r7, #0]
 8045592:	781b      	ldrb	r3, [r3, #0]
 8045594:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8045598:	2b40      	cmp	r3, #64	; 0x40
 804559a:	d007      	beq.n	80455ac <USBD_StdEPReq+0x30>
 804559c:	2b40      	cmp	r3, #64	; 0x40
 804559e:	f200 817f 	bhi.w	80458a0 <USBD_StdEPReq+0x324>
 80455a2:	2b00      	cmp	r3, #0
 80455a4:	d02a      	beq.n	80455fc <USBD_StdEPReq+0x80>
 80455a6:	2b20      	cmp	r3, #32
 80455a8:	f040 817a 	bne.w	80458a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80455ac:	7bbb      	ldrb	r3, [r7, #14]
 80455ae:	4619      	mov	r1, r3
 80455b0:	6878      	ldr	r0, [r7, #4]
 80455b2:	f7ff fe83 	bl	80452bc <USBD_CoreFindEP>
 80455b6:	4603      	mov	r3, r0
 80455b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80455ba:	7b7b      	ldrb	r3, [r7, #13]
 80455bc:	2bff      	cmp	r3, #255	; 0xff
 80455be:	f000 8174 	beq.w	80458aa <USBD_StdEPReq+0x32e>
 80455c2:	7b7b      	ldrb	r3, [r7, #13]
 80455c4:	2b00      	cmp	r3, #0
 80455c6:	f040 8170 	bne.w	80458aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80455ca:	7b7a      	ldrb	r2, [r7, #13]
 80455cc:	687b      	ldr	r3, [r7, #4]
 80455ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80455d2:	7b7a      	ldrb	r2, [r7, #13]
 80455d4:	687b      	ldr	r3, [r7, #4]
 80455d6:	32ae      	adds	r2, #174	; 0xae
 80455d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80455dc:	689b      	ldr	r3, [r3, #8]
 80455de:	2b00      	cmp	r3, #0
 80455e0:	f000 8163 	beq.w	80458aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80455e4:	7b7a      	ldrb	r2, [r7, #13]
 80455e6:	687b      	ldr	r3, [r7, #4]
 80455e8:	32ae      	adds	r2, #174	; 0xae
 80455ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80455ee:	689b      	ldr	r3, [r3, #8]
 80455f0:	6839      	ldr	r1, [r7, #0]
 80455f2:	6878      	ldr	r0, [r7, #4]
 80455f4:	4798      	blx	r3
 80455f6:	4603      	mov	r3, r0
 80455f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80455fa:	e156      	b.n	80458aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80455fc:	683b      	ldr	r3, [r7, #0]
 80455fe:	785b      	ldrb	r3, [r3, #1]
 8045600:	2b03      	cmp	r3, #3
 8045602:	d008      	beq.n	8045616 <USBD_StdEPReq+0x9a>
 8045604:	2b03      	cmp	r3, #3
 8045606:	f300 8145 	bgt.w	8045894 <USBD_StdEPReq+0x318>
 804560a:	2b00      	cmp	r3, #0
 804560c:	f000 809b 	beq.w	8045746 <USBD_StdEPReq+0x1ca>
 8045610:	2b01      	cmp	r3, #1
 8045612:	d03c      	beq.n	804568e <USBD_StdEPReq+0x112>
 8045614:	e13e      	b.n	8045894 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8045616:	687b      	ldr	r3, [r7, #4]
 8045618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 804561c:	b2db      	uxtb	r3, r3
 804561e:	2b02      	cmp	r3, #2
 8045620:	d002      	beq.n	8045628 <USBD_StdEPReq+0xac>
 8045622:	2b03      	cmp	r3, #3
 8045624:	d016      	beq.n	8045654 <USBD_StdEPReq+0xd8>
 8045626:	e02c      	b.n	8045682 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8045628:	7bbb      	ldrb	r3, [r7, #14]
 804562a:	2b00      	cmp	r3, #0
 804562c:	d00d      	beq.n	804564a <USBD_StdEPReq+0xce>
 804562e:	7bbb      	ldrb	r3, [r7, #14]
 8045630:	2b80      	cmp	r3, #128	; 0x80
 8045632:	d00a      	beq.n	804564a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8045634:	7bbb      	ldrb	r3, [r7, #14]
 8045636:	4619      	mov	r1, r3
 8045638:	6878      	ldr	r0, [r7, #4]
 804563a:	f001 f93d 	bl	80468b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 804563e:	2180      	movs	r1, #128	; 0x80
 8045640:	6878      	ldr	r0, [r7, #4]
 8045642:	f001 f939 	bl	80468b8 <USBD_LL_StallEP>
 8045646:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8045648:	e020      	b.n	804568c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 804564a:	6839      	ldr	r1, [r7, #0]
 804564c:	6878      	ldr	r0, [r7, #4]
 804564e:	f000 fc7a 	bl	8045f46 <USBD_CtlError>
              break;
 8045652:	e01b      	b.n	804568c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8045654:	683b      	ldr	r3, [r7, #0]
 8045656:	885b      	ldrh	r3, [r3, #2]
 8045658:	2b00      	cmp	r3, #0
 804565a:	d10e      	bne.n	804567a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 804565c:	7bbb      	ldrb	r3, [r7, #14]
 804565e:	2b00      	cmp	r3, #0
 8045660:	d00b      	beq.n	804567a <USBD_StdEPReq+0xfe>
 8045662:	7bbb      	ldrb	r3, [r7, #14]
 8045664:	2b80      	cmp	r3, #128	; 0x80
 8045666:	d008      	beq.n	804567a <USBD_StdEPReq+0xfe>
 8045668:	683b      	ldr	r3, [r7, #0]
 804566a:	88db      	ldrh	r3, [r3, #6]
 804566c:	2b00      	cmp	r3, #0
 804566e:	d104      	bne.n	804567a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8045670:	7bbb      	ldrb	r3, [r7, #14]
 8045672:	4619      	mov	r1, r3
 8045674:	6878      	ldr	r0, [r7, #4]
 8045676:	f001 f91f 	bl	80468b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 804567a:	6878      	ldr	r0, [r7, #4]
 804567c:	f000 fd2e 	bl	80460dc <USBD_CtlSendStatus>

              break;
 8045680:	e004      	b.n	804568c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8045682:	6839      	ldr	r1, [r7, #0]
 8045684:	6878      	ldr	r0, [r7, #4]
 8045686:	f000 fc5e 	bl	8045f46 <USBD_CtlError>
              break;
 804568a:	bf00      	nop
          }
          break;
 804568c:	e107      	b.n	804589e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 804568e:	687b      	ldr	r3, [r7, #4]
 8045690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8045694:	b2db      	uxtb	r3, r3
 8045696:	2b02      	cmp	r3, #2
 8045698:	d002      	beq.n	80456a0 <USBD_StdEPReq+0x124>
 804569a:	2b03      	cmp	r3, #3
 804569c:	d016      	beq.n	80456cc <USBD_StdEPReq+0x150>
 804569e:	e04b      	b.n	8045738 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80456a0:	7bbb      	ldrb	r3, [r7, #14]
 80456a2:	2b00      	cmp	r3, #0
 80456a4:	d00d      	beq.n	80456c2 <USBD_StdEPReq+0x146>
 80456a6:	7bbb      	ldrb	r3, [r7, #14]
 80456a8:	2b80      	cmp	r3, #128	; 0x80
 80456aa:	d00a      	beq.n	80456c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80456ac:	7bbb      	ldrb	r3, [r7, #14]
 80456ae:	4619      	mov	r1, r3
 80456b0:	6878      	ldr	r0, [r7, #4]
 80456b2:	f001 f901 	bl	80468b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80456b6:	2180      	movs	r1, #128	; 0x80
 80456b8:	6878      	ldr	r0, [r7, #4]
 80456ba:	f001 f8fd 	bl	80468b8 <USBD_LL_StallEP>
 80456be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80456c0:	e040      	b.n	8045744 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80456c2:	6839      	ldr	r1, [r7, #0]
 80456c4:	6878      	ldr	r0, [r7, #4]
 80456c6:	f000 fc3e 	bl	8045f46 <USBD_CtlError>
              break;
 80456ca:	e03b      	b.n	8045744 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80456cc:	683b      	ldr	r3, [r7, #0]
 80456ce:	885b      	ldrh	r3, [r3, #2]
 80456d0:	2b00      	cmp	r3, #0
 80456d2:	d136      	bne.n	8045742 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80456d4:	7bbb      	ldrb	r3, [r7, #14]
 80456d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80456da:	2b00      	cmp	r3, #0
 80456dc:	d004      	beq.n	80456e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80456de:	7bbb      	ldrb	r3, [r7, #14]
 80456e0:	4619      	mov	r1, r3
 80456e2:	6878      	ldr	r0, [r7, #4]
 80456e4:	f001 f907 	bl	80468f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80456e8:	6878      	ldr	r0, [r7, #4]
 80456ea:	f000 fcf7 	bl	80460dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80456ee:	7bbb      	ldrb	r3, [r7, #14]
 80456f0:	4619      	mov	r1, r3
 80456f2:	6878      	ldr	r0, [r7, #4]
 80456f4:	f7ff fde2 	bl	80452bc <USBD_CoreFindEP>
 80456f8:	4603      	mov	r3, r0
 80456fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80456fc:	7b7b      	ldrb	r3, [r7, #13]
 80456fe:	2bff      	cmp	r3, #255	; 0xff
 8045700:	d01f      	beq.n	8045742 <USBD_StdEPReq+0x1c6>
 8045702:	7b7b      	ldrb	r3, [r7, #13]
 8045704:	2b00      	cmp	r3, #0
 8045706:	d11c      	bne.n	8045742 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8045708:	7b7a      	ldrb	r2, [r7, #13]
 804570a:	687b      	ldr	r3, [r7, #4]
 804570c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8045710:	7b7a      	ldrb	r2, [r7, #13]
 8045712:	687b      	ldr	r3, [r7, #4]
 8045714:	32ae      	adds	r2, #174	; 0xae
 8045716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804571a:	689b      	ldr	r3, [r3, #8]
 804571c:	2b00      	cmp	r3, #0
 804571e:	d010      	beq.n	8045742 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8045720:	7b7a      	ldrb	r2, [r7, #13]
 8045722:	687b      	ldr	r3, [r7, #4]
 8045724:	32ae      	adds	r2, #174	; 0xae
 8045726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804572a:	689b      	ldr	r3, [r3, #8]
 804572c:	6839      	ldr	r1, [r7, #0]
 804572e:	6878      	ldr	r0, [r7, #4]
 8045730:	4798      	blx	r3
 8045732:	4603      	mov	r3, r0
 8045734:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8045736:	e004      	b.n	8045742 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8045738:	6839      	ldr	r1, [r7, #0]
 804573a:	6878      	ldr	r0, [r7, #4]
 804573c:	f000 fc03 	bl	8045f46 <USBD_CtlError>
              break;
 8045740:	e000      	b.n	8045744 <USBD_StdEPReq+0x1c8>
              break;
 8045742:	bf00      	nop
          }
          break;
 8045744:	e0ab      	b.n	804589e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8045746:	687b      	ldr	r3, [r7, #4]
 8045748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 804574c:	b2db      	uxtb	r3, r3
 804574e:	2b02      	cmp	r3, #2
 8045750:	d002      	beq.n	8045758 <USBD_StdEPReq+0x1dc>
 8045752:	2b03      	cmp	r3, #3
 8045754:	d032      	beq.n	80457bc <USBD_StdEPReq+0x240>
 8045756:	e097      	b.n	8045888 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8045758:	7bbb      	ldrb	r3, [r7, #14]
 804575a:	2b00      	cmp	r3, #0
 804575c:	d007      	beq.n	804576e <USBD_StdEPReq+0x1f2>
 804575e:	7bbb      	ldrb	r3, [r7, #14]
 8045760:	2b80      	cmp	r3, #128	; 0x80
 8045762:	d004      	beq.n	804576e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8045764:	6839      	ldr	r1, [r7, #0]
 8045766:	6878      	ldr	r0, [r7, #4]
 8045768:	f000 fbed 	bl	8045f46 <USBD_CtlError>
                break;
 804576c:	e091      	b.n	8045892 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 804576e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8045772:	2b00      	cmp	r3, #0
 8045774:	da0b      	bge.n	804578e <USBD_StdEPReq+0x212>
 8045776:	7bbb      	ldrb	r3, [r7, #14]
 8045778:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 804577c:	4613      	mov	r3, r2
 804577e:	009b      	lsls	r3, r3, #2
 8045780:	4413      	add	r3, r2
 8045782:	009b      	lsls	r3, r3, #2
 8045784:	3310      	adds	r3, #16
 8045786:	687a      	ldr	r2, [r7, #4]
 8045788:	4413      	add	r3, r2
 804578a:	3304      	adds	r3, #4
 804578c:	e00b      	b.n	80457a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 804578e:	7bbb      	ldrb	r3, [r7, #14]
 8045790:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8045794:	4613      	mov	r3, r2
 8045796:	009b      	lsls	r3, r3, #2
 8045798:	4413      	add	r3, r2
 804579a:	009b      	lsls	r3, r3, #2
 804579c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80457a0:	687a      	ldr	r2, [r7, #4]
 80457a2:	4413      	add	r3, r2
 80457a4:	3304      	adds	r3, #4
 80457a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80457a8:	68bb      	ldr	r3, [r7, #8]
 80457aa:	2200      	movs	r2, #0
 80457ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80457ae:	68bb      	ldr	r3, [r7, #8]
 80457b0:	2202      	movs	r2, #2
 80457b2:	4619      	mov	r1, r3
 80457b4:	6878      	ldr	r0, [r7, #4]
 80457b6:	f000 fc37 	bl	8046028 <USBD_CtlSendData>
              break;
 80457ba:	e06a      	b.n	8045892 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80457bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80457c0:	2b00      	cmp	r3, #0
 80457c2:	da11      	bge.n	80457e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80457c4:	7bbb      	ldrb	r3, [r7, #14]
 80457c6:	f003 020f 	and.w	r2, r3, #15
 80457ca:	6879      	ldr	r1, [r7, #4]
 80457cc:	4613      	mov	r3, r2
 80457ce:	009b      	lsls	r3, r3, #2
 80457d0:	4413      	add	r3, r2
 80457d2:	009b      	lsls	r3, r3, #2
 80457d4:	440b      	add	r3, r1
 80457d6:	3324      	adds	r3, #36	; 0x24
 80457d8:	881b      	ldrh	r3, [r3, #0]
 80457da:	2b00      	cmp	r3, #0
 80457dc:	d117      	bne.n	804580e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80457de:	6839      	ldr	r1, [r7, #0]
 80457e0:	6878      	ldr	r0, [r7, #4]
 80457e2:	f000 fbb0 	bl	8045f46 <USBD_CtlError>
                  break;
 80457e6:	e054      	b.n	8045892 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80457e8:	7bbb      	ldrb	r3, [r7, #14]
 80457ea:	f003 020f 	and.w	r2, r3, #15
 80457ee:	6879      	ldr	r1, [r7, #4]
 80457f0:	4613      	mov	r3, r2
 80457f2:	009b      	lsls	r3, r3, #2
 80457f4:	4413      	add	r3, r2
 80457f6:	009b      	lsls	r3, r3, #2
 80457f8:	440b      	add	r3, r1
 80457fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80457fe:	881b      	ldrh	r3, [r3, #0]
 8045800:	2b00      	cmp	r3, #0
 8045802:	d104      	bne.n	804580e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8045804:	6839      	ldr	r1, [r7, #0]
 8045806:	6878      	ldr	r0, [r7, #4]
 8045808:	f000 fb9d 	bl	8045f46 <USBD_CtlError>
                  break;
 804580c:	e041      	b.n	8045892 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 804580e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8045812:	2b00      	cmp	r3, #0
 8045814:	da0b      	bge.n	804582e <USBD_StdEPReq+0x2b2>
 8045816:	7bbb      	ldrb	r3, [r7, #14]
 8045818:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 804581c:	4613      	mov	r3, r2
 804581e:	009b      	lsls	r3, r3, #2
 8045820:	4413      	add	r3, r2
 8045822:	009b      	lsls	r3, r3, #2
 8045824:	3310      	adds	r3, #16
 8045826:	687a      	ldr	r2, [r7, #4]
 8045828:	4413      	add	r3, r2
 804582a:	3304      	adds	r3, #4
 804582c:	e00b      	b.n	8045846 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 804582e:	7bbb      	ldrb	r3, [r7, #14]
 8045830:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8045834:	4613      	mov	r3, r2
 8045836:	009b      	lsls	r3, r3, #2
 8045838:	4413      	add	r3, r2
 804583a:	009b      	lsls	r3, r3, #2
 804583c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8045840:	687a      	ldr	r2, [r7, #4]
 8045842:	4413      	add	r3, r2
 8045844:	3304      	adds	r3, #4
 8045846:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8045848:	7bbb      	ldrb	r3, [r7, #14]
 804584a:	2b00      	cmp	r3, #0
 804584c:	d002      	beq.n	8045854 <USBD_StdEPReq+0x2d8>
 804584e:	7bbb      	ldrb	r3, [r7, #14]
 8045850:	2b80      	cmp	r3, #128	; 0x80
 8045852:	d103      	bne.n	804585c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8045854:	68bb      	ldr	r3, [r7, #8]
 8045856:	2200      	movs	r2, #0
 8045858:	601a      	str	r2, [r3, #0]
 804585a:	e00e      	b.n	804587a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 804585c:	7bbb      	ldrb	r3, [r7, #14]
 804585e:	4619      	mov	r1, r3
 8045860:	6878      	ldr	r0, [r7, #4]
 8045862:	f001 f867 	bl	8046934 <USBD_LL_IsStallEP>
 8045866:	4603      	mov	r3, r0
 8045868:	2b00      	cmp	r3, #0
 804586a:	d003      	beq.n	8045874 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 804586c:	68bb      	ldr	r3, [r7, #8]
 804586e:	2201      	movs	r2, #1
 8045870:	601a      	str	r2, [r3, #0]
 8045872:	e002      	b.n	804587a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8045874:	68bb      	ldr	r3, [r7, #8]
 8045876:	2200      	movs	r2, #0
 8045878:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 804587a:	68bb      	ldr	r3, [r7, #8]
 804587c:	2202      	movs	r2, #2
 804587e:	4619      	mov	r1, r3
 8045880:	6878      	ldr	r0, [r7, #4]
 8045882:	f000 fbd1 	bl	8046028 <USBD_CtlSendData>
              break;
 8045886:	e004      	b.n	8045892 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8045888:	6839      	ldr	r1, [r7, #0]
 804588a:	6878      	ldr	r0, [r7, #4]
 804588c:	f000 fb5b 	bl	8045f46 <USBD_CtlError>
              break;
 8045890:	bf00      	nop
          }
          break;
 8045892:	e004      	b.n	804589e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8045894:	6839      	ldr	r1, [r7, #0]
 8045896:	6878      	ldr	r0, [r7, #4]
 8045898:	f000 fb55 	bl	8045f46 <USBD_CtlError>
          break;
 804589c:	bf00      	nop
      }
      break;
 804589e:	e005      	b.n	80458ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80458a0:	6839      	ldr	r1, [r7, #0]
 80458a2:	6878      	ldr	r0, [r7, #4]
 80458a4:	f000 fb4f 	bl	8045f46 <USBD_CtlError>
      break;
 80458a8:	e000      	b.n	80458ac <USBD_StdEPReq+0x330>
      break;
 80458aa:	bf00      	nop
  }

  return ret;
 80458ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80458ae:	4618      	mov	r0, r3
 80458b0:	3710      	adds	r7, #16
 80458b2:	46bd      	mov	sp, r7
 80458b4:	bd80      	pop	{r7, pc}
	...

080458b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80458b8:	b580      	push	{r7, lr}
 80458ba:	b084      	sub	sp, #16
 80458bc:	af00      	add	r7, sp, #0
 80458be:	6078      	str	r0, [r7, #4]
 80458c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80458c2:	2300      	movs	r3, #0
 80458c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80458c6:	2300      	movs	r3, #0
 80458c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80458ca:	2300      	movs	r3, #0
 80458cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80458ce:	683b      	ldr	r3, [r7, #0]
 80458d0:	885b      	ldrh	r3, [r3, #2]
 80458d2:	0a1b      	lsrs	r3, r3, #8
 80458d4:	b29b      	uxth	r3, r3
 80458d6:	3b01      	subs	r3, #1
 80458d8:	2b06      	cmp	r3, #6
 80458da:	f200 8128 	bhi.w	8045b2e <USBD_GetDescriptor+0x276>
 80458de:	a201      	add	r2, pc, #4	; (adr r2, 80458e4 <USBD_GetDescriptor+0x2c>)
 80458e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80458e4:	08045901 	.word	0x08045901
 80458e8:	08045919 	.word	0x08045919
 80458ec:	08045959 	.word	0x08045959
 80458f0:	08045b2f 	.word	0x08045b2f
 80458f4:	08045b2f 	.word	0x08045b2f
 80458f8:	08045acf 	.word	0x08045acf
 80458fc:	08045afb 	.word	0x08045afb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8045900:	687b      	ldr	r3, [r7, #4]
 8045902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8045906:	681b      	ldr	r3, [r3, #0]
 8045908:	687a      	ldr	r2, [r7, #4]
 804590a:	7c12      	ldrb	r2, [r2, #16]
 804590c:	f107 0108 	add.w	r1, r7, #8
 8045910:	4610      	mov	r0, r2
 8045912:	4798      	blx	r3
 8045914:	60f8      	str	r0, [r7, #12]
      break;
 8045916:	e112      	b.n	8045b3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8045918:	687b      	ldr	r3, [r7, #4]
 804591a:	7c1b      	ldrb	r3, [r3, #16]
 804591c:	2b00      	cmp	r3, #0
 804591e:	d10d      	bne.n	804593c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8045920:	687b      	ldr	r3, [r7, #4]
 8045922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8045926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8045928:	f107 0208 	add.w	r2, r7, #8
 804592c:	4610      	mov	r0, r2
 804592e:	4798      	blx	r3
 8045930:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8045932:	68fb      	ldr	r3, [r7, #12]
 8045934:	3301      	adds	r3, #1
 8045936:	2202      	movs	r2, #2
 8045938:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 804593a:	e100      	b.n	8045b3e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 804593c:	687b      	ldr	r3, [r7, #4]
 804593e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8045942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045944:	f107 0208 	add.w	r2, r7, #8
 8045948:	4610      	mov	r0, r2
 804594a:	4798      	blx	r3
 804594c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 804594e:	68fb      	ldr	r3, [r7, #12]
 8045950:	3301      	adds	r3, #1
 8045952:	2202      	movs	r2, #2
 8045954:	701a      	strb	r2, [r3, #0]
      break;
 8045956:	e0f2      	b.n	8045b3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8045958:	683b      	ldr	r3, [r7, #0]
 804595a:	885b      	ldrh	r3, [r3, #2]
 804595c:	b2db      	uxtb	r3, r3
 804595e:	2b05      	cmp	r3, #5
 8045960:	f200 80ac 	bhi.w	8045abc <USBD_GetDescriptor+0x204>
 8045964:	a201      	add	r2, pc, #4	; (adr r2, 804596c <USBD_GetDescriptor+0xb4>)
 8045966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804596a:	bf00      	nop
 804596c:	08045985 	.word	0x08045985
 8045970:	080459b9 	.word	0x080459b9
 8045974:	080459ed 	.word	0x080459ed
 8045978:	08045a21 	.word	0x08045a21
 804597c:	08045a55 	.word	0x08045a55
 8045980:	08045a89 	.word	0x08045a89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8045984:	687b      	ldr	r3, [r7, #4]
 8045986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 804598a:	685b      	ldr	r3, [r3, #4]
 804598c:	2b00      	cmp	r3, #0
 804598e:	d00b      	beq.n	80459a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8045990:	687b      	ldr	r3, [r7, #4]
 8045992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8045996:	685b      	ldr	r3, [r3, #4]
 8045998:	687a      	ldr	r2, [r7, #4]
 804599a:	7c12      	ldrb	r2, [r2, #16]
 804599c:	f107 0108 	add.w	r1, r7, #8
 80459a0:	4610      	mov	r0, r2
 80459a2:	4798      	blx	r3
 80459a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80459a6:	e091      	b.n	8045acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80459a8:	6839      	ldr	r1, [r7, #0]
 80459aa:	6878      	ldr	r0, [r7, #4]
 80459ac:	f000 facb 	bl	8045f46 <USBD_CtlError>
            err++;
 80459b0:	7afb      	ldrb	r3, [r7, #11]
 80459b2:	3301      	adds	r3, #1
 80459b4:	72fb      	strb	r3, [r7, #11]
          break;
 80459b6:	e089      	b.n	8045acc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80459b8:	687b      	ldr	r3, [r7, #4]
 80459ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80459be:	689b      	ldr	r3, [r3, #8]
 80459c0:	2b00      	cmp	r3, #0
 80459c2:	d00b      	beq.n	80459dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80459c4:	687b      	ldr	r3, [r7, #4]
 80459c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80459ca:	689b      	ldr	r3, [r3, #8]
 80459cc:	687a      	ldr	r2, [r7, #4]
 80459ce:	7c12      	ldrb	r2, [r2, #16]
 80459d0:	f107 0108 	add.w	r1, r7, #8
 80459d4:	4610      	mov	r0, r2
 80459d6:	4798      	blx	r3
 80459d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80459da:	e077      	b.n	8045acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80459dc:	6839      	ldr	r1, [r7, #0]
 80459de:	6878      	ldr	r0, [r7, #4]
 80459e0:	f000 fab1 	bl	8045f46 <USBD_CtlError>
            err++;
 80459e4:	7afb      	ldrb	r3, [r7, #11]
 80459e6:	3301      	adds	r3, #1
 80459e8:	72fb      	strb	r3, [r7, #11]
          break;
 80459ea:	e06f      	b.n	8045acc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80459ec:	687b      	ldr	r3, [r7, #4]
 80459ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80459f2:	68db      	ldr	r3, [r3, #12]
 80459f4:	2b00      	cmp	r3, #0
 80459f6:	d00b      	beq.n	8045a10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80459f8:	687b      	ldr	r3, [r7, #4]
 80459fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80459fe:	68db      	ldr	r3, [r3, #12]
 8045a00:	687a      	ldr	r2, [r7, #4]
 8045a02:	7c12      	ldrb	r2, [r2, #16]
 8045a04:	f107 0108 	add.w	r1, r7, #8
 8045a08:	4610      	mov	r0, r2
 8045a0a:	4798      	blx	r3
 8045a0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8045a0e:	e05d      	b.n	8045acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8045a10:	6839      	ldr	r1, [r7, #0]
 8045a12:	6878      	ldr	r0, [r7, #4]
 8045a14:	f000 fa97 	bl	8045f46 <USBD_CtlError>
            err++;
 8045a18:	7afb      	ldrb	r3, [r7, #11]
 8045a1a:	3301      	adds	r3, #1
 8045a1c:	72fb      	strb	r3, [r7, #11]
          break;
 8045a1e:	e055      	b.n	8045acc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8045a20:	687b      	ldr	r3, [r7, #4]
 8045a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8045a26:	691b      	ldr	r3, [r3, #16]
 8045a28:	2b00      	cmp	r3, #0
 8045a2a:	d00b      	beq.n	8045a44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8045a2c:	687b      	ldr	r3, [r7, #4]
 8045a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8045a32:	691b      	ldr	r3, [r3, #16]
 8045a34:	687a      	ldr	r2, [r7, #4]
 8045a36:	7c12      	ldrb	r2, [r2, #16]
 8045a38:	f107 0108 	add.w	r1, r7, #8
 8045a3c:	4610      	mov	r0, r2
 8045a3e:	4798      	blx	r3
 8045a40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8045a42:	e043      	b.n	8045acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8045a44:	6839      	ldr	r1, [r7, #0]
 8045a46:	6878      	ldr	r0, [r7, #4]
 8045a48:	f000 fa7d 	bl	8045f46 <USBD_CtlError>
            err++;
 8045a4c:	7afb      	ldrb	r3, [r7, #11]
 8045a4e:	3301      	adds	r3, #1
 8045a50:	72fb      	strb	r3, [r7, #11]
          break;
 8045a52:	e03b      	b.n	8045acc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8045a54:	687b      	ldr	r3, [r7, #4]
 8045a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8045a5a:	695b      	ldr	r3, [r3, #20]
 8045a5c:	2b00      	cmp	r3, #0
 8045a5e:	d00b      	beq.n	8045a78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8045a60:	687b      	ldr	r3, [r7, #4]
 8045a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8045a66:	695b      	ldr	r3, [r3, #20]
 8045a68:	687a      	ldr	r2, [r7, #4]
 8045a6a:	7c12      	ldrb	r2, [r2, #16]
 8045a6c:	f107 0108 	add.w	r1, r7, #8
 8045a70:	4610      	mov	r0, r2
 8045a72:	4798      	blx	r3
 8045a74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8045a76:	e029      	b.n	8045acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8045a78:	6839      	ldr	r1, [r7, #0]
 8045a7a:	6878      	ldr	r0, [r7, #4]
 8045a7c:	f000 fa63 	bl	8045f46 <USBD_CtlError>
            err++;
 8045a80:	7afb      	ldrb	r3, [r7, #11]
 8045a82:	3301      	adds	r3, #1
 8045a84:	72fb      	strb	r3, [r7, #11]
          break;
 8045a86:	e021      	b.n	8045acc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8045a88:	687b      	ldr	r3, [r7, #4]
 8045a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8045a8e:	699b      	ldr	r3, [r3, #24]
 8045a90:	2b00      	cmp	r3, #0
 8045a92:	d00b      	beq.n	8045aac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8045a94:	687b      	ldr	r3, [r7, #4]
 8045a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8045a9a:	699b      	ldr	r3, [r3, #24]
 8045a9c:	687a      	ldr	r2, [r7, #4]
 8045a9e:	7c12      	ldrb	r2, [r2, #16]
 8045aa0:	f107 0108 	add.w	r1, r7, #8
 8045aa4:	4610      	mov	r0, r2
 8045aa6:	4798      	blx	r3
 8045aa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8045aaa:	e00f      	b.n	8045acc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8045aac:	6839      	ldr	r1, [r7, #0]
 8045aae:	6878      	ldr	r0, [r7, #4]
 8045ab0:	f000 fa49 	bl	8045f46 <USBD_CtlError>
            err++;
 8045ab4:	7afb      	ldrb	r3, [r7, #11]
 8045ab6:	3301      	adds	r3, #1
 8045ab8:	72fb      	strb	r3, [r7, #11]
          break;
 8045aba:	e007      	b.n	8045acc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8045abc:	6839      	ldr	r1, [r7, #0]
 8045abe:	6878      	ldr	r0, [r7, #4]
 8045ac0:	f000 fa41 	bl	8045f46 <USBD_CtlError>
          err++;
 8045ac4:	7afb      	ldrb	r3, [r7, #11]
 8045ac6:	3301      	adds	r3, #1
 8045ac8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8045aca:	bf00      	nop
      }
      break;
 8045acc:	e037      	b.n	8045b3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8045ace:	687b      	ldr	r3, [r7, #4]
 8045ad0:	7c1b      	ldrb	r3, [r3, #16]
 8045ad2:	2b00      	cmp	r3, #0
 8045ad4:	d109      	bne.n	8045aea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8045ad6:	687b      	ldr	r3, [r7, #4]
 8045ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8045adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8045ade:	f107 0208 	add.w	r2, r7, #8
 8045ae2:	4610      	mov	r0, r2
 8045ae4:	4798      	blx	r3
 8045ae6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8045ae8:	e029      	b.n	8045b3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8045aea:	6839      	ldr	r1, [r7, #0]
 8045aec:	6878      	ldr	r0, [r7, #4]
 8045aee:	f000 fa2a 	bl	8045f46 <USBD_CtlError>
        err++;
 8045af2:	7afb      	ldrb	r3, [r7, #11]
 8045af4:	3301      	adds	r3, #1
 8045af6:	72fb      	strb	r3, [r7, #11]
      break;
 8045af8:	e021      	b.n	8045b3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8045afa:	687b      	ldr	r3, [r7, #4]
 8045afc:	7c1b      	ldrb	r3, [r3, #16]
 8045afe:	2b00      	cmp	r3, #0
 8045b00:	d10d      	bne.n	8045b1e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8045b02:	687b      	ldr	r3, [r7, #4]
 8045b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8045b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045b0a:	f107 0208 	add.w	r2, r7, #8
 8045b0e:	4610      	mov	r0, r2
 8045b10:	4798      	blx	r3
 8045b12:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8045b14:	68fb      	ldr	r3, [r7, #12]
 8045b16:	3301      	adds	r3, #1
 8045b18:	2207      	movs	r2, #7
 8045b1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8045b1c:	e00f      	b.n	8045b3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8045b1e:	6839      	ldr	r1, [r7, #0]
 8045b20:	6878      	ldr	r0, [r7, #4]
 8045b22:	f000 fa10 	bl	8045f46 <USBD_CtlError>
        err++;
 8045b26:	7afb      	ldrb	r3, [r7, #11]
 8045b28:	3301      	adds	r3, #1
 8045b2a:	72fb      	strb	r3, [r7, #11]
      break;
 8045b2c:	e007      	b.n	8045b3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8045b2e:	6839      	ldr	r1, [r7, #0]
 8045b30:	6878      	ldr	r0, [r7, #4]
 8045b32:	f000 fa08 	bl	8045f46 <USBD_CtlError>
      err++;
 8045b36:	7afb      	ldrb	r3, [r7, #11]
 8045b38:	3301      	adds	r3, #1
 8045b3a:	72fb      	strb	r3, [r7, #11]
      break;
 8045b3c:	bf00      	nop
  }

  if (err != 0U)
 8045b3e:	7afb      	ldrb	r3, [r7, #11]
 8045b40:	2b00      	cmp	r3, #0
 8045b42:	d11e      	bne.n	8045b82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8045b44:	683b      	ldr	r3, [r7, #0]
 8045b46:	88db      	ldrh	r3, [r3, #6]
 8045b48:	2b00      	cmp	r3, #0
 8045b4a:	d016      	beq.n	8045b7a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8045b4c:	893b      	ldrh	r3, [r7, #8]
 8045b4e:	2b00      	cmp	r3, #0
 8045b50:	d00e      	beq.n	8045b70 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8045b52:	683b      	ldr	r3, [r7, #0]
 8045b54:	88da      	ldrh	r2, [r3, #6]
 8045b56:	893b      	ldrh	r3, [r7, #8]
 8045b58:	4293      	cmp	r3, r2
 8045b5a:	bf28      	it	cs
 8045b5c:	4613      	movcs	r3, r2
 8045b5e:	b29b      	uxth	r3, r3
 8045b60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8045b62:	893b      	ldrh	r3, [r7, #8]
 8045b64:	461a      	mov	r2, r3
 8045b66:	68f9      	ldr	r1, [r7, #12]
 8045b68:	6878      	ldr	r0, [r7, #4]
 8045b6a:	f000 fa5d 	bl	8046028 <USBD_CtlSendData>
 8045b6e:	e009      	b.n	8045b84 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8045b70:	6839      	ldr	r1, [r7, #0]
 8045b72:	6878      	ldr	r0, [r7, #4]
 8045b74:	f000 f9e7 	bl	8045f46 <USBD_CtlError>
 8045b78:	e004      	b.n	8045b84 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8045b7a:	6878      	ldr	r0, [r7, #4]
 8045b7c:	f000 faae 	bl	80460dc <USBD_CtlSendStatus>
 8045b80:	e000      	b.n	8045b84 <USBD_GetDescriptor+0x2cc>
    return;
 8045b82:	bf00      	nop
  }
}
 8045b84:	3710      	adds	r7, #16
 8045b86:	46bd      	mov	sp, r7
 8045b88:	bd80      	pop	{r7, pc}
 8045b8a:	bf00      	nop

08045b8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8045b8c:	b580      	push	{r7, lr}
 8045b8e:	b084      	sub	sp, #16
 8045b90:	af00      	add	r7, sp, #0
 8045b92:	6078      	str	r0, [r7, #4]
 8045b94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8045b96:	683b      	ldr	r3, [r7, #0]
 8045b98:	889b      	ldrh	r3, [r3, #4]
 8045b9a:	2b00      	cmp	r3, #0
 8045b9c:	d131      	bne.n	8045c02 <USBD_SetAddress+0x76>
 8045b9e:	683b      	ldr	r3, [r7, #0]
 8045ba0:	88db      	ldrh	r3, [r3, #6]
 8045ba2:	2b00      	cmp	r3, #0
 8045ba4:	d12d      	bne.n	8045c02 <USBD_SetAddress+0x76>
 8045ba6:	683b      	ldr	r3, [r7, #0]
 8045ba8:	885b      	ldrh	r3, [r3, #2]
 8045baa:	2b7f      	cmp	r3, #127	; 0x7f
 8045bac:	d829      	bhi.n	8045c02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8045bae:	683b      	ldr	r3, [r7, #0]
 8045bb0:	885b      	ldrh	r3, [r3, #2]
 8045bb2:	b2db      	uxtb	r3, r3
 8045bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8045bb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8045bba:	687b      	ldr	r3, [r7, #4]
 8045bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8045bc0:	b2db      	uxtb	r3, r3
 8045bc2:	2b03      	cmp	r3, #3
 8045bc4:	d104      	bne.n	8045bd0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8045bc6:	6839      	ldr	r1, [r7, #0]
 8045bc8:	6878      	ldr	r0, [r7, #4]
 8045bca:	f000 f9bc 	bl	8045f46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8045bce:	e01d      	b.n	8045c0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8045bd0:	687b      	ldr	r3, [r7, #4]
 8045bd2:	7bfa      	ldrb	r2, [r7, #15]
 8045bd4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8045bd8:	7bfb      	ldrb	r3, [r7, #15]
 8045bda:	4619      	mov	r1, r3
 8045bdc:	6878      	ldr	r0, [r7, #4]
 8045bde:	f000 fed5 	bl	804698c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8045be2:	6878      	ldr	r0, [r7, #4]
 8045be4:	f000 fa7a 	bl	80460dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8045be8:	7bfb      	ldrb	r3, [r7, #15]
 8045bea:	2b00      	cmp	r3, #0
 8045bec:	d004      	beq.n	8045bf8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8045bee:	687b      	ldr	r3, [r7, #4]
 8045bf0:	2202      	movs	r2, #2
 8045bf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8045bf6:	e009      	b.n	8045c0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8045bf8:	687b      	ldr	r3, [r7, #4]
 8045bfa:	2201      	movs	r2, #1
 8045bfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8045c00:	e004      	b.n	8045c0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8045c02:	6839      	ldr	r1, [r7, #0]
 8045c04:	6878      	ldr	r0, [r7, #4]
 8045c06:	f000 f99e 	bl	8045f46 <USBD_CtlError>
  }
}
 8045c0a:	bf00      	nop
 8045c0c:	bf00      	nop
 8045c0e:	3710      	adds	r7, #16
 8045c10:	46bd      	mov	sp, r7
 8045c12:	bd80      	pop	{r7, pc}

08045c14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8045c14:	b580      	push	{r7, lr}
 8045c16:	b084      	sub	sp, #16
 8045c18:	af00      	add	r7, sp, #0
 8045c1a:	6078      	str	r0, [r7, #4]
 8045c1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8045c1e:	2300      	movs	r3, #0
 8045c20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8045c22:	683b      	ldr	r3, [r7, #0]
 8045c24:	885b      	ldrh	r3, [r3, #2]
 8045c26:	b2da      	uxtb	r2, r3
 8045c28:	4b4e      	ldr	r3, [pc, #312]	; (8045d64 <USBD_SetConfig+0x150>)
 8045c2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8045c2c:	4b4d      	ldr	r3, [pc, #308]	; (8045d64 <USBD_SetConfig+0x150>)
 8045c2e:	781b      	ldrb	r3, [r3, #0]
 8045c30:	2b01      	cmp	r3, #1
 8045c32:	d905      	bls.n	8045c40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8045c34:	6839      	ldr	r1, [r7, #0]
 8045c36:	6878      	ldr	r0, [r7, #4]
 8045c38:	f000 f985 	bl	8045f46 <USBD_CtlError>
    return USBD_FAIL;
 8045c3c:	2303      	movs	r3, #3
 8045c3e:	e08c      	b.n	8045d5a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8045c40:	687b      	ldr	r3, [r7, #4]
 8045c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8045c46:	b2db      	uxtb	r3, r3
 8045c48:	2b02      	cmp	r3, #2
 8045c4a:	d002      	beq.n	8045c52 <USBD_SetConfig+0x3e>
 8045c4c:	2b03      	cmp	r3, #3
 8045c4e:	d029      	beq.n	8045ca4 <USBD_SetConfig+0x90>
 8045c50:	e075      	b.n	8045d3e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8045c52:	4b44      	ldr	r3, [pc, #272]	; (8045d64 <USBD_SetConfig+0x150>)
 8045c54:	781b      	ldrb	r3, [r3, #0]
 8045c56:	2b00      	cmp	r3, #0
 8045c58:	d020      	beq.n	8045c9c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8045c5a:	4b42      	ldr	r3, [pc, #264]	; (8045d64 <USBD_SetConfig+0x150>)
 8045c5c:	781b      	ldrb	r3, [r3, #0]
 8045c5e:	461a      	mov	r2, r3
 8045c60:	687b      	ldr	r3, [r7, #4]
 8045c62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8045c64:	4b3f      	ldr	r3, [pc, #252]	; (8045d64 <USBD_SetConfig+0x150>)
 8045c66:	781b      	ldrb	r3, [r3, #0]
 8045c68:	4619      	mov	r1, r3
 8045c6a:	6878      	ldr	r0, [r7, #4]
 8045c6c:	f7fe ffe1 	bl	8044c32 <USBD_SetClassConfig>
 8045c70:	4603      	mov	r3, r0
 8045c72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8045c74:	7bfb      	ldrb	r3, [r7, #15]
 8045c76:	2b00      	cmp	r3, #0
 8045c78:	d008      	beq.n	8045c8c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8045c7a:	6839      	ldr	r1, [r7, #0]
 8045c7c:	6878      	ldr	r0, [r7, #4]
 8045c7e:	f000 f962 	bl	8045f46 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8045c82:	687b      	ldr	r3, [r7, #4]
 8045c84:	2202      	movs	r2, #2
 8045c86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8045c8a:	e065      	b.n	8045d58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8045c8c:	6878      	ldr	r0, [r7, #4]
 8045c8e:	f000 fa25 	bl	80460dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8045c92:	687b      	ldr	r3, [r7, #4]
 8045c94:	2203      	movs	r2, #3
 8045c96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8045c9a:	e05d      	b.n	8045d58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8045c9c:	6878      	ldr	r0, [r7, #4]
 8045c9e:	f000 fa1d 	bl	80460dc <USBD_CtlSendStatus>
      break;
 8045ca2:	e059      	b.n	8045d58 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8045ca4:	4b2f      	ldr	r3, [pc, #188]	; (8045d64 <USBD_SetConfig+0x150>)
 8045ca6:	781b      	ldrb	r3, [r3, #0]
 8045ca8:	2b00      	cmp	r3, #0
 8045caa:	d112      	bne.n	8045cd2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8045cac:	687b      	ldr	r3, [r7, #4]
 8045cae:	2202      	movs	r2, #2
 8045cb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8045cb4:	4b2b      	ldr	r3, [pc, #172]	; (8045d64 <USBD_SetConfig+0x150>)
 8045cb6:	781b      	ldrb	r3, [r3, #0]
 8045cb8:	461a      	mov	r2, r3
 8045cba:	687b      	ldr	r3, [r7, #4]
 8045cbc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8045cbe:	4b29      	ldr	r3, [pc, #164]	; (8045d64 <USBD_SetConfig+0x150>)
 8045cc0:	781b      	ldrb	r3, [r3, #0]
 8045cc2:	4619      	mov	r1, r3
 8045cc4:	6878      	ldr	r0, [r7, #4]
 8045cc6:	f7fe ffd0 	bl	8044c6a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8045cca:	6878      	ldr	r0, [r7, #4]
 8045ccc:	f000 fa06 	bl	80460dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8045cd0:	e042      	b.n	8045d58 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8045cd2:	4b24      	ldr	r3, [pc, #144]	; (8045d64 <USBD_SetConfig+0x150>)
 8045cd4:	781b      	ldrb	r3, [r3, #0]
 8045cd6:	461a      	mov	r2, r3
 8045cd8:	687b      	ldr	r3, [r7, #4]
 8045cda:	685b      	ldr	r3, [r3, #4]
 8045cdc:	429a      	cmp	r2, r3
 8045cde:	d02a      	beq.n	8045d36 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8045ce0:	687b      	ldr	r3, [r7, #4]
 8045ce2:	685b      	ldr	r3, [r3, #4]
 8045ce4:	b2db      	uxtb	r3, r3
 8045ce6:	4619      	mov	r1, r3
 8045ce8:	6878      	ldr	r0, [r7, #4]
 8045cea:	f7fe ffbe 	bl	8044c6a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8045cee:	4b1d      	ldr	r3, [pc, #116]	; (8045d64 <USBD_SetConfig+0x150>)
 8045cf0:	781b      	ldrb	r3, [r3, #0]
 8045cf2:	461a      	mov	r2, r3
 8045cf4:	687b      	ldr	r3, [r7, #4]
 8045cf6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8045cf8:	4b1a      	ldr	r3, [pc, #104]	; (8045d64 <USBD_SetConfig+0x150>)
 8045cfa:	781b      	ldrb	r3, [r3, #0]
 8045cfc:	4619      	mov	r1, r3
 8045cfe:	6878      	ldr	r0, [r7, #4]
 8045d00:	f7fe ff97 	bl	8044c32 <USBD_SetClassConfig>
 8045d04:	4603      	mov	r3, r0
 8045d06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8045d08:	7bfb      	ldrb	r3, [r7, #15]
 8045d0a:	2b00      	cmp	r3, #0
 8045d0c:	d00f      	beq.n	8045d2e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8045d0e:	6839      	ldr	r1, [r7, #0]
 8045d10:	6878      	ldr	r0, [r7, #4]
 8045d12:	f000 f918 	bl	8045f46 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8045d16:	687b      	ldr	r3, [r7, #4]
 8045d18:	685b      	ldr	r3, [r3, #4]
 8045d1a:	b2db      	uxtb	r3, r3
 8045d1c:	4619      	mov	r1, r3
 8045d1e:	6878      	ldr	r0, [r7, #4]
 8045d20:	f7fe ffa3 	bl	8044c6a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8045d24:	687b      	ldr	r3, [r7, #4]
 8045d26:	2202      	movs	r2, #2
 8045d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8045d2c:	e014      	b.n	8045d58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8045d2e:	6878      	ldr	r0, [r7, #4]
 8045d30:	f000 f9d4 	bl	80460dc <USBD_CtlSendStatus>
      break;
 8045d34:	e010      	b.n	8045d58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8045d36:	6878      	ldr	r0, [r7, #4]
 8045d38:	f000 f9d0 	bl	80460dc <USBD_CtlSendStatus>
      break;
 8045d3c:	e00c      	b.n	8045d58 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8045d3e:	6839      	ldr	r1, [r7, #0]
 8045d40:	6878      	ldr	r0, [r7, #4]
 8045d42:	f000 f900 	bl	8045f46 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8045d46:	4b07      	ldr	r3, [pc, #28]	; (8045d64 <USBD_SetConfig+0x150>)
 8045d48:	781b      	ldrb	r3, [r3, #0]
 8045d4a:	4619      	mov	r1, r3
 8045d4c:	6878      	ldr	r0, [r7, #4]
 8045d4e:	f7fe ff8c 	bl	8044c6a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8045d52:	2303      	movs	r3, #3
 8045d54:	73fb      	strb	r3, [r7, #15]
      break;
 8045d56:	bf00      	nop
  }

  return ret;
 8045d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8045d5a:	4618      	mov	r0, r3
 8045d5c:	3710      	adds	r7, #16
 8045d5e:	46bd      	mov	sp, r7
 8045d60:	bd80      	pop	{r7, pc}
 8045d62:	bf00      	nop
 8045d64:	2000011c 	.word	0x2000011c

08045d68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8045d68:	b580      	push	{r7, lr}
 8045d6a:	b082      	sub	sp, #8
 8045d6c:	af00      	add	r7, sp, #0
 8045d6e:	6078      	str	r0, [r7, #4]
 8045d70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8045d72:	683b      	ldr	r3, [r7, #0]
 8045d74:	88db      	ldrh	r3, [r3, #6]
 8045d76:	2b01      	cmp	r3, #1
 8045d78:	d004      	beq.n	8045d84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8045d7a:	6839      	ldr	r1, [r7, #0]
 8045d7c:	6878      	ldr	r0, [r7, #4]
 8045d7e:	f000 f8e2 	bl	8045f46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8045d82:	e023      	b.n	8045dcc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8045d84:	687b      	ldr	r3, [r7, #4]
 8045d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8045d8a:	b2db      	uxtb	r3, r3
 8045d8c:	2b02      	cmp	r3, #2
 8045d8e:	dc02      	bgt.n	8045d96 <USBD_GetConfig+0x2e>
 8045d90:	2b00      	cmp	r3, #0
 8045d92:	dc03      	bgt.n	8045d9c <USBD_GetConfig+0x34>
 8045d94:	e015      	b.n	8045dc2 <USBD_GetConfig+0x5a>
 8045d96:	2b03      	cmp	r3, #3
 8045d98:	d00b      	beq.n	8045db2 <USBD_GetConfig+0x4a>
 8045d9a:	e012      	b.n	8045dc2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8045d9c:	687b      	ldr	r3, [r7, #4]
 8045d9e:	2200      	movs	r2, #0
 8045da0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8045da2:	687b      	ldr	r3, [r7, #4]
 8045da4:	3308      	adds	r3, #8
 8045da6:	2201      	movs	r2, #1
 8045da8:	4619      	mov	r1, r3
 8045daa:	6878      	ldr	r0, [r7, #4]
 8045dac:	f000 f93c 	bl	8046028 <USBD_CtlSendData>
        break;
 8045db0:	e00c      	b.n	8045dcc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8045db2:	687b      	ldr	r3, [r7, #4]
 8045db4:	3304      	adds	r3, #4
 8045db6:	2201      	movs	r2, #1
 8045db8:	4619      	mov	r1, r3
 8045dba:	6878      	ldr	r0, [r7, #4]
 8045dbc:	f000 f934 	bl	8046028 <USBD_CtlSendData>
        break;
 8045dc0:	e004      	b.n	8045dcc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8045dc2:	6839      	ldr	r1, [r7, #0]
 8045dc4:	6878      	ldr	r0, [r7, #4]
 8045dc6:	f000 f8be 	bl	8045f46 <USBD_CtlError>
        break;
 8045dca:	bf00      	nop
}
 8045dcc:	bf00      	nop
 8045dce:	3708      	adds	r7, #8
 8045dd0:	46bd      	mov	sp, r7
 8045dd2:	bd80      	pop	{r7, pc}

08045dd4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8045dd4:	b580      	push	{r7, lr}
 8045dd6:	b082      	sub	sp, #8
 8045dd8:	af00      	add	r7, sp, #0
 8045dda:	6078      	str	r0, [r7, #4]
 8045ddc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8045dde:	687b      	ldr	r3, [r7, #4]
 8045de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8045de4:	b2db      	uxtb	r3, r3
 8045de6:	3b01      	subs	r3, #1
 8045de8:	2b02      	cmp	r3, #2
 8045dea:	d81e      	bhi.n	8045e2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8045dec:	683b      	ldr	r3, [r7, #0]
 8045dee:	88db      	ldrh	r3, [r3, #6]
 8045df0:	2b02      	cmp	r3, #2
 8045df2:	d004      	beq.n	8045dfe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8045df4:	6839      	ldr	r1, [r7, #0]
 8045df6:	6878      	ldr	r0, [r7, #4]
 8045df8:	f000 f8a5 	bl	8045f46 <USBD_CtlError>
        break;
 8045dfc:	e01a      	b.n	8045e34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8045dfe:	687b      	ldr	r3, [r7, #4]
 8045e00:	2201      	movs	r2, #1
 8045e02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8045e04:	687b      	ldr	r3, [r7, #4]
 8045e06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8045e0a:	2b00      	cmp	r3, #0
 8045e0c:	d005      	beq.n	8045e1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8045e0e:	687b      	ldr	r3, [r7, #4]
 8045e10:	68db      	ldr	r3, [r3, #12]
 8045e12:	f043 0202 	orr.w	r2, r3, #2
 8045e16:	687b      	ldr	r3, [r7, #4]
 8045e18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8045e1a:	687b      	ldr	r3, [r7, #4]
 8045e1c:	330c      	adds	r3, #12
 8045e1e:	2202      	movs	r2, #2
 8045e20:	4619      	mov	r1, r3
 8045e22:	6878      	ldr	r0, [r7, #4]
 8045e24:	f000 f900 	bl	8046028 <USBD_CtlSendData>
      break;
 8045e28:	e004      	b.n	8045e34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8045e2a:	6839      	ldr	r1, [r7, #0]
 8045e2c:	6878      	ldr	r0, [r7, #4]
 8045e2e:	f000 f88a 	bl	8045f46 <USBD_CtlError>
      break;
 8045e32:	bf00      	nop
  }
}
 8045e34:	bf00      	nop
 8045e36:	3708      	adds	r7, #8
 8045e38:	46bd      	mov	sp, r7
 8045e3a:	bd80      	pop	{r7, pc}

08045e3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8045e3c:	b580      	push	{r7, lr}
 8045e3e:	b082      	sub	sp, #8
 8045e40:	af00      	add	r7, sp, #0
 8045e42:	6078      	str	r0, [r7, #4]
 8045e44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8045e46:	683b      	ldr	r3, [r7, #0]
 8045e48:	885b      	ldrh	r3, [r3, #2]
 8045e4a:	2b01      	cmp	r3, #1
 8045e4c:	d107      	bne.n	8045e5e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8045e4e:	687b      	ldr	r3, [r7, #4]
 8045e50:	2201      	movs	r2, #1
 8045e52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8045e56:	6878      	ldr	r0, [r7, #4]
 8045e58:	f000 f940 	bl	80460dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8045e5c:	e013      	b.n	8045e86 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8045e5e:	683b      	ldr	r3, [r7, #0]
 8045e60:	885b      	ldrh	r3, [r3, #2]
 8045e62:	2b02      	cmp	r3, #2
 8045e64:	d10b      	bne.n	8045e7e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8045e66:	683b      	ldr	r3, [r7, #0]
 8045e68:	889b      	ldrh	r3, [r3, #4]
 8045e6a:	0a1b      	lsrs	r3, r3, #8
 8045e6c:	b29b      	uxth	r3, r3
 8045e6e:	b2da      	uxtb	r2, r3
 8045e70:	687b      	ldr	r3, [r7, #4]
 8045e72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8045e76:	6878      	ldr	r0, [r7, #4]
 8045e78:	f000 f930 	bl	80460dc <USBD_CtlSendStatus>
}
 8045e7c:	e003      	b.n	8045e86 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8045e7e:	6839      	ldr	r1, [r7, #0]
 8045e80:	6878      	ldr	r0, [r7, #4]
 8045e82:	f000 f860 	bl	8045f46 <USBD_CtlError>
}
 8045e86:	bf00      	nop
 8045e88:	3708      	adds	r7, #8
 8045e8a:	46bd      	mov	sp, r7
 8045e8c:	bd80      	pop	{r7, pc}

08045e8e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8045e8e:	b580      	push	{r7, lr}
 8045e90:	b082      	sub	sp, #8
 8045e92:	af00      	add	r7, sp, #0
 8045e94:	6078      	str	r0, [r7, #4]
 8045e96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8045e98:	687b      	ldr	r3, [r7, #4]
 8045e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8045e9e:	b2db      	uxtb	r3, r3
 8045ea0:	3b01      	subs	r3, #1
 8045ea2:	2b02      	cmp	r3, #2
 8045ea4:	d80b      	bhi.n	8045ebe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8045ea6:	683b      	ldr	r3, [r7, #0]
 8045ea8:	885b      	ldrh	r3, [r3, #2]
 8045eaa:	2b01      	cmp	r3, #1
 8045eac:	d10c      	bne.n	8045ec8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8045eae:	687b      	ldr	r3, [r7, #4]
 8045eb0:	2200      	movs	r2, #0
 8045eb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8045eb6:	6878      	ldr	r0, [r7, #4]
 8045eb8:	f000 f910 	bl	80460dc <USBD_CtlSendStatus>
      }
      break;
 8045ebc:	e004      	b.n	8045ec8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8045ebe:	6839      	ldr	r1, [r7, #0]
 8045ec0:	6878      	ldr	r0, [r7, #4]
 8045ec2:	f000 f840 	bl	8045f46 <USBD_CtlError>
      break;
 8045ec6:	e000      	b.n	8045eca <USBD_ClrFeature+0x3c>
      break;
 8045ec8:	bf00      	nop
  }
}
 8045eca:	bf00      	nop
 8045ecc:	3708      	adds	r7, #8
 8045ece:	46bd      	mov	sp, r7
 8045ed0:	bd80      	pop	{r7, pc}

08045ed2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8045ed2:	b580      	push	{r7, lr}
 8045ed4:	b084      	sub	sp, #16
 8045ed6:	af00      	add	r7, sp, #0
 8045ed8:	6078      	str	r0, [r7, #4]
 8045eda:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8045edc:	683b      	ldr	r3, [r7, #0]
 8045ede:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8045ee0:	68fb      	ldr	r3, [r7, #12]
 8045ee2:	781a      	ldrb	r2, [r3, #0]
 8045ee4:	687b      	ldr	r3, [r7, #4]
 8045ee6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8045ee8:	68fb      	ldr	r3, [r7, #12]
 8045eea:	3301      	adds	r3, #1
 8045eec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8045eee:	68fb      	ldr	r3, [r7, #12]
 8045ef0:	781a      	ldrb	r2, [r3, #0]
 8045ef2:	687b      	ldr	r3, [r7, #4]
 8045ef4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8045ef6:	68fb      	ldr	r3, [r7, #12]
 8045ef8:	3301      	adds	r3, #1
 8045efa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8045efc:	68f8      	ldr	r0, [r7, #12]
 8045efe:	f7ff fa41 	bl	8045384 <SWAPBYTE>
 8045f02:	4603      	mov	r3, r0
 8045f04:	461a      	mov	r2, r3
 8045f06:	687b      	ldr	r3, [r7, #4]
 8045f08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8045f0a:	68fb      	ldr	r3, [r7, #12]
 8045f0c:	3301      	adds	r3, #1
 8045f0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8045f10:	68fb      	ldr	r3, [r7, #12]
 8045f12:	3301      	adds	r3, #1
 8045f14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8045f16:	68f8      	ldr	r0, [r7, #12]
 8045f18:	f7ff fa34 	bl	8045384 <SWAPBYTE>
 8045f1c:	4603      	mov	r3, r0
 8045f1e:	461a      	mov	r2, r3
 8045f20:	687b      	ldr	r3, [r7, #4]
 8045f22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8045f24:	68fb      	ldr	r3, [r7, #12]
 8045f26:	3301      	adds	r3, #1
 8045f28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8045f2a:	68fb      	ldr	r3, [r7, #12]
 8045f2c:	3301      	adds	r3, #1
 8045f2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8045f30:	68f8      	ldr	r0, [r7, #12]
 8045f32:	f7ff fa27 	bl	8045384 <SWAPBYTE>
 8045f36:	4603      	mov	r3, r0
 8045f38:	461a      	mov	r2, r3
 8045f3a:	687b      	ldr	r3, [r7, #4]
 8045f3c:	80da      	strh	r2, [r3, #6]
}
 8045f3e:	bf00      	nop
 8045f40:	3710      	adds	r7, #16
 8045f42:	46bd      	mov	sp, r7
 8045f44:	bd80      	pop	{r7, pc}

08045f46 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8045f46:	b580      	push	{r7, lr}
 8045f48:	b082      	sub	sp, #8
 8045f4a:	af00      	add	r7, sp, #0
 8045f4c:	6078      	str	r0, [r7, #4]
 8045f4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8045f50:	2180      	movs	r1, #128	; 0x80
 8045f52:	6878      	ldr	r0, [r7, #4]
 8045f54:	f000 fcb0 	bl	80468b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8045f58:	2100      	movs	r1, #0
 8045f5a:	6878      	ldr	r0, [r7, #4]
 8045f5c:	f000 fcac 	bl	80468b8 <USBD_LL_StallEP>
}
 8045f60:	bf00      	nop
 8045f62:	3708      	adds	r7, #8
 8045f64:	46bd      	mov	sp, r7
 8045f66:	bd80      	pop	{r7, pc}

08045f68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8045f68:	b580      	push	{r7, lr}
 8045f6a:	b086      	sub	sp, #24
 8045f6c:	af00      	add	r7, sp, #0
 8045f6e:	60f8      	str	r0, [r7, #12]
 8045f70:	60b9      	str	r1, [r7, #8]
 8045f72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8045f74:	2300      	movs	r3, #0
 8045f76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8045f78:	68fb      	ldr	r3, [r7, #12]
 8045f7a:	2b00      	cmp	r3, #0
 8045f7c:	d036      	beq.n	8045fec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8045f7e:	68fb      	ldr	r3, [r7, #12]
 8045f80:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8045f82:	6938      	ldr	r0, [r7, #16]
 8045f84:	f000 f836 	bl	8045ff4 <USBD_GetLen>
 8045f88:	4603      	mov	r3, r0
 8045f8a:	3301      	adds	r3, #1
 8045f8c:	b29b      	uxth	r3, r3
 8045f8e:	005b      	lsls	r3, r3, #1
 8045f90:	b29a      	uxth	r2, r3
 8045f92:	687b      	ldr	r3, [r7, #4]
 8045f94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8045f96:	7dfb      	ldrb	r3, [r7, #23]
 8045f98:	68ba      	ldr	r2, [r7, #8]
 8045f9a:	4413      	add	r3, r2
 8045f9c:	687a      	ldr	r2, [r7, #4]
 8045f9e:	7812      	ldrb	r2, [r2, #0]
 8045fa0:	701a      	strb	r2, [r3, #0]
  idx++;
 8045fa2:	7dfb      	ldrb	r3, [r7, #23]
 8045fa4:	3301      	adds	r3, #1
 8045fa6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8045fa8:	7dfb      	ldrb	r3, [r7, #23]
 8045faa:	68ba      	ldr	r2, [r7, #8]
 8045fac:	4413      	add	r3, r2
 8045fae:	2203      	movs	r2, #3
 8045fb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8045fb2:	7dfb      	ldrb	r3, [r7, #23]
 8045fb4:	3301      	adds	r3, #1
 8045fb6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8045fb8:	e013      	b.n	8045fe2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8045fba:	7dfb      	ldrb	r3, [r7, #23]
 8045fbc:	68ba      	ldr	r2, [r7, #8]
 8045fbe:	4413      	add	r3, r2
 8045fc0:	693a      	ldr	r2, [r7, #16]
 8045fc2:	7812      	ldrb	r2, [r2, #0]
 8045fc4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8045fc6:	693b      	ldr	r3, [r7, #16]
 8045fc8:	3301      	adds	r3, #1
 8045fca:	613b      	str	r3, [r7, #16]
    idx++;
 8045fcc:	7dfb      	ldrb	r3, [r7, #23]
 8045fce:	3301      	adds	r3, #1
 8045fd0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8045fd2:	7dfb      	ldrb	r3, [r7, #23]
 8045fd4:	68ba      	ldr	r2, [r7, #8]
 8045fd6:	4413      	add	r3, r2
 8045fd8:	2200      	movs	r2, #0
 8045fda:	701a      	strb	r2, [r3, #0]
    idx++;
 8045fdc:	7dfb      	ldrb	r3, [r7, #23]
 8045fde:	3301      	adds	r3, #1
 8045fe0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8045fe2:	693b      	ldr	r3, [r7, #16]
 8045fe4:	781b      	ldrb	r3, [r3, #0]
 8045fe6:	2b00      	cmp	r3, #0
 8045fe8:	d1e7      	bne.n	8045fba <USBD_GetString+0x52>
 8045fea:	e000      	b.n	8045fee <USBD_GetString+0x86>
    return;
 8045fec:	bf00      	nop
  }
}
 8045fee:	3718      	adds	r7, #24
 8045ff0:	46bd      	mov	sp, r7
 8045ff2:	bd80      	pop	{r7, pc}

08045ff4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8045ff4:	b480      	push	{r7}
 8045ff6:	b085      	sub	sp, #20
 8045ff8:	af00      	add	r7, sp, #0
 8045ffa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8045ffc:	2300      	movs	r3, #0
 8045ffe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8046000:	687b      	ldr	r3, [r7, #4]
 8046002:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8046004:	e005      	b.n	8046012 <USBD_GetLen+0x1e>
  {
    len++;
 8046006:	7bfb      	ldrb	r3, [r7, #15]
 8046008:	3301      	adds	r3, #1
 804600a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 804600c:	68bb      	ldr	r3, [r7, #8]
 804600e:	3301      	adds	r3, #1
 8046010:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8046012:	68bb      	ldr	r3, [r7, #8]
 8046014:	781b      	ldrb	r3, [r3, #0]
 8046016:	2b00      	cmp	r3, #0
 8046018:	d1f5      	bne.n	8046006 <USBD_GetLen+0x12>
  }

  return len;
 804601a:	7bfb      	ldrb	r3, [r7, #15]
}
 804601c:	4618      	mov	r0, r3
 804601e:	3714      	adds	r7, #20
 8046020:	46bd      	mov	sp, r7
 8046022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046026:	4770      	bx	lr

08046028 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8046028:	b580      	push	{r7, lr}
 804602a:	b084      	sub	sp, #16
 804602c:	af00      	add	r7, sp, #0
 804602e:	60f8      	str	r0, [r7, #12]
 8046030:	60b9      	str	r1, [r7, #8]
 8046032:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8046034:	68fb      	ldr	r3, [r7, #12]
 8046036:	2202      	movs	r2, #2
 8046038:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 804603c:	68fb      	ldr	r3, [r7, #12]
 804603e:	687a      	ldr	r2, [r7, #4]
 8046040:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8046042:	68fb      	ldr	r3, [r7, #12]
 8046044:	687a      	ldr	r2, [r7, #4]
 8046046:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8046048:	687b      	ldr	r3, [r7, #4]
 804604a:	68ba      	ldr	r2, [r7, #8]
 804604c:	2100      	movs	r1, #0
 804604e:	68f8      	ldr	r0, [r7, #12]
 8046050:	f000 fcbb 	bl	80469ca <USBD_LL_Transmit>

  return USBD_OK;
 8046054:	2300      	movs	r3, #0
}
 8046056:	4618      	mov	r0, r3
 8046058:	3710      	adds	r7, #16
 804605a:	46bd      	mov	sp, r7
 804605c:	bd80      	pop	{r7, pc}

0804605e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 804605e:	b580      	push	{r7, lr}
 8046060:	b084      	sub	sp, #16
 8046062:	af00      	add	r7, sp, #0
 8046064:	60f8      	str	r0, [r7, #12]
 8046066:	60b9      	str	r1, [r7, #8]
 8046068:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 804606a:	687b      	ldr	r3, [r7, #4]
 804606c:	68ba      	ldr	r2, [r7, #8]
 804606e:	2100      	movs	r1, #0
 8046070:	68f8      	ldr	r0, [r7, #12]
 8046072:	f000 fcaa 	bl	80469ca <USBD_LL_Transmit>

  return USBD_OK;
 8046076:	2300      	movs	r3, #0
}
 8046078:	4618      	mov	r0, r3
 804607a:	3710      	adds	r7, #16
 804607c:	46bd      	mov	sp, r7
 804607e:	bd80      	pop	{r7, pc}

08046080 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8046080:	b580      	push	{r7, lr}
 8046082:	b084      	sub	sp, #16
 8046084:	af00      	add	r7, sp, #0
 8046086:	60f8      	str	r0, [r7, #12]
 8046088:	60b9      	str	r1, [r7, #8]
 804608a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 804608c:	68fb      	ldr	r3, [r7, #12]
 804608e:	2203      	movs	r2, #3
 8046090:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8046094:	68fb      	ldr	r3, [r7, #12]
 8046096:	687a      	ldr	r2, [r7, #4]
 8046098:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 804609c:	68fb      	ldr	r3, [r7, #12]
 804609e:	687a      	ldr	r2, [r7, #4]
 80460a0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80460a4:	687b      	ldr	r3, [r7, #4]
 80460a6:	68ba      	ldr	r2, [r7, #8]
 80460a8:	2100      	movs	r1, #0
 80460aa:	68f8      	ldr	r0, [r7, #12]
 80460ac:	f000 fcae 	bl	8046a0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80460b0:	2300      	movs	r3, #0
}
 80460b2:	4618      	mov	r0, r3
 80460b4:	3710      	adds	r7, #16
 80460b6:	46bd      	mov	sp, r7
 80460b8:	bd80      	pop	{r7, pc}

080460ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80460ba:	b580      	push	{r7, lr}
 80460bc:	b084      	sub	sp, #16
 80460be:	af00      	add	r7, sp, #0
 80460c0:	60f8      	str	r0, [r7, #12]
 80460c2:	60b9      	str	r1, [r7, #8]
 80460c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80460c6:	687b      	ldr	r3, [r7, #4]
 80460c8:	68ba      	ldr	r2, [r7, #8]
 80460ca:	2100      	movs	r1, #0
 80460cc:	68f8      	ldr	r0, [r7, #12]
 80460ce:	f000 fc9d 	bl	8046a0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80460d2:	2300      	movs	r3, #0
}
 80460d4:	4618      	mov	r0, r3
 80460d6:	3710      	adds	r7, #16
 80460d8:	46bd      	mov	sp, r7
 80460da:	bd80      	pop	{r7, pc}

080460dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80460dc:	b580      	push	{r7, lr}
 80460de:	b082      	sub	sp, #8
 80460e0:	af00      	add	r7, sp, #0
 80460e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80460e4:	687b      	ldr	r3, [r7, #4]
 80460e6:	2204      	movs	r2, #4
 80460e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80460ec:	2300      	movs	r3, #0
 80460ee:	2200      	movs	r2, #0
 80460f0:	2100      	movs	r1, #0
 80460f2:	6878      	ldr	r0, [r7, #4]
 80460f4:	f000 fc69 	bl	80469ca <USBD_LL_Transmit>

  return USBD_OK;
 80460f8:	2300      	movs	r3, #0
}
 80460fa:	4618      	mov	r0, r3
 80460fc:	3708      	adds	r7, #8
 80460fe:	46bd      	mov	sp, r7
 8046100:	bd80      	pop	{r7, pc}

08046102 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8046102:	b580      	push	{r7, lr}
 8046104:	b082      	sub	sp, #8
 8046106:	af00      	add	r7, sp, #0
 8046108:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 804610a:	687b      	ldr	r3, [r7, #4]
 804610c:	2205      	movs	r2, #5
 804610e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8046112:	2300      	movs	r3, #0
 8046114:	2200      	movs	r2, #0
 8046116:	2100      	movs	r1, #0
 8046118:	6878      	ldr	r0, [r7, #4]
 804611a:	f000 fc77 	bl	8046a0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 804611e:	2300      	movs	r3, #0
}
 8046120:	4618      	mov	r0, r3
 8046122:	3708      	adds	r7, #8
 8046124:	46bd      	mov	sp, r7
 8046126:	bd80      	pop	{r7, pc}

08046128 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8046128:	b580      	push	{r7, lr}
 804612a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 804612c:	2200      	movs	r2, #0
 804612e:	4912      	ldr	r1, [pc, #72]	; (8046178 <MX_USB_DEVICE_Init+0x50>)
 8046130:	4812      	ldr	r0, [pc, #72]	; (804617c <MX_USB_DEVICE_Init+0x54>)
 8046132:	f7fe fd01 	bl	8044b38 <USBD_Init>
 8046136:	4603      	mov	r3, r0
 8046138:	2b00      	cmp	r3, #0
 804613a:	d001      	beq.n	8046140 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 804613c:	f7fa faa8 	bl	8040690 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8046140:	490f      	ldr	r1, [pc, #60]	; (8046180 <MX_USB_DEVICE_Init+0x58>)
 8046142:	480e      	ldr	r0, [pc, #56]	; (804617c <MX_USB_DEVICE_Init+0x54>)
 8046144:	f7fe fd28 	bl	8044b98 <USBD_RegisterClass>
 8046148:	4603      	mov	r3, r0
 804614a:	2b00      	cmp	r3, #0
 804614c:	d001      	beq.n	8046152 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 804614e:	f7fa fa9f 	bl	8040690 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8046152:	490c      	ldr	r1, [pc, #48]	; (8046184 <MX_USB_DEVICE_Init+0x5c>)
 8046154:	4809      	ldr	r0, [pc, #36]	; (804617c <MX_USB_DEVICE_Init+0x54>)
 8046156:	f7fe fc5f 	bl	8044a18 <USBD_CDC_RegisterInterface>
 804615a:	4603      	mov	r3, r0
 804615c:	2b00      	cmp	r3, #0
 804615e:	d001      	beq.n	8046164 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8046160:	f7fa fa96 	bl	8040690 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8046164:	4805      	ldr	r0, [pc, #20]	; (804617c <MX_USB_DEVICE_Init+0x54>)
 8046166:	f7fe fd4d 	bl	8044c04 <USBD_Start>
 804616a:	4603      	mov	r3, r0
 804616c:	2b00      	cmp	r3, #0
 804616e:	d001      	beq.n	8046174 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8046170:	f7fa fa8e 	bl	8040690 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8046174:	bf00      	nop
 8046176:	bd80      	pop	{r7, pc}
 8046178:	200000ac 	.word	0x200000ac
 804617c:	20000120 	.word	0x20000120
 8046180:	20000018 	.word	0x20000018
 8046184:	20000098 	.word	0x20000098

08046188 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8046188:	b580      	push	{r7, lr}
 804618a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 804618c:	2200      	movs	r2, #0
 804618e:	4905      	ldr	r1, [pc, #20]	; (80461a4 <CDC_Init_FS+0x1c>)
 8046190:	4805      	ldr	r0, [pc, #20]	; (80461a8 <CDC_Init_FS+0x20>)
 8046192:	f7fe fc5b 	bl	8044a4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8046196:	4905      	ldr	r1, [pc, #20]	; (80461ac <CDC_Init_FS+0x24>)
 8046198:	4803      	ldr	r0, [pc, #12]	; (80461a8 <CDC_Init_FS+0x20>)
 804619a:	f7fe fc79 	bl	8044a90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 804619e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80461a0:	4618      	mov	r0, r3
 80461a2:	bd80      	pop	{r7, pc}
 80461a4:	20000bfc 	.word	0x20000bfc
 80461a8:	20000120 	.word	0x20000120
 80461ac:	200003fc 	.word	0x200003fc

080461b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80461b0:	b480      	push	{r7}
 80461b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80461b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80461b6:	4618      	mov	r0, r3
 80461b8:	46bd      	mov	sp, r7
 80461ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80461be:	4770      	bx	lr

080461c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80461c0:	b480      	push	{r7}
 80461c2:	b083      	sub	sp, #12
 80461c4:	af00      	add	r7, sp, #0
 80461c6:	4603      	mov	r3, r0
 80461c8:	6039      	str	r1, [r7, #0]
 80461ca:	71fb      	strb	r3, [r7, #7]
 80461cc:	4613      	mov	r3, r2
 80461ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80461d0:	79fb      	ldrb	r3, [r7, #7]
 80461d2:	2b23      	cmp	r3, #35	; 0x23
 80461d4:	d84a      	bhi.n	804626c <CDC_Control_FS+0xac>
 80461d6:	a201      	add	r2, pc, #4	; (adr r2, 80461dc <CDC_Control_FS+0x1c>)
 80461d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80461dc:	0804626d 	.word	0x0804626d
 80461e0:	0804626d 	.word	0x0804626d
 80461e4:	0804626d 	.word	0x0804626d
 80461e8:	0804626d 	.word	0x0804626d
 80461ec:	0804626d 	.word	0x0804626d
 80461f0:	0804626d 	.word	0x0804626d
 80461f4:	0804626d 	.word	0x0804626d
 80461f8:	0804626d 	.word	0x0804626d
 80461fc:	0804626d 	.word	0x0804626d
 8046200:	0804626d 	.word	0x0804626d
 8046204:	0804626d 	.word	0x0804626d
 8046208:	0804626d 	.word	0x0804626d
 804620c:	0804626d 	.word	0x0804626d
 8046210:	0804626d 	.word	0x0804626d
 8046214:	0804626d 	.word	0x0804626d
 8046218:	0804626d 	.word	0x0804626d
 804621c:	0804626d 	.word	0x0804626d
 8046220:	0804626d 	.word	0x0804626d
 8046224:	0804626d 	.word	0x0804626d
 8046228:	0804626d 	.word	0x0804626d
 804622c:	0804626d 	.word	0x0804626d
 8046230:	0804626d 	.word	0x0804626d
 8046234:	0804626d 	.word	0x0804626d
 8046238:	0804626d 	.word	0x0804626d
 804623c:	0804626d 	.word	0x0804626d
 8046240:	0804626d 	.word	0x0804626d
 8046244:	0804626d 	.word	0x0804626d
 8046248:	0804626d 	.word	0x0804626d
 804624c:	0804626d 	.word	0x0804626d
 8046250:	0804626d 	.word	0x0804626d
 8046254:	0804626d 	.word	0x0804626d
 8046258:	0804626d 	.word	0x0804626d
 804625c:	0804626d 	.word	0x0804626d
 8046260:	0804626d 	.word	0x0804626d
 8046264:	0804626d 	.word	0x0804626d
 8046268:	0804626d 	.word	0x0804626d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 804626c:	bf00      	nop
  }

  return (USBD_OK);
 804626e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8046270:	4618      	mov	r0, r3
 8046272:	370c      	adds	r7, #12
 8046274:	46bd      	mov	sp, r7
 8046276:	f85d 7b04 	ldr.w	r7, [sp], #4
 804627a:	4770      	bx	lr

0804627c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 804627c:	b580      	push	{r7, lr}
 804627e:	b082      	sub	sp, #8
 8046280:	af00      	add	r7, sp, #0
 8046282:	6078      	str	r0, [r7, #4]
 8046284:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8046286:	6879      	ldr	r1, [r7, #4]
 8046288:	4805      	ldr	r0, [pc, #20]	; (80462a0 <CDC_Receive_FS+0x24>)
 804628a:	f7fe fc01 	bl	8044a90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 804628e:	4804      	ldr	r0, [pc, #16]	; (80462a0 <CDC_Receive_FS+0x24>)
 8046290:	f7fe fc1c 	bl	8044acc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8046294:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8046296:	4618      	mov	r0, r3
 8046298:	3708      	adds	r7, #8
 804629a:	46bd      	mov	sp, r7
 804629c:	bd80      	pop	{r7, pc}
 804629e:	bf00      	nop
 80462a0:	20000120 	.word	0x20000120

080462a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80462a4:	b480      	push	{r7}
 80462a6:	b087      	sub	sp, #28
 80462a8:	af00      	add	r7, sp, #0
 80462aa:	60f8      	str	r0, [r7, #12]
 80462ac:	60b9      	str	r1, [r7, #8]
 80462ae:	4613      	mov	r3, r2
 80462b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80462b2:	2300      	movs	r3, #0
 80462b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80462b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80462ba:	4618      	mov	r0, r3
 80462bc:	371c      	adds	r7, #28
 80462be:	46bd      	mov	sp, r7
 80462c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80462c4:	4770      	bx	lr
	...

080462c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80462c8:	b480      	push	{r7}
 80462ca:	b083      	sub	sp, #12
 80462cc:	af00      	add	r7, sp, #0
 80462ce:	4603      	mov	r3, r0
 80462d0:	6039      	str	r1, [r7, #0]
 80462d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80462d4:	683b      	ldr	r3, [r7, #0]
 80462d6:	2212      	movs	r2, #18
 80462d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80462da:	4b03      	ldr	r3, [pc, #12]	; (80462e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80462dc:	4618      	mov	r0, r3
 80462de:	370c      	adds	r7, #12
 80462e0:	46bd      	mov	sp, r7
 80462e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80462e6:	4770      	bx	lr
 80462e8:	200000c8 	.word	0x200000c8

080462ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80462ec:	b480      	push	{r7}
 80462ee:	b083      	sub	sp, #12
 80462f0:	af00      	add	r7, sp, #0
 80462f2:	4603      	mov	r3, r0
 80462f4:	6039      	str	r1, [r7, #0]
 80462f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80462f8:	683b      	ldr	r3, [r7, #0]
 80462fa:	2204      	movs	r2, #4
 80462fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80462fe:	4b03      	ldr	r3, [pc, #12]	; (804630c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8046300:	4618      	mov	r0, r3
 8046302:	370c      	adds	r7, #12
 8046304:	46bd      	mov	sp, r7
 8046306:	f85d 7b04 	ldr.w	r7, [sp], #4
 804630a:	4770      	bx	lr
 804630c:	200000dc 	.word	0x200000dc

08046310 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8046310:	b580      	push	{r7, lr}
 8046312:	b082      	sub	sp, #8
 8046314:	af00      	add	r7, sp, #0
 8046316:	4603      	mov	r3, r0
 8046318:	6039      	str	r1, [r7, #0]
 804631a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 804631c:	79fb      	ldrb	r3, [r7, #7]
 804631e:	2b00      	cmp	r3, #0
 8046320:	d105      	bne.n	804632e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8046322:	683a      	ldr	r2, [r7, #0]
 8046324:	4907      	ldr	r1, [pc, #28]	; (8046344 <USBD_FS_ProductStrDescriptor+0x34>)
 8046326:	4808      	ldr	r0, [pc, #32]	; (8046348 <USBD_FS_ProductStrDescriptor+0x38>)
 8046328:	f7ff fe1e 	bl	8045f68 <USBD_GetString>
 804632c:	e004      	b.n	8046338 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 804632e:	683a      	ldr	r2, [r7, #0]
 8046330:	4904      	ldr	r1, [pc, #16]	; (8046344 <USBD_FS_ProductStrDescriptor+0x34>)
 8046332:	4805      	ldr	r0, [pc, #20]	; (8046348 <USBD_FS_ProductStrDescriptor+0x38>)
 8046334:	f7ff fe18 	bl	8045f68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8046338:	4b02      	ldr	r3, [pc, #8]	; (8046344 <USBD_FS_ProductStrDescriptor+0x34>)
}
 804633a:	4618      	mov	r0, r3
 804633c:	3708      	adds	r7, #8
 804633e:	46bd      	mov	sp, r7
 8046340:	bd80      	pop	{r7, pc}
 8046342:	bf00      	nop
 8046344:	200013fc 	.word	0x200013fc
 8046348:	08046b6c 	.word	0x08046b6c

0804634c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804634c:	b580      	push	{r7, lr}
 804634e:	b082      	sub	sp, #8
 8046350:	af00      	add	r7, sp, #0
 8046352:	4603      	mov	r3, r0
 8046354:	6039      	str	r1, [r7, #0]
 8046356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8046358:	683a      	ldr	r2, [r7, #0]
 804635a:	4904      	ldr	r1, [pc, #16]	; (804636c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 804635c:	4804      	ldr	r0, [pc, #16]	; (8046370 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 804635e:	f7ff fe03 	bl	8045f68 <USBD_GetString>
  return USBD_StrDesc;
 8046362:	4b02      	ldr	r3, [pc, #8]	; (804636c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8046364:	4618      	mov	r0, r3
 8046366:	3708      	adds	r7, #8
 8046368:	46bd      	mov	sp, r7
 804636a:	bd80      	pop	{r7, pc}
 804636c:	200013fc 	.word	0x200013fc
 8046370:	08046b84 	.word	0x08046b84

08046374 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8046374:	b580      	push	{r7, lr}
 8046376:	b082      	sub	sp, #8
 8046378:	af00      	add	r7, sp, #0
 804637a:	4603      	mov	r3, r0
 804637c:	6039      	str	r1, [r7, #0]
 804637e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8046380:	683b      	ldr	r3, [r7, #0]
 8046382:	221a      	movs	r2, #26
 8046384:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8046386:	f000 f843 	bl	8046410 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 804638a:	4b02      	ldr	r3, [pc, #8]	; (8046394 <USBD_FS_SerialStrDescriptor+0x20>)
}
 804638c:	4618      	mov	r0, r3
 804638e:	3708      	adds	r7, #8
 8046390:	46bd      	mov	sp, r7
 8046392:	bd80      	pop	{r7, pc}
 8046394:	200000e0 	.word	0x200000e0

08046398 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8046398:	b580      	push	{r7, lr}
 804639a:	b082      	sub	sp, #8
 804639c:	af00      	add	r7, sp, #0
 804639e:	4603      	mov	r3, r0
 80463a0:	6039      	str	r1, [r7, #0]
 80463a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80463a4:	79fb      	ldrb	r3, [r7, #7]
 80463a6:	2b00      	cmp	r3, #0
 80463a8:	d105      	bne.n	80463b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80463aa:	683a      	ldr	r2, [r7, #0]
 80463ac:	4907      	ldr	r1, [pc, #28]	; (80463cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80463ae:	4808      	ldr	r0, [pc, #32]	; (80463d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80463b0:	f7ff fdda 	bl	8045f68 <USBD_GetString>
 80463b4:	e004      	b.n	80463c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80463b6:	683a      	ldr	r2, [r7, #0]
 80463b8:	4904      	ldr	r1, [pc, #16]	; (80463cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80463ba:	4805      	ldr	r0, [pc, #20]	; (80463d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80463bc:	f7ff fdd4 	bl	8045f68 <USBD_GetString>
  }
  return USBD_StrDesc;
 80463c0:	4b02      	ldr	r3, [pc, #8]	; (80463cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80463c2:	4618      	mov	r0, r3
 80463c4:	3708      	adds	r7, #8
 80463c6:	46bd      	mov	sp, r7
 80463c8:	bd80      	pop	{r7, pc}
 80463ca:	bf00      	nop
 80463cc:	200013fc 	.word	0x200013fc
 80463d0:	08046b98 	.word	0x08046b98

080463d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80463d4:	b580      	push	{r7, lr}
 80463d6:	b082      	sub	sp, #8
 80463d8:	af00      	add	r7, sp, #0
 80463da:	4603      	mov	r3, r0
 80463dc:	6039      	str	r1, [r7, #0]
 80463de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80463e0:	79fb      	ldrb	r3, [r7, #7]
 80463e2:	2b00      	cmp	r3, #0
 80463e4:	d105      	bne.n	80463f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80463e6:	683a      	ldr	r2, [r7, #0]
 80463e8:	4907      	ldr	r1, [pc, #28]	; (8046408 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80463ea:	4808      	ldr	r0, [pc, #32]	; (804640c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80463ec:	f7ff fdbc 	bl	8045f68 <USBD_GetString>
 80463f0:	e004      	b.n	80463fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80463f2:	683a      	ldr	r2, [r7, #0]
 80463f4:	4904      	ldr	r1, [pc, #16]	; (8046408 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80463f6:	4805      	ldr	r0, [pc, #20]	; (804640c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80463f8:	f7ff fdb6 	bl	8045f68 <USBD_GetString>
  }
  return USBD_StrDesc;
 80463fc:	4b02      	ldr	r3, [pc, #8]	; (8046408 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80463fe:	4618      	mov	r0, r3
 8046400:	3708      	adds	r7, #8
 8046402:	46bd      	mov	sp, r7
 8046404:	bd80      	pop	{r7, pc}
 8046406:	bf00      	nop
 8046408:	200013fc 	.word	0x200013fc
 804640c:	08046ba4 	.word	0x08046ba4

08046410 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8046410:	b580      	push	{r7, lr}
 8046412:	b084      	sub	sp, #16
 8046414:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8046416:	4b0f      	ldr	r3, [pc, #60]	; (8046454 <Get_SerialNum+0x44>)
 8046418:	681b      	ldr	r3, [r3, #0]
 804641a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 804641c:	4b0e      	ldr	r3, [pc, #56]	; (8046458 <Get_SerialNum+0x48>)
 804641e:	681b      	ldr	r3, [r3, #0]
 8046420:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8046422:	4b0e      	ldr	r3, [pc, #56]	; (804645c <Get_SerialNum+0x4c>)
 8046424:	681b      	ldr	r3, [r3, #0]
 8046426:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8046428:	68fa      	ldr	r2, [r7, #12]
 804642a:	687b      	ldr	r3, [r7, #4]
 804642c:	4413      	add	r3, r2
 804642e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8046430:	68fb      	ldr	r3, [r7, #12]
 8046432:	2b00      	cmp	r3, #0
 8046434:	d009      	beq.n	804644a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8046436:	2208      	movs	r2, #8
 8046438:	4909      	ldr	r1, [pc, #36]	; (8046460 <Get_SerialNum+0x50>)
 804643a:	68f8      	ldr	r0, [r7, #12]
 804643c:	f000 f814 	bl	8046468 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8046440:	2204      	movs	r2, #4
 8046442:	4908      	ldr	r1, [pc, #32]	; (8046464 <Get_SerialNum+0x54>)
 8046444:	68b8      	ldr	r0, [r7, #8]
 8046446:	f000 f80f 	bl	8046468 <IntToUnicode>
  }
}
 804644a:	bf00      	nop
 804644c:	3710      	adds	r7, #16
 804644e:	46bd      	mov	sp, r7
 8046450:	bd80      	pop	{r7, pc}
 8046452:	bf00      	nop
 8046454:	1fff7a10 	.word	0x1fff7a10
 8046458:	1fff7a14 	.word	0x1fff7a14
 804645c:	1fff7a18 	.word	0x1fff7a18
 8046460:	200000e2 	.word	0x200000e2
 8046464:	200000f2 	.word	0x200000f2

08046468 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8046468:	b480      	push	{r7}
 804646a:	b087      	sub	sp, #28
 804646c:	af00      	add	r7, sp, #0
 804646e:	60f8      	str	r0, [r7, #12]
 8046470:	60b9      	str	r1, [r7, #8]
 8046472:	4613      	mov	r3, r2
 8046474:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8046476:	2300      	movs	r3, #0
 8046478:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 804647a:	2300      	movs	r3, #0
 804647c:	75fb      	strb	r3, [r7, #23]
 804647e:	e027      	b.n	80464d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8046480:	68fb      	ldr	r3, [r7, #12]
 8046482:	0f1b      	lsrs	r3, r3, #28
 8046484:	2b09      	cmp	r3, #9
 8046486:	d80b      	bhi.n	80464a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8046488:	68fb      	ldr	r3, [r7, #12]
 804648a:	0f1b      	lsrs	r3, r3, #28
 804648c:	b2da      	uxtb	r2, r3
 804648e:	7dfb      	ldrb	r3, [r7, #23]
 8046490:	005b      	lsls	r3, r3, #1
 8046492:	4619      	mov	r1, r3
 8046494:	68bb      	ldr	r3, [r7, #8]
 8046496:	440b      	add	r3, r1
 8046498:	3230      	adds	r2, #48	; 0x30
 804649a:	b2d2      	uxtb	r2, r2
 804649c:	701a      	strb	r2, [r3, #0]
 804649e:	e00a      	b.n	80464b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80464a0:	68fb      	ldr	r3, [r7, #12]
 80464a2:	0f1b      	lsrs	r3, r3, #28
 80464a4:	b2da      	uxtb	r2, r3
 80464a6:	7dfb      	ldrb	r3, [r7, #23]
 80464a8:	005b      	lsls	r3, r3, #1
 80464aa:	4619      	mov	r1, r3
 80464ac:	68bb      	ldr	r3, [r7, #8]
 80464ae:	440b      	add	r3, r1
 80464b0:	3237      	adds	r2, #55	; 0x37
 80464b2:	b2d2      	uxtb	r2, r2
 80464b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80464b6:	68fb      	ldr	r3, [r7, #12]
 80464b8:	011b      	lsls	r3, r3, #4
 80464ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80464bc:	7dfb      	ldrb	r3, [r7, #23]
 80464be:	005b      	lsls	r3, r3, #1
 80464c0:	3301      	adds	r3, #1
 80464c2:	68ba      	ldr	r2, [r7, #8]
 80464c4:	4413      	add	r3, r2
 80464c6:	2200      	movs	r2, #0
 80464c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80464ca:	7dfb      	ldrb	r3, [r7, #23]
 80464cc:	3301      	adds	r3, #1
 80464ce:	75fb      	strb	r3, [r7, #23]
 80464d0:	7dfa      	ldrb	r2, [r7, #23]
 80464d2:	79fb      	ldrb	r3, [r7, #7]
 80464d4:	429a      	cmp	r2, r3
 80464d6:	d3d3      	bcc.n	8046480 <IntToUnicode+0x18>
  }
}
 80464d8:	bf00      	nop
 80464da:	bf00      	nop
 80464dc:	371c      	adds	r7, #28
 80464de:	46bd      	mov	sp, r7
 80464e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80464e4:	4770      	bx	lr
	...

080464e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80464e8:	b580      	push	{r7, lr}
 80464ea:	b08a      	sub	sp, #40	; 0x28
 80464ec:	af00      	add	r7, sp, #0
 80464ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80464f0:	f107 0314 	add.w	r3, r7, #20
 80464f4:	2200      	movs	r2, #0
 80464f6:	601a      	str	r2, [r3, #0]
 80464f8:	605a      	str	r2, [r3, #4]
 80464fa:	609a      	str	r2, [r3, #8]
 80464fc:	60da      	str	r2, [r3, #12]
 80464fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8046500:	687b      	ldr	r3, [r7, #4]
 8046502:	681b      	ldr	r3, [r3, #0]
 8046504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8046508:	d13a      	bne.n	8046580 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 804650a:	2300      	movs	r3, #0
 804650c:	613b      	str	r3, [r7, #16]
 804650e:	4b1e      	ldr	r3, [pc, #120]	; (8046588 <HAL_PCD_MspInit+0xa0>)
 8046510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046512:	4a1d      	ldr	r2, [pc, #116]	; (8046588 <HAL_PCD_MspInit+0xa0>)
 8046514:	f043 0301 	orr.w	r3, r3, #1
 8046518:	6313      	str	r3, [r2, #48]	; 0x30
 804651a:	4b1b      	ldr	r3, [pc, #108]	; (8046588 <HAL_PCD_MspInit+0xa0>)
 804651c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804651e:	f003 0301 	and.w	r3, r3, #1
 8046522:	613b      	str	r3, [r7, #16]
 8046524:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8046526:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 804652a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804652c:	2302      	movs	r3, #2
 804652e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8046530:	2300      	movs	r3, #0
 8046532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8046534:	2303      	movs	r3, #3
 8046536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8046538:	230a      	movs	r3, #10
 804653a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804653c:	f107 0314 	add.w	r3, r7, #20
 8046540:	4619      	mov	r1, r3
 8046542:	4812      	ldr	r0, [pc, #72]	; (804658c <HAL_PCD_MspInit+0xa4>)
 8046544:	f7fa faee 	bl	8040b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8046548:	4b0f      	ldr	r3, [pc, #60]	; (8046588 <HAL_PCD_MspInit+0xa0>)
 804654a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804654c:	4a0e      	ldr	r2, [pc, #56]	; (8046588 <HAL_PCD_MspInit+0xa0>)
 804654e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8046552:	6353      	str	r3, [r2, #52]	; 0x34
 8046554:	2300      	movs	r3, #0
 8046556:	60fb      	str	r3, [r7, #12]
 8046558:	4b0b      	ldr	r3, [pc, #44]	; (8046588 <HAL_PCD_MspInit+0xa0>)
 804655a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804655c:	4a0a      	ldr	r2, [pc, #40]	; (8046588 <HAL_PCD_MspInit+0xa0>)
 804655e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8046562:	6453      	str	r3, [r2, #68]	; 0x44
 8046564:	4b08      	ldr	r3, [pc, #32]	; (8046588 <HAL_PCD_MspInit+0xa0>)
 8046566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8046568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804656c:	60fb      	str	r3, [r7, #12]
 804656e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8046570:	2200      	movs	r2, #0
 8046572:	2100      	movs	r1, #0
 8046574:	2043      	movs	r0, #67	; 0x43
 8046576:	f7fa fa9e 	bl	8040ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 804657a:	2043      	movs	r0, #67	; 0x43
 804657c:	f7fa fab7 	bl	8040aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8046580:	bf00      	nop
 8046582:	3728      	adds	r7, #40	; 0x28
 8046584:	46bd      	mov	sp, r7
 8046586:	bd80      	pop	{r7, pc}
 8046588:	40023800 	.word	0x40023800
 804658c:	40020000 	.word	0x40020000

08046590 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8046590:	b580      	push	{r7, lr}
 8046592:	b082      	sub	sp, #8
 8046594:	af00      	add	r7, sp, #0
 8046596:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8046598:	687b      	ldr	r3, [r7, #4]
 804659a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 804659e:	687b      	ldr	r3, [r7, #4]
 80465a0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80465a4:	4619      	mov	r1, r3
 80465a6:	4610      	mov	r0, r2
 80465a8:	f7fe fb79 	bl	8044c9e <USBD_LL_SetupStage>
}
 80465ac:	bf00      	nop
 80465ae:	3708      	adds	r7, #8
 80465b0:	46bd      	mov	sp, r7
 80465b2:	bd80      	pop	{r7, pc}

080465b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80465b4:	b580      	push	{r7, lr}
 80465b6:	b082      	sub	sp, #8
 80465b8:	af00      	add	r7, sp, #0
 80465ba:	6078      	str	r0, [r7, #4]
 80465bc:	460b      	mov	r3, r1
 80465be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80465c0:	687b      	ldr	r3, [r7, #4]
 80465c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80465c6:	78fa      	ldrb	r2, [r7, #3]
 80465c8:	6879      	ldr	r1, [r7, #4]
 80465ca:	4613      	mov	r3, r2
 80465cc:	00db      	lsls	r3, r3, #3
 80465ce:	4413      	add	r3, r2
 80465d0:	009b      	lsls	r3, r3, #2
 80465d2:	440b      	add	r3, r1
 80465d4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80465d8:	681a      	ldr	r2, [r3, #0]
 80465da:	78fb      	ldrb	r3, [r7, #3]
 80465dc:	4619      	mov	r1, r3
 80465de:	f7fe fbb3 	bl	8044d48 <USBD_LL_DataOutStage>
}
 80465e2:	bf00      	nop
 80465e4:	3708      	adds	r7, #8
 80465e6:	46bd      	mov	sp, r7
 80465e8:	bd80      	pop	{r7, pc}

080465ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80465ea:	b580      	push	{r7, lr}
 80465ec:	b082      	sub	sp, #8
 80465ee:	af00      	add	r7, sp, #0
 80465f0:	6078      	str	r0, [r7, #4]
 80465f2:	460b      	mov	r3, r1
 80465f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80465f6:	687b      	ldr	r3, [r7, #4]
 80465f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80465fc:	78fa      	ldrb	r2, [r7, #3]
 80465fe:	6879      	ldr	r1, [r7, #4]
 8046600:	4613      	mov	r3, r2
 8046602:	00db      	lsls	r3, r3, #3
 8046604:	4413      	add	r3, r2
 8046606:	009b      	lsls	r3, r3, #2
 8046608:	440b      	add	r3, r1
 804660a:	3320      	adds	r3, #32
 804660c:	681a      	ldr	r2, [r3, #0]
 804660e:	78fb      	ldrb	r3, [r7, #3]
 8046610:	4619      	mov	r1, r3
 8046612:	f7fe fc4c 	bl	8044eae <USBD_LL_DataInStage>
}
 8046616:	bf00      	nop
 8046618:	3708      	adds	r7, #8
 804661a:	46bd      	mov	sp, r7
 804661c:	bd80      	pop	{r7, pc}

0804661e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804661e:	b580      	push	{r7, lr}
 8046620:	b082      	sub	sp, #8
 8046622:	af00      	add	r7, sp, #0
 8046624:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8046626:	687b      	ldr	r3, [r7, #4]
 8046628:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 804662c:	4618      	mov	r0, r3
 804662e:	f7fe fd86 	bl	804513e <USBD_LL_SOF>
}
 8046632:	bf00      	nop
 8046634:	3708      	adds	r7, #8
 8046636:	46bd      	mov	sp, r7
 8046638:	bd80      	pop	{r7, pc}

0804663a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804663a:	b580      	push	{r7, lr}
 804663c:	b084      	sub	sp, #16
 804663e:	af00      	add	r7, sp, #0
 8046640:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8046642:	2301      	movs	r3, #1
 8046644:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8046646:	687b      	ldr	r3, [r7, #4]
 8046648:	79db      	ldrb	r3, [r3, #7]
 804664a:	2b02      	cmp	r3, #2
 804664c:	d001      	beq.n	8046652 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 804664e:	f7fa f81f 	bl	8040690 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8046652:	687b      	ldr	r3, [r7, #4]
 8046654:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8046658:	7bfa      	ldrb	r2, [r7, #15]
 804665a:	4611      	mov	r1, r2
 804665c:	4618      	mov	r0, r3
 804665e:	f7fe fd2a 	bl	80450b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8046662:	687b      	ldr	r3, [r7, #4]
 8046664:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8046668:	4618      	mov	r0, r3
 804666a:	f7fe fcd2 	bl	8045012 <USBD_LL_Reset>
}
 804666e:	bf00      	nop
 8046670:	3710      	adds	r7, #16
 8046672:	46bd      	mov	sp, r7
 8046674:	bd80      	pop	{r7, pc}
	...

08046678 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8046678:	b580      	push	{r7, lr}
 804667a:	b082      	sub	sp, #8
 804667c:	af00      	add	r7, sp, #0
 804667e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8046680:	687b      	ldr	r3, [r7, #4]
 8046682:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8046686:	4618      	mov	r0, r3
 8046688:	f7fe fd25 	bl	80450d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 804668c:	687b      	ldr	r3, [r7, #4]
 804668e:	681b      	ldr	r3, [r3, #0]
 8046690:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8046694:	681b      	ldr	r3, [r3, #0]
 8046696:	687a      	ldr	r2, [r7, #4]
 8046698:	6812      	ldr	r2, [r2, #0]
 804669a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 804669e:	f043 0301 	orr.w	r3, r3, #1
 80466a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80466a4:	687b      	ldr	r3, [r7, #4]
 80466a6:	7adb      	ldrb	r3, [r3, #11]
 80466a8:	2b00      	cmp	r3, #0
 80466aa:	d005      	beq.n	80466b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80466ac:	4b04      	ldr	r3, [pc, #16]	; (80466c0 <HAL_PCD_SuspendCallback+0x48>)
 80466ae:	691b      	ldr	r3, [r3, #16]
 80466b0:	4a03      	ldr	r2, [pc, #12]	; (80466c0 <HAL_PCD_SuspendCallback+0x48>)
 80466b2:	f043 0306 	orr.w	r3, r3, #6
 80466b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80466b8:	bf00      	nop
 80466ba:	3708      	adds	r7, #8
 80466bc:	46bd      	mov	sp, r7
 80466be:	bd80      	pop	{r7, pc}
 80466c0:	e000ed00 	.word	0xe000ed00

080466c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80466c4:	b580      	push	{r7, lr}
 80466c6:	b082      	sub	sp, #8
 80466c8:	af00      	add	r7, sp, #0
 80466ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80466cc:	687b      	ldr	r3, [r7, #4]
 80466ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80466d2:	4618      	mov	r0, r3
 80466d4:	f7fe fd1b 	bl	804510e <USBD_LL_Resume>
}
 80466d8:	bf00      	nop
 80466da:	3708      	adds	r7, #8
 80466dc:	46bd      	mov	sp, r7
 80466de:	bd80      	pop	{r7, pc}

080466e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80466e0:	b580      	push	{r7, lr}
 80466e2:	b082      	sub	sp, #8
 80466e4:	af00      	add	r7, sp, #0
 80466e6:	6078      	str	r0, [r7, #4]
 80466e8:	460b      	mov	r3, r1
 80466ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80466ec:	687b      	ldr	r3, [r7, #4]
 80466ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80466f2:	78fa      	ldrb	r2, [r7, #3]
 80466f4:	4611      	mov	r1, r2
 80466f6:	4618      	mov	r0, r3
 80466f8:	f7fe fd73 	bl	80451e2 <USBD_LL_IsoOUTIncomplete>
}
 80466fc:	bf00      	nop
 80466fe:	3708      	adds	r7, #8
 8046700:	46bd      	mov	sp, r7
 8046702:	bd80      	pop	{r7, pc}

08046704 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8046704:	b580      	push	{r7, lr}
 8046706:	b082      	sub	sp, #8
 8046708:	af00      	add	r7, sp, #0
 804670a:	6078      	str	r0, [r7, #4]
 804670c:	460b      	mov	r3, r1
 804670e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8046710:	687b      	ldr	r3, [r7, #4]
 8046712:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8046716:	78fa      	ldrb	r2, [r7, #3]
 8046718:	4611      	mov	r1, r2
 804671a:	4618      	mov	r0, r3
 804671c:	f7fe fd2f 	bl	804517e <USBD_LL_IsoINIncomplete>
}
 8046720:	bf00      	nop
 8046722:	3708      	adds	r7, #8
 8046724:	46bd      	mov	sp, r7
 8046726:	bd80      	pop	{r7, pc}

08046728 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8046728:	b580      	push	{r7, lr}
 804672a:	b082      	sub	sp, #8
 804672c:	af00      	add	r7, sp, #0
 804672e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8046730:	687b      	ldr	r3, [r7, #4]
 8046732:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8046736:	4618      	mov	r0, r3
 8046738:	f7fe fd85 	bl	8045246 <USBD_LL_DevConnected>
}
 804673c:	bf00      	nop
 804673e:	3708      	adds	r7, #8
 8046740:	46bd      	mov	sp, r7
 8046742:	bd80      	pop	{r7, pc}

08046744 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8046744:	b580      	push	{r7, lr}
 8046746:	b082      	sub	sp, #8
 8046748:	af00      	add	r7, sp, #0
 804674a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 804674c:	687b      	ldr	r3, [r7, #4]
 804674e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8046752:	4618      	mov	r0, r3
 8046754:	f7fe fd82 	bl	804525c <USBD_LL_DevDisconnected>
}
 8046758:	bf00      	nop
 804675a:	3708      	adds	r7, #8
 804675c:	46bd      	mov	sp, r7
 804675e:	bd80      	pop	{r7, pc}

08046760 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8046760:	b580      	push	{r7, lr}
 8046762:	b082      	sub	sp, #8
 8046764:	af00      	add	r7, sp, #0
 8046766:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8046768:	687b      	ldr	r3, [r7, #4]
 804676a:	781b      	ldrb	r3, [r3, #0]
 804676c:	2b00      	cmp	r3, #0
 804676e:	d13c      	bne.n	80467ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8046770:	4a20      	ldr	r2, [pc, #128]	; (80467f4 <USBD_LL_Init+0x94>)
 8046772:	687b      	ldr	r3, [r7, #4]
 8046774:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8046778:	687b      	ldr	r3, [r7, #4]
 804677a:	4a1e      	ldr	r2, [pc, #120]	; (80467f4 <USBD_LL_Init+0x94>)
 804677c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8046780:	4b1c      	ldr	r3, [pc, #112]	; (80467f4 <USBD_LL_Init+0x94>)
 8046782:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8046786:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8046788:	4b1a      	ldr	r3, [pc, #104]	; (80467f4 <USBD_LL_Init+0x94>)
 804678a:	2204      	movs	r2, #4
 804678c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 804678e:	4b19      	ldr	r3, [pc, #100]	; (80467f4 <USBD_LL_Init+0x94>)
 8046790:	2202      	movs	r2, #2
 8046792:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8046794:	4b17      	ldr	r3, [pc, #92]	; (80467f4 <USBD_LL_Init+0x94>)
 8046796:	2200      	movs	r2, #0
 8046798:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 804679a:	4b16      	ldr	r3, [pc, #88]	; (80467f4 <USBD_LL_Init+0x94>)
 804679c:	2202      	movs	r2, #2
 804679e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80467a0:	4b14      	ldr	r3, [pc, #80]	; (80467f4 <USBD_LL_Init+0x94>)
 80467a2:	2200      	movs	r2, #0
 80467a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80467a6:	4b13      	ldr	r3, [pc, #76]	; (80467f4 <USBD_LL_Init+0x94>)
 80467a8:	2200      	movs	r2, #0
 80467aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80467ac:	4b11      	ldr	r3, [pc, #68]	; (80467f4 <USBD_LL_Init+0x94>)
 80467ae:	2200      	movs	r2, #0
 80467b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80467b2:	4b10      	ldr	r3, [pc, #64]	; (80467f4 <USBD_LL_Init+0x94>)
 80467b4:	2200      	movs	r2, #0
 80467b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80467b8:	4b0e      	ldr	r3, [pc, #56]	; (80467f4 <USBD_LL_Init+0x94>)
 80467ba:	2200      	movs	r2, #0
 80467bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80467be:	480d      	ldr	r0, [pc, #52]	; (80467f4 <USBD_LL_Init+0x94>)
 80467c0:	f7fa fb67 	bl	8040e92 <HAL_PCD_Init>
 80467c4:	4603      	mov	r3, r0
 80467c6:	2b00      	cmp	r3, #0
 80467c8:	d001      	beq.n	80467ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80467ca:	f7f9 ff61 	bl	8040690 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80467ce:	2180      	movs	r1, #128	; 0x80
 80467d0:	4808      	ldr	r0, [pc, #32]	; (80467f4 <USBD_LL_Init+0x94>)
 80467d2:	f7fb fd92 	bl	80422fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80467d6:	2240      	movs	r2, #64	; 0x40
 80467d8:	2100      	movs	r1, #0
 80467da:	4806      	ldr	r0, [pc, #24]	; (80467f4 <USBD_LL_Init+0x94>)
 80467dc:	f7fb fd46 	bl	804226c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80467e0:	2280      	movs	r2, #128	; 0x80
 80467e2:	2101      	movs	r1, #1
 80467e4:	4803      	ldr	r0, [pc, #12]	; (80467f4 <USBD_LL_Init+0x94>)
 80467e6:	f7fb fd41 	bl	804226c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80467ea:	2300      	movs	r3, #0
}
 80467ec:	4618      	mov	r0, r3
 80467ee:	3708      	adds	r7, #8
 80467f0:	46bd      	mov	sp, r7
 80467f2:	bd80      	pop	{r7, pc}
 80467f4:	200015fc 	.word	0x200015fc

080467f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80467f8:	b580      	push	{r7, lr}
 80467fa:	b084      	sub	sp, #16
 80467fc:	af00      	add	r7, sp, #0
 80467fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8046800:	2300      	movs	r3, #0
 8046802:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8046804:	2300      	movs	r3, #0
 8046806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8046808:	687b      	ldr	r3, [r7, #4]
 804680a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 804680e:	4618      	mov	r0, r3
 8046810:	f7fa fc4e 	bl	80410b0 <HAL_PCD_Start>
 8046814:	4603      	mov	r3, r0
 8046816:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8046818:	7bfb      	ldrb	r3, [r7, #15]
 804681a:	4618      	mov	r0, r3
 804681c:	f000 f942 	bl	8046aa4 <USBD_Get_USB_Status>
 8046820:	4603      	mov	r3, r0
 8046822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8046824:	7bbb      	ldrb	r3, [r7, #14]
}
 8046826:	4618      	mov	r0, r3
 8046828:	3710      	adds	r7, #16
 804682a:	46bd      	mov	sp, r7
 804682c:	bd80      	pop	{r7, pc}

0804682e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 804682e:	b580      	push	{r7, lr}
 8046830:	b084      	sub	sp, #16
 8046832:	af00      	add	r7, sp, #0
 8046834:	6078      	str	r0, [r7, #4]
 8046836:	4608      	mov	r0, r1
 8046838:	4611      	mov	r1, r2
 804683a:	461a      	mov	r2, r3
 804683c:	4603      	mov	r3, r0
 804683e:	70fb      	strb	r3, [r7, #3]
 8046840:	460b      	mov	r3, r1
 8046842:	70bb      	strb	r3, [r7, #2]
 8046844:	4613      	mov	r3, r2
 8046846:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8046848:	2300      	movs	r3, #0
 804684a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804684c:	2300      	movs	r3, #0
 804684e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8046850:	687b      	ldr	r3, [r7, #4]
 8046852:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8046856:	78bb      	ldrb	r3, [r7, #2]
 8046858:	883a      	ldrh	r2, [r7, #0]
 804685a:	78f9      	ldrb	r1, [r7, #3]
 804685c:	f7fb f922 	bl	8041aa4 <HAL_PCD_EP_Open>
 8046860:	4603      	mov	r3, r0
 8046862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8046864:	7bfb      	ldrb	r3, [r7, #15]
 8046866:	4618      	mov	r0, r3
 8046868:	f000 f91c 	bl	8046aa4 <USBD_Get_USB_Status>
 804686c:	4603      	mov	r3, r0
 804686e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8046870:	7bbb      	ldrb	r3, [r7, #14]
}
 8046872:	4618      	mov	r0, r3
 8046874:	3710      	adds	r7, #16
 8046876:	46bd      	mov	sp, r7
 8046878:	bd80      	pop	{r7, pc}

0804687a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 804687a:	b580      	push	{r7, lr}
 804687c:	b084      	sub	sp, #16
 804687e:	af00      	add	r7, sp, #0
 8046880:	6078      	str	r0, [r7, #4]
 8046882:	460b      	mov	r3, r1
 8046884:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8046886:	2300      	movs	r3, #0
 8046888:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804688a:	2300      	movs	r3, #0
 804688c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 804688e:	687b      	ldr	r3, [r7, #4]
 8046890:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8046894:	78fa      	ldrb	r2, [r7, #3]
 8046896:	4611      	mov	r1, r2
 8046898:	4618      	mov	r0, r3
 804689a:	f7fb f96b 	bl	8041b74 <HAL_PCD_EP_Close>
 804689e:	4603      	mov	r3, r0
 80468a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80468a2:	7bfb      	ldrb	r3, [r7, #15]
 80468a4:	4618      	mov	r0, r3
 80468a6:	f000 f8fd 	bl	8046aa4 <USBD_Get_USB_Status>
 80468aa:	4603      	mov	r3, r0
 80468ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80468ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80468b0:	4618      	mov	r0, r3
 80468b2:	3710      	adds	r7, #16
 80468b4:	46bd      	mov	sp, r7
 80468b6:	bd80      	pop	{r7, pc}

080468b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80468b8:	b580      	push	{r7, lr}
 80468ba:	b084      	sub	sp, #16
 80468bc:	af00      	add	r7, sp, #0
 80468be:	6078      	str	r0, [r7, #4]
 80468c0:	460b      	mov	r3, r1
 80468c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80468c4:	2300      	movs	r3, #0
 80468c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80468c8:	2300      	movs	r3, #0
 80468ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80468cc:	687b      	ldr	r3, [r7, #4]
 80468ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80468d2:	78fa      	ldrb	r2, [r7, #3]
 80468d4:	4611      	mov	r1, r2
 80468d6:	4618      	mov	r0, r3
 80468d8:	f7fb fa23 	bl	8041d22 <HAL_PCD_EP_SetStall>
 80468dc:	4603      	mov	r3, r0
 80468de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80468e0:	7bfb      	ldrb	r3, [r7, #15]
 80468e2:	4618      	mov	r0, r3
 80468e4:	f000 f8de 	bl	8046aa4 <USBD_Get_USB_Status>
 80468e8:	4603      	mov	r3, r0
 80468ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80468ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80468ee:	4618      	mov	r0, r3
 80468f0:	3710      	adds	r7, #16
 80468f2:	46bd      	mov	sp, r7
 80468f4:	bd80      	pop	{r7, pc}

080468f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80468f6:	b580      	push	{r7, lr}
 80468f8:	b084      	sub	sp, #16
 80468fa:	af00      	add	r7, sp, #0
 80468fc:	6078      	str	r0, [r7, #4]
 80468fe:	460b      	mov	r3, r1
 8046900:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8046902:	2300      	movs	r3, #0
 8046904:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8046906:	2300      	movs	r3, #0
 8046908:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 804690a:	687b      	ldr	r3, [r7, #4]
 804690c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8046910:	78fa      	ldrb	r2, [r7, #3]
 8046912:	4611      	mov	r1, r2
 8046914:	4618      	mov	r0, r3
 8046916:	f7fb fa67 	bl	8041de8 <HAL_PCD_EP_ClrStall>
 804691a:	4603      	mov	r3, r0
 804691c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804691e:	7bfb      	ldrb	r3, [r7, #15]
 8046920:	4618      	mov	r0, r3
 8046922:	f000 f8bf 	bl	8046aa4 <USBD_Get_USB_Status>
 8046926:	4603      	mov	r3, r0
 8046928:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804692a:	7bbb      	ldrb	r3, [r7, #14]
}
 804692c:	4618      	mov	r0, r3
 804692e:	3710      	adds	r7, #16
 8046930:	46bd      	mov	sp, r7
 8046932:	bd80      	pop	{r7, pc}

08046934 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8046934:	b480      	push	{r7}
 8046936:	b085      	sub	sp, #20
 8046938:	af00      	add	r7, sp, #0
 804693a:	6078      	str	r0, [r7, #4]
 804693c:	460b      	mov	r3, r1
 804693e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8046940:	687b      	ldr	r3, [r7, #4]
 8046942:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8046946:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8046948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 804694c:	2b00      	cmp	r3, #0
 804694e:	da0b      	bge.n	8046968 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8046950:	78fb      	ldrb	r3, [r7, #3]
 8046952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8046956:	68f9      	ldr	r1, [r7, #12]
 8046958:	4613      	mov	r3, r2
 804695a:	00db      	lsls	r3, r3, #3
 804695c:	4413      	add	r3, r2
 804695e:	009b      	lsls	r3, r3, #2
 8046960:	440b      	add	r3, r1
 8046962:	3316      	adds	r3, #22
 8046964:	781b      	ldrb	r3, [r3, #0]
 8046966:	e00b      	b.n	8046980 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8046968:	78fb      	ldrb	r3, [r7, #3]
 804696a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 804696e:	68f9      	ldr	r1, [r7, #12]
 8046970:	4613      	mov	r3, r2
 8046972:	00db      	lsls	r3, r3, #3
 8046974:	4413      	add	r3, r2
 8046976:	009b      	lsls	r3, r3, #2
 8046978:	440b      	add	r3, r1
 804697a:	f203 2356 	addw	r3, r3, #598	; 0x256
 804697e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8046980:	4618      	mov	r0, r3
 8046982:	3714      	adds	r7, #20
 8046984:	46bd      	mov	sp, r7
 8046986:	f85d 7b04 	ldr.w	r7, [sp], #4
 804698a:	4770      	bx	lr

0804698c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 804698c:	b580      	push	{r7, lr}
 804698e:	b084      	sub	sp, #16
 8046990:	af00      	add	r7, sp, #0
 8046992:	6078      	str	r0, [r7, #4]
 8046994:	460b      	mov	r3, r1
 8046996:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8046998:	2300      	movs	r3, #0
 804699a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804699c:	2300      	movs	r3, #0
 804699e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80469a0:	687b      	ldr	r3, [r7, #4]
 80469a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80469a6:	78fa      	ldrb	r2, [r7, #3]
 80469a8:	4611      	mov	r1, r2
 80469aa:	4618      	mov	r0, r3
 80469ac:	f7fb f856 	bl	8041a5c <HAL_PCD_SetAddress>
 80469b0:	4603      	mov	r3, r0
 80469b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80469b4:	7bfb      	ldrb	r3, [r7, #15]
 80469b6:	4618      	mov	r0, r3
 80469b8:	f000 f874 	bl	8046aa4 <USBD_Get_USB_Status>
 80469bc:	4603      	mov	r3, r0
 80469be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80469c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80469c2:	4618      	mov	r0, r3
 80469c4:	3710      	adds	r7, #16
 80469c6:	46bd      	mov	sp, r7
 80469c8:	bd80      	pop	{r7, pc}

080469ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80469ca:	b580      	push	{r7, lr}
 80469cc:	b086      	sub	sp, #24
 80469ce:	af00      	add	r7, sp, #0
 80469d0:	60f8      	str	r0, [r7, #12]
 80469d2:	607a      	str	r2, [r7, #4]
 80469d4:	603b      	str	r3, [r7, #0]
 80469d6:	460b      	mov	r3, r1
 80469d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80469da:	2300      	movs	r3, #0
 80469dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80469de:	2300      	movs	r3, #0
 80469e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80469e2:	68fb      	ldr	r3, [r7, #12]
 80469e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80469e8:	7af9      	ldrb	r1, [r7, #11]
 80469ea:	683b      	ldr	r3, [r7, #0]
 80469ec:	687a      	ldr	r2, [r7, #4]
 80469ee:	f7fb f95e 	bl	8041cae <HAL_PCD_EP_Transmit>
 80469f2:	4603      	mov	r3, r0
 80469f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80469f6:	7dfb      	ldrb	r3, [r7, #23]
 80469f8:	4618      	mov	r0, r3
 80469fa:	f000 f853 	bl	8046aa4 <USBD_Get_USB_Status>
 80469fe:	4603      	mov	r3, r0
 8046a00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8046a02:	7dbb      	ldrb	r3, [r7, #22]
}
 8046a04:	4618      	mov	r0, r3
 8046a06:	3718      	adds	r7, #24
 8046a08:	46bd      	mov	sp, r7
 8046a0a:	bd80      	pop	{r7, pc}

08046a0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8046a0c:	b580      	push	{r7, lr}
 8046a0e:	b086      	sub	sp, #24
 8046a10:	af00      	add	r7, sp, #0
 8046a12:	60f8      	str	r0, [r7, #12]
 8046a14:	607a      	str	r2, [r7, #4]
 8046a16:	603b      	str	r3, [r7, #0]
 8046a18:	460b      	mov	r3, r1
 8046a1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8046a1c:	2300      	movs	r3, #0
 8046a1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8046a20:	2300      	movs	r3, #0
 8046a22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8046a24:	68fb      	ldr	r3, [r7, #12]
 8046a26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8046a2a:	7af9      	ldrb	r1, [r7, #11]
 8046a2c:	683b      	ldr	r3, [r7, #0]
 8046a2e:	687a      	ldr	r2, [r7, #4]
 8046a30:	f7fb f8ea 	bl	8041c08 <HAL_PCD_EP_Receive>
 8046a34:	4603      	mov	r3, r0
 8046a36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8046a38:	7dfb      	ldrb	r3, [r7, #23]
 8046a3a:	4618      	mov	r0, r3
 8046a3c:	f000 f832 	bl	8046aa4 <USBD_Get_USB_Status>
 8046a40:	4603      	mov	r3, r0
 8046a42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8046a44:	7dbb      	ldrb	r3, [r7, #22]
}
 8046a46:	4618      	mov	r0, r3
 8046a48:	3718      	adds	r7, #24
 8046a4a:	46bd      	mov	sp, r7
 8046a4c:	bd80      	pop	{r7, pc}

08046a4e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8046a4e:	b580      	push	{r7, lr}
 8046a50:	b082      	sub	sp, #8
 8046a52:	af00      	add	r7, sp, #0
 8046a54:	6078      	str	r0, [r7, #4]
 8046a56:	460b      	mov	r3, r1
 8046a58:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8046a5a:	687b      	ldr	r3, [r7, #4]
 8046a5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8046a60:	78fa      	ldrb	r2, [r7, #3]
 8046a62:	4611      	mov	r1, r2
 8046a64:	4618      	mov	r0, r3
 8046a66:	f7fb f90a 	bl	8041c7e <HAL_PCD_EP_GetRxCount>
 8046a6a:	4603      	mov	r3, r0
}
 8046a6c:	4618      	mov	r0, r3
 8046a6e:	3708      	adds	r7, #8
 8046a70:	46bd      	mov	sp, r7
 8046a72:	bd80      	pop	{r7, pc}

08046a74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8046a74:	b480      	push	{r7}
 8046a76:	b083      	sub	sp, #12
 8046a78:	af00      	add	r7, sp, #0
 8046a7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8046a7c:	4b03      	ldr	r3, [pc, #12]	; (8046a8c <USBD_static_malloc+0x18>)
}
 8046a7e:	4618      	mov	r0, r3
 8046a80:	370c      	adds	r7, #12
 8046a82:	46bd      	mov	sp, r7
 8046a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046a88:	4770      	bx	lr
 8046a8a:	bf00      	nop
 8046a8c:	20001ae0 	.word	0x20001ae0

08046a90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8046a90:	b480      	push	{r7}
 8046a92:	b083      	sub	sp, #12
 8046a94:	af00      	add	r7, sp, #0
 8046a96:	6078      	str	r0, [r7, #4]

}
 8046a98:	bf00      	nop
 8046a9a:	370c      	adds	r7, #12
 8046a9c:	46bd      	mov	sp, r7
 8046a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046aa2:	4770      	bx	lr

08046aa4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8046aa4:	b480      	push	{r7}
 8046aa6:	b085      	sub	sp, #20
 8046aa8:	af00      	add	r7, sp, #0
 8046aaa:	4603      	mov	r3, r0
 8046aac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8046aae:	2300      	movs	r3, #0
 8046ab0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8046ab2:	79fb      	ldrb	r3, [r7, #7]
 8046ab4:	2b03      	cmp	r3, #3
 8046ab6:	d817      	bhi.n	8046ae8 <USBD_Get_USB_Status+0x44>
 8046ab8:	a201      	add	r2, pc, #4	; (adr r2, 8046ac0 <USBD_Get_USB_Status+0x1c>)
 8046aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046abe:	bf00      	nop
 8046ac0:	08046ad1 	.word	0x08046ad1
 8046ac4:	08046ad7 	.word	0x08046ad7
 8046ac8:	08046add 	.word	0x08046add
 8046acc:	08046ae3 	.word	0x08046ae3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8046ad0:	2300      	movs	r3, #0
 8046ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8046ad4:	e00b      	b.n	8046aee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8046ad6:	2303      	movs	r3, #3
 8046ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8046ada:	e008      	b.n	8046aee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8046adc:	2301      	movs	r3, #1
 8046ade:	73fb      	strb	r3, [r7, #15]
    break;
 8046ae0:	e005      	b.n	8046aee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8046ae2:	2303      	movs	r3, #3
 8046ae4:	73fb      	strb	r3, [r7, #15]
    break;
 8046ae6:	e002      	b.n	8046aee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8046ae8:	2303      	movs	r3, #3
 8046aea:	73fb      	strb	r3, [r7, #15]
    break;
 8046aec:	bf00      	nop
  }
  return usb_status;
 8046aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8046af0:	4618      	mov	r0, r3
 8046af2:	3714      	adds	r7, #20
 8046af4:	46bd      	mov	sp, r7
 8046af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046afa:	4770      	bx	lr

08046afc <memset>:
 8046afc:	4402      	add	r2, r0
 8046afe:	4603      	mov	r3, r0
 8046b00:	4293      	cmp	r3, r2
 8046b02:	d100      	bne.n	8046b06 <memset+0xa>
 8046b04:	4770      	bx	lr
 8046b06:	f803 1b01 	strb.w	r1, [r3], #1
 8046b0a:	e7f9      	b.n	8046b00 <memset+0x4>

08046b0c <__libc_init_array>:
 8046b0c:	b570      	push	{r4, r5, r6, lr}
 8046b0e:	4d0d      	ldr	r5, [pc, #52]	; (8046b44 <__libc_init_array+0x38>)
 8046b10:	4c0d      	ldr	r4, [pc, #52]	; (8046b48 <__libc_init_array+0x3c>)
 8046b12:	1b64      	subs	r4, r4, r5
 8046b14:	10a4      	asrs	r4, r4, #2
 8046b16:	2600      	movs	r6, #0
 8046b18:	42a6      	cmp	r6, r4
 8046b1a:	d109      	bne.n	8046b30 <__libc_init_array+0x24>
 8046b1c:	4d0b      	ldr	r5, [pc, #44]	; (8046b4c <__libc_init_array+0x40>)
 8046b1e:	4c0c      	ldr	r4, [pc, #48]	; (8046b50 <__libc_init_array+0x44>)
 8046b20:	f000 f818 	bl	8046b54 <_init>
 8046b24:	1b64      	subs	r4, r4, r5
 8046b26:	10a4      	asrs	r4, r4, #2
 8046b28:	2600      	movs	r6, #0
 8046b2a:	42a6      	cmp	r6, r4
 8046b2c:	d105      	bne.n	8046b3a <__libc_init_array+0x2e>
 8046b2e:	bd70      	pop	{r4, r5, r6, pc}
 8046b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8046b34:	4798      	blx	r3
 8046b36:	3601      	adds	r6, #1
 8046b38:	e7ee      	b.n	8046b18 <__libc_init_array+0xc>
 8046b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8046b3e:	4798      	blx	r3
 8046b40:	3601      	adds	r6, #1
 8046b42:	e7f2      	b.n	8046b2a <__libc_init_array+0x1e>
 8046b44:	08046bcc 	.word	0x08046bcc
 8046b48:	08046bcc 	.word	0x08046bcc
 8046b4c:	08046bcc 	.word	0x08046bcc
 8046b50:	08046bd0 	.word	0x08046bd0

08046b54 <_init>:
 8046b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8046b56:	bf00      	nop
 8046b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8046b5a:	bc08      	pop	{r3}
 8046b5c:	469e      	mov	lr, r3
 8046b5e:	4770      	bx	lr

08046b60 <_fini>:
 8046b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8046b62:	bf00      	nop
 8046b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8046b66:	bc08      	pop	{r3}
 8046b68:	469e      	mov	lr, r3
 8046b6a:	4770      	bx	lr

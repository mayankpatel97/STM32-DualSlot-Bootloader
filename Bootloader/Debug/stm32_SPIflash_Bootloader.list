
stm32_SPIflash_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800d878  0800d878  0001d878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dda0  0800dda0  000202c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dda0  0800dda0  0001dda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dda8  0800dda8  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dda8  0800dda8  0001dda8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ddac  0800ddac  0001ddac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800ddb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002128  200002c4  0800e074  000202c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023ec  0800e074  000223ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e6e  00000000  00000000  00020337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c0  00000000  00000000  000311a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00034668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af5  00000000  00000000  00035530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001993e  00000000  00000000  00036025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013717  00000000  00000000  0004f963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b8cb  00000000  00000000  0006307a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005148  00000000  00000000  000ee948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f3a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d860 	.word	0x0800d860

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800d860 	.word	0x0800d860

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <calculate_crc16>:
void process_packet(void);
void writeDataChunk(uint8_t *dat, uint16_t length);
void UpdateFirmware(void);

uint16_t calculate_crc16(uint8_t *data, uint16_t length)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 800100c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001010:	81fb      	strh	r3, [r7, #14]
    uint16_t poly = 0x2024;
 8001012:	f242 0324 	movw	r3, #8228	; 0x2024
 8001016:	813b      	strh	r3, [r7, #8]

    for (uint16_t i = 0; i < length; i++) {
 8001018:	2300      	movs	r3, #0
 800101a:	81bb      	strh	r3, [r7, #12]
 800101c:	e026      	b.n	800106c <calculate_crc16+0x6c>
        crc ^= (data[i] << 8);
 800101e:	89bb      	ldrh	r3, [r7, #12]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800102e:	4053      	eors	r3, r2
 8001030:	b21b      	sxth	r3, r3
 8001032:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8001034:	2300      	movs	r3, #0
 8001036:	72fb      	strb	r3, [r7, #11]
 8001038:	e012      	b.n	8001060 <calculate_crc16+0x60>
            if (crc & 0x8000) {
 800103a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800103e:	2b00      	cmp	r3, #0
 8001040:	da08      	bge.n	8001054 <calculate_crc16+0x54>
                crc = (crc << 1) ^ poly;
 8001042:	89fb      	ldrh	r3, [r7, #14]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	b21a      	sxth	r2, r3
 8001048:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800104c:	4053      	eors	r3, r2
 800104e:	b21b      	sxth	r3, r3
 8001050:	81fb      	strh	r3, [r7, #14]
 8001052:	e002      	b.n	800105a <calculate_crc16+0x5a>
            } else {
                crc <<= 1;
 8001054:	89fb      	ldrh	r3, [r7, #14]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	3301      	adds	r3, #1
 800105e:	72fb      	strb	r3, [r7, #11]
 8001060:	7afb      	ldrb	r3, [r7, #11]
 8001062:	2b07      	cmp	r3, #7
 8001064:	d9e9      	bls.n	800103a <calculate_crc16+0x3a>
    for (uint16_t i = 0; i < length; i++) {
 8001066:	89bb      	ldrh	r3, [r7, #12]
 8001068:	3301      	adds	r3, #1
 800106a:	81bb      	strh	r3, [r7, #12]
 800106c:	89ba      	ldrh	r2, [r7, #12]
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	429a      	cmp	r2, r3
 8001072:	d3d4      	bcc.n	800101e <calculate_crc16+0x1e>
            }
        }
    }
    return crc;
 8001074:	89fb      	ldrh	r3, [r7, #14]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <USB_VCP_ReceiveCallback>:


void USB_VCP_ReceiveCallback(uint8_t* Buf, uint32_t *Len)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < *Len; i++) {
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	e0c7      	b.n	8001224 <USB_VCP_ReceiveCallback+0x1a0>
        uint8_t byte = Buf[i];
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	72fb      	strb	r3, [r7, #11]

        switch (packet_state) {
 800109e:	4b67      	ldr	r3, [pc, #412]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	f200 80bb 	bhi.w	800121e <USB_VCP_ReceiveCallback+0x19a>
 80010a8:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <USB_VCP_ReceiveCallback+0x2c>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	080010cd 	.word	0x080010cd
 80010b4:	080010fd 	.word	0x080010fd
 80010b8:	0800111f 	.word	0x0800111f
 80010bc:	08001151 	.word	0x08001151
 80010c0:	0800118f 	.word	0x0800118f
 80010c4:	080011b7 	.word	0x080011b7
 80010c8:	080011e3 	.word	0x080011e3
            case WAIT_FOR_START:
                if (byte == PACKET_START_MARKER) {
 80010cc:	7afb      	ldrb	r3, [r7, #11]
 80010ce:	2b55      	cmp	r3, #85	; 0x55
 80010d0:	f040 80a2 	bne.w	8001218 <USB_VCP_ReceiveCallback+0x194>
                    packet_state = READ_CMD;
 80010d4:	4b59      	ldr	r3, [pc, #356]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
                    packet_index = 0;
 80010da:	4b59      	ldr	r3, [pc, #356]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	801a      	strh	r2, [r3, #0]
                    payload_index = 0;
 80010e0:	4b58      	ldr	r3, [pc, #352]	; (8001244 <USB_VCP_ReceiveCallback+0x1c0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	801a      	strh	r2, [r3, #0]
                    packet[packet_index++] = byte;
 80010e6:	4b56      	ldr	r3, [pc, #344]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	b291      	uxth	r1, r2
 80010ee:	4a54      	ldr	r2, [pc, #336]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 80010f0:	8011      	strh	r1, [r2, #0]
 80010f2:	4619      	mov	r1, r3
 80010f4:	4a54      	ldr	r2, [pc, #336]	; (8001248 <USB_VCP_ReceiveCallback+0x1c4>)
 80010f6:	7afb      	ldrb	r3, [r7, #11]
 80010f8:	5453      	strb	r3, [r2, r1]
                }
                break;
 80010fa:	e08d      	b.n	8001218 <USB_VCP_ReceiveCallback+0x194>

            case READ_CMD:
                cmd = byte;
 80010fc:	4a53      	ldr	r2, [pc, #332]	; (800124c <USB_VCP_ReceiveCallback+0x1c8>)
 80010fe:	7afb      	ldrb	r3, [r7, #11]
 8001100:	7013      	strb	r3, [r2, #0]
                packet[packet_index++] = byte;
 8001102:	4b4f      	ldr	r3, [pc, #316]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	b291      	uxth	r1, r2
 800110a:	4a4d      	ldr	r2, [pc, #308]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 800110c:	8011      	strh	r1, [r2, #0]
 800110e:	4619      	mov	r1, r3
 8001110:	4a4d      	ldr	r2, [pc, #308]	; (8001248 <USB_VCP_ReceiveCallback+0x1c4>)
 8001112:	7afb      	ldrb	r3, [r7, #11]
 8001114:	5453      	strb	r3, [r2, r1]
                packet_state = READ_LEN;
 8001116:	4b49      	ldr	r3, [pc, #292]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 8001118:	2202      	movs	r2, #2
 800111a:	701a      	strb	r2, [r3, #0]
                break;
 800111c:	e07f      	b.n	800121e <USB_VCP_ReceiveCallback+0x19a>

            case READ_LEN:
                len = byte;
 800111e:	4a4c      	ldr	r2, [pc, #304]	; (8001250 <USB_VCP_ReceiveCallback+0x1cc>)
 8001120:	7afb      	ldrb	r3, [r7, #11]
 8001122:	7013      	strb	r3, [r2, #0]
                packet[packet_index++] = byte;
 8001124:	4b46      	ldr	r3, [pc, #280]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	b291      	uxth	r1, r2
 800112c:	4a44      	ldr	r2, [pc, #272]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 800112e:	8011      	strh	r1, [r2, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	4a45      	ldr	r2, [pc, #276]	; (8001248 <USB_VCP_ReceiveCallback+0x1c4>)
 8001134:	7afb      	ldrb	r3, [r7, #11]
 8001136:	5453      	strb	r3, [r2, r1]
                    packet_state = READ_PAYLOAD;
                } else {
                    packet_state = WAIT_FOR_START; // Invalid length, reset
                }
                */
                if(len == 0) packet_state = READ_CRC1;
 8001138:	4b45      	ldr	r3, [pc, #276]	; (8001250 <USB_VCP_ReceiveCallback+0x1cc>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d103      	bne.n	8001148 <USB_VCP_ReceiveCallback+0xc4>
 8001140:	4b3e      	ldr	r3, [pc, #248]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 8001142:	2204      	movs	r2, #4
 8001144:	701a      	strb	r2, [r3, #0]
                else 		 packet_state = READ_PAYLOAD;
                break;
 8001146:	e06a      	b.n	800121e <USB_VCP_ReceiveCallback+0x19a>
                else 		 packet_state = READ_PAYLOAD;
 8001148:	4b3c      	ldr	r3, [pc, #240]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 800114a:	2203      	movs	r2, #3
 800114c:	701a      	strb	r2, [r3, #0]
                break;
 800114e:	e066      	b.n	800121e <USB_VCP_ReceiveCallback+0x19a>

            case READ_PAYLOAD:
                payload[payload_index++] = byte;
 8001150:	4b3c      	ldr	r3, [pc, #240]	; (8001244 <USB_VCP_ReceiveCallback+0x1c0>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	b291      	uxth	r1, r2
 8001158:	4a3a      	ldr	r2, [pc, #232]	; (8001244 <USB_VCP_ReceiveCallback+0x1c0>)
 800115a:	8011      	strh	r1, [r2, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	4a3d      	ldr	r2, [pc, #244]	; (8001254 <USB_VCP_ReceiveCallback+0x1d0>)
 8001160:	7afb      	ldrb	r3, [r7, #11]
 8001162:	5453      	strb	r3, [r2, r1]
                packet[packet_index++] = byte;
 8001164:	4b36      	ldr	r3, [pc, #216]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	1c5a      	adds	r2, r3, #1
 800116a:	b291      	uxth	r1, r2
 800116c:	4a34      	ldr	r2, [pc, #208]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 800116e:	8011      	strh	r1, [r2, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	4a35      	ldr	r2, [pc, #212]	; (8001248 <USB_VCP_ReceiveCallback+0x1c4>)
 8001174:	7afb      	ldrb	r3, [r7, #11]
 8001176:	5453      	strb	r3, [r2, r1]
                if (payload_index == len) {
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <USB_VCP_ReceiveCallback+0x1cc>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b29a      	uxth	r2, r3
 800117e:	4b31      	ldr	r3, [pc, #196]	; (8001244 <USB_VCP_ReceiveCallback+0x1c0>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d14a      	bne.n	800121c <USB_VCP_ReceiveCallback+0x198>
                    packet_state = READ_CRC1;
 8001186:	4b2d      	ldr	r3, [pc, #180]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 8001188:	2204      	movs	r2, #4
 800118a:	701a      	strb	r2, [r3, #0]
                }
                break;
 800118c:	e046      	b.n	800121c <USB_VCP_ReceiveCallback+0x198>

            case READ_CRC1:
                received_crc = (byte << 8);
 800118e:	7afb      	ldrb	r3, [r7, #11]
 8001190:	b29b      	uxth	r3, r3
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b30      	ldr	r3, [pc, #192]	; (8001258 <USB_VCP_ReceiveCallback+0x1d4>)
 8001198:	801a      	strh	r2, [r3, #0]
                packet[packet_index++] = byte;
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	b291      	uxth	r1, r2
 80011a2:	4a27      	ldr	r2, [pc, #156]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 80011a4:	8011      	strh	r1, [r2, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4a27      	ldr	r2, [pc, #156]	; (8001248 <USB_VCP_ReceiveCallback+0x1c4>)
 80011aa:	7afb      	ldrb	r3, [r7, #11]
 80011ac:	5453      	strb	r3, [r2, r1]
                packet_state = READ_CRC2;
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 80011b0:	2205      	movs	r2, #5
 80011b2:	701a      	strb	r2, [r3, #0]
                break;
 80011b4:	e033      	b.n	800121e <USB_VCP_ReceiveCallback+0x19a>

            case READ_CRC2:
                received_crc |= byte;
 80011b6:	7afb      	ldrb	r3, [r7, #11]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4b27      	ldr	r3, [pc, #156]	; (8001258 <USB_VCP_ReceiveCallback+0x1d4>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	4313      	orrs	r3, r2
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b25      	ldr	r3, [pc, #148]	; (8001258 <USB_VCP_ReceiveCallback+0x1d4>)
 80011c4:	801a      	strh	r2, [r3, #0]
                packet[packet_index++] = byte;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	b291      	uxth	r1, r2
 80011ce:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 80011d0:	8011      	strh	r1, [r2, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <USB_VCP_ReceiveCallback+0x1c4>)
 80011d6:	7afb      	ldrb	r3, [r7, #11]
 80011d8:	5453      	strb	r3, [r2, r1]
                packet_state = WAIT_FOR_END;
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 80011dc:	2206      	movs	r2, #6
 80011de:	701a      	strb	r2, [r3, #0]
                break;
 80011e0:	e01d      	b.n	800121e <USB_VCP_ReceiveCallback+0x19a>

            case WAIT_FOR_END:
                if (byte == PACKET_END_MARKER) {
 80011e2:	7afb      	ldrb	r3, [r7, #11]
 80011e4:	2baa      	cmp	r3, #170	; 0xaa
 80011e6:	d113      	bne.n	8001210 <USB_VCP_ReceiveCallback+0x18c>
                    packet[packet_index++] = byte;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	b291      	uxth	r1, r2
 80011f0:	4a13      	ldr	r2, [pc, #76]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 80011f2:	8011      	strh	r1, [r2, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	4a14      	ldr	r2, [pc, #80]	; (8001248 <USB_VCP_ReceiveCallback+0x1c4>)
 80011f8:	7afb      	ldrb	r3, [r7, #11]
 80011fa:	5453      	strb	r3, [r2, r1]

                    payload_len = payload_index;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <USB_VCP_ReceiveCallback+0x1c0>)
 80011fe:	881a      	ldrh	r2, [r3, #0]
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <USB_VCP_ReceiveCallback+0x1d8>)
 8001202:	801a      	strh	r2, [r3, #0]
                    packet_len = packet_index;
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 8001206:	881a      	ldrh	r2, [r3, #0]
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <USB_VCP_ReceiveCallback+0x1dc>)
 800120a:	801a      	strh	r2, [r3, #0]
                    process_packet();  // Validate and process the packet
 800120c:	f000 f856 	bl	80012bc <process_packet>
                }
                packet_state = WAIT_FOR_START;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
                break;
 8001216:	e002      	b.n	800121e <USB_VCP_ReceiveCallback+0x19a>
                break;
 8001218:	bf00      	nop
 800121a:	e000      	b.n	800121e <USB_VCP_ReceiveCallback+0x19a>
                break;
 800121c:	bf00      	nop
    for (uint32_t i = 0; i < *Len; i++) {
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3301      	adds	r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	429a      	cmp	r2, r3
 800122c:	f4ff af32 	bcc.w	8001094 <USB_VCP_ReceiveCallback+0x10>
        }
    }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200002e0 	.word	0x200002e0
 8001240:	200004de 	.word	0x200004de
 8001244:	200004e0 	.word	0x200004e0
 8001248:	200002e4 	.word	0x200002e4
 800124c:	200004e2 	.word	0x200004e2
 8001250:	200004e3 	.word	0x200004e3
 8001254:	200003e4 	.word	0x200003e4
 8001258:	200004e4 	.word	0x200004e4
 800125c:	200004f6 	.word	0x200004f6
 8001260:	200004f8 	.word	0x200004f8

08001264 <send_response_packet>:


static void send_response_packet(dfu_stat_t cmd, RESP_CODE response_code)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	460a      	mov	r2, r1
 800126e:	71fb      	strb	r3, [r7, #7]
 8001270:	4613      	mov	r3, r2
 8001272:	71bb      	strb	r3, [r7, #6]
	rep_packet_t resp;
	resp.start_byte = PACKET_START_MARKER;
 8001274:	2355      	movs	r3, #85	; 0x55
 8001276:	723b      	strb	r3, [r7, #8]
	resp.cmd = DFU_START;
 8001278:	2301      	movs	r3, #1
 800127a:	727b      	strb	r3, [r7, #9]
	resp.len = 0x01;
 800127c:	2301      	movs	r3, #1
 800127e:	72bb      	strb	r3, [r7, #10]
	resp.data = response_code;
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	72fb      	strb	r3, [r7, #11]
	resp.crc = calculate_crc16((uint8_t *)&resp,resp.len + 2 );
 8001284:	7abb      	ldrb	r3, [r7, #10]
 8001286:	b29b      	uxth	r3, r3
 8001288:	3302      	adds	r3, #2
 800128a:	b29a      	uxth	r2, r3
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff feb4 	bl	8001000 <calculate_crc16>
 8001298:	4603      	mov	r3, r0
 800129a:	81bb      	strh	r3, [r7, #12]
	resp.end_byte = PACKET_END_MARKER;
 800129c:	23aa      	movs	r3, #170	; 0xaa
 800129e:	73bb      	strb	r3, [r7, #14]
	CDC_Transmit_FS((uint8_t *)&resp,resp.len + 6);
 80012a0:	7abb      	ldrb	r3, [r7, #10]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3306      	adds	r3, #6
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f007 fa18 	bl	80086e4 <CDC_Transmit_FS>
}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <process_packet>:

void process_packet(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
    // Verify CRC
    uint16_t calculated_crc = calculate_crc16(packet + 1, len + 2);  // CMD + LEN + PAYLOAD
 80012c2:	4a64      	ldr	r2, [pc, #400]	; (8001454 <process_packet+0x198>)
 80012c4:	4b64      	ldr	r3, [pc, #400]	; (8001458 <process_packet+0x19c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	3302      	adds	r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4619      	mov	r1, r3
 80012d0:	4610      	mov	r0, r2
 80012d2:	f7ff fe95 	bl	8001000 <calculate_crc16>
 80012d6:	4603      	mov	r3, r0
 80012d8:	827b      	strh	r3, [r7, #18]
    if (received_crc != calculated_crc) {
 80012da:	4b60      	ldr	r3, [pc, #384]	; (800145c <process_packet+0x1a0>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	8a7a      	ldrh	r2, [r7, #18]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d007      	beq.n	80012f4 <process_packet+0x38>
    	printf("CRC check failed! Received: 0x%04X, Calculated: 0x%04X\n", received_crc, calculated_crc);
 80012e4:	4b5d      	ldr	r3, [pc, #372]	; (800145c <process_packet+0x1a0>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	8a7b      	ldrh	r3, [r7, #18]
 80012ec:	461a      	mov	r2, r3
 80012ee:	485c      	ldr	r0, [pc, #368]	; (8001460 <process_packet+0x1a4>)
 80012f0:	f008 fd70 	bl	8009dd4 <iprintf>
    }
	// Packet is valid, process it
	printf("Packet received successfully!\n");
 80012f4:	485b      	ldr	r0, [pc, #364]	; (8001464 <process_packet+0x1a8>)
 80012f6:	f008 fddb 	bl	8009eb0 <puts>
	printf("Command: 0x%02X\n", cmd);
 80012fa:	4b5b      	ldr	r3, [pc, #364]	; (8001468 <process_packet+0x1ac>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	485a      	ldr	r0, [pc, #360]	; (800146c <process_packet+0x1b0>)
 8001302:	f008 fd67 	bl	8009dd4 <iprintf>
	printf("Payload Length: %d\n", len);
 8001306:	4b54      	ldr	r3, [pc, #336]	; (8001458 <process_packet+0x19c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4619      	mov	r1, r3
 800130c:	4858      	ldr	r0, [pc, #352]	; (8001470 <process_packet+0x1b4>)
 800130e:	f008 fd61 	bl	8009dd4 <iprintf>
	printf("Payload: ");
 8001312:	4858      	ldr	r0, [pc, #352]	; (8001474 <process_packet+0x1b8>)
 8001314:	f008 fd5e 	bl	8009dd4 <iprintf>
	for (int i = 0; i < len; i++) {
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e00a      	b.n	8001334 <process_packet+0x78>
		printf("0x%02X ", payload[i]);
 800131e:	4a56      	ldr	r2, [pc, #344]	; (8001478 <process_packet+0x1bc>)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	4413      	add	r3, r2
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	4619      	mov	r1, r3
 8001328:	4854      	ldr	r0, [pc, #336]	; (800147c <process_packet+0x1c0>)
 800132a:	f008 fd53 	bl	8009dd4 <iprintf>
	for (int i = 0; i < len; i++) {
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	4b48      	ldr	r3, [pc, #288]	; (8001458 <process_packet+0x19c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	4293      	cmp	r3, r2
 800133e:	dbee      	blt.n	800131e <process_packet+0x62>
	}
	printf("\n");
 8001340:	200a      	movs	r0, #10
 8001342:	f008 fd59 	bl	8009df8 <putchar>
	/* process packet here */
	switch(cmd)
 8001346:	4b48      	ldr	r3, [pc, #288]	; (8001468 <process_packet+0x1ac>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	3b01      	subs	r3, #1
 800134c:	2b06      	cmp	r3, #6
 800134e:	d87b      	bhi.n	8001448 <process_packet+0x18c>
 8001350:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <process_packet+0x9c>)
 8001352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001356:	bf00      	nop
 8001358:	08001375 	.word	0x08001375
 800135c:	0800138b 	.word	0x0800138b
 8001360:	08001399 	.word	0x08001399
 8001364:	080013cb 	.word	0x080013cb
 8001368:	08001403 	.word	0x08001403
 800136c:	0800142b 	.word	0x0800142b
 8001370:	08001449 	.word	0x08001449
	{
		case DFU_START:
			printf("Start packet!\n");
 8001374:	4842      	ldr	r0, [pc, #264]	; (8001480 <process_packet+0x1c4>)
 8001376:	f008 fd9b 	bl	8009eb0 <puts>
			send_response_packet(DFU_START,DFU_OK);
 800137a:	2100      	movs	r1, #0
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff ff71 	bl	8001264 <send_response_packet>
			dfu_stat = DFU_ERASE_MEM;
 8001382:	4b40      	ldr	r3, [pc, #256]	; (8001484 <process_packet+0x1c8>)
 8001384:	2202      	movs	r2, #2
 8001386:	701a      	strb	r2, [r3, #0]
			break;
 8001388:	e05f      	b.n	800144a <process_packet+0x18e>

		case DFU_ERASE_MEM:
			/* erase flash sectors */
			spiflash_ChipErase();
 800138a:	f000 f9d5 	bl	8001738 <spiflash_ChipErase>
			send_response_packet(DFU_ERASE_MEM,DFU_OK);
 800138e:	2100      	movs	r1, #0
 8001390:	2002      	movs	r0, #2
 8001392:	f7ff ff67 	bl	8001264 <send_response_packet>
			break;
 8001396:	e058      	b.n	800144a <process_packet+0x18e>
		case DFU_HEADER:

			/*header[1] cmd[1] len[1] total fw size[4B], fw crc[2B], fw ver[4B] crc[2] footer[1] */
			fw_info_t fw_info;
			memcpy((uint8_t *)&fw_info, &payload, sizeof(fw_info_t));
 8001398:	4a37      	ldr	r2, [pc, #220]	; (8001478 <process_packet+0x1bc>)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	ca07      	ldmia	r2, {r0, r1, r2}
 800139e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			received_fw_len =0;
 80013a2:	4b39      	ldr	r3, [pc, #228]	; (8001488 <process_packet+0x1cc>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
			total_fw_len = fw_info.total_fw_size;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a38      	ldr	r2, [pc, #224]	; (800148c <process_packet+0x1d0>)
 80013ac:	6013      	str	r3, [r2, #0]
			fw_ver		 = fw_info.fw_ver;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4a37      	ldr	r2, [pc, #220]	; (8001490 <process_packet+0x1d4>)
 80013b2:	6013      	str	r3, [r2, #0]
			fw_crc		 = fw_info.fw_crc;
 80013b4:	893a      	ldrh	r2, [r7, #8]
 80013b6:	4b37      	ldr	r3, [pc, #220]	; (8001494 <process_packet+0x1d8>)
 80013b8:	801a      	strh	r2, [r3, #0]
			dfu_stat = DFU_DATA;
 80013ba:	4b32      	ldr	r3, [pc, #200]	; (8001484 <process_packet+0x1c8>)
 80013bc:	2204      	movs	r2, #4
 80013be:	701a      	strb	r2, [r3, #0]
			send_response_packet(DFU_HEADER,DFU_OK);
 80013c0:	2100      	movs	r1, #0
 80013c2:	2003      	movs	r0, #3
 80013c4:	f7ff ff4e 	bl	8001264 <send_response_packet>
			break;
 80013c8:	e03f      	b.n	800144a <process_packet+0x18e>
		case DFU_DATA:
			/* write payload in to memory */

			writeDataChunk(payload, payload_len);
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <process_packet+0x1dc>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	4619      	mov	r1, r3
 80013d0:	4829      	ldr	r0, [pc, #164]	; (8001478 <process_packet+0x1bc>)
 80013d2:	f000 f863 	bl	800149c <writeDataChunk>
			received_fw_len += payload_len;
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <process_packet+0x1dc>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <process_packet+0x1cc>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a29      	ldr	r2, [pc, #164]	; (8001488 <process_packet+0x1cc>)
 80013e4:	6013      	str	r3, [r2, #0]
			send_response_packet(DFU_START,received_fw_len > total_fw_len ? DFU_ERROR : DFU_OK);
 80013e6:	4b28      	ldr	r3, [pc, #160]	; (8001488 <process_packet+0x1cc>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b28      	ldr	r3, [pc, #160]	; (800148c <process_packet+0x1d0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	bf8c      	ite	hi
 80013f2:	2301      	movhi	r3, #1
 80013f4:	2300      	movls	r3, #0
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	4619      	mov	r1, r3
 80013fa:	2001      	movs	r0, #1
 80013fc:	f7ff ff32 	bl	8001264 <send_response_packet>
			break;
 8001400:	e023      	b.n	800144a <process_packet+0x18e>
		case DFU_END:
			uint8_t crc_check_ok=0;
 8001402:	2300      	movs	r3, #0
 8001404:	743b      	strb	r3, [r7, #16]
				/* perform a crc check here */

			}


			send_response_packet(DFU_DATA,received_fw_len == total_fw_len && crc_check_ok? DFU_OK:DFU_ERROR);
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <process_packet+0x1cc>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <process_packet+0x1d0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d102      	bne.n	8001418 <process_packet+0x15c>
 8001412:	7c3b      	ldrb	r3, [r7, #16]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <process_packet+0x160>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <process_packet+0x162>
 800141c:	2300      	movs	r3, #0
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4619      	mov	r1, r3
 8001422:	2004      	movs	r0, #4
 8001424:	f7ff ff1e 	bl	8001264 <send_response_packet>
			break;
 8001428:	e00f      	b.n	800144a <process_packet+0x18e>
		case DFU_UPDATE_FW:
			uint8_t checksumMatched=0;
 800142a:	2300      	movs	r3, #0
 800142c:	747b      	strb	r3, [r7, #17]
			/* copy firmware from flash memory to mcu mem */
			UpdateFirmware();
 800142e:	f000 f84f 	bl	80014d0 <UpdateFirmware>
			/* perform checksum here */
			send_response_packet(DFU_DATA,checksumMatched ? DFU_OK:DFU_ERROR);
 8001432:	7c7b      	ldrb	r3, [r7, #17]
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf0c      	ite	eq
 8001438:	2301      	moveq	r3, #1
 800143a:	2300      	movne	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4619      	mov	r1, r3
 8001440:	2004      	movs	r0, #4
 8001442:	f7ff ff0f 	bl	8001264 <send_response_packet>
			break;
 8001446:	e000      	b.n	800144a <process_packet+0x18e>
		case DFU_JUMP_TO_APP:
			break;

		default:
			break;
 8001448:	bf00      	nop
	}
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200002e5 	.word	0x200002e5
 8001458:	200004e3 	.word	0x200004e3
 800145c:	200004e4 	.word	0x200004e4
 8001460:	0800d878 	.word	0x0800d878
 8001464:	0800d8b0 	.word	0x0800d8b0
 8001468:	200004e2 	.word	0x200004e2
 800146c:	0800d8d0 	.word	0x0800d8d0
 8001470:	0800d8e4 	.word	0x0800d8e4
 8001474:	0800d8f8 	.word	0x0800d8f8
 8001478:	200003e4 	.word	0x200003e4
 800147c:	0800d904 	.word	0x0800d904
 8001480:	0800d90c 	.word	0x0800d90c
 8001484:	200004e6 	.word	0x200004e6
 8001488:	200004ec 	.word	0x200004ec
 800148c:	200004e8 	.word	0x200004e8
 8001490:	200004f0 	.word	0x200004f0
 8001494:	200004f4 	.word	0x200004f4
 8001498:	200004f6 	.word	0x200004f6

0800149c <writeDataChunk>:

void writeDataChunk(uint8_t *dat, uint16_t length)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]
	spiflash_WriteBuffer(dat, FW_ADDR_SPIFLASH + fw_index, length);
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <writeDataChunk+0x30>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	887a      	ldrh	r2, [r7, #2]
 80014ae:	4619      	mov	r1, r3
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f9db 	bl	800186c <spiflash_WriteBuffer>
	fw_index += length;
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <writeDataChunk+0x30>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	4a03      	ldr	r2, [pc, #12]	; (80014cc <writeDataChunk+0x30>)
 80014c0:	6013      	str	r3, [r2, #0]
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200004fc 	.word	0x200004fc

080014d0 <UpdateFirmware>:

void UpdateFirmware(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <spiflash_transfer>:
//};

#define LOG(...) printf(__VA_ARGS__)

static uint8_t spiflash_transfer(uint8_t tx)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
	uint8_t txdat [] = {tx,0x00};
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	733b      	strb	r3, [r7, #12]
 80014ee:	2300      	movs	r3, #0
 80014f0:	737b      	strb	r3, [r7, #13]
	HAL_SPI_TransmitReceive(&hspi1, &txdat[0], pRxData, 1, 500);
 80014f2:	f107 010c 	add.w	r1, r7, #12
 80014f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	2301      	movs	r3, #1
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <spiflash_transfer+0x34>)
 8001500:	4805      	ldr	r0, [pc, #20]	; (8001518 <spiflash_transfer+0x38>)
 8001502:	f003 fa31 	bl	8004968 <HAL_SPI_TransmitReceive>
	return pRxData[0];
 8001506:	4b03      	ldr	r3, [pc, #12]	; (8001514 <spiflash_transfer+0x34>)
 8001508:	781b      	ldrb	r3, [r3, #0]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000518 	.word	0x20000518
 8001518:	20000618 	.word	0x20000618

0800151c <spiflash_writeEnable>:

#define FLASH_CS(x) HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, x ? GPIO_PIN_SET: GPIO_PIN_RESET);

void spiflash_writeEnable(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
    FLASH_CS(0);
 8001520:	2200      	movs	r2, #0
 8001522:	2110      	movs	r1, #16
 8001524:	4806      	ldr	r0, [pc, #24]	; (8001540 <spiflash_writeEnable+0x24>)
 8001526:	f001 f8a1 	bl	800266c <HAL_GPIO_WritePin>
    spiflash_transfer(0x06);
 800152a:	2006      	movs	r0, #6
 800152c:	f7ff ffd8 	bl	80014e0 <spiflash_transfer>
    FLASH_CS(1);
 8001530:	2201      	movs	r2, #1
 8001532:	2110      	movs	r1, #16
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <spiflash_writeEnable+0x24>)
 8001536:	f001 f899 	bl	800266c <HAL_GPIO_WritePin>
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40020000 	.word	0x40020000

08001544 <ReadFlashStatus>:
    printf("dev_type: ");// println_hex(dev_type);
    printf("  dev_id: ");// println_hex(dev_id);
    FLASH_CS(1);
}

uint8_t ReadFlashStatus(void) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
    unsigned int flashStatus = 0x00;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
    FLASH_CS(0);
 800154e:	2200      	movs	r2, #0
 8001550:	2110      	movs	r1, #16
 8001552:	480b      	ldr	r0, [pc, #44]	; (8001580 <ReadFlashStatus+0x3c>)
 8001554:	f001 f88a 	bl	800266c <HAL_GPIO_WritePin>
    spiflash_transfer(0x05);
 8001558:	2005      	movs	r0, #5
 800155a:	f7ff ffc1 	bl	80014e0 <spiflash_transfer>
    flashStatus = spiflash_transfer(0x00);
 800155e:	2000      	movs	r0, #0
 8001560:	f7ff ffbe 	bl	80014e0 <spiflash_transfer>
 8001564:	4603      	mov	r3, r0
 8001566:	607b      	str	r3, [r7, #4]
    FLASH_CS(1);
 8001568:	2201      	movs	r2, #1
 800156a:	2110      	movs	r1, #16
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <ReadFlashStatus+0x3c>)
 800156e:	f001 f87d 	bl	800266c <HAL_GPIO_WritePin>
    return flashStatus;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	b2db      	uxtb	r3, r3
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40020000 	.word	0x40020000

08001584 <ClearBlockProtectSST1>:

void ClearBlockProtectSST1(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
    uint8_t flashStatus1 = 0x00;
 800158a:	2300      	movs	r3, #0
 800158c:	71fb      	strb	r3, [r7, #7]
    FLASH_CS(0);
 800158e:	2200      	movs	r2, #0
 8001590:	2110      	movs	r1, #16
 8001592:	481b      	ldr	r0, [pc, #108]	; (8001600 <ClearBlockProtectSST1+0x7c>)
 8001594:	f001 f86a 	bl	800266c <HAL_GPIO_WritePin>
    spiflash_transfer(0x05);
 8001598:	2005      	movs	r0, #5
 800159a:	f7ff ffa1 	bl	80014e0 <spiflash_transfer>
    flashStatus1 = spiflash_transfer(0x00);
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff ff9e 	bl	80014e0 <spiflash_transfer>
 80015a4:	4603      	mov	r3, r0
 80015a6:	71fb      	strb	r3, [r7, #7]
    FLASH_CS(1);
 80015a8:	2201      	movs	r2, #1
 80015aa:	2110      	movs	r1, #16
 80015ac:	4814      	ldr	r0, [pc, #80]	; (8001600 <ClearBlockProtectSST1+0x7c>)
 80015ae:	f001 f85d 	bl	800266c <HAL_GPIO_WritePin>

    //modify flashstatus to clear protect bits
    flashStatus1 &= 0xC3;
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 80015b8:	71fb      	strb	r3, [r7, #7]
    FLASH_CS(0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2110      	movs	r1, #16
 80015be:	4810      	ldr	r0, [pc, #64]	; (8001600 <ClearBlockProtectSST1+0x7c>)
 80015c0:	f001 f854 	bl	800266c <HAL_GPIO_WritePin>
    spiflash_transfer(0x50);
 80015c4:	2050      	movs	r0, #80	; 0x50
 80015c6:	f7ff ff8b 	bl	80014e0 <spiflash_transfer>
    FLASH_CS(1);
 80015ca:	2201      	movs	r2, #1
 80015cc:	2110      	movs	r1, #16
 80015ce:	480c      	ldr	r0, [pc, #48]	; (8001600 <ClearBlockProtectSST1+0x7c>)
 80015d0:	f001 f84c 	bl	800266c <HAL_GPIO_WritePin>
    FLASH_CS(0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2110      	movs	r1, #16
 80015d8:	4809      	ldr	r0, [pc, #36]	; (8001600 <ClearBlockProtectSST1+0x7c>)
 80015da:	f001 f847 	bl	800266c <HAL_GPIO_WritePin>
    spiflash_transfer(0x01);
 80015de:	2001      	movs	r0, #1
 80015e0:	f7ff ff7e 	bl	80014e0 <spiflash_transfer>
    spiflash_transfer(flashStatus1);
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff7a 	bl	80014e0 <spiflash_transfer>
    FLASH_CS(0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2110      	movs	r1, #16
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <ClearBlockProtectSST1+0x7c>)
 80015f2:	f001 f83b 	bl	800266c <HAL_GPIO_WritePin>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40020000 	.word	0x40020000

08001604 <ClearBlockProtect>:

void ClearBlockProtect(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
    unsigned char i = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	71fb      	strb	r3, [r7, #7]
    if (dev_type == 0x25) {
 800160e:	4b44      	ldr	r3, [pc, #272]	; (8001720 <ClearBlockProtect+0x11c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b25      	cmp	r3, #37	; 0x25
 8001614:	d102      	bne.n	800161c <ClearBlockProtect+0x18>
        ClearBlockProtectSST1();
 8001616:	f7ff ffb5 	bl	8001584 <ClearBlockProtectSST1>
        return;
 800161a:	e07d      	b.n	8001718 <ClearBlockProtect+0x114>
    }
    block_protection_10[0] = 0x00;
 800161c:	4b41      	ldr	r3, [pc, #260]	; (8001724 <ClearBlockProtect+0x120>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
    block_protection_10[1] = 0x00;
 8001622:	4b40      	ldr	r3, [pc, #256]	; (8001724 <ClearBlockProtect+0x120>)
 8001624:	2200      	movs	r2, #0
 8001626:	705a      	strb	r2, [r3, #1]
    block_protection_10[2] = 0x00;
 8001628:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <ClearBlockProtect+0x120>)
 800162a:	2200      	movs	r2, #0
 800162c:	709a      	strb	r2, [r3, #2]
    block_protection_10[3] = 0x00;
 800162e:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <ClearBlockProtect+0x120>)
 8001630:	2200      	movs	r2, #0
 8001632:	70da      	strb	r2, [r3, #3]
    block_protection_10[4] = 0x00;
 8001634:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <ClearBlockProtect+0x120>)
 8001636:	2200      	movs	r2, #0
 8001638:	711a      	strb	r2, [r3, #4]
    block_protection_10[5] = 0x00;
 800163a:	4b3a      	ldr	r3, [pc, #232]	; (8001724 <ClearBlockProtect+0x120>)
 800163c:	2200      	movs	r2, #0
 800163e:	715a      	strb	r2, [r3, #5]
    block_protection_10[6] = 0x00;
 8001640:	4b38      	ldr	r3, [pc, #224]	; (8001724 <ClearBlockProtect+0x120>)
 8001642:	2200      	movs	r2, #0
 8001644:	719a      	strb	r2, [r3, #6]
    block_protection_10[7] = 0x00;
 8001646:	4b37      	ldr	r3, [pc, #220]	; (8001724 <ClearBlockProtect+0x120>)
 8001648:	2200      	movs	r2, #0
 800164a:	71da      	strb	r2, [r3, #7]
    block_protection_10[8] = 0x00;
 800164c:	4b35      	ldr	r3, [pc, #212]	; (8001724 <ClearBlockProtect+0x120>)
 800164e:	2200      	movs	r2, #0
 8001650:	721a      	strb	r2, [r3, #8]
    block_protection_10[9] = 0x00;
 8001652:	4b34      	ldr	r3, [pc, #208]	; (8001724 <ClearBlockProtect+0x120>)
 8001654:	2200      	movs	r2, #0
 8001656:	725a      	strb	r2, [r3, #9]
    block_protection_10[10] = 0x00;
 8001658:	4b32      	ldr	r3, [pc, #200]	; (8001724 <ClearBlockProtect+0x120>)
 800165a:	2200      	movs	r2, #0
 800165c:	729a      	strb	r2, [r3, #10]
    block_protection_10[11] = 0x00;
 800165e:	4b31      	ldr	r3, [pc, #196]	; (8001724 <ClearBlockProtect+0x120>)
 8001660:	2200      	movs	r2, #0
 8001662:	72da      	strb	r2, [r3, #11]
    block_protection_10[12] = 0x00;
 8001664:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <ClearBlockProtect+0x120>)
 8001666:	2200      	movs	r2, #0
 8001668:	731a      	strb	r2, [r3, #12]
    block_protection_10[13] = 0x00;
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <ClearBlockProtect+0x120>)
 800166c:	2200      	movs	r2, #0
 800166e:	735a      	strb	r2, [r3, #13]
    block_protection_10[14] = 0x00;
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <ClearBlockProtect+0x120>)
 8001672:	2200      	movs	r2, #0
 8001674:	739a      	strb	r2, [r3, #14]
    block_protection_10[15] = 0x00;
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <ClearBlockProtect+0x120>)
 8001678:	2200      	movs	r2, #0
 800167a:	73da      	strb	r2, [r3, #15]
    block_protection_10[16] = 0x00;
 800167c:	4b29      	ldr	r3, [pc, #164]	; (8001724 <ClearBlockProtect+0x120>)
 800167e:	2200      	movs	r2, #0
 8001680:	741a      	strb	r2, [r3, #16]
    block_protection_10[17] = 0x00;
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <ClearBlockProtect+0x120>)
 8001684:	2200      	movs	r2, #0
 8001686:	745a      	strb	r2, [r3, #17]
    spiflash_writeEnable();
 8001688:	f7ff ff48 	bl	800151c <spiflash_writeEnable>
    FLASH_CS(0);
 800168c:	2200      	movs	r2, #0
 800168e:	2110      	movs	r1, #16
 8001690:	4825      	ldr	r0, [pc, #148]	; (8001728 <ClearBlockProtect+0x124>)
 8001692:	f000 ffeb 	bl	800266c <HAL_GPIO_WritePin>
    spiflash_transfer(0x42);
 8001696:	2042      	movs	r0, #66	; 0x42
 8001698:	f7ff ff22 	bl	80014e0 <spiflash_transfer>
    for (i = 18; i > 0; i--) {spiflash_transfer(block_protection_10[i - 1]);}
 800169c:	2312      	movs	r3, #18
 800169e:	71fb      	strb	r3, [r7, #7]
 80016a0:	e009      	b.n	80016b6 <ClearBlockProtect+0xb2>
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	4a1f      	ldr	r2, [pc, #124]	; (8001724 <ClearBlockProtect+0x120>)
 80016a8:	5cd3      	ldrb	r3, [r2, r3]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff18 	bl	80014e0 <spiflash_transfer>
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	71fb      	strb	r3, [r7, #7]
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f2      	bne.n	80016a2 <ClearBlockProtect+0x9e>
    FLASH_CS(1);
 80016bc:	2201      	movs	r2, #1
 80016be:	2110      	movs	r1, #16
 80016c0:	4819      	ldr	r0, [pc, #100]	; (8001728 <ClearBlockProtect+0x124>)
 80016c2:	f000 ffd3 	bl	800266c <HAL_GPIO_WritePin>

    //Florian's way for WINBOND
    if ((mfg_id == 0xEF) && (dev_type == 0x40) && (dev_id == 0x17)) {
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <ClearBlockProtect+0x128>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2bef      	cmp	r3, #239	; 0xef
 80016cc:	d124      	bne.n	8001718 <ClearBlockProtect+0x114>
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <ClearBlockProtect+0x11c>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b40      	cmp	r3, #64	; 0x40
 80016d4:	d120      	bne.n	8001718 <ClearBlockProtect+0x114>
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <ClearBlockProtect+0x12c>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b17      	cmp	r3, #23
 80016dc:	d11c      	bne.n	8001718 <ClearBlockProtect+0x114>
        spiflash_writeEnable();
 80016de:	f7ff ff1d 	bl	800151c <spiflash_writeEnable>
        FLASH_CS(0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2110      	movs	r1, #16
 80016e6:	4810      	ldr	r0, [pc, #64]	; (8001728 <ClearBlockProtect+0x124>)
 80016e8:	f000 ffc0 	bl	800266c <HAL_GPIO_WritePin>
        spiflash_transfer(0x01);
 80016ec:	2001      	movs	r0, #1
 80016ee:	f7ff fef7 	bl	80014e0 <spiflash_transfer>
        spiflash_transfer(0x00);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff fef4 	bl	80014e0 <spiflash_transfer>
        FLASH_CS(1);
 80016f8:	2201      	movs	r2, #1
 80016fa:	2110      	movs	r1, #16
 80016fc:	480a      	ldr	r0, [pc, #40]	; (8001728 <ClearBlockProtect+0x124>)
 80016fe:	f000 ffb5 	bl	800266c <HAL_GPIO_WritePin>
        while (ReadFlashStatus() & busyMask);
 8001702:	bf00      	nop
 8001704:	f7ff ff1e 	bl	8001544 <ReadFlashStatus>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <ClearBlockProtect+0x130>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4013      	ands	r3, r2
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f5      	bne.n	8001704 <ClearBlockProtect+0x100>
    }
}
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000501 	.word	0x20000501
 8001724:	20000504 	.word	0x20000504
 8001728:	40020000 	.word	0x40020000
 800172c:	20000500 	.word	0x20000500
 8001730:	20000502 	.word	0x20000502
 8001734:	20000516 	.word	0x20000516

08001738 <spiflash_ChipErase>:

void spiflash_ChipErase(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
    ClearBlockProtect();
 800173c:	f7ff ff62 	bl	8001604 <ClearBlockProtect>
    spiflash_writeEnable();
 8001740:	f7ff feec 	bl	800151c <spiflash_writeEnable>
    FLASH_CS(0);
 8001744:	2200      	movs	r2, #0
 8001746:	2110      	movs	r1, #16
 8001748:	4806      	ldr	r0, [pc, #24]	; (8001764 <spiflash_ChipErase+0x2c>)
 800174a:	f000 ff8f 	bl	800266c <HAL_GPIO_WritePin>
    spiflash_transfer(0xC7);
 800174e:	20c7      	movs	r0, #199	; 0xc7
 8001750:	f7ff fec6 	bl	80014e0 <spiflash_transfer>
    FLASH_CS(1);
 8001754:	2201      	movs	r2, #1
 8001756:	2110      	movs	r1, #16
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <spiflash_ChipErase+0x2c>)
 800175a:	f000 ff87 	bl	800266c <HAL_GPIO_WritePin>
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40020000 	.word	0x40020000

08001768 <spiflash_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void spiflash_WriteEnable(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
	uint8_t txData[1];

	txData[0] = FLASH_CMD_WREN;
 800176e:	2306      	movs	r3, #6
 8001770:	713b      	strb	r3, [r7, #4]

	/* Select the FLASH: Chip Select low */
	FLASH_CS(0);
 8001772:	2200      	movs	r2, #0
 8001774:	2110      	movs	r1, #16
 8001776:	4809      	ldr	r0, [pc, #36]	; (800179c <spiflash_WriteEnable+0x34>)
 8001778:	f000 ff78 	bl	800266c <HAL_GPIO_WritePin>

	/* Send "Write Enable" instruction */
	HAL_SPI_Transmit(&hspi1, txData, sizeof(txData), HAL_MAX_DELAY);
 800177c:	1d39      	adds	r1, r7, #4
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	2201      	movs	r2, #1
 8001784:	4806      	ldr	r0, [pc, #24]	; (80017a0 <spiflash_WriteEnable+0x38>)
 8001786:	f002 fe94 	bl	80044b2 <HAL_SPI_Transmit>

	/* Deselect the FLASH: Chip Select high */
	FLASH_CS(1);
 800178a:	2201      	movs	r2, #1
 800178c:	2110      	movs	r1, #16
 800178e:	4803      	ldr	r0, [pc, #12]	; (800179c <spiflash_WriteEnable+0x34>)
 8001790:	f000 ff6c 	bl	800266c <HAL_GPIO_WritePin>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40020000 	.word	0x40020000
 80017a0:	20000618 	.word	0x20000618

080017a4 <spiflash_WaitForWriteEnd>:
  *         status register and loop until write operation has completed.
  * @param  None
  * @retval None
  */
void spiflash_WaitForWriteEnd(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
	uint8_t txData[1];
	uint8_t rxData[1];

	txData[0] = FLASH_CMD_RDSR;
 80017aa:	2305      	movs	r3, #5
 80017ac:	713b      	strb	r3, [r7, #4]

	/* Select the FLASH: Chip Select low */
	FLASH_CS(0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2110      	movs	r1, #16
 80017b2:	480f      	ldr	r0, [pc, #60]	; (80017f0 <spiflash_WaitForWriteEnd+0x4c>)
 80017b4:	f000 ff5a 	bl	800266c <HAL_GPIO_WritePin>

	/* Send "Read Status Register" instruction */
	HAL_SPI_Transmit(&hspi1, txData, sizeof(txData), HAL_MAX_DELAY);
 80017b8:	1d39      	adds	r1, r7, #4
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	2201      	movs	r2, #1
 80017c0:	480c      	ldr	r0, [pc, #48]	; (80017f4 <spiflash_WaitForWriteEnd+0x50>)
 80017c2:	f002 fe76 	bl	80044b2 <HAL_SPI_Transmit>

	/* Loop as long as the memory is busy with a write cycle */
	do
	{
		/* Receive "Read Status Register" value */
		HAL_SPI_Receive(&hspi1, rxData, sizeof(rxData), HAL_MAX_DELAY);
 80017c6:	4639      	mov	r1, r7
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
 80017cc:	2201      	movs	r2, #1
 80017ce:	4809      	ldr	r0, [pc, #36]	; (80017f4 <spiflash_WaitForWriteEnd+0x50>)
 80017d0:	f002 ffb2 	bl	8004738 <HAL_SPI_Receive>
	}
	while ((rxData[0] & FLASH_WIP_MASK) == FLASH_WIP_MASK); /* Write in progress */
 80017d4:	783b      	ldrb	r3, [r7, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f3      	bne.n	80017c6 <spiflash_WaitForWriteEnd+0x22>

	/* Deselect the FLASH: Chip Select high */
	FLASH_CS(1);
 80017de:	2201      	movs	r2, #1
 80017e0:	2110      	movs	r1, #16
 80017e2:	4803      	ldr	r0, [pc, #12]	; (80017f0 <spiflash_WaitForWriteEnd+0x4c>)
 80017e4:	f000 ff42 	bl	800266c <HAL_GPIO_WritePin>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40020000 	.word	0x40020000
 80017f4:	20000618 	.word	0x20000618

080017f8 <spiflash_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "FLASH_PAGESIZE" value.
  * @retval None
  */
void spiflash_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint32_t NumByteToWrite)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
	uint8_t txData[4];

	txData[0] = FLASH_CMD_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	753b      	strb	r3, [r7, #20]
	txData[1] = (WriteAddr & 0xFF0000) >> 16;	/* high nibble address byte to write to */
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	b2db      	uxtb	r3, r3
 800180e:	757b      	strb	r3, [r7, #21]
	txData[2] = (WriteAddr & 0xFF00) >> 8;		/* medium nibble address byte to write to */
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	b2db      	uxtb	r3, r3
 8001816:	75bb      	strb	r3, [r7, #22]
	txData[3] = WriteAddr & 0xFF;				/* low nibble address byte to write to */
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	75fb      	strb	r3, [r7, #23]

	/* Enable the write access to the FLASH */
	spiflash_WriteEnable();
 800181e:	f7ff ffa3 	bl	8001768 <spiflash_WriteEnable>

	/* Select the FLASH: Chip Select low */
	FLASH_CS(0);
 8001822:	2200      	movs	r2, #0
 8001824:	2110      	movs	r1, #16
 8001826:	480f      	ldr	r0, [pc, #60]	; (8001864 <spiflash_WritePage+0x6c>)
 8001828:	f000 ff20 	bl	800266c <HAL_GPIO_WritePin>

	/* Send "Write to Memory " instruction */
	HAL_SPI_Transmit(&hspi1, txData, sizeof(txData), HAL_MAX_DELAY);
 800182c:	f107 0114 	add.w	r1, r7, #20
 8001830:	f04f 33ff 	mov.w	r3, #4294967295
 8001834:	2204      	movs	r2, #4
 8001836:	480c      	ldr	r0, [pc, #48]	; (8001868 <spiflash_WritePage+0x70>)
 8001838:	f002 fe3b 	bl	80044b2 <HAL_SPI_Transmit>

	/* Send data */
	HAL_SPI_Transmit(&hspi1, pBuffer, NumByteToWrite, HAL_MAX_DELAY);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	b29a      	uxth	r2, r3
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
 8001844:	68f9      	ldr	r1, [r7, #12]
 8001846:	4808      	ldr	r0, [pc, #32]	; (8001868 <spiflash_WritePage+0x70>)
 8001848:	f002 fe33 	bl	80044b2 <HAL_SPI_Transmit>

	/* Deselect the FLASH: Chip Select high */
	FLASH_CS(1);
 800184c:	2201      	movs	r2, #1
 800184e:	2110      	movs	r1, #16
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <spiflash_WritePage+0x6c>)
 8001852:	f000 ff0b 	bl	800266c <HAL_GPIO_WritePin>

	/* Wait the end of Flash writing */
	spiflash_WaitForWriteEnd();
 8001856:	f7ff ffa5 	bl	80017a4 <spiflash_WaitForWriteEnd>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40020000 	.word	0x40020000
 8001868:	20000618 	.word	0x20000618

0800186c <spiflash_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void spiflash_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint32_t NumByteToWrite)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
	uint32_t NumOfPage = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t NumOfSingle = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
	uint32_t Addr = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
	uint32_t count = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	61bb      	str	r3, [r7, #24]
	uint32_t temp = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

	Addr = WriteAddr % FLASH_SPI_PAGE_SIZE;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	61fb      	str	r3, [r7, #28]
	count = FLASH_SPI_PAGE_SIZE - Addr;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001898:	61bb      	str	r3, [r7, #24]
	NumOfPage =  NumByteToWrite / FLASH_SPI_PAGE_SIZE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
	NumOfSingle = NumByteToWrite % FLASH_SPI_PAGE_SIZE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	623b      	str	r3, [r7, #32]

	if (Addr == 0) /* WriteAddr is FLASH_PAGESIZE aligned  */
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d121      	bne.n	80018f0 <spiflash_WriteBuffer+0x84>
	{
		if (NumOfPage == 0) /* NumByteToWrite < FLASH_PAGESIZE */
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d113      	bne.n	80018da <spiflash_WriteBuffer+0x6e>
		{
			spiflash_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f7ff ff9e 	bl	80017f8 <spiflash_WritePage>
			{
				spiflash_WritePage(pBuffer, WriteAddr, NumOfSingle);
			}
		}
	}
}
 80018bc:	e06f      	b.n	800199e <spiflash_WriteBuffer+0x132>
				spiflash_WritePage(pBuffer, WriteAddr, FLASH_SPI_PAGE_SIZE);
 80018be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018c2:	68b9      	ldr	r1, [r7, #8]
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f7ff ff97 	bl	80017f8 <spiflash_WritePage>
				WriteAddr +=  FLASH_SPI_PAGE_SIZE;
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80018d0:	60bb      	str	r3, [r7, #8]
				pBuffer += FLASH_SPI_PAGE_SIZE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80018d8:	60fb      	str	r3, [r7, #12]
			while (NumOfPage--)
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	1e5a      	subs	r2, r3, #1
 80018de:	627a      	str	r2, [r7, #36]	; 0x24
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ec      	bne.n	80018be <spiflash_WriteBuffer+0x52>
			spiflash_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80018e4:	6a3a      	ldr	r2, [r7, #32]
 80018e6:	68b9      	ldr	r1, [r7, #8]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f7ff ff85 	bl	80017f8 <spiflash_WritePage>
}
 80018ee:	e056      	b.n	800199e <spiflash_WriteBuffer+0x132>
		if (NumOfPage == 0) /* NumByteToWrite < FLASH_PAGESIZE */
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d120      	bne.n	8001938 <spiflash_WriteBuffer+0xcc>
			if (NumOfSingle > count) /* (NumByteToWrite + WriteAddr) > FLASH_PAGESIZE */
 80018f6:	6a3a      	ldr	r2, [r7, #32]
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d916      	bls.n	800192c <spiflash_WriteBuffer+0xc0>
				temp = NumOfSingle - count;
 80018fe:	6a3a      	ldr	r2, [r7, #32]
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	617b      	str	r3, [r7, #20]
				spiflash_WritePage(pBuffer, WriteAddr, count);
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f7ff ff74 	bl	80017f8 <spiflash_WritePage>
				WriteAddr +=  count;
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4413      	add	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
				pBuffer += count;
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	4413      	add	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
				spiflash_WritePage(pBuffer, WriteAddr, temp);
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	68b9      	ldr	r1, [r7, #8]
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f7ff ff67 	bl	80017f8 <spiflash_WritePage>
}
 800192a:	e038      	b.n	800199e <spiflash_WriteBuffer+0x132>
				spiflash_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	68b9      	ldr	r1, [r7, #8]
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f7ff ff61 	bl	80017f8 <spiflash_WritePage>
}
 8001936:	e032      	b.n	800199e <spiflash_WriteBuffer+0x132>
			NumByteToWrite -= count;
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	607b      	str	r3, [r7, #4]
			NumOfPage =  NumByteToWrite / FLASH_SPI_PAGE_SIZE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	0a1b      	lsrs	r3, r3, #8
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
			NumOfSingle = NumByteToWrite % FLASH_SPI_PAGE_SIZE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	623b      	str	r3, [r7, #32]
			spiflash_WritePage(pBuffer, WriteAddr, count);
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	68b9      	ldr	r1, [r7, #8]
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f7ff ff51 	bl	80017f8 <spiflash_WritePage>
			WriteAddr +=  count;
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	4413      	add	r3, r2
 800195c:	60bb      	str	r3, [r7, #8]
			pBuffer += count;
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
			while (NumOfPage--)
 8001966:	e00d      	b.n	8001984 <spiflash_WriteBuffer+0x118>
				spiflash_WritePage(pBuffer, WriteAddr, FLASH_SPI_PAGE_SIZE);
 8001968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f7ff ff42 	bl	80017f8 <spiflash_WritePage>
				WriteAddr +=  FLASH_SPI_PAGE_SIZE;
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800197a:	60bb      	str	r3, [r7, #8]
				pBuffer += FLASH_SPI_PAGE_SIZE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001982:	60fb      	str	r3, [r7, #12]
			while (NumOfPage--)
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	1e5a      	subs	r2, r3, #1
 8001988:	627a      	str	r2, [r7, #36]	; 0x24
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1ec      	bne.n	8001968 <spiflash_WriteBuffer+0xfc>
			if (NumOfSingle != 0)
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d004      	beq.n	800199e <spiflash_WriteBuffer+0x132>
				spiflash_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8001994:	6a3a      	ldr	r2, [r7, #32]
 8001996:	68b9      	ldr	r1, [r7, #8]
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff ff2d 	bl	80017f8 <spiflash_WritePage>
}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <__io_putchar>:
#endif /* __GNUC__ */
#define DBG_BUFF_LEN 64
char dbg_buff[DBG_BUFF_LEN];
uint8_t dbg_buff_idx;
PUTCHAR_PROTOTYPE
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	if(dbg_buff_idx<DBG_BUFF_LEN)
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <__io_putchar+0x48>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b3f      	cmp	r3, #63	; 0x3f
 80019b6:	d80a      	bhi.n	80019ce <__io_putchar+0x26>
	{
		dbg_buff[dbg_buff_idx++] = ch;
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <__io_putchar+0x48>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	b2d1      	uxtb	r1, r2
 80019c0:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <__io_putchar+0x48>)
 80019c2:	7011      	strb	r1, [r2, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	b2d9      	uxtb	r1, r3
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <__io_putchar+0x4c>)
 80019cc:	5499      	strb	r1, [r3, r2]
	}

	if(ch == '\n' || ch == '\r')
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0a      	cmp	r3, #10
 80019d2:	d002      	beq.n	80019da <__io_putchar+0x32>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b0d      	cmp	r3, #13
 80019d8:	d102      	bne.n	80019e0 <__io_putchar+0x38>
	{
	  //CDC_Transmit_FS((uint8_t *)&dbg_buff[0], dbg_buff_idx);
	  dbg_buff_idx=0;
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <__io_putchar+0x48>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
	}
	return ch;
 80019e0:	687b      	ldr	r3, [r7, #4]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	200006b0 	.word	0x200006b0
 80019f4:	20000670 	.word	0x20000670

080019f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019fc:	f000 fb0a 	bl	8002014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a00:	f000 f81c 	bl	8001a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a04:	f000 f8b8 	bl	8001b78 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001a08:	f000 f880 	bl	8001b0c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001a0c:	f006 fda8 	bl	8008560 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //printf("I am Mayank Patel. How are you?\n");

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a16:	4808      	ldr	r0, [pc, #32]	; (8001a38 <main+0x40>)
 8001a18:	f000 fe28 	bl	800266c <HAL_GPIO_WritePin>
	  HAL_Delay(35);
 8001a1c:	2023      	movs	r0, #35	; 0x23
 8001a1e:	f000 fb6b 	bl	80020f8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a28:	4803      	ldr	r0, [pc, #12]	; (8001a38 <main+0x40>)
 8001a2a:	f000 fe1f 	bl	800266c <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 8001a2e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a32:	f000 fb61 	bl	80020f8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a36:	e7eb      	b.n	8001a10 <main+0x18>
 8001a38:	40020800 	.word	0x40020800

08001a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b094      	sub	sp, #80	; 0x50
 8001a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a42:	f107 0320 	add.w	r3, r7, #32
 8001a46:	2230      	movs	r2, #48	; 0x30
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f008 fb30 	bl	800a0b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <SystemClock_Config+0xc8>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	4a26      	ldr	r2, [pc, #152]	; (8001b04 <SystemClock_Config+0xc8>)
 8001a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <SystemClock_Config+0xc8>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <SystemClock_Config+0xcc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a20      	ldr	r2, [pc, #128]	; (8001b08 <SystemClock_Config+0xcc>)
 8001a86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <SystemClock_Config+0xcc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001aac:	2319      	movs	r3, #25
 8001aae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001ab0:	23c0      	movs	r3, #192	; 0xc0
 8001ab2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001ab4:	2306      	movs	r3, #6
 8001ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ab8:	2304      	movs	r3, #4
 8001aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001abc:	f107 0320 	add.w	r3, r7, #32
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 f83d 	bl	8003b40 <HAL_RCC_OscConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001acc:	f000 f8d6 	bl	8001c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad0:	230f      	movs	r3, #15
 8001ad2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 faa0 	bl	8004030 <HAL_RCC_ClockConfig>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001af6:	f000 f8c1 	bl	8001c7c <Error_Handler>
  }
}
 8001afa:	bf00      	nop
 8001afc:	3750      	adds	r7, #80	; 0x50
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40007000 	.word	0x40007000

08001b0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b12:	4a18      	ldr	r2, [pc, #96]	; (8001b74 <MX_SPI1_Init+0x68>)
 8001b14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b58:	220a      	movs	r2, #10
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b5e:	f002 fc1f 	bl	80043a0 <HAL_SPI_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b68:	f000 f888 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000618 	.word	0x20000618
 8001b74:	40013000 	.word	0x40013000

08001b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <MX_GPIO_Init+0xf8>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a36      	ldr	r2, [pc, #216]	; (8001c70 <MX_GPIO_Init+0xf8>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <MX_GPIO_Init+0xf8>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <MX_GPIO_Init+0xf8>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a2f      	ldr	r2, [pc, #188]	; (8001c70 <MX_GPIO_Init+0xf8>)
 8001bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <MX_GPIO_Init+0xf8>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <MX_GPIO_Init+0xf8>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a28      	ldr	r2, [pc, #160]	; (8001c70 <MX_GPIO_Init+0xf8>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <MX_GPIO_Init+0xf8>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <MX_GPIO_Init+0xf8>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a21      	ldr	r2, [pc, #132]	; (8001c70 <MX_GPIO_Init+0xf8>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <MX_GPIO_Init+0xf8>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c04:	481b      	ldr	r0, [pc, #108]	; (8001c74 <MX_GPIO_Init+0xfc>)
 8001c06:	f000 fd31 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2110      	movs	r1, #16
 8001c0e:	481a      	ldr	r0, [pc, #104]	; (8001c78 <MX_GPIO_Init+0x100>)
 8001c10:	f000 fd2c 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4811      	ldr	r0, [pc, #68]	; (8001c74 <MX_GPIO_Init+0xfc>)
 8001c2e:	f000 fb99 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001c32:	2301      	movs	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <MX_GPIO_Init+0x100>)
 8001c46:	f000 fb8d 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001c4a:	2310      	movs	r3, #16
 8001c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_GPIO_Init+0x100>)
 8001c62:	f000 fb7f 	bl	8002364 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c66:	bf00      	nop
 8001c68:	3728      	adds	r7, #40	; 0x28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020800 	.word	0x40020800
 8001c78:	40020000 	.word	0x40020000

08001c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c80:	b672      	cpsid	i
}
 8001c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <Error_Handler+0x8>
	...

08001c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a0f      	ldr	r2, [pc, #60]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800

08001cd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	; 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a28      	ldr	r2, [pc, #160]	; (8001d98 <HAL_SPI_MspInit+0xc0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d149      	bne.n	8001d8e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HAL_SPI_MspInit+0xc4>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a26      	ldr	r2, [pc, #152]	; (8001d9c <HAL_SPI_MspInit+0xc4>)
 8001d04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <HAL_SPI_MspInit+0xc4>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <HAL_SPI_MspInit+0xc4>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a1f      	ldr	r2, [pc, #124]	; (8001d9c <HAL_SPI_MspInit+0xc4>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HAL_SPI_MspInit+0xc4>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_SPI_MspInit+0xc4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <HAL_SPI_MspInit+0xc4>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_SPI_MspInit+0xc4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d4e:	23a0      	movs	r3, #160	; 0xa0
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d5e:	2305      	movs	r3, #5
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	480d      	ldr	r0, [pc, #52]	; (8001da0 <HAL_SPI_MspInit+0xc8>)
 8001d6a:	f000 fafb 	bl	8002364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d6e:	2310      	movs	r3, #16
 8001d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d7e:	2305      	movs	r3, #5
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4619      	mov	r1, r3
 8001d88:	4806      	ldr	r0, [pc, #24]	; (8001da4 <HAL_SPI_MspInit+0xcc>)
 8001d8a:	f000 faeb 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d8e:	bf00      	nop
 8001d90:	3728      	adds	r7, #40	; 0x28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40013000 	.word	0x40013000
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020400 	.word	0x40020400

08001da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dac:	e7fe      	b.n	8001dac <NMI_Handler+0x4>

08001dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <HardFault_Handler+0x4>

08001db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <MemManage_Handler+0x4>

08001dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dbe:	e7fe      	b.n	8001dbe <BusFault_Handler+0x4>

08001dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <UsageFault_Handler+0x4>

08001dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df4:	f000 f960 	bl	80020b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <OTG_FS_IRQHandler+0x10>)
 8001e02:	f000 fd90 	bl	8002926 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20001b9c 	.word	0x20001b9c

08001e10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return 1;
 8001e14:	2301      	movs	r3, #1
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <_kill>:

int _kill(int pid, int sig)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e2a:	f008 f993 	bl	800a154 <__errno>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2216      	movs	r2, #22
 8001e32:	601a      	str	r2, [r3, #0]
  return -1;
 8001e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <_exit>:

void _exit (int status)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ffe7 	bl	8001e20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e52:	e7fe      	b.n	8001e52 <_exit+0x12>

08001e54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	e00a      	b.n	8001e7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e66:	f3af 8000 	nop.w
 8001e6a:	4601      	mov	r1, r0
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	60ba      	str	r2, [r7, #8]
 8001e72:	b2ca      	uxtb	r2, r1
 8001e74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	dbf0      	blt.n	8001e66 <_read+0x12>
  }

  return len;
 8001e84:	687b      	ldr	r3, [r7, #4]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	e009      	b.n	8001eb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	60ba      	str	r2, [r7, #8]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fd7d 	bl	80019a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	dbf1      	blt.n	8001ea0 <_write+0x12>
  }
  return len;
 8001ebc:	687b      	ldr	r3, [r7, #4]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <_close>:

int _close(int file)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eee:	605a      	str	r2, [r3, #4]
  return 0;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <_isatty>:

int _isatty(int file)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f38:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <_sbrk+0x5c>)
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <_sbrk+0x60>)
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f44:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <_sbrk+0x64>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d102      	bne.n	8001f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <_sbrk+0x64>)
 8001f4e:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <_sbrk+0x68>)
 8001f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <_sbrk+0x64>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d207      	bcs.n	8001f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f60:	f008 f8f8 	bl	800a154 <__errno>
 8001f64:	4603      	mov	r3, r0
 8001f66:	220c      	movs	r2, #12
 8001f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6e:	e009      	b.n	8001f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <_sbrk+0x64>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <_sbrk+0x64>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <_sbrk+0x64>)
 8001f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f82:	68fb      	ldr	r3, [r7, #12]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20020000 	.word	0x20020000
 8001f90:	00000400 	.word	0x00000400
 8001f94:	200006b4 	.word	0x200006b4
 8001f98:	200023f0 	.word	0x200023f0

08001f9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <SystemInit+0x20>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <SystemInit+0x20>)
 8001fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fc4:	f7ff ffea 	bl	8001f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc8:	480c      	ldr	r0, [pc, #48]	; (8001ffc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fca:	490d      	ldr	r1, [pc, #52]	; (8002000 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	; (8002004 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd0:	e002      	b.n	8001fd8 <LoopCopyDataInit>

08001fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd6:	3304      	adds	r3, #4

08001fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fdc:	d3f9      	bcc.n	8001fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fe0:	4c0a      	ldr	r4, [pc, #40]	; (800200c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe4:	e001      	b.n	8001fea <LoopFillZerobss>

08001fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe8:	3204      	adds	r2, #4

08001fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fec:	d3fb      	bcc.n	8001fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fee:	f008 f8b7 	bl	800a160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ff2:	f7ff fd01 	bl	80019f8 <main>
  bx  lr    
 8001ff6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ff8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002000:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8002004:	0800ddb0 	.word	0x0800ddb0
  ldr r2, =_sbss
 8002008:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 800200c:	200023ec 	.word	0x200023ec

08002010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002010:	e7fe      	b.n	8002010 <ADC_IRQHandler>
	...

08002014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002018:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_Init+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0d      	ldr	r2, [pc, #52]	; (8002054 <HAL_Init+0x40>)
 800201e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002022:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_Init+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <HAL_Init+0x40>)
 800202a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800202e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <HAL_Init+0x40>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a07      	ldr	r2, [pc, #28]	; (8002054 <HAL_Init+0x40>)
 8002036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800203c:	2003      	movs	r0, #3
 800203e:	f000 f94f 	bl	80022e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002042:	200f      	movs	r0, #15
 8002044:	f000 f808 	bl	8002058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002048:	f7ff fe1e 	bl	8001c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023c00 	.word	0x40023c00

08002058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002060:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_InitTick+0x54>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_InitTick+0x58>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800206e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002072:	fbb2 f3f3 	udiv	r3, r2, r3
 8002076:	4618      	mov	r0, r3
 8002078:	f000 f967 	bl	800234a <HAL_SYSTICK_Config>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e00e      	b.n	80020a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b0f      	cmp	r3, #15
 800208a:	d80a      	bhi.n	80020a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800208c:	2200      	movs	r2, #0
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f000 f92f 	bl	80022f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002098:	4a06      	ldr	r2, [pc, #24]	; (80020b4 <HAL_InitTick+0x5c>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	e000      	b.n	80020a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000000 	.word	0x20000000
 80020b0:	20000008 	.word	0x20000008
 80020b4:	20000004 	.word	0x20000004

080020b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_IncTick+0x20>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_IncTick+0x24>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	4a04      	ldr	r2, [pc, #16]	; (80020dc <HAL_IncTick+0x24>)
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000008 	.word	0x20000008
 80020dc:	200006b8 	.word	0x200006b8

080020e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return uwTick;
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_GetTick+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	200006b8 	.word	0x200006b8

080020f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002100:	f7ff ffee 	bl	80020e0 <HAL_GetTick>
 8002104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d005      	beq.n	800211e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_Delay+0x44>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800211e:	bf00      	nop
 8002120:	f7ff ffde 	bl	80020e0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	429a      	cmp	r2, r3
 800212e:	d8f7      	bhi.n	8002120 <HAL_Delay+0x28>
  {
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000008 	.word	0x20000008

08002140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800215c:	4013      	ands	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800216c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002172:	4a04      	ldr	r2, [pc, #16]	; (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	60d3      	str	r3, [r2, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <__NVIC_GetPriorityGrouping+0x18>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	f003 0307 	and.w	r3, r3, #7
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	db0b      	blt.n	80021ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	f003 021f 	and.w	r2, r3, #31
 80021bc:	4907      	ldr	r1, [pc, #28]	; (80021dc <__NVIC_EnableIRQ+0x38>)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	2001      	movs	r0, #1
 80021c6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000e100 	.word	0xe000e100

080021e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	db0a      	blt.n	800220a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	490c      	ldr	r1, [pc, #48]	; (800222c <__NVIC_SetPriority+0x4c>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	440b      	add	r3, r1
 8002204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002208:	e00a      	b.n	8002220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4908      	ldr	r1, [pc, #32]	; (8002230 <__NVIC_SetPriority+0x50>)
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3b04      	subs	r3, #4
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	440b      	add	r3, r1
 800221e:	761a      	strb	r2, [r3, #24]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000e100 	.word	0xe000e100
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f1c3 0307 	rsb	r3, r3, #7
 800224e:	2b04      	cmp	r3, #4
 8002250:	bf28      	it	cs
 8002252:	2304      	movcs	r3, #4
 8002254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3304      	adds	r3, #4
 800225a:	2b06      	cmp	r3, #6
 800225c:	d902      	bls.n	8002264 <NVIC_EncodePriority+0x30>
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3b03      	subs	r3, #3
 8002262:	e000      	b.n	8002266 <NVIC_EncodePriority+0x32>
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	f04f 32ff 	mov.w	r2, #4294967295
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	401a      	ands	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800227c:	f04f 31ff 	mov.w	r1, #4294967295
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fa01 f303 	lsl.w	r3, r1, r3
 8002286:	43d9      	mvns	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	4313      	orrs	r3, r2
         );
}
 800228e:	4618      	mov	r0, r3
 8002290:	3724      	adds	r7, #36	; 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ac:	d301      	bcc.n	80022b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00f      	b.n	80022d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <SysTick_Config+0x40>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ba:	210f      	movs	r1, #15
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f7ff ff8e 	bl	80021e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <SysTick_Config+0x40>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <SysTick_Config+0x40>)
 80022cc:	2207      	movs	r2, #7
 80022ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	e000e010 	.word	0xe000e010

080022e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff29 	bl	8002140 <__NVIC_SetPriorityGrouping>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b086      	sub	sp, #24
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002308:	f7ff ff3e 	bl	8002188 <__NVIC_GetPriorityGrouping>
 800230c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7ff ff8e 	bl	8002234 <NVIC_EncodePriority>
 8002318:	4602      	mov	r2, r0
 800231a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff5d 	bl	80021e0 <__NVIC_SetPriority>
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff31 	bl	80021a4 <__NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ffa2 	bl	800229c <SysTick_Config>
 8002358:	4603      	mov	r3, r0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	e159      	b.n	8002634 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	429a      	cmp	r2, r3
 800239a:	f040 8148 	bne.w	800262e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d005      	beq.n	80023b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d130      	bne.n	8002418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ec:	2201      	movs	r2, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 0201 	and.w	r2, r3, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b03      	cmp	r3, #3
 8002422:	d017      	beq.n	8002454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d123      	bne.n	80024a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	08da      	lsrs	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3208      	adds	r2, #8
 8002468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	220f      	movs	r2, #15
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	69b9      	ldr	r1, [r7, #24]
 80024a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0203 	and.w	r2, r3, #3
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80a2 	beq.w	800262e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b57      	ldr	r3, [pc, #348]	; (800264c <HAL_GPIO_Init+0x2e8>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	4a56      	ldr	r2, [pc, #344]	; (800264c <HAL_GPIO_Init+0x2e8>)
 80024f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f8:	6453      	str	r3, [r2, #68]	; 0x44
 80024fa:	4b54      	ldr	r3, [pc, #336]	; (800264c <HAL_GPIO_Init+0x2e8>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002506:	4a52      	ldr	r2, [pc, #328]	; (8002650 <HAL_GPIO_Init+0x2ec>)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a49      	ldr	r2, [pc, #292]	; (8002654 <HAL_GPIO_Init+0x2f0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d019      	beq.n	8002566 <HAL_GPIO_Init+0x202>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a48      	ldr	r2, [pc, #288]	; (8002658 <HAL_GPIO_Init+0x2f4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x1fe>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a47      	ldr	r2, [pc, #284]	; (800265c <HAL_GPIO_Init+0x2f8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x1fa>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a46      	ldr	r2, [pc, #280]	; (8002660 <HAL_GPIO_Init+0x2fc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x1f6>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a45      	ldr	r2, [pc, #276]	; (8002664 <HAL_GPIO_Init+0x300>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x1f2>
 8002552:	2304      	movs	r3, #4
 8002554:	e008      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002556:	2307      	movs	r3, #7
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x204>
 800255a:	2303      	movs	r3, #3
 800255c:	e004      	b.n	8002568 <HAL_GPIO_Init+0x204>
 800255e:	2302      	movs	r3, #2
 8002560:	e002      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002566:	2300      	movs	r3, #0
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	f002 0203 	and.w	r2, r2, #3
 800256e:	0092      	lsls	r2, r2, #2
 8002570:	4093      	lsls	r3, r2
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002578:	4935      	ldr	r1, [pc, #212]	; (8002650 <HAL_GPIO_Init+0x2ec>)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3302      	adds	r3, #2
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002586:	4b38      	ldr	r3, [pc, #224]	; (8002668 <HAL_GPIO_Init+0x304>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025aa:	4a2f      	ldr	r2, [pc, #188]	; (8002668 <HAL_GPIO_Init+0x304>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b0:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <HAL_GPIO_Init+0x304>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d4:	4a24      	ldr	r2, [pc, #144]	; (8002668 <HAL_GPIO_Init+0x304>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025da:	4b23      	ldr	r3, [pc, #140]	; (8002668 <HAL_GPIO_Init+0x304>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025fe:	4a1a      	ldr	r2, [pc, #104]	; (8002668 <HAL_GPIO_Init+0x304>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002604:	4b18      	ldr	r3, [pc, #96]	; (8002668 <HAL_GPIO_Init+0x304>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002628:	4a0f      	ldr	r2, [pc, #60]	; (8002668 <HAL_GPIO_Init+0x304>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3301      	adds	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2b0f      	cmp	r3, #15
 8002638:	f67f aea2 	bls.w	8002380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40013800 	.word	0x40013800
 8002654:	40020000 	.word	0x40020000
 8002658:	40020400 	.word	0x40020400
 800265c:	40020800 	.word	0x40020800
 8002660:	40020c00 	.word	0x40020c00
 8002664:	40021000 	.word	0x40021000
 8002668:	40013c00 	.word	0x40013c00

0800266c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
 8002678:	4613      	mov	r3, r2
 800267a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800267c:	787b      	ldrb	r3, [r7, #1]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002688:	e003      	b.n	8002692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800268a:	887b      	ldrh	r3, [r7, #2]
 800268c:	041a      	lsls	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	619a      	str	r2, [r3, #24]
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af02      	add	r7, sp, #8
 80026a4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e101      	b.n	80028b4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f006 f952 	bl	8008974 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2203      	movs	r2, #3
 80026d4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026de:	d102      	bne.n	80026e6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f002 fd45 	bl	800517a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7c1a      	ldrb	r2, [r3, #16]
 80026f8:	f88d 2000 	strb.w	r2, [sp]
 80026fc:	3304      	adds	r3, #4
 80026fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002700:	f002 fc24 	bl	8004f4c <USB_CoreInit>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2202      	movs	r2, #2
 800270e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e0ce      	b.n	80028b4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2100      	movs	r1, #0
 800271c:	4618      	mov	r0, r3
 800271e:	f002 fd3d 	bl	800519c <USB_SetCurrentMode>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0bf      	b.n	80028b4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	e04a      	b.n	80027d0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	3315      	adds	r3, #21
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	3314      	adds	r3, #20
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	b298      	uxth	r0, r3
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	332e      	adds	r3, #46	; 0x2e
 8002776:	4602      	mov	r2, r0
 8002778:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	3318      	adds	r3, #24
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	331c      	adds	r3, #28
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	3320      	adds	r3, #32
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	3324      	adds	r3, #36	; 0x24
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	3301      	adds	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	791b      	ldrb	r3, [r3, #4]
 80027d4:	7bfa      	ldrb	r2, [r7, #15]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d3af      	bcc.n	800273a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	e044      	b.n	800286a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	f203 2355 	addw	r3, r3, #597	; 0x255
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800284e:	7bfa      	ldrb	r2, [r7, #15]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	3301      	adds	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	791b      	ldrb	r3, [r3, #4]
 800286e:	7bfa      	ldrb	r2, [r7, #15]
 8002870:	429a      	cmp	r2, r3
 8002872:	d3b5      	bcc.n	80027e0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7c1a      	ldrb	r2, [r3, #16]
 800287c:	f88d 2000 	strb.w	r2, [sp]
 8002880:	3304      	adds	r3, #4
 8002882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002884:	f002 fcd6 	bl	8005234 <USB_DevInit>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2202      	movs	r2, #2
 8002892:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e00c      	b.n	80028b4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f003 fd1a 	bl	80062e6 <USB_DevDisconnect>

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_PCD_Start+0x1c>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e022      	b.n	800291e <HAL_PCD_Start+0x62>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d009      	beq.n	8002900 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d105      	bne.n	8002900 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f002 fc27 	bl	8005158 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f003 fcc8 	bl	80062a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002926:	b590      	push	{r4, r7, lr}
 8002928:	b08d      	sub	sp, #52	; 0x34
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f003 fd86 	bl	800644e <USB_GetMode>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	f040 848c 	bne.w	8003262 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f003 fcea 	bl	8006328 <USB_ReadInterrupts>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8482 	beq.w	8003260 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f003 fcd7 	bl	8006328 <USB_ReadInterrupts>
 800297a:	4603      	mov	r3, r0
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b02      	cmp	r3, #2
 8002982:	d107      	bne.n	8002994 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f002 0202 	and.w	r2, r2, #2
 8002992:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f003 fcc5 	bl	8006328 <USB_ReadInterrupts>
 800299e:	4603      	mov	r3, r0
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b10      	cmp	r3, #16
 80029a6:	d161      	bne.n	8002a6c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0210 	bic.w	r2, r2, #16
 80029b6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	f003 020f 	and.w	r2, r3, #15
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4413      	add	r3, r2
 80029d4:	3304      	adds	r3, #4
 80029d6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	0c5b      	lsrs	r3, r3, #17
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d124      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d035      	beq.n	8002a5c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	6a38      	ldr	r0, [r7, #32]
 8002a04:	f003 fafc 	bl	8006000 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a14:	441a      	add	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a26:	441a      	add	r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	615a      	str	r2, [r3, #20]
 8002a2c:	e016      	b.n	8002a5c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	0c5b      	lsrs	r3, r3, #17
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d110      	bne.n	8002a5c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002a40:	2208      	movs	r2, #8
 8002a42:	4619      	mov	r1, r3
 8002a44:	6a38      	ldr	r0, [r7, #32]
 8002a46:	f003 fadb 	bl	8006000 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a56:	441a      	add	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0210 	orr.w	r2, r2, #16
 8002a6a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 fc59 	bl	8006328 <USB_ReadInterrupts>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a80:	f040 80a7 	bne.w	8002bd2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f003 fc5e 	bl	800634e <USB_ReadDevAllOutEpInterrupt>
 8002a92:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a94:	e099      	b.n	8002bca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 808e 	beq.w	8002bbe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f003 fc82 	bl	80063b6 <USB_ReadDevOutEPInterrupt>
 8002ab2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aca:	461a      	mov	r2, r3
 8002acc:	2301      	movs	r3, #1
 8002ace:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fea2 	bl	800381c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00c      	beq.n	8002afc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aee:	461a      	mov	r2, r3
 8002af0:	2308      	movs	r3, #8
 8002af2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 ff78 	bl	80039ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b12:	461a      	mov	r2, r3
 8002b14:	2310      	movs	r3, #16
 8002b16:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d030      	beq.n	8002b84 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2a:	2b80      	cmp	r3, #128	; 0x80
 8002b2c:	d109      	bne.n	8002b42 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b40:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	4413      	add	r3, r2
 8002b54:	3304      	adds	r3, #4
 8002b56:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	78db      	ldrb	r3, [r3, #3]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d108      	bne.n	8002b72 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2200      	movs	r2, #0
 8002b64:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f005 fffd 	bl	8008b6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2302      	movs	r3, #2
 8002b82:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bbc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc6:	085b      	lsrs	r3, r3, #1
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f47f af62 	bne.w	8002a96 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f003 fba6 	bl	8006328 <USB_ReadInterrupts>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002be6:	f040 80db 	bne.w	8002da0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f003 fbc7 	bl	8006382 <USB_ReadDevAllInEpInterrupt>
 8002bf4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002bfa:	e0cd      	b.n	8002d98 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80c2 	beq.w	8002d8c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 fbed 	bl	80063f2 <USB_ReadDevInEPInterrupt>
 8002c18:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d057      	beq.n	8002cd4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69f9      	ldr	r1, [r7, #28]
 8002c40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c44:	4013      	ands	r3, r2
 8002c46:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c54:	461a      	mov	r2, r3
 8002c56:	2301      	movs	r3, #1
 8002c58:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	799b      	ldrb	r3, [r3, #6]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d132      	bne.n	8002cc8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	3320      	adds	r3, #32
 8002c72:	6819      	ldr	r1, [r3, #0]
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4403      	add	r3, r0
 8002c82:	331c      	adds	r3, #28
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4419      	add	r1, r3
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4403      	add	r3, r0
 8002c96:	3320      	adds	r3, #32
 8002c98:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d113      	bne.n	8002cc8 <HAL_PCD_IRQHandler+0x3a2>
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	3324      	adds	r3, #36	; 0x24
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d108      	bne.n	8002cc8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	f003 fbf4 	bl	80064b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f005 fed1 	bl	8008a76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cea:	461a      	mov	r2, r3
 8002cec:	2308      	movs	r3, #8
 8002cee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d06:	461a      	mov	r2, r3
 8002d08:	2310      	movs	r3, #16
 8002d0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d22:	461a      	mov	r2, r3
 8002d24:	2340      	movs	r3, #64	; 0x40
 8002d26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d023      	beq.n	8002d7a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d34:	6a38      	ldr	r0, [r7, #32]
 8002d36:	f002 fbe1 	bl	80054fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	3310      	adds	r3, #16
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	78db      	ldrb	r3, [r3, #3]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d108      	bne.n	8002d68 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	4619      	mov	r1, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f005 ff14 	bl	8008b90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d74:	461a      	mov	r2, r3
 8002d76:	2302      	movs	r3, #2
 8002d78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fcbb 	bl	8003702 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	3301      	adds	r3, #1
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f47f af2e 	bne.w	8002bfc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f003 fabf 	bl	8006328 <USB_ReadInterrupts>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002db4:	d122      	bne.n	8002dfc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d108      	bne.n	8002de6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ddc:	2100      	movs	r1, #0
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fea2 	bl	8003b28 <HAL_PCDEx_LPM_Callback>
 8002de4:	e002      	b.n	8002dec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f005 feb2 	bl	8008b50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002dfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f003 fa91 	bl	8006328 <USB_ReadInterrupts>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e10:	d112      	bne.n	8002e38 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d102      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f005 fe6e 	bl	8008b04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e36:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f003 fa73 	bl	8006328 <USB_ReadInterrupts>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4c:	f040 80b7 	bne.w	8002fbe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2110      	movs	r1, #16
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f002 fb46 	bl	80054fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e70:	2300      	movs	r3, #0
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e74:	e046      	b.n	8002f04 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e82:	461a      	mov	r2, r3
 8002e84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e88:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e9a:	0151      	lsls	r1, r2, #5
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	440a      	add	r2, r1
 8002ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ea4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ea8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ebc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ece:	0151      	lsls	r1, r2, #5
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	440a      	add	r2, r1
 8002ed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ed8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002edc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eee:	0151      	lsls	r1, r2, #5
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	440a      	add	r2, r1
 8002ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ef8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002efc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	3301      	adds	r3, #1
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	791b      	ldrb	r3, [r3, #4]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d3b2      	bcc.n	8002e76 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f1e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f22:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	7bdb      	ldrb	r3, [r3, #15]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d016      	beq.n	8002f5a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f3c:	f043 030b 	orr.w	r3, r3, #11
 8002f40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f52:	f043 030b 	orr.w	r3, r3, #11
 8002f56:	6453      	str	r3, [r2, #68]	; 0x44
 8002f58:	e015      	b.n	8002f86 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f6c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f70:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f80:	f043 030b 	orr.w	r3, r3, #11
 8002f84:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f94:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f98:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f003 fa81 	bl	80064b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002fbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f003 f9b0 	bl	8006328 <USB_ReadInterrupts>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd2:	d123      	bne.n	800301c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f003 fa46 	bl	800646a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f002 fb03 	bl	80055ee <USB_GetDevSpeed>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	461a      	mov	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681c      	ldr	r4, [r3, #0]
 8002ff4:	f001 f9c8 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 8002ff8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ffe:	461a      	mov	r2, r3
 8003000:	4620      	mov	r0, r4
 8003002:	f002 f807 	bl	8005014 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f005 fd5d 	bl	8008ac6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800301a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f003 f981 	bl	8006328 <USB_ReadInterrupts>
 8003026:	4603      	mov	r3, r0
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b08      	cmp	r3, #8
 800302e:	d10a      	bne.n	8003046 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f005 fd3a 	bl	8008aaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f002 0208 	and.w	r2, r2, #8
 8003044:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f003 f96c 	bl	8006328 <USB_ReadInterrupts>
 8003050:	4603      	mov	r3, r0
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	2b80      	cmp	r3, #128	; 0x80
 8003058:	d123      	bne.n	80030a2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003066:	2301      	movs	r3, #1
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
 800306a:	e014      	b.n	8003096 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d105      	bne.n	8003090 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	b2db      	uxtb	r3, r3
 8003088:	4619      	mov	r1, r3
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fb08 	bl	80036a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	3301      	adds	r3, #1
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	791b      	ldrb	r3, [r3, #4]
 800309a:	461a      	mov	r2, r3
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	4293      	cmp	r3, r2
 80030a0:	d3e4      	bcc.n	800306c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f003 f93e 	bl	8006328 <USB_ReadInterrupts>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b6:	d13c      	bne.n	8003132 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030b8:	2301      	movs	r3, #1
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
 80030bc:	e02b      	b.n	8003116 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3318      	adds	r3, #24
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d115      	bne.n	8003110 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	da12      	bge.n	8003110 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	3317      	adds	r3, #23
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003106:	b2db      	uxtb	r3, r3
 8003108:	4619      	mov	r1, r3
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fac8 	bl	80036a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	3301      	adds	r3, #1
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	791b      	ldrb	r3, [r3, #4]
 800311a:	461a      	mov	r2, r3
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	4293      	cmp	r3, r2
 8003120:	d3cd      	bcc.n	80030be <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003130:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f003 f8f6 	bl	8006328 <USB_ReadInterrupts>
 800313c:	4603      	mov	r3, r0
 800313e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003142:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003146:	d156      	bne.n	80031f6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003148:	2301      	movs	r3, #1
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
 800314c:	e045      	b.n	80031da <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d12e      	bne.n	80031d4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003176:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	da2b      	bge.n	80031d4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003188:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800318c:	429a      	cmp	r2, r3
 800318e:	d121      	bne.n	80031d4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	f203 2357 	addw	r3, r3, #599	; 0x257
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10a      	bne.n	80031d4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031d0:	6053      	str	r3, [r2, #4]
            break;
 80031d2:	e008      	b.n	80031e6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	3301      	adds	r3, #1
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	791b      	ldrb	r3, [r3, #4]
 80031de:	461a      	mov	r2, r3
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d3b3      	bcc.n	800314e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80031f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f003 f894 	bl	8006328 <USB_ReadInterrupts>
 8003200:	4603      	mov	r3, r0
 8003202:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320a:	d10a      	bne.n	8003222 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f005 fcd1 	bl	8008bb4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003220:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f003 f87e 	bl	8006328 <USB_ReadInterrupts>
 800322c:	4603      	mov	r3, r0
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b04      	cmp	r3, #4
 8003234:	d115      	bne.n	8003262 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f005 fcc1 	bl	8008bd0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	e000      	b.n	8003262 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003260:	bf00      	nop
    }
  }
}
 8003262:	3734      	adds	r7, #52	; 0x34
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}

08003268 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_PCD_SetAddress+0x1a>
 800327e:	2302      	movs	r3, #2
 8003280:	e012      	b.n	80032a8 <HAL_PCD_SetAddress+0x40>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	78fa      	ldrb	r2, [r7, #3]
 800328e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f002 ffdd 	bl	8006258 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	461a      	mov	r2, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	70fb      	strb	r3, [r7, #3]
 80032c2:	460b      	mov	r3, r1
 80032c4:	803b      	strh	r3, [r7, #0]
 80032c6:	4613      	mov	r3, r2
 80032c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	da0f      	bge.n	80032f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	f003 020f 	and.w	r2, r3, #15
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	3310      	adds	r3, #16
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	3304      	adds	r3, #4
 80032ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	705a      	strb	r2, [r3, #1]
 80032f4:	e00f      	b.n	8003316 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	f003 020f 	and.w	r2, r3, #15
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4413      	add	r3, r2
 800330c:	3304      	adds	r3, #4
 800330e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	b2da      	uxtb	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003322:	883a      	ldrh	r2, [r7, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	78ba      	ldrb	r2, [r7, #2]
 800332c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	785b      	ldrb	r3, [r3, #1]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d004      	beq.n	8003340 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003340:	78bb      	ldrb	r3, [r7, #2]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d102      	bne.n	800334c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_PCD_EP_Open+0xaa>
 8003356:	2302      	movs	r3, #2
 8003358:	e00e      	b.n	8003378 <HAL_PCD_EP_Open+0xc8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68f9      	ldr	r1, [r7, #12]
 8003368:	4618      	mov	r0, r3
 800336a:	f002 f965 	bl	8005638 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003376:	7afb      	ldrb	r3, [r7, #11]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800338c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003390:	2b00      	cmp	r3, #0
 8003392:	da0f      	bge.n	80033b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	f003 020f 	and.w	r2, r3, #15
 800339a:	4613      	mov	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	3310      	adds	r3, #16
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	3304      	adds	r3, #4
 80033aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	705a      	strb	r2, [r3, #1]
 80033b2:	e00f      	b.n	80033d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	f003 020f 	and.w	r2, r3, #15
 80033ba:	4613      	mov	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	3304      	adds	r3, #4
 80033cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_PCD_EP_Close+0x6e>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e00e      	b.n	800340c <HAL_PCD_EP_Close+0x8c>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68f9      	ldr	r1, [r7, #12]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f002 f9a3 	bl	8005748 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	607a      	str	r2, [r7, #4]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	460b      	mov	r3, r1
 8003422:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003424:	7afb      	ldrb	r3, [r7, #11]
 8003426:	f003 020f 	and.w	r2, r3, #15
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4413      	add	r3, r2
 800343a:	3304      	adds	r3, #4
 800343c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2200      	movs	r2, #0
 800344e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2200      	movs	r2, #0
 8003454:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003456:	7afb      	ldrb	r3, [r7, #11]
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	b2da      	uxtb	r2, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	799b      	ldrb	r3, [r3, #6]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d102      	bne.n	8003470 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	799b      	ldrb	r3, [r3, #6]
 8003478:	461a      	mov	r2, r3
 800347a:	6979      	ldr	r1, [r7, #20]
 800347c:	f002 fa40 	bl	8005900 <USB_EPStartXfer>

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	460b      	mov	r3, r1
 8003494:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003496:	78fb      	ldrb	r3, [r7, #3]
 8003498:	f003 020f 	and.w	r2, r3, #15
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80034ac:	681b      	ldr	r3, [r3, #0]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b086      	sub	sp, #24
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
 80034c6:	460b      	mov	r3, r1
 80034c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ca:	7afb      	ldrb	r3, [r7, #11]
 80034cc:	f003 020f 	and.w	r2, r3, #15
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	3310      	adds	r3, #16
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4413      	add	r3, r2
 80034de:	3304      	adds	r3, #4
 80034e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2200      	movs	r2, #0
 80034f2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2201      	movs	r2, #1
 80034f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034fa:	7afb      	ldrb	r3, [r7, #11]
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	b2da      	uxtb	r2, r3
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	799b      	ldrb	r3, [r3, #6]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d102      	bne.n	8003514 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	799b      	ldrb	r3, [r3, #6]
 800351c:	461a      	mov	r2, r3
 800351e:	6979      	ldr	r1, [r7, #20]
 8003520:	f002 f9ee 	bl	8005900 <USB_EPStartXfer>

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	460b      	mov	r3, r1
 8003538:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	7912      	ldrb	r2, [r2, #4]
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e04f      	b.n	80035ec <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800354c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003550:	2b00      	cmp	r3, #0
 8003552:	da0f      	bge.n	8003574 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	f003 020f 	and.w	r2, r3, #15
 800355a:	4613      	mov	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	3310      	adds	r3, #16
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4413      	add	r3, r2
 8003568:	3304      	adds	r3, #4
 800356a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	705a      	strb	r2, [r3, #1]
 8003572:	e00d      	b.n	8003590 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4413      	add	r3, r2
 8003586:	3304      	adds	r3, #4
 8003588:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	b2da      	uxtb	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_PCD_EP_SetStall+0x82>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e01d      	b.n	80035ec <HAL_PCD_EP_SetStall+0xbe>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68f9      	ldr	r1, [r7, #12]
 80035be:	4618      	mov	r0, r3
 80035c0:	f002 fd76 	bl	80060b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	7999      	ldrb	r1, [r3, #6]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80035dc:	461a      	mov	r2, r3
 80035de:	f002 ff67 	bl	80064b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	7912      	ldrb	r2, [r2, #4]
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e042      	b.n	8003698 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003616:	2b00      	cmp	r3, #0
 8003618:	da0f      	bge.n	800363a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	f003 020f 	and.w	r2, r3, #15
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	3310      	adds	r3, #16
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4413      	add	r3, r2
 800362e:	3304      	adds	r3, #4
 8003630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	705a      	strb	r2, [r3, #1]
 8003638:	e00f      	b.n	800365a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	f003 020f 	and.w	r2, r3, #15
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	4413      	add	r3, r2
 8003650:	3304      	adds	r3, #4
 8003652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	b2da      	uxtb	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_PCD_EP_ClrStall+0x86>
 8003676:	2302      	movs	r3, #2
 8003678:	e00e      	b.n	8003698 <HAL_PCD_EP_ClrStall+0xa4>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68f9      	ldr	r1, [r7, #12]
 8003688:	4618      	mov	r0, r3
 800368a:	f002 fd7f 	bl	800618c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80036ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	da0c      	bge.n	80036ce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	f003 020f 	and.w	r2, r3, #15
 80036ba:	4613      	mov	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	3310      	adds	r3, #16
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	4413      	add	r3, r2
 80036c8:	3304      	adds	r3, #4
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	e00c      	b.n	80036e8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	f003 020f 	and.w	r2, r3, #15
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	4413      	add	r3, r2
 80036e4:	3304      	adds	r3, #4
 80036e6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68f9      	ldr	r1, [r7, #12]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f002 fb9e 	bl	8005e30 <USB_EPStopXfer>
 80036f4:	4603      	mov	r3, r0
 80036f6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036f8:	7afb      	ldrb	r3, [r7, #11]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b08a      	sub	sp, #40	; 0x28
 8003706:	af02      	add	r7, sp, #8
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	3310      	adds	r3, #16
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	3304      	adds	r3, #4
 8003728:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	695a      	ldr	r2, [r3, #20]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	429a      	cmp	r2, r3
 8003734:	d901      	bls.n	800373a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e06b      	b.n	8003812 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	429a      	cmp	r2, r3
 800374e:	d902      	bls.n	8003756 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	3303      	adds	r3, #3
 800375a:	089b      	lsrs	r3, r3, #2
 800375c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800375e:	e02a      	b.n	80037b6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	69fa      	ldr	r2, [r7, #28]
 8003772:	429a      	cmp	r2, r3
 8003774:	d902      	bls.n	800377c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	3303      	adds	r3, #3
 8003780:	089b      	lsrs	r3, r3, #2
 8003782:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	68d9      	ldr	r1, [r3, #12]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	b2da      	uxtb	r2, r3
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	4603      	mov	r3, r0
 8003798:	6978      	ldr	r0, [r7, #20]
 800379a:	f002 fbf3 	bl	8005f84 <USB_WritePacket>

    ep->xfer_buff  += len;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	441a      	add	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	441a      	add	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d809      	bhi.n	80037e0 <PCD_WriteEmptyTxFifo+0xde>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d203      	bcs.n	80037e0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1bf      	bne.n	8003760 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d811      	bhi.n	8003810 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	2201      	movs	r2, #1
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	43db      	mvns	r3, r3
 8003806:	6939      	ldr	r1, [r7, #16]
 8003808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800380c:	4013      	ands	r3, r2
 800380e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	333c      	adds	r3, #60	; 0x3c
 8003834:	3304      	adds	r3, #4
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	4413      	add	r3, r2
 8003842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	799b      	ldrb	r3, [r3, #6]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d17b      	bne.n	800394a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d015      	beq.n	8003888 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	4a61      	ldr	r2, [pc, #388]	; (80039e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	f240 80b9 	bls.w	80039d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80b3 	beq.w	80039d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387e:	461a      	mov	r2, r3
 8003880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003884:	6093      	str	r3, [r2, #8]
 8003886:	e0a7      	b.n	80039d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	4413      	add	r3, r2
 800389a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389e:	461a      	mov	r2, r3
 80038a0:	2320      	movs	r3, #32
 80038a2:	6093      	str	r3, [r2, #8]
 80038a4:	e098      	b.n	80039d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f040 8093 	bne.w	80039d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	4a4b      	ldr	r2, [pc, #300]	; (80039e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d90f      	bls.n	80038da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d0:	461a      	mov	r2, r3
 80038d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d6:	6093      	str	r3, [r2, #8]
 80038d8:	e07e      	b.n	80039d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	4413      	add	r3, r2
 80038ec:	3304      	adds	r3, #4
 80038ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a1a      	ldr	r2, [r3, #32]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	0159      	lsls	r1, r3, #5
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	440b      	add	r3, r1
 80038fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003906:	1ad2      	subs	r2, r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d114      	bne.n	800393c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003924:	461a      	mov	r2, r3
 8003926:	2101      	movs	r1, #1
 8003928:	f002 fdc2 	bl	80064b0 <USB_EP0_OutStart>
 800392c:	e006      	b.n	800393c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	441a      	add	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	4619      	mov	r1, r3
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f005 f87c 	bl	8008a40 <HAL_PCD_DataOutStageCallback>
 8003948:	e046      	b.n	80039d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	4a26      	ldr	r2, [pc, #152]	; (80039e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d124      	bne.n	800399c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003968:	461a      	mov	r2, r3
 800396a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800396e:	6093      	str	r3, [r2, #8]
 8003970:	e032      	b.n	80039d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003988:	461a      	mov	r2, r3
 800398a:	2320      	movs	r3, #32
 800398c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	4619      	mov	r1, r3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f005 f853 	bl	8008a40 <HAL_PCD_DataOutStageCallback>
 800399a:	e01d      	b.n	80039d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d114      	bne.n	80039cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	4613      	mov	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4413      	add	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d108      	bne.n	80039cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80039c4:	461a      	mov	r2, r3
 80039c6:	2100      	movs	r1, #0
 80039c8:	f002 fd72 	bl	80064b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	4619      	mov	r1, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f005 f834 	bl	8008a40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	4f54300a 	.word	0x4f54300a
 80039e8:	4f54310a 	.word	0x4f54310a

080039ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	333c      	adds	r3, #60	; 0x3c
 8003a04:	3304      	adds	r3, #4
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4a15      	ldr	r2, [pc, #84]	; (8003a74 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d90e      	bls.n	8003a40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d009      	beq.n	8003a40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f004 ffeb 	bl	8008a1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d90c      	bls.n	8003a68 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	799b      	ldrb	r3, [r3, #6]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d108      	bne.n	8003a68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003a60:	461a      	mov	r2, r3
 8003a62:	2101      	movs	r1, #1
 8003a64:	f002 fd24 	bl	80064b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	4f54300a 	.word	0x4f54300a

08003a78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70fb      	strb	r3, [r7, #3]
 8003a84:	4613      	mov	r3, r2
 8003a86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d107      	bne.n	8003aa6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a96:	883b      	ldrh	r3, [r7, #0]
 8003a98:	0419      	lsls	r1, r3, #16
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	629a      	str	r2, [r3, #40]	; 0x28
 8003aa4:	e028      	b.n	8003af8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aac:	0c1b      	lsrs	r3, r3, #16
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	73fb      	strb	r3, [r7, #15]
 8003ab8:	e00d      	b.n	8003ad6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	3340      	adds	r3, #64	; 0x40
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	0c1b      	lsrs	r3, r3, #16
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	4413      	add	r3, r2
 8003ace:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
 8003ad6:	7bfa      	ldrb	r2, [r7, #15]
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d3ec      	bcc.n	8003aba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ae0:	883b      	ldrh	r3, [r7, #0]
 8003ae2:	0418      	lsls	r0, r3, #16
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6819      	ldr	r1, [r3, #0]
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	4302      	orrs	r2, r0
 8003af0:	3340      	adds	r3, #64	; 0x40
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	887a      	ldrh	r2, [r7, #2]
 8003b18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e267      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d075      	beq.n	8003c4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b5e:	4b88      	ldr	r3, [pc, #544]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d00c      	beq.n	8003b84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6a:	4b85      	ldr	r3, [pc, #532]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d112      	bne.n	8003b9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b76:	4b82      	ldr	r3, [pc, #520]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b82:	d10b      	bne.n	8003b9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b84:	4b7e      	ldr	r3, [pc, #504]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d05b      	beq.n	8003c48 <HAL_RCC_OscConfig+0x108>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d157      	bne.n	8003c48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e242      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba4:	d106      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x74>
 8003ba6:	4b76      	ldr	r3, [pc, #472]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a75      	ldr	r2, [pc, #468]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e01d      	b.n	8003bf0 <HAL_RCC_OscConfig+0xb0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x98>
 8003bbe:	4b70      	ldr	r3, [pc, #448]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a6f      	ldr	r2, [pc, #444]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b6d      	ldr	r3, [pc, #436]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a6c      	ldr	r2, [pc, #432]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0xb0>
 8003bd8:	4b69      	ldr	r3, [pc, #420]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a68      	ldr	r2, [pc, #416]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	4b66      	ldr	r3, [pc, #408]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a65      	ldr	r2, [pc, #404]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d013      	beq.n	8003c20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fa72 	bl	80020e0 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fe fa6e 	bl	80020e0 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	; 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e207      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	4b5b      	ldr	r3, [pc, #364]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0xc0>
 8003c1e:	e014      	b.n	8003c4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fe fa5e 	bl	80020e0 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c28:	f7fe fa5a 	bl	80020e0 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b64      	cmp	r3, #100	; 0x64
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e1f3      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3a:	4b51      	ldr	r3, [pc, #324]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0xe8>
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d063      	beq.n	8003d1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c56:	4b4a      	ldr	r3, [pc, #296]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c62:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d11c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c6e:	4b44      	ldr	r3, [pc, #272]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d116      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7a:	4b41      	ldr	r3, [pc, #260]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <HAL_RCC_OscConfig+0x152>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e1c7      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c92:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4937      	ldr	r1, [pc, #220]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca6:	e03a      	b.n	8003d1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d020      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb0:	4b34      	ldr	r3, [pc, #208]	; (8003d84 <HAL_RCC_OscConfig+0x244>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fe fa13 	bl	80020e0 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cbe:	f7fe fa0f 	bl	80020e0 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e1a8      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd0:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cdc:	4b28      	ldr	r3, [pc, #160]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4925      	ldr	r1, [pc, #148]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	600b      	str	r3, [r1, #0]
 8003cf0:	e015      	b.n	8003d1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cf2:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <HAL_RCC_OscConfig+0x244>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fe f9f2 	bl	80020e0 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d00:	f7fe f9ee 	bl	80020e0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e187      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d12:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d036      	beq.n	8003d98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d016      	beq.n	8003d60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d32:	4b15      	ldr	r3, [pc, #84]	; (8003d88 <HAL_RCC_OscConfig+0x248>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d38:	f7fe f9d2 	bl	80020e0 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d40:	f7fe f9ce 	bl	80020e0 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e167      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x200>
 8003d5e:	e01b      	b.n	8003d98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d60:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_RCC_OscConfig+0x248>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d66:	f7fe f9bb 	bl	80020e0 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d6c:	e00e      	b.n	8003d8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d6e:	f7fe f9b7 	bl	80020e0 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d907      	bls.n	8003d8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e150      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
 8003d80:	40023800 	.word	0x40023800
 8003d84:	42470000 	.word	0x42470000
 8003d88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d8c:	4b88      	ldr	r3, [pc, #544]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1ea      	bne.n	8003d6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8097 	beq.w	8003ed4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da6:	2300      	movs	r3, #0
 8003da8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003daa:	4b81      	ldr	r3, [pc, #516]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10f      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	4b7d      	ldr	r3, [pc, #500]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	4a7c      	ldr	r2, [pc, #496]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc6:	4b7a      	ldr	r3, [pc, #488]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd6:	4b77      	ldr	r3, [pc, #476]	; (8003fb4 <HAL_RCC_OscConfig+0x474>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d118      	bne.n	8003e14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003de2:	4b74      	ldr	r3, [pc, #464]	; (8003fb4 <HAL_RCC_OscConfig+0x474>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a73      	ldr	r2, [pc, #460]	; (8003fb4 <HAL_RCC_OscConfig+0x474>)
 8003de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dee:	f7fe f977 	bl	80020e0 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df4:	e008      	b.n	8003e08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df6:	f7fe f973 	bl	80020e0 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e10c      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e08:	4b6a      	ldr	r3, [pc, #424]	; (8003fb4 <HAL_RCC_OscConfig+0x474>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0f0      	beq.n	8003df6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d106      	bne.n	8003e2a <HAL_RCC_OscConfig+0x2ea>
 8003e1c:	4b64      	ldr	r3, [pc, #400]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	4a63      	ldr	r2, [pc, #396]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	6713      	str	r3, [r2, #112]	; 0x70
 8003e28:	e01c      	b.n	8003e64 <HAL_RCC_OscConfig+0x324>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b05      	cmp	r3, #5
 8003e30:	d10c      	bne.n	8003e4c <HAL_RCC_OscConfig+0x30c>
 8003e32:	4b5f      	ldr	r3, [pc, #380]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	4a5e      	ldr	r2, [pc, #376]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e38:	f043 0304 	orr.w	r3, r3, #4
 8003e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3e:	4b5c      	ldr	r3, [pc, #368]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	4a5b      	ldr	r2, [pc, #364]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4a:	e00b      	b.n	8003e64 <HAL_RCC_OscConfig+0x324>
 8003e4c:	4b58      	ldr	r3, [pc, #352]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	4a57      	ldr	r2, [pc, #348]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	6713      	str	r3, [r2, #112]	; 0x70
 8003e58:	4b55      	ldr	r3, [pc, #340]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	4a54      	ldr	r2, [pc, #336]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e5e:	f023 0304 	bic.w	r3, r3, #4
 8003e62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d015      	beq.n	8003e98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6c:	f7fe f938 	bl	80020e0 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e72:	e00a      	b.n	8003e8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e74:	f7fe f934 	bl	80020e0 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e0cb      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8a:	4b49      	ldr	r3, [pc, #292]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0ee      	beq.n	8003e74 <HAL_RCC_OscConfig+0x334>
 8003e96:	e014      	b.n	8003ec2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e98:	f7fe f922 	bl	80020e0 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea0:	f7fe f91e 	bl	80020e0 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e0b5      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb6:	4b3e      	ldr	r3, [pc, #248]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1ee      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d105      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec8:	4b39      	ldr	r3, [pc, #228]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	4a38      	ldr	r2, [pc, #224]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80a1 	beq.w	8004020 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ede:	4b34      	ldr	r3, [pc, #208]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d05c      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d141      	bne.n	8003f76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef2:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <HAL_RCC_OscConfig+0x478>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fe f8f2 	bl	80020e0 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f00:	f7fe f8ee 	bl	80020e0 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e087      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69da      	ldr	r2, [r3, #28]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	019b      	lsls	r3, r3, #6
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	085b      	lsrs	r3, r3, #1
 8003f36:	3b01      	subs	r3, #1
 8003f38:	041b      	lsls	r3, r3, #16
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	061b      	lsls	r3, r3, #24
 8003f42:	491b      	ldr	r1, [pc, #108]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f48:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <HAL_RCC_OscConfig+0x478>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4e:	f7fe f8c7 	bl	80020e0 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f56:	f7fe f8c3 	bl	80020e0 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e05c      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f68:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_OscConfig+0x416>
 8003f74:	e054      	b.n	8004020 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <HAL_RCC_OscConfig+0x478>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fe f8b0 	bl	80020e0 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f84:	f7fe f8ac 	bl	80020e0 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e045      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x444>
 8003fa2:	e03d      	b.n	8004020 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d107      	bne.n	8003fbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e038      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40007000 	.word	0x40007000
 8003fb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	; (800402c <HAL_RCC_OscConfig+0x4ec>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d028      	beq.n	800401c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d121      	bne.n	800401c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d11a      	bne.n	800401c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fec:	4013      	ands	r3, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ff2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d111      	bne.n	800401c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	3b01      	subs	r3, #1
 8004006:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d107      	bne.n	800401c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40023800 	.word	0x40023800

08004030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0cc      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004044:	4b68      	ldr	r3, [pc, #416]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d90c      	bls.n	800406c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004052:	4b65      	ldr	r3, [pc, #404]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b63      	ldr	r3, [pc, #396]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0b8      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d020      	beq.n	80040ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004084:	4b59      	ldr	r3, [pc, #356]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4a58      	ldr	r2, [pc, #352]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800408e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800409c:	4b53      	ldr	r3, [pc, #332]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	4a52      	ldr	r2, [pc, #328]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a8:	4b50      	ldr	r3, [pc, #320]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	494d      	ldr	r1, [pc, #308]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d044      	beq.n	8004150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d107      	bne.n	80040de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ce:	4b47      	ldr	r3, [pc, #284]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d119      	bne.n	800410e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e07f      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d003      	beq.n	80040ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d107      	bne.n	80040fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ee:	4b3f      	ldr	r3, [pc, #252]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e06f      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fe:	4b3b      	ldr	r3, [pc, #236]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e067      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800410e:	4b37      	ldr	r3, [pc, #220]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f023 0203 	bic.w	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4934      	ldr	r1, [pc, #208]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	4313      	orrs	r3, r2
 800411e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004120:	f7fd ffde 	bl	80020e0 <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004126:	e00a      	b.n	800413e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004128:	f7fd ffda 	bl	80020e0 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f241 3288 	movw	r2, #5000	; 0x1388
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e04f      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413e:	4b2b      	ldr	r3, [pc, #172]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 020c 	and.w	r2, r3, #12
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	429a      	cmp	r2, r3
 800414e:	d1eb      	bne.n	8004128 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004150:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d20c      	bcs.n	8004178 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e032      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004184:	4b19      	ldr	r3, [pc, #100]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	4916      	ldr	r1, [pc, #88]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041a2:	4b12      	ldr	r3, [pc, #72]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	490e      	ldr	r1, [pc, #56]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041b6:	f000 f821 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 80041ba:	4602      	mov	r2, r0
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	490a      	ldr	r1, [pc, #40]	; (80041f0 <HAL_RCC_ClockConfig+0x1c0>)
 80041c8:	5ccb      	ldrb	r3, [r1, r3]
 80041ca:	fa22 f303 	lsr.w	r3, r2, r3
 80041ce:	4a09      	ldr	r2, [pc, #36]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 80041d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041d2:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fd ff3e 	bl	8002058 <HAL_InitTick>

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40023c00 	.word	0x40023c00
 80041ec:	40023800 	.word	0x40023800
 80041f0:	0800d964 	.word	0x0800d964
 80041f4:	20000000 	.word	0x20000000
 80041f8:	20000004 	.word	0x20000004

080041fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004200:	b090      	sub	sp, #64	; 0x40
 8004202:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	637b      	str	r3, [r7, #52]	; 0x34
 8004208:	2300      	movs	r3, #0
 800420a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800420c:	2300      	movs	r3, #0
 800420e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004214:	4b59      	ldr	r3, [pc, #356]	; (800437c <HAL_RCC_GetSysClockFreq+0x180>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 030c 	and.w	r3, r3, #12
 800421c:	2b08      	cmp	r3, #8
 800421e:	d00d      	beq.n	800423c <HAL_RCC_GetSysClockFreq+0x40>
 8004220:	2b08      	cmp	r3, #8
 8004222:	f200 80a1 	bhi.w	8004368 <HAL_RCC_GetSysClockFreq+0x16c>
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_RCC_GetSysClockFreq+0x34>
 800422a:	2b04      	cmp	r3, #4
 800422c:	d003      	beq.n	8004236 <HAL_RCC_GetSysClockFreq+0x3a>
 800422e:	e09b      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004230:	4b53      	ldr	r3, [pc, #332]	; (8004380 <HAL_RCC_GetSysClockFreq+0x184>)
 8004232:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004234:	e09b      	b.n	800436e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004236:	4b53      	ldr	r3, [pc, #332]	; (8004384 <HAL_RCC_GetSysClockFreq+0x188>)
 8004238:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800423a:	e098      	b.n	800436e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800423c:	4b4f      	ldr	r3, [pc, #316]	; (800437c <HAL_RCC_GetSysClockFreq+0x180>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004244:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004246:	4b4d      	ldr	r3, [pc, #308]	; (800437c <HAL_RCC_GetSysClockFreq+0x180>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d028      	beq.n	80042a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004252:	4b4a      	ldr	r3, [pc, #296]	; (800437c <HAL_RCC_GetSysClockFreq+0x180>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	099b      	lsrs	r3, r3, #6
 8004258:	2200      	movs	r2, #0
 800425a:	623b      	str	r3, [r7, #32]
 800425c:	627a      	str	r2, [r7, #36]	; 0x24
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004264:	2100      	movs	r1, #0
 8004266:	4b47      	ldr	r3, [pc, #284]	; (8004384 <HAL_RCC_GetSysClockFreq+0x188>)
 8004268:	fb03 f201 	mul.w	r2, r3, r1
 800426c:	2300      	movs	r3, #0
 800426e:	fb00 f303 	mul.w	r3, r0, r3
 8004272:	4413      	add	r3, r2
 8004274:	4a43      	ldr	r2, [pc, #268]	; (8004384 <HAL_RCC_GetSysClockFreq+0x188>)
 8004276:	fba0 1202 	umull	r1, r2, r0, r2
 800427a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800427c:	460a      	mov	r2, r1
 800427e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004282:	4413      	add	r3, r2
 8004284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004288:	2200      	movs	r2, #0
 800428a:	61bb      	str	r3, [r7, #24]
 800428c:	61fa      	str	r2, [r7, #28]
 800428e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004292:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004296:	f7fc fcff 	bl	8000c98 <__aeabi_uldivmod>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4613      	mov	r3, r2
 80042a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042a2:	e053      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a4:	4b35      	ldr	r3, [pc, #212]	; (800437c <HAL_RCC_GetSysClockFreq+0x180>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	099b      	lsrs	r3, r3, #6
 80042aa:	2200      	movs	r2, #0
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	617a      	str	r2, [r7, #20]
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042b6:	f04f 0b00 	mov.w	fp, #0
 80042ba:	4652      	mov	r2, sl
 80042bc:	465b      	mov	r3, fp
 80042be:	f04f 0000 	mov.w	r0, #0
 80042c2:	f04f 0100 	mov.w	r1, #0
 80042c6:	0159      	lsls	r1, r3, #5
 80042c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042cc:	0150      	lsls	r0, r2, #5
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	ebb2 080a 	subs.w	r8, r2, sl
 80042d6:	eb63 090b 	sbc.w	r9, r3, fp
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042ee:	ebb2 0408 	subs.w	r4, r2, r8
 80042f2:	eb63 0509 	sbc.w	r5, r3, r9
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	00eb      	lsls	r3, r5, #3
 8004300:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004304:	00e2      	lsls	r2, r4, #3
 8004306:	4614      	mov	r4, r2
 8004308:	461d      	mov	r5, r3
 800430a:	eb14 030a 	adds.w	r3, r4, sl
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	eb45 030b 	adc.w	r3, r5, fp
 8004314:	607b      	str	r3, [r7, #4]
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004322:	4629      	mov	r1, r5
 8004324:	028b      	lsls	r3, r1, #10
 8004326:	4621      	mov	r1, r4
 8004328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800432c:	4621      	mov	r1, r4
 800432e:	028a      	lsls	r2, r1, #10
 8004330:	4610      	mov	r0, r2
 8004332:	4619      	mov	r1, r3
 8004334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004336:	2200      	movs	r2, #0
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	60fa      	str	r2, [r7, #12]
 800433c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004340:	f7fc fcaa 	bl	8000c98 <__aeabi_uldivmod>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4613      	mov	r3, r2
 800434a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800434c:	4b0b      	ldr	r3, [pc, #44]	; (800437c <HAL_RCC_GetSysClockFreq+0x180>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	0c1b      	lsrs	r3, r3, #16
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	3301      	adds	r3, #1
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800435c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	fbb2 f3f3 	udiv	r3, r2, r3
 8004364:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004366:	e002      	b.n	800436e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <HAL_RCC_GetSysClockFreq+0x184>)
 800436a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800436c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800436e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004370:	4618      	mov	r0, r3
 8004372:	3740      	adds	r7, #64	; 0x40
 8004374:	46bd      	mov	sp, r7
 8004376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800437a:	bf00      	nop
 800437c:	40023800 	.word	0x40023800
 8004380:	00f42400 	.word	0x00f42400
 8004384:	017d7840 	.word	0x017d7840

08004388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <HAL_RCC_GetHCLKFreq+0x14>)
 800438e:	681b      	ldr	r3, [r3, #0]
}
 8004390:	4618      	mov	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000000 	.word	0x20000000

080043a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e07b      	b.n	80044aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d108      	bne.n	80043cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043c2:	d009      	beq.n	80043d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	61da      	str	r2, [r3, #28]
 80043ca:	e005      	b.n	80043d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fd fc70 	bl	8001cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800440e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445c:	ea42 0103 	orr.w	r1, r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004464:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	0c1b      	lsrs	r3, r3, #16
 8004476:	f003 0104 	and.w	r1, r3, #4
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	f003 0210 	and.w	r2, r3, #16
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69da      	ldr	r2, [r3, #28]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004498:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b088      	sub	sp, #32
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	4613      	mov	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_SPI_Transmit+0x22>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e12d      	b.n	8004730 <HAL_SPI_Transmit+0x27e>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044dc:	f7fd fe00 	bl	80020e0 <HAL_GetTick>
 80044e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d002      	beq.n	80044f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044f2:	2302      	movs	r3, #2
 80044f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044f6:	e116      	b.n	8004726 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <HAL_SPI_Transmit+0x52>
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d102      	bne.n	800450a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004508:	e10d      	b.n	8004726 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2203      	movs	r2, #3
 800450e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	88fa      	ldrh	r2, [r7, #6]
 8004522:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	88fa      	ldrh	r2, [r7, #6]
 8004528:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004550:	d10f      	bne.n	8004572 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004560:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004570:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457c:	2b40      	cmp	r3, #64	; 0x40
 800457e:	d007      	beq.n	8004590 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800458e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004598:	d14f      	bne.n	800463a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <HAL_SPI_Transmit+0xf6>
 80045a2:	8afb      	ldrh	r3, [r7, #22]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d142      	bne.n	800462e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	881a      	ldrh	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	1c9a      	adds	r2, r3, #2
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045cc:	e02f      	b.n	800462e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d112      	bne.n	8004602 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e0:	881a      	ldrh	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	1c9a      	adds	r2, r3, #2
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8004600:	e015      	b.n	800462e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004602:	f7fd fd6d 	bl	80020e0 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d803      	bhi.n	800461a <HAL_SPI_Transmit+0x168>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004618:	d102      	bne.n	8004620 <HAL_SPI_Transmit+0x16e>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800462c:	e07b      	b.n	8004726 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1ca      	bne.n	80045ce <HAL_SPI_Transmit+0x11c>
 8004638:	e050      	b.n	80046dc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_SPI_Transmit+0x196>
 8004642:	8afb      	ldrh	r3, [r7, #22]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d144      	bne.n	80046d2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	330c      	adds	r3, #12
 8004652:	7812      	ldrb	r2, [r2, #0]
 8004654:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800466e:	e030      	b.n	80046d2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b02      	cmp	r3, #2
 800467c:	d113      	bne.n	80046a6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	330c      	adds	r3, #12
 8004688:	7812      	ldrb	r2, [r2, #0]
 800468a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80046a4:	e015      	b.n	80046d2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046a6:	f7fd fd1b 	bl	80020e0 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d803      	bhi.n	80046be <HAL_SPI_Transmit+0x20c>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d102      	bne.n	80046c4 <HAL_SPI_Transmit+0x212>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d106      	bne.n	80046d2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80046d0:	e029      	b.n	8004726 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1c9      	bne.n	8004670 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	6839      	ldr	r1, [r7, #0]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fbdf 	bl	8004ea4 <SPI_EndRxTxTransaction>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10a      	bne.n	8004710 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046fa:	2300      	movs	r3, #0
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e003      	b.n	8004726 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800472e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3720      	adds	r7, #32
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	d002      	beq.n	800475e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004758:	2302      	movs	r3, #2
 800475a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800475c:	e0fb      	b.n	8004956 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004766:	d112      	bne.n	800478e <HAL_SPI_Receive+0x56>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10e      	bne.n	800478e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2204      	movs	r2, #4
 8004774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004778:	88fa      	ldrh	r2, [r7, #6]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	4613      	mov	r3, r2
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f8ef 	bl	8004968 <HAL_SPI_TransmitReceive>
 800478a:	4603      	mov	r3, r0
 800478c:	e0e8      	b.n	8004960 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_SPI_Receive+0x64>
 8004798:	2302      	movs	r3, #2
 800479a:	e0e1      	b.n	8004960 <HAL_SPI_Receive+0x228>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047a4:	f7fd fc9c 	bl	80020e0 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_SPI_Receive+0x7e>
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047ba:	e0cc      	b.n	8004956 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2204      	movs	r2, #4
 80047c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	88fa      	ldrh	r2, [r7, #6]
 80047d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	88fa      	ldrh	r2, [r7, #6]
 80047da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004802:	d10f      	bne.n	8004824 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004812:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004822:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482e:	2b40      	cmp	r3, #64	; 0x40
 8004830:	d007      	beq.n	8004842 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004840:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d16a      	bne.n	8004920 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800484a:	e032      	b.n	80048b2 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b01      	cmp	r3, #1
 8004858:	d115      	bne.n	8004886 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f103 020c 	add.w	r2, r3, #12
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	7812      	ldrb	r2, [r2, #0]
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004884:	e015      	b.n	80048b2 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004886:	f7fd fc2b 	bl	80020e0 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d803      	bhi.n	800489e <HAL_SPI_Receive+0x166>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489c:	d102      	bne.n	80048a4 <HAL_SPI_Receive+0x16c>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80048b0:	e051      	b.n	8004956 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1c7      	bne.n	800484c <HAL_SPI_Receive+0x114>
 80048bc:	e035      	b.n	800492a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d113      	bne.n	80048f4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	b292      	uxth	r2, r2
 80048d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	1c9a      	adds	r2, r3, #2
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048f2:	e015      	b.n	8004920 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048f4:	f7fd fbf4 	bl	80020e0 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d803      	bhi.n	800490c <HAL_SPI_Receive+0x1d4>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490a:	d102      	bne.n	8004912 <HAL_SPI_Receive+0x1da>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800491e:	e01a      	b.n	8004956 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1c9      	bne.n	80048be <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	6839      	ldr	r1, [r7, #0]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 fa52 	bl	8004dd8 <SPI_EndRxTransaction>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2220      	movs	r2, #32
 800493e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	75fb      	strb	r3, [r7, #23]
 800494c:	e003      	b.n	8004956 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800495e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08c      	sub	sp, #48	; 0x30
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004976:	2301      	movs	r3, #1
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_SPI_TransmitReceive+0x26>
 800498a:	2302      	movs	r3, #2
 800498c:	e198      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x358>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004996:	f7fd fba3 	bl	80020e0 <HAL_GetTick>
 800499a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80049ac:	887b      	ldrh	r3, [r7, #2]
 80049ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d00f      	beq.n	80049d8 <HAL_SPI_TransmitReceive+0x70>
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049be:	d107      	bne.n	80049d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d103      	bne.n	80049d0 <HAL_SPI_TransmitReceive+0x68>
 80049c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d003      	beq.n	80049d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80049d0:	2302      	movs	r3, #2
 80049d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049d6:	e16d      	b.n	8004cb4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <HAL_SPI_TransmitReceive+0x82>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_SPI_TransmitReceive+0x82>
 80049e4:	887b      	ldrh	r3, [r7, #2]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d103      	bne.n	80049f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049f0:	e160      	b.n	8004cb4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d003      	beq.n	8004a06 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2205      	movs	r2, #5
 8004a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	887a      	ldrh	r2, [r7, #2]
 8004a16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	887a      	ldrh	r2, [r7, #2]
 8004a1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	887a      	ldrh	r2, [r7, #2]
 8004a28:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	887a      	ldrh	r2, [r7, #2]
 8004a2e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a46:	2b40      	cmp	r3, #64	; 0x40
 8004a48:	d007      	beq.n	8004a5a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a62:	d17c      	bne.n	8004b5e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <HAL_SPI_TransmitReceive+0x10a>
 8004a6c:	8b7b      	ldrh	r3, [r7, #26]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d16a      	bne.n	8004b48 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	881a      	ldrh	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	1c9a      	adds	r2, r3, #2
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a96:	e057      	b.n	8004b48 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d11b      	bne.n	8004ade <HAL_SPI_TransmitReceive+0x176>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d016      	beq.n	8004ade <HAL_SPI_TransmitReceive+0x176>
 8004ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d113      	bne.n	8004ade <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	881a      	ldrh	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	1c9a      	adds	r2, r3, #2
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d119      	bne.n	8004b20 <HAL_SPI_TransmitReceive+0x1b8>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d014      	beq.n	8004b20 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	b292      	uxth	r2, r2
 8004b02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	1c9a      	adds	r2, r3, #2
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b20:	f7fd fade 	bl	80020e0 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d80b      	bhi.n	8004b48 <HAL_SPI_TransmitReceive+0x1e0>
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d007      	beq.n	8004b48 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004b46:	e0b5      	b.n	8004cb4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1a2      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x130>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d19d      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x130>
 8004b5c:	e080      	b.n	8004c60 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <HAL_SPI_TransmitReceive+0x204>
 8004b66:	8b7b      	ldrh	r3, [r7, #26]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d16f      	bne.n	8004c4c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	330c      	adds	r3, #12
 8004b76:	7812      	ldrb	r2, [r2, #0]
 8004b78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b92:	e05b      	b.n	8004c4c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d11c      	bne.n	8004bdc <HAL_SPI_TransmitReceive+0x274>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d017      	beq.n	8004bdc <HAL_SPI_TransmitReceive+0x274>
 8004bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d114      	bne.n	8004bdc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	330c      	adds	r3, #12
 8004bbc:	7812      	ldrb	r2, [r2, #0]
 8004bbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d119      	bne.n	8004c1e <HAL_SPI_TransmitReceive+0x2b6>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d014      	beq.n	8004c1e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c1e:	f7fd fa5f 	bl	80020e0 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d803      	bhi.n	8004c36 <HAL_SPI_TransmitReceive+0x2ce>
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c34:	d102      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x2d4>
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d107      	bne.n	8004c4c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004c4a:	e033      	b.n	8004cb4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d19e      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x22c>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d199      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f91d 	bl	8004ea4 <SPI_EndRxTxTransaction>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d006      	beq.n	8004c7e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c7c:	e01a      	b.n	8004cb4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10a      	bne.n	8004c9c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004caa:	e003      	b.n	8004cb4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3730      	adds	r7, #48	; 0x30
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cd8:	f7fd fa02 	bl	80020e0 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ce8:	f7fd f9fa 	bl	80020e0 <HAL_GetTick>
 8004cec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cee:	4b39      	ldr	r3, [pc, #228]	; (8004dd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	015b      	lsls	r3, r3, #5
 8004cf4:	0d1b      	lsrs	r3, r3, #20
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	fb02 f303 	mul.w	r3, r2, r3
 8004cfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cfe:	e054      	b.n	8004daa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d06:	d050      	beq.n	8004daa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d08:	f7fd f9ea 	bl	80020e0 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	69fa      	ldr	r2, [r7, #28]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d902      	bls.n	8004d1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d13d      	bne.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d36:	d111      	bne.n	8004d5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d40:	d004      	beq.n	8004d4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4a:	d107      	bne.n	8004d5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d64:	d10f      	bne.n	8004d86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e017      	b.n	8004dca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4013      	ands	r3, r2
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	bf0c      	ite	eq
 8004dba:	2301      	moveq	r3, #1
 8004dbc:	2300      	movne	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d19b      	bne.n	8004d00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3720      	adds	r7, #32
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000000 	.word	0x20000000

08004dd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dec:	d111      	bne.n	8004e12 <SPI_EndRxTransaction+0x3a>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df6:	d004      	beq.n	8004e02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e00:	d107      	bne.n	8004e12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e10:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e1a:	d12a      	bne.n	8004e72 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e24:	d012      	beq.n	8004e4c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2180      	movs	r1, #128	; 0x80
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff ff49 	bl	8004cc8 <SPI_WaitFlagStateUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d02d      	beq.n	8004e98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e40:	f043 0220 	orr.w	r2, r3, #32
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e026      	b.n	8004e9a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2200      	movs	r2, #0
 8004e54:	2101      	movs	r1, #1
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f7ff ff36 	bl	8004cc8 <SPI_WaitFlagStateUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01a      	beq.n	8004e98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	f043 0220 	orr.w	r2, r3, #32
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e013      	b.n	8004e9a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff ff23 	bl	8004cc8 <SPI_WaitFlagStateUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d007      	beq.n	8004e98 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8c:	f043 0220 	orr.w	r2, r3, #32
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e000      	b.n	8004e9a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	2102      	movs	r1, #2
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f7ff ff04 	bl	8004cc8 <SPI_WaitFlagStateUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d007      	beq.n	8004ed6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	f043 0220 	orr.w	r2, r3, #32
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e032      	b.n	8004f3c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ed6:	4b1b      	ldr	r3, [pc, #108]	; (8004f44 <SPI_EndRxTxTransaction+0xa0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1b      	ldr	r2, [pc, #108]	; (8004f48 <SPI_EndRxTxTransaction+0xa4>)
 8004edc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee0:	0d5b      	lsrs	r3, r3, #21
 8004ee2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ee6:	fb02 f303 	mul.w	r3, r2, r3
 8004eea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ef4:	d112      	bne.n	8004f1c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2200      	movs	r2, #0
 8004efe:	2180      	movs	r1, #128	; 0x80
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7ff fee1 	bl	8004cc8 <SPI_WaitFlagStateUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d016      	beq.n	8004f3a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e00f      	b.n	8004f3c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f32:	2b80      	cmp	r3, #128	; 0x80
 8004f34:	d0f2      	beq.n	8004f1c <SPI_EndRxTxTransaction+0x78>
 8004f36:	e000      	b.n	8004f3a <SPI_EndRxTxTransaction+0x96>
        break;
 8004f38:	bf00      	nop
  }

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20000000 	.word	0x20000000
 8004f48:	165e9f81 	.word	0x165e9f81

08004f4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	f107 001c 	add.w	r0, r7, #28
 8004f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f5e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d123      	bne.n	8004fae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d105      	bne.n	8004fa2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f001 fae2 	bl	800656c <USB_CoreReset>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	73fb      	strb	r3, [r7, #15]
 8004fac:	e01b      	b.n	8004fe6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f001 fad6 	bl	800656c <USB_CoreReset>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fc4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d106      	bne.n	8004fda <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	639a      	str	r2, [r3, #56]	; 0x38
 8004fd8:	e005      	b.n	8004fe6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004fe6:	7fbb      	ldrb	r3, [r7, #30]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d10b      	bne.n	8005004 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f043 0206 	orr.w	r2, r3, #6
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f043 0220 	orr.w	r2, r3, #32
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005004:	7bfb      	ldrb	r3, [r7, #15]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005010:	b004      	add	sp, #16
 8005012:	4770      	bx	lr

08005014 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	4613      	mov	r3, r2
 8005020:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d165      	bne.n	80050f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4a41      	ldr	r2, [pc, #260]	; (8005130 <USB_SetTurnaroundTime+0x11c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d906      	bls.n	800503e <USB_SetTurnaroundTime+0x2a>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4a40      	ldr	r2, [pc, #256]	; (8005134 <USB_SetTurnaroundTime+0x120>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d202      	bcs.n	800503e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005038:	230f      	movs	r3, #15
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	e062      	b.n	8005104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	4a3c      	ldr	r2, [pc, #240]	; (8005134 <USB_SetTurnaroundTime+0x120>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d306      	bcc.n	8005054 <USB_SetTurnaroundTime+0x40>
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	4a3b      	ldr	r2, [pc, #236]	; (8005138 <USB_SetTurnaroundTime+0x124>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d202      	bcs.n	8005054 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800504e:	230e      	movs	r3, #14
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	e057      	b.n	8005104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4a38      	ldr	r2, [pc, #224]	; (8005138 <USB_SetTurnaroundTime+0x124>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d306      	bcc.n	800506a <USB_SetTurnaroundTime+0x56>
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4a37      	ldr	r2, [pc, #220]	; (800513c <USB_SetTurnaroundTime+0x128>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d202      	bcs.n	800506a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005064:	230d      	movs	r3, #13
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	e04c      	b.n	8005104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	4a33      	ldr	r2, [pc, #204]	; (800513c <USB_SetTurnaroundTime+0x128>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d306      	bcc.n	8005080 <USB_SetTurnaroundTime+0x6c>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	4a32      	ldr	r2, [pc, #200]	; (8005140 <USB_SetTurnaroundTime+0x12c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d802      	bhi.n	8005080 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800507a:	230c      	movs	r3, #12
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	e041      	b.n	8005104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4a2f      	ldr	r2, [pc, #188]	; (8005140 <USB_SetTurnaroundTime+0x12c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d906      	bls.n	8005096 <USB_SetTurnaroundTime+0x82>
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4a2e      	ldr	r2, [pc, #184]	; (8005144 <USB_SetTurnaroundTime+0x130>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d802      	bhi.n	8005096 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005090:	230b      	movs	r3, #11
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	e036      	b.n	8005104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	4a2a      	ldr	r2, [pc, #168]	; (8005144 <USB_SetTurnaroundTime+0x130>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d906      	bls.n	80050ac <USB_SetTurnaroundTime+0x98>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	4a29      	ldr	r2, [pc, #164]	; (8005148 <USB_SetTurnaroundTime+0x134>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d802      	bhi.n	80050ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80050a6:	230a      	movs	r3, #10
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	e02b      	b.n	8005104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4a26      	ldr	r2, [pc, #152]	; (8005148 <USB_SetTurnaroundTime+0x134>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d906      	bls.n	80050c2 <USB_SetTurnaroundTime+0xae>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4a25      	ldr	r2, [pc, #148]	; (800514c <USB_SetTurnaroundTime+0x138>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d202      	bcs.n	80050c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80050bc:	2309      	movs	r3, #9
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	e020      	b.n	8005104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	4a21      	ldr	r2, [pc, #132]	; (800514c <USB_SetTurnaroundTime+0x138>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d306      	bcc.n	80050d8 <USB_SetTurnaroundTime+0xc4>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	4a20      	ldr	r2, [pc, #128]	; (8005150 <USB_SetTurnaroundTime+0x13c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d802      	bhi.n	80050d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80050d2:	2308      	movs	r3, #8
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	e015      	b.n	8005104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <USB_SetTurnaroundTime+0x13c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d906      	bls.n	80050ee <USB_SetTurnaroundTime+0xda>
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <USB_SetTurnaroundTime+0x140>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d202      	bcs.n	80050ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80050e8:	2307      	movs	r3, #7
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	e00a      	b.n	8005104 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80050ee:	2306      	movs	r3, #6
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e007      	b.n	8005104 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d102      	bne.n	8005100 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80050fa:	2309      	movs	r3, #9
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	e001      	b.n	8005104 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005100:	2309      	movs	r3, #9
 8005102:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	029b      	lsls	r3, r3, #10
 8005118:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800511c:	431a      	orrs	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	00d8acbf 	.word	0x00d8acbf
 8005134:	00e4e1c0 	.word	0x00e4e1c0
 8005138:	00f42400 	.word	0x00f42400
 800513c:	01067380 	.word	0x01067380
 8005140:	011a499f 	.word	0x011a499f
 8005144:	01312cff 	.word	0x01312cff
 8005148:	014ca43f 	.word	0x014ca43f
 800514c:	016e3600 	.word	0x016e3600
 8005150:	01a6ab1f 	.word	0x01a6ab1f
 8005154:	01e84800 	.word	0x01e84800

08005158 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f043 0201 	orr.w	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f023 0201 	bic.w	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d115      	bne.n	80051ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80051ca:	200a      	movs	r0, #10
 80051cc:	f7fc ff94 	bl	80020f8 <HAL_Delay>
      ms += 10U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	330a      	adds	r3, #10
 80051d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f001 f939 	bl	800644e <USB_GetMode>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d01e      	beq.n	8005220 <USB_SetCurrentMode+0x84>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2bc7      	cmp	r3, #199	; 0xc7
 80051e6:	d9f0      	bls.n	80051ca <USB_SetCurrentMode+0x2e>
 80051e8:	e01a      	b.n	8005220 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051ea:	78fb      	ldrb	r3, [r7, #3]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d115      	bne.n	800521c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80051fc:	200a      	movs	r0, #10
 80051fe:	f7fc ff7b 	bl	80020f8 <HAL_Delay>
      ms += 10U;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	330a      	adds	r3, #10
 8005206:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f001 f920 	bl	800644e <USB_GetMode>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d005      	beq.n	8005220 <USB_SetCurrentMode+0x84>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2bc7      	cmp	r3, #199	; 0xc7
 8005218:	d9f0      	bls.n	80051fc <USB_SetCurrentMode+0x60>
 800521a:	e001      	b.n	8005220 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e005      	b.n	800522c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2bc8      	cmp	r3, #200	; 0xc8
 8005224:	d101      	bne.n	800522a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005234:	b084      	sub	sp, #16
 8005236:	b580      	push	{r7, lr}
 8005238:	b086      	sub	sp, #24
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800524e:	2300      	movs	r3, #0
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	e009      	b.n	8005268 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	3340      	adds	r3, #64	; 0x40
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	2200      	movs	r2, #0
 8005260:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	3301      	adds	r3, #1
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b0e      	cmp	r3, #14
 800526c:	d9f2      	bls.n	8005254 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800526e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005272:	2b00      	cmp	r3, #0
 8005274:	d11c      	bne.n	80052b0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005284:	f043 0302 	orr.w	r3, r3, #2
 8005288:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	639a      	str	r2, [r3, #56]	; 0x38
 80052ae:	e00b      	b.n	80052c8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052ce:	461a      	mov	r2, r3
 80052d0:	2300      	movs	r3, #0
 80052d2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052d4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d10d      	bne.n	80052f8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052e4:	2100      	movs	r1, #0
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f968 	bl	80055bc <USB_SetDevSpeed>
 80052ec:	e008      	b.n	8005300 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052ee:	2101      	movs	r1, #1
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f963 	bl	80055bc <USB_SetDevSpeed>
 80052f6:	e003      	b.n	8005300 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052f8:	2103      	movs	r1, #3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f95e 	bl	80055bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005300:	2110      	movs	r1, #16
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f8fa 	bl	80054fc <USB_FlushTxFifo>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f924 	bl	8005560 <USB_FlushRxFifo>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005328:	461a      	mov	r2, r3
 800532a:	2300      	movs	r3, #0
 800532c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005334:	461a      	mov	r2, r3
 8005336:	2300      	movs	r3, #0
 8005338:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005340:	461a      	mov	r2, r3
 8005342:	2300      	movs	r3, #0
 8005344:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005346:	2300      	movs	r3, #0
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	e043      	b.n	80053d4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800535e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005362:	d118      	bne.n	8005396 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10a      	bne.n	8005380 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005376:	461a      	mov	r2, r3
 8005378:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	e013      	b.n	80053a8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538c:	461a      	mov	r2, r3
 800538e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	e008      	b.n	80053a8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a2:	461a      	mov	r2, r3
 80053a4:	2300      	movs	r3, #0
 80053a6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b4:	461a      	mov	r2, r3
 80053b6:	2300      	movs	r3, #0
 80053b8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c6:	461a      	mov	r2, r3
 80053c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	3301      	adds	r3, #1
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80053d8:	461a      	mov	r2, r3
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	4293      	cmp	r3, r2
 80053de:	d3b5      	bcc.n	800534c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053e0:	2300      	movs	r3, #0
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	e043      	b.n	800546e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053fc:	d118      	bne.n	8005430 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10a      	bne.n	800541a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005410:	461a      	mov	r2, r3
 8005412:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	e013      	b.n	8005442 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005426:	461a      	mov	r2, r3
 8005428:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e008      	b.n	8005442 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543c:	461a      	mov	r2, r3
 800543e:	2300      	movs	r3, #0
 8005440:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544e:	461a      	mov	r2, r3
 8005450:	2300      	movs	r3, #0
 8005452:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005460:	461a      	mov	r2, r3
 8005462:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005466:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	3301      	adds	r3, #1
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005472:	461a      	mov	r2, r3
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	4293      	cmp	r3, r2
 8005478:	d3b5      	bcc.n	80053e6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800548c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800549a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800549c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d105      	bne.n	80054b0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	f043 0210 	orr.w	r2, r3, #16
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699a      	ldr	r2, [r3, #24]
 80054b4:	4b10      	ldr	r3, [pc, #64]	; (80054f8 <USB_DevInit+0x2c4>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	f043 0208 	orr.w	r2, r3, #8
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d107      	bne.n	80054e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054e0:	f043 0304 	orr.w	r3, r3, #4
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054f4:	b004      	add	sp, #16
 80054f6:	4770      	bx	lr
 80054f8:	803c3800 	.word	0x803c3800

080054fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3301      	adds	r3, #1
 800550e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005516:	d901      	bls.n	800551c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e01b      	b.n	8005554 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	daf2      	bge.n	800550a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	019b      	lsls	r3, r3, #6
 800552c:	f043 0220 	orr.w	r2, r3, #32
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	3301      	adds	r3, #1
 8005538:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005540:	d901      	bls.n	8005546 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e006      	b.n	8005554 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b20      	cmp	r3, #32
 8005550:	d0f0      	beq.n	8005534 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3301      	adds	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005578:	d901      	bls.n	800557e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e018      	b.n	80055b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	daf2      	bge.n	800556c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2210      	movs	r2, #16
 800558e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3301      	adds	r3, #1
 8005594:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800559c:	d901      	bls.n	80055a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e006      	b.n	80055b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	2b10      	cmp	r3, #16
 80055ac:	d0f0      	beq.n	8005590 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	68f9      	ldr	r1, [r7, #12]
 80055d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055dc:	4313      	orrs	r3, r2
 80055de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b087      	sub	sp, #28
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 0306 	and.w	r3, r3, #6
 8005606:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800560e:	2300      	movs	r3, #0
 8005610:	75fb      	strb	r3, [r7, #23]
 8005612:	e00a      	b.n	800562a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d002      	beq.n	8005620 <USB_GetDevSpeed+0x32>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b06      	cmp	r3, #6
 800561e:	d102      	bne.n	8005626 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005620:	2302      	movs	r3, #2
 8005622:	75fb      	strb	r3, [r7, #23]
 8005624:	e001      	b.n	800562a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005626:	230f      	movs	r3, #15
 8005628:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800562a:	7dfb      	ldrb	r3, [r7, #23]
}
 800562c:	4618      	mov	r0, r3
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	785b      	ldrb	r3, [r3, #1]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d13a      	bne.n	80056ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	f003 030f 	and.w	r3, r3, #15
 8005664:	2101      	movs	r1, #1
 8005666:	fa01 f303 	lsl.w	r3, r1, r3
 800566a:	b29b      	uxth	r3, r3
 800566c:	68f9      	ldr	r1, [r7, #12]
 800566e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005672:	4313      	orrs	r3, r2
 8005674:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d155      	bne.n	8005738 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	791b      	ldrb	r3, [r3, #4]
 80056a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	059b      	lsls	r3, r3, #22
 80056ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056b0:	4313      	orrs	r3, r2
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	0151      	lsls	r1, r2, #5
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	440a      	add	r2, r1
 80056ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	e036      	b.n	8005738 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d0:	69da      	ldr	r2, [r3, #28]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	2101      	movs	r1, #1
 80056dc:	fa01 f303 	lsl.w	r3, r1, r3
 80056e0:	041b      	lsls	r3, r3, #16
 80056e2:	68f9      	ldr	r1, [r7, #12]
 80056e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e8:	4313      	orrs	r3, r2
 80056ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d11a      	bne.n	8005738 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	791b      	ldrb	r3, [r3, #4]
 800571c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800571e:	430b      	orrs	r3, r1
 8005720:	4313      	orrs	r3, r2
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	0151      	lsls	r1, r2, #5
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	440a      	add	r2, r1
 800572a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800572e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005736:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
	...

08005748 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	785b      	ldrb	r3, [r3, #1]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d161      	bne.n	8005828 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800577a:	d11f      	bne.n	80057bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	0151      	lsls	r1, r2, #5
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	440a      	add	r2, r1
 8005792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005796:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800579a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	f003 030f 	and.w	r3, r3, #15
 80057cc:	2101      	movs	r1, #1
 80057ce:	fa01 f303 	lsl.w	r3, r1, r3
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	43db      	mvns	r3, r3
 80057d6:	68f9      	ldr	r1, [r7, #12]
 80057d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057dc:	4013      	ands	r3, r2
 80057de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	f003 030f 	and.w	r3, r3, #15
 80057f0:	2101      	movs	r1, #1
 80057f2:	fa01 f303 	lsl.w	r3, r1, r3
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	43db      	mvns	r3, r3
 80057fa:	68f9      	ldr	r1, [r7, #12]
 80057fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005800:	4013      	ands	r3, r2
 8005802:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	0159      	lsls	r1, r3, #5
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	440b      	add	r3, r1
 800581a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581e:	4619      	mov	r1, r3
 8005820:	4b35      	ldr	r3, [pc, #212]	; (80058f8 <USB_DeactivateEndpoint+0x1b0>)
 8005822:	4013      	ands	r3, r2
 8005824:	600b      	str	r3, [r1, #0]
 8005826:	e060      	b.n	80058ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800583a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800583e:	d11f      	bne.n	8005880 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	440a      	add	r2, r1
 8005856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800585a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800585e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	0151      	lsls	r1, r2, #5
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	440a      	add	r2, r1
 8005876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800587a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800587e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	2101      	movs	r1, #1
 8005892:	fa01 f303 	lsl.w	r3, r1, r3
 8005896:	041b      	lsls	r3, r3, #16
 8005898:	43db      	mvns	r3, r3
 800589a:	68f9      	ldr	r1, [r7, #12]
 800589c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058a0:	4013      	ands	r3, r2
 80058a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058aa:	69da      	ldr	r2, [r3, #28]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	2101      	movs	r1, #1
 80058b6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ba:	041b      	lsls	r3, r3, #16
 80058bc:	43db      	mvns	r3, r3
 80058be:	68f9      	ldr	r1, [r7, #12]
 80058c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c4:	4013      	ands	r3, r2
 80058c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	0159      	lsls	r1, r3, #5
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	440b      	add	r3, r1
 80058de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e2:	4619      	mov	r1, r3
 80058e4:	4b05      	ldr	r3, [pc, #20]	; (80058fc <USB_DeactivateEndpoint+0x1b4>)
 80058e6:	4013      	ands	r3, r2
 80058e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	ec337800 	.word	0xec337800
 80058fc:	eff37800 	.word	0xeff37800

08005900 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	4613      	mov	r3, r2
 800590c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	785b      	ldrb	r3, [r3, #1]
 800591c:	2b01      	cmp	r3, #1
 800591e:	f040 817a 	bne.w	8005c16 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d132      	bne.n	8005990 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	69fa      	ldr	r2, [r7, #28]
 800593e:	440a      	add	r2, r1
 8005940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005944:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005948:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800594c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	0151      	lsls	r1, r2, #5
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	440a      	add	r2, r1
 8005964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800596c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	440a      	add	r2, r1
 8005984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005988:	0cdb      	lsrs	r3, r3, #19
 800598a:	04db      	lsls	r3, r3, #19
 800598c:	6113      	str	r3, [r2, #16]
 800598e:	e092      	b.n	8005ab6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	0151      	lsls	r1, r2, #5
 80059a2:	69fa      	ldr	r2, [r7, #28]
 80059a4:	440a      	add	r2, r1
 80059a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059aa:	0cdb      	lsrs	r3, r3, #19
 80059ac:	04db      	lsls	r3, r3, #19
 80059ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	0151      	lsls	r1, r2, #5
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	440a      	add	r2, r1
 80059c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059d2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d11a      	bne.n	8005a10 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d903      	bls.n	80059ee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	0151      	lsls	r1, r2, #5
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	440a      	add	r2, r1
 8005a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a0c:	6113      	str	r3, [r2, #16]
 8005a0e:	e01b      	b.n	8005a48 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	6919      	ldr	r1, [r3, #16]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	440b      	add	r3, r1
 8005a28:	1e59      	subs	r1, r3, #1
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a32:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a34:	4ba2      	ldr	r3, [pc, #648]	; (8005cc0 <USB_EPStartXfer+0x3c0>)
 8005a36:	400b      	ands	r3, r1
 8005a38:	69b9      	ldr	r1, [r7, #24]
 8005a3a:	0148      	lsls	r0, r1, #5
 8005a3c:	69f9      	ldr	r1, [r7, #28]
 8005a3e:	4401      	add	r1, r0
 8005a40:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a44:	4313      	orrs	r3, r2
 8005a46:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	691a      	ldr	r2, [r3, #16]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a5e:	69b9      	ldr	r1, [r7, #24]
 8005a60:	0148      	lsls	r0, r1, #5
 8005a62:	69f9      	ldr	r1, [r7, #28]
 8005a64:	4401      	add	r1, r0
 8005a66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	791b      	ldrb	r3, [r3, #4]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d11f      	bne.n	8005ab6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	0151      	lsls	r1, r2, #5
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a90:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005a94:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	0151      	lsls	r1, r2, #5
 8005aa8:	69fa      	ldr	r2, [r7, #28]
 8005aaa:	440a      	add	r2, r1
 8005aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ab4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d14b      	bne.n	8005b54 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d009      	beq.n	8005ad8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	791b      	ldrb	r3, [r3, #4]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d128      	bne.n	8005b32 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d110      	bne.n	8005b12 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	e00f      	b.n	8005b32 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	69fa      	ldr	r2, [r7, #28]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b30:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	0151      	lsls	r1, r2, #5
 8005b44:	69fa      	ldr	r2, [r7, #28]
 8005b46:	440a      	add	r2, r1
 8005b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	e165      	b.n	8005e20 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b72:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	791b      	ldrb	r3, [r3, #4]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d015      	beq.n	8005ba8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 814d 	beq.w	8005e20 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	2101      	movs	r1, #1
 8005b98:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9c:	69f9      	ldr	r1, [r7, #28]
 8005b9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	634b      	str	r3, [r1, #52]	; 0x34
 8005ba6:	e13b      	b.n	8005e20 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d110      	bne.n	8005bda <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	e00f      	b.n	8005bfa <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	68d9      	ldr	r1, [r3, #12]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	781a      	ldrb	r2, [r3, #0]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	b298      	uxth	r0, r3
 8005c08:	79fb      	ldrb	r3, [r7, #7]
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 f9b8 	bl	8005f84 <USB_WritePacket>
 8005c14:	e104      	b.n	8005e20 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	0151      	lsls	r1, r2, #5
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	440a      	add	r2, r1
 8005c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c30:	0cdb      	lsrs	r3, r3, #19
 8005c32:	04db      	lsls	r3, r3, #19
 8005c34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c58:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d131      	bne.n	8005cc4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c84:	691a      	ldr	r2, [r3, #16]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c8e:	69b9      	ldr	r1, [r7, #24]
 8005c90:	0148      	lsls	r0, r1, #5
 8005c92:	69f9      	ldr	r1, [r7, #28]
 8005c94:	4401      	add	r1, r0
 8005c96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cbc:	6113      	str	r3, [r2, #16]
 8005cbe:	e061      	b.n	8005d84 <USB_EPStartXfer+0x484>
 8005cc0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d123      	bne.n	8005d14 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	691a      	ldr	r2, [r3, #16]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ce2:	69b9      	ldr	r1, [r7, #24]
 8005ce4:	0148      	lsls	r0, r1, #5
 8005ce6:	69f9      	ldr	r1, [r7, #28]
 8005ce8:	4401      	add	r1, r0
 8005cea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	0151      	lsls	r1, r2, #5
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	440a      	add	r2, r1
 8005d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d10:	6113      	str	r3, [r2, #16]
 8005d12:	e037      	b.n	8005d84 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	1e5a      	subs	r2, r3, #1
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d28:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	8afa      	ldrh	r2, [r7, #22]
 8005d30:	fb03 f202 	mul.w	r2, r3, r2
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	8afb      	ldrh	r3, [r7, #22]
 8005d48:	04d9      	lsls	r1, r3, #19
 8005d4a:	4b38      	ldr	r3, [pc, #224]	; (8005e2c <USB_EPStartXfer+0x52c>)
 8005d4c:	400b      	ands	r3, r1
 8005d4e:	69b9      	ldr	r1, [r7, #24]
 8005d50:	0148      	lsls	r0, r1, #5
 8005d52:	69f9      	ldr	r1, [r7, #28]
 8005d54:	4401      	add	r1, r0
 8005d56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6a:	691a      	ldr	r2, [r3, #16]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d74:	69b9      	ldr	r1, [r7, #24]
 8005d76:	0148      	lsls	r0, r1, #5
 8005d78:	69f9      	ldr	r1, [r7, #28]
 8005d7a:	4401      	add	r1, r0
 8005d7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d80:	4313      	orrs	r3, r2
 8005d82:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005d84:	79fb      	ldrb	r3, [r7, #7]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d10d      	bne.n	8005da6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	68d9      	ldr	r1, [r3, #12]
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da2:	460a      	mov	r2, r1
 8005da4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	791b      	ldrb	r3, [r3, #4]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d128      	bne.n	8005e00 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d110      	bne.n	8005de0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	e00f      	b.n	8005e00 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	0151      	lsls	r1, r2, #5
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	440a      	add	r2, r1
 8005df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dfe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	0151      	lsls	r1, r2, #5
 8005e12:	69fa      	ldr	r2, [r7, #28]
 8005e14:	440a      	add	r2, r1
 8005e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3720      	adds	r7, #32
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	1ff80000 	.word	0x1ff80000

08005e30 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	785b      	ldrb	r3, [r3, #1]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d14a      	bne.n	8005ee4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e66:	f040 8086 	bne.w	8005f76 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	7812      	ldrb	r2, [r2, #0]
 8005e7e:	0151      	lsls	r1, r2, #5
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	440a      	add	r2, r1
 8005e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e8c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	7812      	ldrb	r2, [r2, #0]
 8005ea2:	0151      	lsls	r1, r2, #5
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	440a      	add	r2, r1
 8005ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d902      	bls.n	8005ec8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ec6:	e056      	b.n	8005f76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005edc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ee0:	d0e7      	beq.n	8005eb2 <USB_EPStopXfer+0x82>
 8005ee2:	e048      	b.n	8005f76 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005efc:	d13b      	bne.n	8005f76 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	7812      	ldrb	r2, [r2, #0]
 8005f12:	0151      	lsls	r1, r2, #5
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	440a      	add	r2, r1
 8005f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f20:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	7812      	ldrb	r2, [r2, #0]
 8005f36:	0151      	lsls	r1, r2, #5
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	440a      	add	r2, r1
 8005f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d902      	bls.n	8005f5c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	75fb      	strb	r3, [r7, #23]
          break;
 8005f5a:	e00c      	b.n	8005f76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f74:	d0e7      	beq.n	8005f46 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	371c      	adds	r7, #28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b089      	sub	sp, #36	; 0x24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	4611      	mov	r1, r2
 8005f90:	461a      	mov	r2, r3
 8005f92:	460b      	mov	r3, r1
 8005f94:	71fb      	strb	r3, [r7, #7]
 8005f96:	4613      	mov	r3, r2
 8005f98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005fa2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d123      	bne.n	8005ff2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005faa:	88bb      	ldrh	r3, [r7, #4]
 8005fac:	3303      	adds	r3, #3
 8005fae:	089b      	lsrs	r3, r3, #2
 8005fb0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	61bb      	str	r3, [r7, #24]
 8005fb6:	e018      	b.n	8005fea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fb8:	79fb      	ldrb	r3, [r7, #7]
 8005fba:	031a      	lsls	r2, r3, #12
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d3e2      	bcc.n	8005fb8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3724      	adds	r7, #36	; 0x24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006000:	b480      	push	{r7}
 8006002:	b08b      	sub	sp, #44	; 0x2c
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	4613      	mov	r3, r2
 800600c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006016:	88fb      	ldrh	r3, [r7, #6]
 8006018:	089b      	lsrs	r3, r3, #2
 800601a:	b29b      	uxth	r3, r3
 800601c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800601e:	88fb      	ldrh	r3, [r7, #6]
 8006020:	f003 0303 	and.w	r3, r3, #3
 8006024:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006026:	2300      	movs	r3, #0
 8006028:	623b      	str	r3, [r7, #32]
 800602a:	e014      	b.n	8006056 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	601a      	str	r2, [r3, #0]
    pDest++;
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	3301      	adds	r3, #1
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	3301      	adds	r3, #1
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	3301      	adds	r3, #1
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	3301      	adds	r3, #1
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	3301      	adds	r3, #1
 8006054:	623b      	str	r3, [r7, #32]
 8006056:	6a3a      	ldr	r2, [r7, #32]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	429a      	cmp	r2, r3
 800605c:	d3e6      	bcc.n	800602c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800605e:	8bfb      	ldrh	r3, [r7, #30]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d01e      	beq.n	80060a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800606e:	461a      	mov	r2, r3
 8006070:	f107 0310 	add.w	r3, r7, #16
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	fa22 f303 	lsr.w	r3, r2, r3
 8006084:	b2da      	uxtb	r2, r3
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	701a      	strb	r2, [r3, #0]
      i++;
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	3301      	adds	r3, #1
 800608e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	3301      	adds	r3, #1
 8006094:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006096:	8bfb      	ldrh	r3, [r7, #30]
 8006098:	3b01      	subs	r3, #1
 800609a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800609c:	8bfb      	ldrh	r3, [r7, #30]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1ea      	bne.n	8006078 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	372c      	adds	r7, #44	; 0x2c
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	785b      	ldrb	r3, [r3, #1]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d12c      	bne.n	8006126 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	db12      	blt.n	8006104 <USB_EPSetStall+0x54>
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00f      	beq.n	8006104 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006102:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	0151      	lsls	r1, r2, #5
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	440a      	add	r2, r1
 800611a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800611e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	e02b      	b.n	800617e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	db12      	blt.n	800615e <USB_EPSetStall+0xae>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00f      	beq.n	800615e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	0151      	lsls	r1, r2, #5
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	440a      	add	r2, r1
 8006154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006158:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800615c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	0151      	lsls	r1, r2, #5
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	440a      	add	r2, r1
 8006174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006178:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800617c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	785b      	ldrb	r3, [r3, #1]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d128      	bne.n	80061fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	791b      	ldrb	r3, [r3, #4]
 80061cc:	2b03      	cmp	r3, #3
 80061ce:	d003      	beq.n	80061d8 <USB_EPClearStall+0x4c>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	791b      	ldrb	r3, [r3, #4]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d138      	bne.n	800624a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	0151      	lsls	r1, r2, #5
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	440a      	add	r2, r1
 80061ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	e027      	b.n	800624a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	440a      	add	r2, r1
 8006210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006214:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006218:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	791b      	ldrb	r3, [r3, #4]
 800621e:	2b03      	cmp	r3, #3
 8006220:	d003      	beq.n	800622a <USB_EPClearStall+0x9e>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	791b      	ldrb	r3, [r3, #4]
 8006226:	2b02      	cmp	r3, #2
 8006228:	d10f      	bne.n	800624a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006248:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006276:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800627a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800628c:	68f9      	ldr	r1, [r7, #12]
 800628e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006292:	4313      	orrs	r3, r2
 8006294:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062be:	f023 0303 	bic.w	r3, r3, #3
 80062c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062d2:	f023 0302 	bic.w	r3, r3, #2
 80062d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b085      	sub	sp, #20
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006300:	f023 0303 	bic.w	r3, r3, #3
 8006304:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006314:	f043 0302 	orr.w	r3, r3, #2
 8006318:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4013      	ands	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006340:	68fb      	ldr	r3, [r7, #12]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800634e:	b480      	push	{r7}
 8006350:	b085      	sub	sp, #20
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	4013      	ands	r3, r2
 8006370:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	0c1b      	lsrs	r3, r3, #16
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006382:	b480      	push	{r7}
 8006384:	b085      	sub	sp, #20
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	4013      	ands	r3, r2
 80063a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	b29b      	uxth	r3, r3
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b085      	sub	sp, #20
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	460b      	mov	r3, r1
 80063c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	4013      	ands	r3, r2
 80063e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063e4:	68bb      	ldr	r3, [r7, #8]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b087      	sub	sp, #28
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	460b      	mov	r3, r1
 80063fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006414:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	f003 030f 	and.w	r3, r3, #15
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	fa22 f303 	lsr.w	r3, r2, r3
 8006422:	01db      	lsls	r3, r3, #7
 8006424:	b2db      	uxtb	r3, r3
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4313      	orrs	r3, r2
 800642a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800642c:	78fb      	ldrb	r3, [r7, #3]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4013      	ands	r3, r2
 800643e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006440:	68bb      	ldr	r3, [r7, #8]
}
 8006442:	4618      	mov	r0, r3
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	f003 0301 	and.w	r3, r3, #1
}
 800645e:	4618      	mov	r0, r3
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800646a:	b480      	push	{r7}
 800646c:	b085      	sub	sp, #20
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006484:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006488:	f023 0307 	bic.w	r3, r3, #7
 800648c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800649c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	460b      	mov	r3, r1
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	333c      	adds	r3, #60	; 0x3c
 80064c6:	3304      	adds	r3, #4
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	4a26      	ldr	r2, [pc, #152]	; (8006568 <USB_EP0_OutStart+0xb8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d90a      	bls.n	80064ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064e4:	d101      	bne.n	80064ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	e037      	b.n	800655a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f0:	461a      	mov	r2, r3
 80064f2:	2300      	movs	r3, #0
 80064f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006518:	f043 0318 	orr.w	r3, r3, #24
 800651c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800652c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006530:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006532:	7afb      	ldrb	r3, [r7, #11]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d10f      	bne.n	8006558 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653e:	461a      	mov	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006552:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006556:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	4f54300a 	.word	0x4f54300a

0800656c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	3301      	adds	r3, #1
 800657c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006584:	d901      	bls.n	800658a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e01b      	b.n	80065c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	daf2      	bge.n	8006578 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f043 0201 	orr.w	r2, r3, #1
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3301      	adds	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80065ae:	d901      	bls.n	80065b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e006      	b.n	80065c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d0f0      	beq.n	80065a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
	...

080065d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	460b      	mov	r3, r1
 80065da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065e0:	f002 fc8e 	bl	8008f00 <USBD_static_malloc>
 80065e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d109      	bne.n	8006600 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	32b0      	adds	r2, #176	; 0xb0
 80065f6:	2100      	movs	r1, #0
 80065f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80065fc:	2302      	movs	r3, #2
 80065fe:	e0d4      	b.n	80067aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006600:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006604:	2100      	movs	r1, #0
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f003 fd52 	bl	800a0b0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	32b0      	adds	r2, #176	; 0xb0
 8006616:	68f9      	ldr	r1, [r7, #12]
 8006618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	32b0      	adds	r2, #176	; 0xb0
 8006626:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	7c1b      	ldrb	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d138      	bne.n	80066aa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006638:	4b5e      	ldr	r3, [pc, #376]	; (80067b4 <USBD_CDC_Init+0x1e4>)
 800663a:	7819      	ldrb	r1, [r3, #0]
 800663c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006640:	2202      	movs	r2, #2
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f002 fb39 	bl	8008cba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006648:	4b5a      	ldr	r3, [pc, #360]	; (80067b4 <USBD_CDC_Init+0x1e4>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	f003 020f 	and.w	r2, r3, #15
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	440b      	add	r3, r1
 800665c:	3324      	adds	r3, #36	; 0x24
 800665e:	2201      	movs	r2, #1
 8006660:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006662:	4b55      	ldr	r3, [pc, #340]	; (80067b8 <USBD_CDC_Init+0x1e8>)
 8006664:	7819      	ldrb	r1, [r3, #0]
 8006666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800666a:	2202      	movs	r2, #2
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f002 fb24 	bl	8008cba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006672:	4b51      	ldr	r3, [pc, #324]	; (80067b8 <USBD_CDC_Init+0x1e8>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	f003 020f 	and.w	r2, r3, #15
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	4613      	mov	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	440b      	add	r3, r1
 8006686:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800668a:	2201      	movs	r2, #1
 800668c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800668e:	4b4b      	ldr	r3, [pc, #300]	; (80067bc <USBD_CDC_Init+0x1ec>)
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	f003 020f 	and.w	r2, r3, #15
 8006696:	6879      	ldr	r1, [r7, #4]
 8006698:	4613      	mov	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	440b      	add	r3, r1
 80066a2:	3326      	adds	r3, #38	; 0x26
 80066a4:	2210      	movs	r2, #16
 80066a6:	801a      	strh	r2, [r3, #0]
 80066a8:	e035      	b.n	8006716 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066aa:	4b42      	ldr	r3, [pc, #264]	; (80067b4 <USBD_CDC_Init+0x1e4>)
 80066ac:	7819      	ldrb	r1, [r3, #0]
 80066ae:	2340      	movs	r3, #64	; 0x40
 80066b0:	2202      	movs	r2, #2
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f002 fb01 	bl	8008cba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066b8:	4b3e      	ldr	r3, [pc, #248]	; (80067b4 <USBD_CDC_Init+0x1e4>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	f003 020f 	and.w	r2, r3, #15
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	4613      	mov	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	440b      	add	r3, r1
 80066cc:	3324      	adds	r3, #36	; 0x24
 80066ce:	2201      	movs	r2, #1
 80066d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066d2:	4b39      	ldr	r3, [pc, #228]	; (80067b8 <USBD_CDC_Init+0x1e8>)
 80066d4:	7819      	ldrb	r1, [r3, #0]
 80066d6:	2340      	movs	r3, #64	; 0x40
 80066d8:	2202      	movs	r2, #2
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f002 faed 	bl	8008cba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066e0:	4b35      	ldr	r3, [pc, #212]	; (80067b8 <USBD_CDC_Init+0x1e8>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	f003 020f 	and.w	r2, r3, #15
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	4613      	mov	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	440b      	add	r3, r1
 80066f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066f8:	2201      	movs	r2, #1
 80066fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80066fc:	4b2f      	ldr	r3, [pc, #188]	; (80067bc <USBD_CDC_Init+0x1ec>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	f003 020f 	and.w	r2, r3, #15
 8006704:	6879      	ldr	r1, [r7, #4]
 8006706:	4613      	mov	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	440b      	add	r3, r1
 8006710:	3326      	adds	r3, #38	; 0x26
 8006712:	2210      	movs	r2, #16
 8006714:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006716:	4b29      	ldr	r3, [pc, #164]	; (80067bc <USBD_CDC_Init+0x1ec>)
 8006718:	7819      	ldrb	r1, [r3, #0]
 800671a:	2308      	movs	r3, #8
 800671c:	2203      	movs	r2, #3
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f002 facb 	bl	8008cba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006724:	4b25      	ldr	r3, [pc, #148]	; (80067bc <USBD_CDC_Init+0x1ec>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	f003 020f 	and.w	r2, r3, #15
 800672c:	6879      	ldr	r1, [r7, #4]
 800672e:	4613      	mov	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	440b      	add	r3, r1
 8006738:	3324      	adds	r3, #36	; 0x24
 800673a:	2201      	movs	r2, #1
 800673c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	33b0      	adds	r3, #176	; 0xb0
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006774:	2302      	movs	r3, #2
 8006776:	e018      	b.n	80067aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	7c1b      	ldrb	r3, [r3, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10a      	bne.n	8006796 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006780:	4b0d      	ldr	r3, [pc, #52]	; (80067b8 <USBD_CDC_Init+0x1e8>)
 8006782:	7819      	ldrb	r1, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800678a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f002 fb82 	bl	8008e98 <USBD_LL_PrepareReceive>
 8006794:	e008      	b.n	80067a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006796:	4b08      	ldr	r3, [pc, #32]	; (80067b8 <USBD_CDC_Init+0x1e8>)
 8006798:	7819      	ldrb	r1, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067a0:	2340      	movs	r3, #64	; 0x40
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f002 fb78 	bl	8008e98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	20000093 	.word	0x20000093
 80067b8:	20000094 	.word	0x20000094
 80067bc:	20000095 	.word	0x20000095

080067c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80067cc:	4b3a      	ldr	r3, [pc, #232]	; (80068b8 <USBD_CDC_DeInit+0xf8>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f002 fa97 	bl	8008d06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80067d8:	4b37      	ldr	r3, [pc, #220]	; (80068b8 <USBD_CDC_DeInit+0xf8>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	f003 020f 	and.w	r2, r3, #15
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	4613      	mov	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	440b      	add	r3, r1
 80067ec:	3324      	adds	r3, #36	; 0x24
 80067ee:	2200      	movs	r2, #0
 80067f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80067f2:	4b32      	ldr	r3, [pc, #200]	; (80068bc <USBD_CDC_DeInit+0xfc>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f002 fa84 	bl	8008d06 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80067fe:	4b2f      	ldr	r3, [pc, #188]	; (80068bc <USBD_CDC_DeInit+0xfc>)
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	f003 020f 	and.w	r2, r3, #15
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	4613      	mov	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	440b      	add	r3, r1
 8006812:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006816:	2200      	movs	r2, #0
 8006818:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800681a:	4b29      	ldr	r3, [pc, #164]	; (80068c0 <USBD_CDC_DeInit+0x100>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f002 fa70 	bl	8008d06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006826:	4b26      	ldr	r3, [pc, #152]	; (80068c0 <USBD_CDC_DeInit+0x100>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	f003 020f 	and.w	r2, r3, #15
 800682e:	6879      	ldr	r1, [r7, #4]
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	440b      	add	r3, r1
 800683a:	3324      	adds	r3, #36	; 0x24
 800683c:	2200      	movs	r2, #0
 800683e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006840:	4b1f      	ldr	r3, [pc, #124]	; (80068c0 <USBD_CDC_DeInit+0x100>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	f003 020f 	and.w	r2, r3, #15
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	4613      	mov	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	440b      	add	r3, r1
 8006854:	3326      	adds	r3, #38	; 0x26
 8006856:	2200      	movs	r2, #0
 8006858:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	32b0      	adds	r2, #176	; 0xb0
 8006864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01f      	beq.n	80068ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	33b0      	adds	r3, #176	; 0xb0
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	32b0      	adds	r2, #176	; 0xb0
 800688a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688e:	4618      	mov	r0, r3
 8006890:	f002 fb44 	bl	8008f1c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	32b0      	adds	r2, #176	; 0xb0
 800689e:	2100      	movs	r1, #0
 80068a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	20000093 	.word	0x20000093
 80068bc:	20000094 	.word	0x20000094
 80068c0:	20000095 	.word	0x20000095

080068c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	32b0      	adds	r2, #176	; 0xb0
 80068d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e0bf      	b.n	8006a74 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d050      	beq.n	80069a2 <USBD_CDC_Setup+0xde>
 8006900:	2b20      	cmp	r3, #32
 8006902:	f040 80af 	bne.w	8006a64 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	88db      	ldrh	r3, [r3, #6]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d03a      	beq.n	8006984 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	b25b      	sxtb	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	da1b      	bge.n	8006950 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	33b0      	adds	r3, #176	; 0xb0
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800692e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	88d2      	ldrh	r2, [r2, #6]
 8006934:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	88db      	ldrh	r3, [r3, #6]
 800693a:	2b07      	cmp	r3, #7
 800693c:	bf28      	it	cs
 800693e:	2307      	movcs	r3, #7
 8006940:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	89fa      	ldrh	r2, [r7, #14]
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 fd89 	bl	8008460 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800694e:	e090      	b.n	8006a72 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	785a      	ldrb	r2, [r3, #1]
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	88db      	ldrh	r3, [r3, #6]
 800695e:	2b3f      	cmp	r3, #63	; 0x3f
 8006960:	d803      	bhi.n	800696a <USBD_CDC_Setup+0xa6>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	88db      	ldrh	r3, [r3, #6]
 8006966:	b2da      	uxtb	r2, r3
 8006968:	e000      	b.n	800696c <USBD_CDC_Setup+0xa8>
 800696a:	2240      	movs	r2, #64	; 0x40
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006972:	6939      	ldr	r1, [r7, #16]
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800697a:	461a      	mov	r2, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 fd9b 	bl	80084b8 <USBD_CtlPrepareRx>
      break;
 8006982:	e076      	b.n	8006a72 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	33b0      	adds	r3, #176	; 0xb0
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	7850      	ldrb	r0, [r2, #1]
 800699a:	2200      	movs	r2, #0
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	4798      	blx	r3
      break;
 80069a0:	e067      	b.n	8006a72 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	785b      	ldrb	r3, [r3, #1]
 80069a6:	2b0b      	cmp	r3, #11
 80069a8:	d851      	bhi.n	8006a4e <USBD_CDC_Setup+0x18a>
 80069aa:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <USBD_CDC_Setup+0xec>)
 80069ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b0:	080069e1 	.word	0x080069e1
 80069b4:	08006a5d 	.word	0x08006a5d
 80069b8:	08006a4f 	.word	0x08006a4f
 80069bc:	08006a4f 	.word	0x08006a4f
 80069c0:	08006a4f 	.word	0x08006a4f
 80069c4:	08006a4f 	.word	0x08006a4f
 80069c8:	08006a4f 	.word	0x08006a4f
 80069cc:	08006a4f 	.word	0x08006a4f
 80069d0:	08006a4f 	.word	0x08006a4f
 80069d4:	08006a4f 	.word	0x08006a4f
 80069d8:	08006a0b 	.word	0x08006a0b
 80069dc:	08006a35 	.word	0x08006a35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	d107      	bne.n	80069fc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069ec:	f107 030a 	add.w	r3, r7, #10
 80069f0:	2202      	movs	r2, #2
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 fd33 	bl	8008460 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069fa:	e032      	b.n	8006a62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069fc:	6839      	ldr	r1, [r7, #0]
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f001 fcbd 	bl	800837e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a04:	2303      	movs	r3, #3
 8006a06:	75fb      	strb	r3, [r7, #23]
          break;
 8006a08:	e02b      	b.n	8006a62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d107      	bne.n	8006a26 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a16:	f107 030d 	add.w	r3, r7, #13
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 fd1e 	bl	8008460 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a24:	e01d      	b.n	8006a62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 fca8 	bl	800837e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	75fb      	strb	r3, [r7, #23]
          break;
 8006a32:	e016      	b.n	8006a62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d00f      	beq.n	8006a60 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 fc9b 	bl	800837e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a4c:	e008      	b.n	8006a60 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 fc94 	bl	800837e <USBD_CtlError>
          ret = USBD_FAIL;
 8006a56:	2303      	movs	r3, #3
 8006a58:	75fb      	strb	r3, [r7, #23]
          break;
 8006a5a:	e002      	b.n	8006a62 <USBD_CDC_Setup+0x19e>
          break;
 8006a5c:	bf00      	nop
 8006a5e:	e008      	b.n	8006a72 <USBD_CDC_Setup+0x1ae>
          break;
 8006a60:	bf00      	nop
      }
      break;
 8006a62:	e006      	b.n	8006a72 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 fc89 	bl	800837e <USBD_CtlError>
      ret = USBD_FAIL;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a70:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	32b0      	adds	r2, #176	; 0xb0
 8006a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e065      	b.n	8006b72 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	32b0      	adds	r2, #176	; 0xb0
 8006ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ab6:	78fb      	ldrb	r3, [r7, #3]
 8006ab8:	f003 020f 	and.w	r2, r3, #15
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	440b      	add	r3, r1
 8006ac8:	3318      	adds	r3, #24
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d02f      	beq.n	8006b30 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	f003 020f 	and.w	r2, r3, #15
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	440b      	add	r3, r1
 8006ae2:	3318      	adds	r3, #24
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	78fb      	ldrb	r3, [r7, #3]
 8006ae8:	f003 010f 	and.w	r1, r3, #15
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	460b      	mov	r3, r1
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	440b      	add	r3, r1
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4403      	add	r3, r0
 8006af8:	331c      	adds	r3, #28
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b00:	fb01 f303 	mul.w	r3, r1, r3
 8006b04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d112      	bne.n	8006b30 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	f003 020f 	and.w	r2, r3, #15
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	440b      	add	r3, r1
 8006b1c:	3318      	adds	r3, #24
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b22:	78f9      	ldrb	r1, [r7, #3]
 8006b24:	2300      	movs	r3, #0
 8006b26:	2200      	movs	r2, #0
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f002 f994 	bl	8008e56 <USBD_LL_Transmit>
 8006b2e:	e01f      	b.n	8006b70 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	33b0      	adds	r3, #176	; 0xb0
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d010      	beq.n	8006b70 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	33b0      	adds	r3, #176	; 0xb0
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006b6c:	78fa      	ldrb	r2, [r7, #3]
 8006b6e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	460b      	mov	r3, r1
 8006b84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	32b0      	adds	r2, #176	; 0xb0
 8006b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b94:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	32b0      	adds	r2, #176	; 0xb0
 8006ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e01a      	b.n	8006be2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bac:	78fb      	ldrb	r3, [r7, #3]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f002 f992 	bl	8008eda <USBD_LL_GetRxDataSize>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	33b0      	adds	r3, #176	; 0xb0
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006bdc:	4611      	mov	r1, r2
 8006bde:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b084      	sub	sp, #16
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	32b0      	adds	r2, #176	; 0xb0
 8006bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e025      	b.n	8006c58 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	33b0      	adds	r3, #176	; 0xb0
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d01a      	beq.n	8006c56 <USBD_CDC_EP0_RxReady+0x6c>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c26:	2bff      	cmp	r3, #255	; 0xff
 8006c28:	d015      	beq.n	8006c56 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	33b0      	adds	r3, #176	; 0xb0
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c42:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c4a:	b292      	uxth	r2, r2
 8006c4c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	22ff      	movs	r2, #255	; 0xff
 8006c52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c68:	2182      	movs	r1, #130	; 0x82
 8006c6a:	4818      	ldr	r0, [pc, #96]	; (8006ccc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c6c:	f000 fd4f 	bl	800770e <USBD_GetEpDesc>
 8006c70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c72:	2101      	movs	r1, #1
 8006c74:	4815      	ldr	r0, [pc, #84]	; (8006ccc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c76:	f000 fd4a 	bl	800770e <USBD_GetEpDesc>
 8006c7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c7c:	2181      	movs	r1, #129	; 0x81
 8006c7e:	4813      	ldr	r0, [pc, #76]	; (8006ccc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c80:	f000 fd45 	bl	800770e <USBD_GetEpDesc>
 8006c84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	2210      	movs	r2, #16
 8006c90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d006      	beq.n	8006ca6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ca0:	711a      	strb	r2, [r3, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d006      	beq.n	8006cba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cb4:	711a      	strb	r2, [r3, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2243      	movs	r2, #67	; 0x43
 8006cbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006cc0:	4b02      	ldr	r3, [pc, #8]	; (8006ccc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000050 	.word	0x20000050

08006cd0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cd8:	2182      	movs	r1, #130	; 0x82
 8006cda:	4818      	ldr	r0, [pc, #96]	; (8006d3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cdc:	f000 fd17 	bl	800770e <USBD_GetEpDesc>
 8006ce0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	4815      	ldr	r0, [pc, #84]	; (8006d3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ce6:	f000 fd12 	bl	800770e <USBD_GetEpDesc>
 8006cea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cec:	2181      	movs	r1, #129	; 0x81
 8006cee:	4813      	ldr	r0, [pc, #76]	; (8006d3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cf0:	f000 fd0d 	bl	800770e <USBD_GetEpDesc>
 8006cf4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2210      	movs	r2, #16
 8006d00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d006      	beq.n	8006d16 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	711a      	strb	r2, [r3, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f042 0202 	orr.w	r2, r2, #2
 8006d14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d006      	beq.n	8006d2a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	711a      	strb	r2, [r3, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f042 0202 	orr.w	r2, r2, #2
 8006d28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2243      	movs	r2, #67	; 0x43
 8006d2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d30:	4b02      	ldr	r3, [pc, #8]	; (8006d3c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20000050 	.word	0x20000050

08006d40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d48:	2182      	movs	r1, #130	; 0x82
 8006d4a:	4818      	ldr	r0, [pc, #96]	; (8006dac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d4c:	f000 fcdf 	bl	800770e <USBD_GetEpDesc>
 8006d50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d52:	2101      	movs	r1, #1
 8006d54:	4815      	ldr	r0, [pc, #84]	; (8006dac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d56:	f000 fcda 	bl	800770e <USBD_GetEpDesc>
 8006d5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d5c:	2181      	movs	r1, #129	; 0x81
 8006d5e:	4813      	ldr	r0, [pc, #76]	; (8006dac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d60:	f000 fcd5 	bl	800770e <USBD_GetEpDesc>
 8006d64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2210      	movs	r2, #16
 8006d70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d006      	beq.n	8006d86 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d80:	711a      	strb	r2, [r3, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d006      	beq.n	8006d9a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d94:	711a      	strb	r2, [r3, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2243      	movs	r2, #67	; 0x43
 8006d9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006da0:	4b02      	ldr	r3, [pc, #8]	; (8006dac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20000050 	.word	0x20000050

08006db0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	220a      	movs	r2, #10
 8006dbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006dbe:	4b03      	ldr	r3, [pc, #12]	; (8006dcc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	2000000c 	.word	0x2000000c

08006dd0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e009      	b.n	8006df8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	33b0      	adds	r3, #176	; 0xb0
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	32b0      	adds	r2, #176	; 0xb0
 8006e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e008      	b.n	8006e3c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	32b0      	adds	r2, #176	; 0xb0
 8006e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e004      	b.n	8006e76 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
	...

08006e84 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	32b0      	adds	r2, #176	; 0xb0
 8006e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e025      	b.n	8006ef6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d11f      	bne.n	8006ef4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006ebc:	4b10      	ldr	r3, [pc, #64]	; (8006f00 <USBD_CDC_TransmitPacket+0x7c>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	f003 020f 	and.w	r2, r3, #15
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4403      	add	r3, r0
 8006ed6:	3318      	adds	r3, #24
 8006ed8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006eda:	4b09      	ldr	r3, [pc, #36]	; (8006f00 <USBD_CDC_TransmitPacket+0x7c>)
 8006edc:	7819      	ldrb	r1, [r3, #0]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 ffb3 	bl	8008e56 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20000093 	.word	0x20000093

08006f04 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	32b0      	adds	r2, #176	; 0xb0
 8006f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f1a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	32b0      	adds	r2, #176	; 0xb0
 8006f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e018      	b.n	8006f64 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	7c1b      	ldrb	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f3a:	4b0c      	ldr	r3, [pc, #48]	; (8006f6c <USBD_CDC_ReceivePacket+0x68>)
 8006f3c:	7819      	ldrb	r1, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 ffa5 	bl	8008e98 <USBD_LL_PrepareReceive>
 8006f4e:	e008      	b.n	8006f62 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f50:	4b06      	ldr	r3, [pc, #24]	; (8006f6c <USBD_CDC_ReceivePacket+0x68>)
 8006f52:	7819      	ldrb	r1, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f5a:	2340      	movs	r3, #64	; 0x40
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f001 ff9b 	bl	8008e98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	20000094 	.word	0x20000094

08006f70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e01f      	b.n	8006fc8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	79fa      	ldrb	r2, [r7, #7]
 8006fba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f001 fe15 	bl	8008bec <USBD_LL_Init>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e025      	b.n	8007034 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	32ae      	adds	r2, #174	; 0xae
 8006ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00f      	beq.n	8007024 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	32ae      	adds	r2, #174	; 0xae
 800700e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007014:	f107 020e 	add.w	r2, r7, #14
 8007018:	4610      	mov	r0, r2
 800701a:	4798      	blx	r3
 800701c:	4602      	mov	r2, r0
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800702a:	1c5a      	adds	r2, r3, #1
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 fe1d 	bl	8008c84 <USBD_LL_Start>
 800704a:	4603      	mov	r3, r0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800705c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800705e:	4618      	mov	r0, r3
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	460b      	mov	r3, r1
 8007074:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007080:	2b00      	cmp	r3, #0
 8007082:	d009      	beq.n	8007098 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	78fa      	ldrb	r2, [r7, #3]
 800708e:	4611      	mov	r1, r2
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	4798      	blx	r3
 8007094:	4603      	mov	r3, r0
 8007096:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007098:	7bfb      	ldrb	r3, [r7, #15]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	460b      	mov	r3, r1
 80070ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	78fa      	ldrb	r2, [r7, #3]
 80070bc:	4611      	mov	r1, r2
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	4798      	blx	r3
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80070c8:	2303      	movs	r3, #3
 80070ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 f90e 	bl	800830a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80070fc:	461a      	mov	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800710a:	f003 031f 	and.w	r3, r3, #31
 800710e:	2b02      	cmp	r3, #2
 8007110:	d01a      	beq.n	8007148 <USBD_LL_SetupStage+0x72>
 8007112:	2b02      	cmp	r3, #2
 8007114:	d822      	bhi.n	800715c <USBD_LL_SetupStage+0x86>
 8007116:	2b00      	cmp	r3, #0
 8007118:	d002      	beq.n	8007120 <USBD_LL_SetupStage+0x4a>
 800711a:	2b01      	cmp	r3, #1
 800711c:	d00a      	beq.n	8007134 <USBD_LL_SetupStage+0x5e>
 800711e:	e01d      	b.n	800715c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fb65 	bl	80077f8 <USBD_StdDevReq>
 800712e:	4603      	mov	r3, r0
 8007130:	73fb      	strb	r3, [r7, #15]
      break;
 8007132:	e020      	b.n	8007176 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fbcd 	bl	80078dc <USBD_StdItfReq>
 8007142:	4603      	mov	r3, r0
 8007144:	73fb      	strb	r3, [r7, #15]
      break;
 8007146:	e016      	b.n	8007176 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fc2f 	bl	80079b4 <USBD_StdEPReq>
 8007156:	4603      	mov	r3, r0
 8007158:	73fb      	strb	r3, [r7, #15]
      break;
 800715a:	e00c      	b.n	8007176 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007162:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007166:	b2db      	uxtb	r3, r3
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f001 fdea 	bl	8008d44 <USBD_LL_StallEP>
 8007170:	4603      	mov	r3, r0
 8007172:	73fb      	strb	r3, [r7, #15]
      break;
 8007174:	bf00      	nop
  }

  return ret;
 8007176:	7bfb      	ldrb	r3, [r7, #15]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	460b      	mov	r3, r1
 800718a:	607a      	str	r2, [r7, #4]
 800718c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007192:	7afb      	ldrb	r3, [r7, #11]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d16e      	bne.n	8007276 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800719e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	f040 8098 	bne.w	80072dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d913      	bls.n	80071e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	1ad2      	subs	r2, r2, r3
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	4293      	cmp	r3, r2
 80071d0:	bf28      	it	cs
 80071d2:	4613      	movcs	r3, r2
 80071d4:	461a      	mov	r2, r3
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f001 f98a 	bl	80084f2 <USBD_CtlContinueRx>
 80071de:	e07d      	b.n	80072dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071e6:	f003 031f 	and.w	r3, r3, #31
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d014      	beq.n	8007218 <USBD_LL_DataOutStage+0x98>
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d81d      	bhi.n	800722e <USBD_LL_DataOutStage+0xae>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <USBD_LL_DataOutStage+0x7c>
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d003      	beq.n	8007202 <USBD_LL_DataOutStage+0x82>
 80071fa:	e018      	b.n	800722e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	75bb      	strb	r3, [r7, #22]
            break;
 8007200:	e018      	b.n	8007234 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007208:	b2db      	uxtb	r3, r3
 800720a:	4619      	mov	r1, r3
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 fa64 	bl	80076da <USBD_CoreFindIF>
 8007212:	4603      	mov	r3, r0
 8007214:	75bb      	strb	r3, [r7, #22]
            break;
 8007216:	e00d      	b.n	8007234 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800721e:	b2db      	uxtb	r3, r3
 8007220:	4619      	mov	r1, r3
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 fa66 	bl	80076f4 <USBD_CoreFindEP>
 8007228:	4603      	mov	r3, r0
 800722a:	75bb      	strb	r3, [r7, #22]
            break;
 800722c:	e002      	b.n	8007234 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	75bb      	strb	r3, [r7, #22]
            break;
 8007232:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007234:	7dbb      	ldrb	r3, [r7, #22]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d119      	bne.n	800726e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b03      	cmp	r3, #3
 8007244:	d113      	bne.n	800726e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007246:	7dba      	ldrb	r2, [r7, #22]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	32ae      	adds	r2, #174	; 0xae
 800724c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00b      	beq.n	800726e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007256:	7dba      	ldrb	r2, [r7, #22]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800725e:	7dba      	ldrb	r2, [r7, #22]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	32ae      	adds	r2, #174	; 0xae
 8007264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f001 f950 	bl	8008514 <USBD_CtlSendStatus>
 8007274:	e032      	b.n	80072dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007276:	7afb      	ldrb	r3, [r7, #11]
 8007278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800727c:	b2db      	uxtb	r3, r3
 800727e:	4619      	mov	r1, r3
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 fa37 	bl	80076f4 <USBD_CoreFindEP>
 8007286:	4603      	mov	r3, r0
 8007288:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800728a:	7dbb      	ldrb	r3, [r7, #22]
 800728c:	2bff      	cmp	r3, #255	; 0xff
 800728e:	d025      	beq.n	80072dc <USBD_LL_DataOutStage+0x15c>
 8007290:	7dbb      	ldrb	r3, [r7, #22]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d122      	bne.n	80072dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d117      	bne.n	80072d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80072a2:	7dba      	ldrb	r2, [r7, #22]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	32ae      	adds	r2, #174	; 0xae
 80072a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00f      	beq.n	80072d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80072b2:	7dba      	ldrb	r2, [r7, #22]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80072ba:	7dba      	ldrb	r2, [r7, #22]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	32ae      	adds	r2, #174	; 0xae
 80072c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	7afa      	ldrb	r2, [r7, #11]
 80072c8:	4611      	mov	r1, r2
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	4798      	blx	r3
 80072ce:	4603      	mov	r3, r0
 80072d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80072d2:	7dfb      	ldrb	r3, [r7, #23]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
 80072da:	e000      	b.n	80072de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b086      	sub	sp, #24
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	460b      	mov	r3, r1
 80072f0:	607a      	str	r2, [r7, #4]
 80072f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80072f4:	7afb      	ldrb	r3, [r7, #11]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d16f      	bne.n	80073da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3314      	adds	r3, #20
 80072fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007306:	2b02      	cmp	r3, #2
 8007308:	d15a      	bne.n	80073c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	689a      	ldr	r2, [r3, #8]
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	429a      	cmp	r2, r3
 8007314:	d914      	bls.n	8007340 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	1ad2      	subs	r2, r2, r3
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	461a      	mov	r2, r3
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f001 f8b2 	bl	8008496 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007332:	2300      	movs	r3, #0
 8007334:	2200      	movs	r2, #0
 8007336:	2100      	movs	r1, #0
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f001 fdad 	bl	8008e98 <USBD_LL_PrepareReceive>
 800733e:	e03f      	b.n	80073c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	429a      	cmp	r2, r3
 800734a:	d11c      	bne.n	8007386 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007354:	429a      	cmp	r2, r3
 8007356:	d316      	bcc.n	8007386 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007362:	429a      	cmp	r2, r3
 8007364:	d20f      	bcs.n	8007386 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007366:	2200      	movs	r2, #0
 8007368:	2100      	movs	r1, #0
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f001 f893 	bl	8008496 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007378:	2300      	movs	r3, #0
 800737a:	2200      	movs	r2, #0
 800737c:	2100      	movs	r1, #0
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f001 fd8a 	bl	8008e98 <USBD_LL_PrepareReceive>
 8007384:	e01c      	b.n	80073c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b03      	cmp	r3, #3
 8007390:	d10f      	bne.n	80073b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d009      	beq.n	80073b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80073b2:	2180      	movs	r1, #128	; 0x80
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f001 fcc5 	bl	8008d44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f001 f8bd 	bl	800853a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d03a      	beq.n	8007440 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f7ff fe42 	bl	8007054 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80073d8:	e032      	b.n	8007440 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80073da:	7afb      	ldrb	r3, [r7, #11]
 80073dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	4619      	mov	r1, r3
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 f985 	bl	80076f4 <USBD_CoreFindEP>
 80073ea:	4603      	mov	r3, r0
 80073ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
 80073f0:	2bff      	cmp	r3, #255	; 0xff
 80073f2:	d025      	beq.n	8007440 <USBD_LL_DataInStage+0x15a>
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d122      	bne.n	8007440 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b03      	cmp	r3, #3
 8007404:	d11c      	bne.n	8007440 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007406:	7dfa      	ldrb	r2, [r7, #23]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	32ae      	adds	r2, #174	; 0xae
 800740c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d014      	beq.n	8007440 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007416:	7dfa      	ldrb	r2, [r7, #23]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800741e:	7dfa      	ldrb	r2, [r7, #23]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	32ae      	adds	r2, #174	; 0xae
 8007424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	7afa      	ldrb	r2, [r7, #11]
 800742c:	4611      	mov	r1, r2
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	4798      	blx	r3
 8007432:	4603      	mov	r3, r0
 8007434:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007436:	7dbb      	ldrb	r3, [r7, #22]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800743c:	7dbb      	ldrb	r3, [r7, #22]
 800743e:	e000      	b.n	8007442 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007482:	2b00      	cmp	r3, #0
 8007484:	d014      	beq.n	80074b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00e      	beq.n	80074b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	6852      	ldr	r2, [r2, #4]
 800749e:	b2d2      	uxtb	r2, r2
 80074a0:	4611      	mov	r1, r2
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	4798      	blx	r3
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80074ac:	2303      	movs	r3, #3
 80074ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074b0:	2340      	movs	r3, #64	; 0x40
 80074b2:	2200      	movs	r2, #0
 80074b4:	2100      	movs	r1, #0
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f001 fbff 	bl	8008cba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2240      	movs	r2, #64	; 0x40
 80074c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074cc:	2340      	movs	r3, #64	; 0x40
 80074ce:	2200      	movs	r2, #0
 80074d0:	2180      	movs	r1, #128	; 0x80
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f001 fbf1 	bl	8008cba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2240      	movs	r2, #64	; 0x40
 80074e2:	621a      	str	r2, [r3, #32]

  return ret;
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	460b      	mov	r3, r1
 80074f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	78fa      	ldrb	r2, [r7, #3]
 80074fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b04      	cmp	r3, #4
 8007520:	d006      	beq.n	8007530 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007528:	b2da      	uxtb	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2204      	movs	r2, #4
 8007534:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b04      	cmp	r3, #4
 8007558:	d106      	bne.n	8007568 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007560:	b2da      	uxtb	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b03      	cmp	r3, #3
 8007588:	d110      	bne.n	80075ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00b      	beq.n	80075ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	460b      	mov	r3, r1
 80075c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	32ae      	adds	r2, #174	; 0xae
 80075cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e01c      	b.n	8007612 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b03      	cmp	r3, #3
 80075e2:	d115      	bne.n	8007610 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	32ae      	adds	r2, #174	; 0xae
 80075ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00b      	beq.n	8007610 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	32ae      	adds	r2, #174	; 0xae
 8007602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	78fa      	ldrb	r2, [r7, #3]
 800760a:	4611      	mov	r1, r2
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	460b      	mov	r3, r1
 8007624:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	32ae      	adds	r2, #174	; 0xae
 8007630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007638:	2303      	movs	r3, #3
 800763a:	e01c      	b.n	8007676 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b03      	cmp	r3, #3
 8007646:	d115      	bne.n	8007674 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	32ae      	adds	r2, #174	; 0xae
 8007652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00b      	beq.n	8007674 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	32ae      	adds	r2, #174	; 0xae
 8007666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	78fa      	ldrb	r2, [r7, #3]
 800766e:	4611      	mov	r1, r2
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00e      	beq.n	80076d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6852      	ldr	r2, [r2, #4]
 80076be:	b2d2      	uxtb	r2, r2
 80076c0:	4611      	mov	r1, r2
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	4798      	blx	r3
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80076cc:	2303      	movs	r3, #3
 80076ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	460b      	mov	r3, r1
 80076e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	460b      	mov	r3, r1
 80076fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007700:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b086      	sub	sp, #24
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	460b      	mov	r3, r1
 8007718:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007722:	2300      	movs	r3, #0
 8007724:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	885b      	ldrh	r3, [r3, #2]
 800772a:	b29a      	uxth	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	b29b      	uxth	r3, r3
 8007732:	429a      	cmp	r2, r3
 8007734:	d920      	bls.n	8007778 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800773e:	e013      	b.n	8007768 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007740:	f107 030a 	add.w	r3, r7, #10
 8007744:	4619      	mov	r1, r3
 8007746:	6978      	ldr	r0, [r7, #20]
 8007748:	f000 f81b 	bl	8007782 <USBD_GetNextDesc>
 800774c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	785b      	ldrb	r3, [r3, #1]
 8007752:	2b05      	cmp	r3, #5
 8007754:	d108      	bne.n	8007768 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	789b      	ldrb	r3, [r3, #2]
 800775e:	78fa      	ldrb	r2, [r7, #3]
 8007760:	429a      	cmp	r2, r3
 8007762:	d008      	beq.n	8007776 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007764:	2300      	movs	r3, #0
 8007766:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	885b      	ldrh	r3, [r3, #2]
 800776c:	b29a      	uxth	r2, r3
 800776e:	897b      	ldrh	r3, [r7, #10]
 8007770:	429a      	cmp	r2, r3
 8007772:	d8e5      	bhi.n	8007740 <USBD_GetEpDesc+0x32>
 8007774:	e000      	b.n	8007778 <USBD_GetEpDesc+0x6a>
          break;
 8007776:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007778:	693b      	ldr	r3, [r7, #16]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007782:	b480      	push	{r7}
 8007784:	b085      	sub	sp, #20
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	881a      	ldrh	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	b29b      	uxth	r3, r3
 800779a:	4413      	add	r3, r2
 800779c:	b29a      	uxth	r2, r3
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4413      	add	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077ae:	68fb      	ldr	r3, [r7, #12]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	3301      	adds	r3, #1
 80077d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077da:	8a3b      	ldrh	r3, [r7, #16]
 80077dc:	021b      	lsls	r3, r3, #8
 80077de:	b21a      	sxth	r2, r3
 80077e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	b21b      	sxth	r3, r3
 80077e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077ea:	89fb      	ldrh	r3, [r7, #14]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	371c      	adds	r7, #28
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800780e:	2b40      	cmp	r3, #64	; 0x40
 8007810:	d005      	beq.n	800781e <USBD_StdDevReq+0x26>
 8007812:	2b40      	cmp	r3, #64	; 0x40
 8007814:	d857      	bhi.n	80078c6 <USBD_StdDevReq+0xce>
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00f      	beq.n	800783a <USBD_StdDevReq+0x42>
 800781a:	2b20      	cmp	r3, #32
 800781c:	d153      	bne.n	80078c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	32ae      	adds	r2, #174	; 0xae
 8007828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	4798      	blx	r3
 8007834:	4603      	mov	r3, r0
 8007836:	73fb      	strb	r3, [r7, #15]
      break;
 8007838:	e04a      	b.n	80078d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	785b      	ldrb	r3, [r3, #1]
 800783e:	2b09      	cmp	r3, #9
 8007840:	d83b      	bhi.n	80078ba <USBD_StdDevReq+0xc2>
 8007842:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <USBD_StdDevReq+0x50>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	0800789d 	.word	0x0800789d
 800784c:	080078b1 	.word	0x080078b1
 8007850:	080078bb 	.word	0x080078bb
 8007854:	080078a7 	.word	0x080078a7
 8007858:	080078bb 	.word	0x080078bb
 800785c:	0800787b 	.word	0x0800787b
 8007860:	08007871 	.word	0x08007871
 8007864:	080078bb 	.word	0x080078bb
 8007868:	08007893 	.word	0x08007893
 800786c:	08007885 	.word	0x08007885
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fa3c 	bl	8007cf0 <USBD_GetDescriptor>
          break;
 8007878:	e024      	b.n	80078c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fba1 	bl	8007fc4 <USBD_SetAddress>
          break;
 8007882:	e01f      	b.n	80078c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fbe0 	bl	800804c <USBD_SetConfig>
 800788c:	4603      	mov	r3, r0
 800788e:	73fb      	strb	r3, [r7, #15]
          break;
 8007890:	e018      	b.n	80078c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fc83 	bl	80081a0 <USBD_GetConfig>
          break;
 800789a:	e013      	b.n	80078c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fcb4 	bl	800820c <USBD_GetStatus>
          break;
 80078a4:	e00e      	b.n	80078c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fce3 	bl	8008274 <USBD_SetFeature>
          break;
 80078ae:	e009      	b.n	80078c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fd07 	bl	80082c6 <USBD_ClrFeature>
          break;
 80078b8:	e004      	b.n	80078c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fd5e 	bl	800837e <USBD_CtlError>
          break;
 80078c2:	bf00      	nop
      }
      break;
 80078c4:	e004      	b.n	80078d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fd58 	bl	800837e <USBD_CtlError>
      break;
 80078ce:	bf00      	nop
  }

  return ret;
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop

080078dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078f2:	2b40      	cmp	r3, #64	; 0x40
 80078f4:	d005      	beq.n	8007902 <USBD_StdItfReq+0x26>
 80078f6:	2b40      	cmp	r3, #64	; 0x40
 80078f8:	d852      	bhi.n	80079a0 <USBD_StdItfReq+0xc4>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <USBD_StdItfReq+0x26>
 80078fe:	2b20      	cmp	r3, #32
 8007900:	d14e      	bne.n	80079a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007908:	b2db      	uxtb	r3, r3
 800790a:	3b01      	subs	r3, #1
 800790c:	2b02      	cmp	r3, #2
 800790e:	d840      	bhi.n	8007992 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	889b      	ldrh	r3, [r3, #4]
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b01      	cmp	r3, #1
 8007918:	d836      	bhi.n	8007988 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	889b      	ldrh	r3, [r3, #4]
 800791e:	b2db      	uxtb	r3, r3
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff fed9 	bl	80076da <USBD_CoreFindIF>
 8007928:	4603      	mov	r3, r0
 800792a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	2bff      	cmp	r3, #255	; 0xff
 8007930:	d01d      	beq.n	800796e <USBD_StdItfReq+0x92>
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d11a      	bne.n	800796e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007938:	7bba      	ldrb	r2, [r7, #14]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	32ae      	adds	r2, #174	; 0xae
 800793e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00f      	beq.n	8007968 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007948:	7bba      	ldrb	r2, [r7, #14]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007950:	7bba      	ldrb	r2, [r7, #14]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	32ae      	adds	r2, #174	; 0xae
 8007956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	4798      	blx	r3
 8007962:	4603      	mov	r3, r0
 8007964:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007966:	e004      	b.n	8007972 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007968:	2303      	movs	r3, #3
 800796a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800796c:	e001      	b.n	8007972 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800796e:	2303      	movs	r3, #3
 8007970:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	88db      	ldrh	r3, [r3, #6]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d110      	bne.n	800799c <USBD_StdItfReq+0xc0>
 800797a:	7bfb      	ldrb	r3, [r7, #15]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10d      	bne.n	800799c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fdc7 	bl	8008514 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007986:	e009      	b.n	800799c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fcf7 	bl	800837e <USBD_CtlError>
          break;
 8007990:	e004      	b.n	800799c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fcf2 	bl	800837e <USBD_CtlError>
          break;
 800799a:	e000      	b.n	800799e <USBD_StdItfReq+0xc2>
          break;
 800799c:	bf00      	nop
      }
      break;
 800799e:	e004      	b.n	80079aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fceb 	bl	800837e <USBD_CtlError>
      break;
 80079a8:	bf00      	nop
  }

  return ret;
 80079aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	889b      	ldrh	r3, [r3, #4]
 80079c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079d0:	2b40      	cmp	r3, #64	; 0x40
 80079d2:	d007      	beq.n	80079e4 <USBD_StdEPReq+0x30>
 80079d4:	2b40      	cmp	r3, #64	; 0x40
 80079d6:	f200 817f 	bhi.w	8007cd8 <USBD_StdEPReq+0x324>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d02a      	beq.n	8007a34 <USBD_StdEPReq+0x80>
 80079de:	2b20      	cmp	r3, #32
 80079e0:	f040 817a 	bne.w	8007cd8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff fe83 	bl	80076f4 <USBD_CoreFindEP>
 80079ee:	4603      	mov	r3, r0
 80079f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079f2:	7b7b      	ldrb	r3, [r7, #13]
 80079f4:	2bff      	cmp	r3, #255	; 0xff
 80079f6:	f000 8174 	beq.w	8007ce2 <USBD_StdEPReq+0x32e>
 80079fa:	7b7b      	ldrb	r3, [r7, #13]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f040 8170 	bne.w	8007ce2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a02:	7b7a      	ldrb	r2, [r7, #13]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a0a:	7b7a      	ldrb	r2, [r7, #13]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	32ae      	adds	r2, #174	; 0xae
 8007a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 8163 	beq.w	8007ce2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a1c:	7b7a      	ldrb	r2, [r7, #13]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	32ae      	adds	r2, #174	; 0xae
 8007a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	4798      	blx	r3
 8007a2e:	4603      	mov	r3, r0
 8007a30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a32:	e156      	b.n	8007ce2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	785b      	ldrb	r3, [r3, #1]
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d008      	beq.n	8007a4e <USBD_StdEPReq+0x9a>
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	f300 8145 	bgt.w	8007ccc <USBD_StdEPReq+0x318>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 809b 	beq.w	8007b7e <USBD_StdEPReq+0x1ca>
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d03c      	beq.n	8007ac6 <USBD_StdEPReq+0x112>
 8007a4c:	e13e      	b.n	8007ccc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d002      	beq.n	8007a60 <USBD_StdEPReq+0xac>
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d016      	beq.n	8007a8c <USBD_StdEPReq+0xd8>
 8007a5e:	e02c      	b.n	8007aba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00d      	beq.n	8007a82 <USBD_StdEPReq+0xce>
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b80      	cmp	r3, #128	; 0x80
 8007a6a:	d00a      	beq.n	8007a82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 f967 	bl	8008d44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a76:	2180      	movs	r1, #128	; 0x80
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 f963 	bl	8008d44 <USBD_LL_StallEP>
 8007a7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a80:	e020      	b.n	8007ac4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fc7a 	bl	800837e <USBD_CtlError>
              break;
 8007a8a:	e01b      	b.n	8007ac4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	885b      	ldrh	r3, [r3, #2]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10e      	bne.n	8007ab2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00b      	beq.n	8007ab2 <USBD_StdEPReq+0xfe>
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b80      	cmp	r3, #128	; 0x80
 8007a9e:	d008      	beq.n	8007ab2 <USBD_StdEPReq+0xfe>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	88db      	ldrh	r3, [r3, #6]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d104      	bne.n	8007ab2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 f949 	bl	8008d44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fd2e 	bl	8008514 <USBD_CtlSendStatus>

              break;
 8007ab8:	e004      	b.n	8007ac4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fc5e 	bl	800837e <USBD_CtlError>
              break;
 8007ac2:	bf00      	nop
          }
          break;
 8007ac4:	e107      	b.n	8007cd6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d002      	beq.n	8007ad8 <USBD_StdEPReq+0x124>
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d016      	beq.n	8007b04 <USBD_StdEPReq+0x150>
 8007ad6:	e04b      	b.n	8007b70 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00d      	beq.n	8007afa <USBD_StdEPReq+0x146>
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	2b80      	cmp	r3, #128	; 0x80
 8007ae2:	d00a      	beq.n	8007afa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 f92b 	bl	8008d44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aee:	2180      	movs	r1, #128	; 0x80
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 f927 	bl	8008d44 <USBD_LL_StallEP>
 8007af6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007af8:	e040      	b.n	8007b7c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fc3e 	bl	800837e <USBD_CtlError>
              break;
 8007b02:	e03b      	b.n	8007b7c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	885b      	ldrh	r3, [r3, #2]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d136      	bne.n	8007b7a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d004      	beq.n	8007b20 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 f931 	bl	8008d82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fcf7 	bl	8008514 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff fde2 	bl	80076f4 <USBD_CoreFindEP>
 8007b30:	4603      	mov	r3, r0
 8007b32:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b34:	7b7b      	ldrb	r3, [r7, #13]
 8007b36:	2bff      	cmp	r3, #255	; 0xff
 8007b38:	d01f      	beq.n	8007b7a <USBD_StdEPReq+0x1c6>
 8007b3a:	7b7b      	ldrb	r3, [r7, #13]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d11c      	bne.n	8007b7a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b40:	7b7a      	ldrb	r2, [r7, #13]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b48:	7b7a      	ldrb	r2, [r7, #13]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	32ae      	adds	r2, #174	; 0xae
 8007b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d010      	beq.n	8007b7a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b58:	7b7a      	ldrb	r2, [r7, #13]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	32ae      	adds	r2, #174	; 0xae
 8007b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	4798      	blx	r3
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b6e:	e004      	b.n	8007b7a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fc03 	bl	800837e <USBD_CtlError>
              break;
 8007b78:	e000      	b.n	8007b7c <USBD_StdEPReq+0x1c8>
              break;
 8007b7a:	bf00      	nop
          }
          break;
 8007b7c:	e0ab      	b.n	8007cd6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d002      	beq.n	8007b90 <USBD_StdEPReq+0x1dc>
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d032      	beq.n	8007bf4 <USBD_StdEPReq+0x240>
 8007b8e:	e097      	b.n	8007cc0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d007      	beq.n	8007ba6 <USBD_StdEPReq+0x1f2>
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
 8007b98:	2b80      	cmp	r3, #128	; 0x80
 8007b9a:	d004      	beq.n	8007ba6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fbed 	bl	800837e <USBD_CtlError>
                break;
 8007ba4:	e091      	b.n	8007cca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ba6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da0b      	bge.n	8007bc6 <USBD_StdEPReq+0x212>
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	3310      	adds	r3, #16
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	e00b      	b.n	8007bde <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bcc:	4613      	mov	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	4413      	add	r3, r2
 8007bdc:	3304      	adds	r3, #4
 8007bde:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2202      	movs	r2, #2
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fc37 	bl	8008460 <USBD_CtlSendData>
              break;
 8007bf2:	e06a      	b.n	8007cca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007bf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	da11      	bge.n	8007c20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	f003 020f 	and.w	r2, r3, #15
 8007c02:	6879      	ldr	r1, [r7, #4]
 8007c04:	4613      	mov	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	440b      	add	r3, r1
 8007c0e:	3324      	adds	r3, #36	; 0x24
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d117      	bne.n	8007c46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fbb0 	bl	800837e <USBD_CtlError>
                  break;
 8007c1e:	e054      	b.n	8007cca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c20:	7bbb      	ldrb	r3, [r7, #14]
 8007c22:	f003 020f 	and.w	r2, r3, #15
 8007c26:	6879      	ldr	r1, [r7, #4]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	440b      	add	r3, r1
 8007c32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d104      	bne.n	8007c46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fb9d 	bl	800837e <USBD_CtlError>
                  break;
 8007c44:	e041      	b.n	8007cca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	da0b      	bge.n	8007c66 <USBD_StdEPReq+0x2b2>
 8007c4e:	7bbb      	ldrb	r3, [r7, #14]
 8007c50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c54:	4613      	mov	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	3310      	adds	r3, #16
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	4413      	add	r3, r2
 8007c62:	3304      	adds	r3, #4
 8007c64:	e00b      	b.n	8007c7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
 8007c68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d002      	beq.n	8007c8c <USBD_StdEPReq+0x2d8>
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b80      	cmp	r3, #128	; 0x80
 8007c8a:	d103      	bne.n	8007c94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	e00e      	b.n	8007cb2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 f891 	bl	8008dc0 <USBD_LL_IsStallEP>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d003      	beq.n	8007cac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	e002      	b.n	8007cb2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fbd1 	bl	8008460 <USBD_CtlSendData>
              break;
 8007cbe:	e004      	b.n	8007cca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fb5b 	bl	800837e <USBD_CtlError>
              break;
 8007cc8:	bf00      	nop
          }
          break;
 8007cca:	e004      	b.n	8007cd6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fb55 	bl	800837e <USBD_CtlError>
          break;
 8007cd4:	bf00      	nop
      }
      break;
 8007cd6:	e005      	b.n	8007ce4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fb4f 	bl	800837e <USBD_CtlError>
      break;
 8007ce0:	e000      	b.n	8007ce4 <USBD_StdEPReq+0x330>
      break;
 8007ce2:	bf00      	nop
  }

  return ret;
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	885b      	ldrh	r3, [r3, #2]
 8007d0a:	0a1b      	lsrs	r3, r3, #8
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	2b06      	cmp	r3, #6
 8007d12:	f200 8128 	bhi.w	8007f66 <USBD_GetDescriptor+0x276>
 8007d16:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <USBD_GetDescriptor+0x2c>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007d39 	.word	0x08007d39
 8007d20:	08007d51 	.word	0x08007d51
 8007d24:	08007d91 	.word	0x08007d91
 8007d28:	08007f67 	.word	0x08007f67
 8007d2c:	08007f67 	.word	0x08007f67
 8007d30:	08007f07 	.word	0x08007f07
 8007d34:	08007f33 	.word	0x08007f33
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	7c12      	ldrb	r2, [r2, #16]
 8007d44:	f107 0108 	add.w	r1, r7, #8
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4798      	blx	r3
 8007d4c:	60f8      	str	r0, [r7, #12]
      break;
 8007d4e:	e112      	b.n	8007f76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	7c1b      	ldrb	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10d      	bne.n	8007d74 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d60:	f107 0208 	add.w	r2, r7, #8
 8007d64:	4610      	mov	r0, r2
 8007d66:	4798      	blx	r3
 8007d68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	2202      	movs	r2, #2
 8007d70:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d72:	e100      	b.n	8007f76 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	f107 0208 	add.w	r2, r7, #8
 8007d80:	4610      	mov	r0, r2
 8007d82:	4798      	blx	r3
 8007d84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	701a      	strb	r2, [r3, #0]
      break;
 8007d8e:	e0f2      	b.n	8007f76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	885b      	ldrh	r3, [r3, #2]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b05      	cmp	r3, #5
 8007d98:	f200 80ac 	bhi.w	8007ef4 <USBD_GetDescriptor+0x204>
 8007d9c:	a201      	add	r2, pc, #4	; (adr r2, 8007da4 <USBD_GetDescriptor+0xb4>)
 8007d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da2:	bf00      	nop
 8007da4:	08007dbd 	.word	0x08007dbd
 8007da8:	08007df1 	.word	0x08007df1
 8007dac:	08007e25 	.word	0x08007e25
 8007db0:	08007e59 	.word	0x08007e59
 8007db4:	08007e8d 	.word	0x08007e8d
 8007db8:	08007ec1 	.word	0x08007ec1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00b      	beq.n	8007de0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	7c12      	ldrb	r2, [r2, #16]
 8007dd4:	f107 0108 	add.w	r1, r7, #8
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4798      	blx	r3
 8007ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dde:	e091      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 facb 	bl	800837e <USBD_CtlError>
            err++;
 8007de8:	7afb      	ldrb	r3, [r7, #11]
 8007dea:	3301      	adds	r3, #1
 8007dec:	72fb      	strb	r3, [r7, #11]
          break;
 8007dee:	e089      	b.n	8007f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00b      	beq.n	8007e14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	7c12      	ldrb	r2, [r2, #16]
 8007e08:	f107 0108 	add.w	r1, r7, #8
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	4798      	blx	r3
 8007e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e12:	e077      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fab1 	bl	800837e <USBD_CtlError>
            err++;
 8007e1c:	7afb      	ldrb	r3, [r7, #11]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	72fb      	strb	r3, [r7, #11]
          break;
 8007e22:	e06f      	b.n	8007f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00b      	beq.n	8007e48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	7c12      	ldrb	r2, [r2, #16]
 8007e3c:	f107 0108 	add.w	r1, r7, #8
 8007e40:	4610      	mov	r0, r2
 8007e42:	4798      	blx	r3
 8007e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e46:	e05d      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fa97 	bl	800837e <USBD_CtlError>
            err++;
 8007e50:	7afb      	ldrb	r3, [r7, #11]
 8007e52:	3301      	adds	r3, #1
 8007e54:	72fb      	strb	r3, [r7, #11]
          break;
 8007e56:	e055      	b.n	8007f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	7c12      	ldrb	r2, [r2, #16]
 8007e70:	f107 0108 	add.w	r1, r7, #8
 8007e74:	4610      	mov	r0, r2
 8007e76:	4798      	blx	r3
 8007e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e7a:	e043      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fa7d 	bl	800837e <USBD_CtlError>
            err++;
 8007e84:	7afb      	ldrb	r3, [r7, #11]
 8007e86:	3301      	adds	r3, #1
 8007e88:	72fb      	strb	r3, [r7, #11]
          break;
 8007e8a:	e03b      	b.n	8007f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00b      	beq.n	8007eb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	7c12      	ldrb	r2, [r2, #16]
 8007ea4:	f107 0108 	add.w	r1, r7, #8
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	4798      	blx	r3
 8007eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eae:	e029      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fa63 	bl	800837e <USBD_CtlError>
            err++;
 8007eb8:	7afb      	ldrb	r3, [r7, #11]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ebe:	e021      	b.n	8007f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00b      	beq.n	8007ee4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	7c12      	ldrb	r2, [r2, #16]
 8007ed8:	f107 0108 	add.w	r1, r7, #8
 8007edc:	4610      	mov	r0, r2
 8007ede:	4798      	blx	r3
 8007ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ee2:	e00f      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fa49 	bl	800837e <USBD_CtlError>
            err++;
 8007eec:	7afb      	ldrb	r3, [r7, #11]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ef2:	e007      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa41 	bl	800837e <USBD_CtlError>
          err++;
 8007efc:	7afb      	ldrb	r3, [r7, #11]
 8007efe:	3301      	adds	r3, #1
 8007f00:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f02:	bf00      	nop
      }
      break;
 8007f04:	e037      	b.n	8007f76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	7c1b      	ldrb	r3, [r3, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d109      	bne.n	8007f22 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f16:	f107 0208 	add.w	r2, r7, #8
 8007f1a:	4610      	mov	r0, r2
 8007f1c:	4798      	blx	r3
 8007f1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f20:	e029      	b.n	8007f76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fa2a 	bl	800837e <USBD_CtlError>
        err++;
 8007f2a:	7afb      	ldrb	r3, [r7, #11]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f30:	e021      	b.n	8007f76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	7c1b      	ldrb	r3, [r3, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10d      	bne.n	8007f56 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f42:	f107 0208 	add.w	r2, r7, #8
 8007f46:	4610      	mov	r0, r2
 8007f48:	4798      	blx	r3
 8007f4a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	2207      	movs	r2, #7
 8007f52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f54:	e00f      	b.n	8007f76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fa10 	bl	800837e <USBD_CtlError>
        err++;
 8007f5e:	7afb      	ldrb	r3, [r7, #11]
 8007f60:	3301      	adds	r3, #1
 8007f62:	72fb      	strb	r3, [r7, #11]
      break;
 8007f64:	e007      	b.n	8007f76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fa08 	bl	800837e <USBD_CtlError>
      err++;
 8007f6e:	7afb      	ldrb	r3, [r7, #11]
 8007f70:	3301      	adds	r3, #1
 8007f72:	72fb      	strb	r3, [r7, #11]
      break;
 8007f74:	bf00      	nop
  }

  if (err != 0U)
 8007f76:	7afb      	ldrb	r3, [r7, #11]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d11e      	bne.n	8007fba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	88db      	ldrh	r3, [r3, #6]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d016      	beq.n	8007fb2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f84:	893b      	ldrh	r3, [r7, #8]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00e      	beq.n	8007fa8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	88da      	ldrh	r2, [r3, #6]
 8007f8e:	893b      	ldrh	r3, [r7, #8]
 8007f90:	4293      	cmp	r3, r2
 8007f92:	bf28      	it	cs
 8007f94:	4613      	movcs	r3, r2
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f9a:	893b      	ldrh	r3, [r7, #8]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	68f9      	ldr	r1, [r7, #12]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fa5d 	bl	8008460 <USBD_CtlSendData>
 8007fa6:	e009      	b.n	8007fbc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f9e7 	bl	800837e <USBD_CtlError>
 8007fb0:	e004      	b.n	8007fbc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 faae 	bl	8008514 <USBD_CtlSendStatus>
 8007fb8:	e000      	b.n	8007fbc <USBD_GetDescriptor+0x2cc>
    return;
 8007fba:	bf00      	nop
  }
}
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop

08007fc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	889b      	ldrh	r3, [r3, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d131      	bne.n	800803a <USBD_SetAddress+0x76>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	88db      	ldrh	r3, [r3, #6]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d12d      	bne.n	800803a <USBD_SetAddress+0x76>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	885b      	ldrh	r3, [r3, #2]
 8007fe2:	2b7f      	cmp	r3, #127	; 0x7f
 8007fe4:	d829      	bhi.n	800803a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	885b      	ldrh	r3, [r3, #2]
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d104      	bne.n	8008008 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f9bc 	bl	800837e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008006:	e01d      	b.n	8008044 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	7bfa      	ldrb	r2, [r7, #15]
 800800c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 feff 	bl	8008e18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fa7a 	bl	8008514 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008020:	7bfb      	ldrb	r3, [r7, #15]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d004      	beq.n	8008030 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2202      	movs	r2, #2
 800802a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800802e:	e009      	b.n	8008044 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008038:	e004      	b.n	8008044 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f99e 	bl	800837e <USBD_CtlError>
  }
}
 8008042:	bf00      	nop
 8008044:	bf00      	nop
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	885b      	ldrh	r3, [r3, #2]
 800805e:	b2da      	uxtb	r2, r3
 8008060:	4b4e      	ldr	r3, [pc, #312]	; (800819c <USBD_SetConfig+0x150>)
 8008062:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008064:	4b4d      	ldr	r3, [pc, #308]	; (800819c <USBD_SetConfig+0x150>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d905      	bls.n	8008078 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f985 	bl	800837e <USBD_CtlError>
    return USBD_FAIL;
 8008074:	2303      	movs	r3, #3
 8008076:	e08c      	b.n	8008192 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b02      	cmp	r3, #2
 8008082:	d002      	beq.n	800808a <USBD_SetConfig+0x3e>
 8008084:	2b03      	cmp	r3, #3
 8008086:	d029      	beq.n	80080dc <USBD_SetConfig+0x90>
 8008088:	e075      	b.n	8008176 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800808a:	4b44      	ldr	r3, [pc, #272]	; (800819c <USBD_SetConfig+0x150>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d020      	beq.n	80080d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008092:	4b42      	ldr	r3, [pc, #264]	; (800819c <USBD_SetConfig+0x150>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800809c:	4b3f      	ldr	r3, [pc, #252]	; (800819c <USBD_SetConfig+0x150>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7fe ffe1 	bl	800706a <USBD_SetClassConfig>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d008      	beq.n	80080c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f962 	bl	800837e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2202      	movs	r2, #2
 80080be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080c2:	e065      	b.n	8008190 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fa25 	bl	8008514 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2203      	movs	r2, #3
 80080ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080d2:	e05d      	b.n	8008190 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fa1d 	bl	8008514 <USBD_CtlSendStatus>
      break;
 80080da:	e059      	b.n	8008190 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080dc:	4b2f      	ldr	r3, [pc, #188]	; (800819c <USBD_SetConfig+0x150>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d112      	bne.n	800810a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080ec:	4b2b      	ldr	r3, [pc, #172]	; (800819c <USBD_SetConfig+0x150>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080f6:	4b29      	ldr	r3, [pc, #164]	; (800819c <USBD_SetConfig+0x150>)
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7fe ffd0 	bl	80070a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fa06 	bl	8008514 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008108:	e042      	b.n	8008190 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800810a:	4b24      	ldr	r3, [pc, #144]	; (800819c <USBD_SetConfig+0x150>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	429a      	cmp	r2, r3
 8008116:	d02a      	beq.n	800816e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	b2db      	uxtb	r3, r3
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7fe ffbe 	bl	80070a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008126:	4b1d      	ldr	r3, [pc, #116]	; (800819c <USBD_SetConfig+0x150>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008130:	4b1a      	ldr	r3, [pc, #104]	; (800819c <USBD_SetConfig+0x150>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7fe ff97 	bl	800706a <USBD_SetClassConfig>
 800813c:	4603      	mov	r3, r0
 800813e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008140:	7bfb      	ldrb	r3, [r7, #15]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00f      	beq.n	8008166 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f918 	bl	800837e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7fe ffa3 	bl	80070a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2202      	movs	r2, #2
 8008160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008164:	e014      	b.n	8008190 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f9d4 	bl	8008514 <USBD_CtlSendStatus>
      break;
 800816c:	e010      	b.n	8008190 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f9d0 	bl	8008514 <USBD_CtlSendStatus>
      break;
 8008174:	e00c      	b.n	8008190 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f900 	bl	800837e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800817e:	4b07      	ldr	r3, [pc, #28]	; (800819c <USBD_SetConfig+0x150>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7fe ff8c 	bl	80070a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800818a:	2303      	movs	r3, #3
 800818c:	73fb      	strb	r3, [r7, #15]
      break;
 800818e:	bf00      	nop
  }

  return ret;
 8008190:	7bfb      	ldrb	r3, [r7, #15]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	200006bc 	.word	0x200006bc

080081a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	88db      	ldrh	r3, [r3, #6]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d004      	beq.n	80081bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f8e2 	bl	800837e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081ba:	e023      	b.n	8008204 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	dc02      	bgt.n	80081ce <USBD_GetConfig+0x2e>
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	dc03      	bgt.n	80081d4 <USBD_GetConfig+0x34>
 80081cc:	e015      	b.n	80081fa <USBD_GetConfig+0x5a>
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d00b      	beq.n	80081ea <USBD_GetConfig+0x4a>
 80081d2:	e012      	b.n	80081fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	3308      	adds	r3, #8
 80081de:	2201      	movs	r2, #1
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f93c 	bl	8008460 <USBD_CtlSendData>
        break;
 80081e8:	e00c      	b.n	8008204 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3304      	adds	r3, #4
 80081ee:	2201      	movs	r2, #1
 80081f0:	4619      	mov	r1, r3
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f934 	bl	8008460 <USBD_CtlSendData>
        break;
 80081f8:	e004      	b.n	8008204 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f8be 	bl	800837e <USBD_CtlError>
        break;
 8008202:	bf00      	nop
}
 8008204:	bf00      	nop
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800821c:	b2db      	uxtb	r3, r3
 800821e:	3b01      	subs	r3, #1
 8008220:	2b02      	cmp	r3, #2
 8008222:	d81e      	bhi.n	8008262 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	88db      	ldrh	r3, [r3, #6]
 8008228:	2b02      	cmp	r3, #2
 800822a:	d004      	beq.n	8008236 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f8a5 	bl	800837e <USBD_CtlError>
        break;
 8008234:	e01a      	b.n	800826c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008242:	2b00      	cmp	r3, #0
 8008244:	d005      	beq.n	8008252 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	f043 0202 	orr.w	r2, r3, #2
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	330c      	adds	r3, #12
 8008256:	2202      	movs	r2, #2
 8008258:	4619      	mov	r1, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f900 	bl	8008460 <USBD_CtlSendData>
      break;
 8008260:	e004      	b.n	800826c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f88a 	bl	800837e <USBD_CtlError>
      break;
 800826a:	bf00      	nop
  }
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	885b      	ldrh	r3, [r3, #2]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d107      	bne.n	8008296 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f940 	bl	8008514 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008294:	e013      	b.n	80082be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	885b      	ldrh	r3, [r3, #2]
 800829a:	2b02      	cmp	r3, #2
 800829c:	d10b      	bne.n	80082b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	889b      	ldrh	r3, [r3, #4]
 80082a2:	0a1b      	lsrs	r3, r3, #8
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f930 	bl	8008514 <USBD_CtlSendStatus>
}
 80082b4:	e003      	b.n	80082be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f860 	bl	800837e <USBD_CtlError>
}
 80082be:	bf00      	nop
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b082      	sub	sp, #8
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	3b01      	subs	r3, #1
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d80b      	bhi.n	80082f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	885b      	ldrh	r3, [r3, #2]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d10c      	bne.n	8008300 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f910 	bl	8008514 <USBD_CtlSendStatus>
      }
      break;
 80082f4:	e004      	b.n	8008300 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f840 	bl	800837e <USBD_CtlError>
      break;
 80082fe:	e000      	b.n	8008302 <USBD_ClrFeature+0x3c>
      break;
 8008300:	bf00      	nop
  }
}
 8008302:	bf00      	nop
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	781a      	ldrb	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3301      	adds	r3, #1
 8008324:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	781a      	ldrb	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3301      	adds	r3, #1
 8008332:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f7ff fa41 	bl	80077bc <SWAPBYTE>
 800833a:	4603      	mov	r3, r0
 800833c:	461a      	mov	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3301      	adds	r3, #1
 8008346:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3301      	adds	r3, #1
 800834c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f7ff fa34 	bl	80077bc <SWAPBYTE>
 8008354:	4603      	mov	r3, r0
 8008356:	461a      	mov	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3301      	adds	r3, #1
 8008360:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3301      	adds	r3, #1
 8008366:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7ff fa27 	bl	80077bc <SWAPBYTE>
 800836e:	4603      	mov	r3, r0
 8008370:	461a      	mov	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	80da      	strh	r2, [r3, #6]
}
 8008376:	bf00      	nop
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008388:	2180      	movs	r1, #128	; 0x80
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fcda 	bl	8008d44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008390:	2100      	movs	r1, #0
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fcd6 	bl	8008d44 <USBD_LL_StallEP>
}
 8008398:	bf00      	nop
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083ac:	2300      	movs	r3, #0
 80083ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d036      	beq.n	8008424 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083ba:	6938      	ldr	r0, [r7, #16]
 80083bc:	f000 f836 	bl	800842c <USBD_GetLen>
 80083c0:	4603      	mov	r3, r0
 80083c2:	3301      	adds	r3, #1
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	4413      	add	r3, r2
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	7812      	ldrb	r2, [r2, #0]
 80083d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80083da:	7dfb      	ldrb	r3, [r7, #23]
 80083dc:	3301      	adds	r3, #1
 80083de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	4413      	add	r3, r2
 80083e6:	2203      	movs	r2, #3
 80083e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	3301      	adds	r3, #1
 80083ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083f0:	e013      	b.n	800841a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	4413      	add	r3, r2
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	7812      	ldrb	r2, [r2, #0]
 80083fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	3301      	adds	r3, #1
 8008402:	613b      	str	r3, [r7, #16]
    idx++;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	3301      	adds	r3, #1
 8008408:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800840a:	7dfb      	ldrb	r3, [r7, #23]
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	4413      	add	r3, r2
 8008410:	2200      	movs	r2, #0
 8008412:	701a      	strb	r2, [r3, #0]
    idx++;
 8008414:	7dfb      	ldrb	r3, [r7, #23]
 8008416:	3301      	adds	r3, #1
 8008418:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e7      	bne.n	80083f2 <USBD_GetString+0x52>
 8008422:	e000      	b.n	8008426 <USBD_GetString+0x86>
    return;
 8008424:	bf00      	nop
  }
}
 8008426:	3718      	adds	r7, #24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800843c:	e005      	b.n	800844a <USBD_GetLen+0x1e>
  {
    len++;
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	3301      	adds	r3, #1
 8008442:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	3301      	adds	r3, #1
 8008448:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1f5      	bne.n	800843e <USBD_GetLen+0x12>
  }

  return len;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2202      	movs	r2, #2
 8008470:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	2100      	movs	r1, #0
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f000 fce5 	bl	8008e56 <USBD_LL_Transmit>

  return USBD_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b084      	sub	sp, #16
 800849a:	af00      	add	r7, sp, #0
 800849c:	60f8      	str	r0, [r7, #12]
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	2100      	movs	r1, #0
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 fcd4 	bl	8008e56 <USBD_LL_Transmit>

  return USBD_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2203      	movs	r2, #3
 80084c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	2100      	movs	r1, #0
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 fcd8 	bl	8008e98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	60f8      	str	r0, [r7, #12]
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	2100      	movs	r1, #0
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 fcc7 	bl	8008e98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2204      	movs	r2, #4
 8008520:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008524:	2300      	movs	r3, #0
 8008526:	2200      	movs	r2, #0
 8008528:	2100      	movs	r1, #0
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fc93 	bl	8008e56 <USBD_LL_Transmit>

  return USBD_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b082      	sub	sp, #8
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2205      	movs	r2, #5
 8008546:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800854a:	2300      	movs	r3, #0
 800854c:	2200      	movs	r2, #0
 800854e:	2100      	movs	r1, #0
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fca1 	bl	8008e98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008564:	2200      	movs	r2, #0
 8008566:	4912      	ldr	r1, [pc, #72]	; (80085b0 <MX_USB_DEVICE_Init+0x50>)
 8008568:	4812      	ldr	r0, [pc, #72]	; (80085b4 <MX_USB_DEVICE_Init+0x54>)
 800856a:	f7fe fd01 	bl	8006f70 <USBD_Init>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008574:	f7f9 fb82 	bl	8001c7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008578:	490f      	ldr	r1, [pc, #60]	; (80085b8 <MX_USB_DEVICE_Init+0x58>)
 800857a:	480e      	ldr	r0, [pc, #56]	; (80085b4 <MX_USB_DEVICE_Init+0x54>)
 800857c:	f7fe fd28 	bl	8006fd0 <USBD_RegisterClass>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008586:	f7f9 fb79 	bl	8001c7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800858a:	490c      	ldr	r1, [pc, #48]	; (80085bc <MX_USB_DEVICE_Init+0x5c>)
 800858c:	4809      	ldr	r0, [pc, #36]	; (80085b4 <MX_USB_DEVICE_Init+0x54>)
 800858e:	f7fe fc1f 	bl	8006dd0 <USBD_CDC_RegisterInterface>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008598:	f7f9 fb70 	bl	8001c7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800859c:	4805      	ldr	r0, [pc, #20]	; (80085b4 <MX_USB_DEVICE_Init+0x54>)
 800859e:	f7fe fd4d 	bl	800703c <USBD_Start>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085a8:	f7f9 fb68 	bl	8001c7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085ac:	bf00      	nop
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	200000ac 	.word	0x200000ac
 80085b4:	200006c0 	.word	0x200006c0
 80085b8:	20000018 	.word	0x20000018
 80085bc:	20000098 	.word	0x20000098

080085c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085c4:	2200      	movs	r2, #0
 80085c6:	4905      	ldr	r1, [pc, #20]	; (80085dc <CDC_Init_FS+0x1c>)
 80085c8:	4805      	ldr	r0, [pc, #20]	; (80085e0 <CDC_Init_FS+0x20>)
 80085ca:	f7fe fc1b 	bl	8006e04 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085ce:	4905      	ldr	r1, [pc, #20]	; (80085e4 <CDC_Init_FS+0x24>)
 80085d0:	4803      	ldr	r0, [pc, #12]	; (80085e0 <CDC_Init_FS+0x20>)
 80085d2:	f7fe fc39 	bl	8006e48 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085d8:	4618      	mov	r0, r3
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	2000119c 	.word	0x2000119c
 80085e0:	200006c0 	.word	0x200006c0
 80085e4:	2000099c 	.word	0x2000099c

080085e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085e8:	b480      	push	{r7}
 80085ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	6039      	str	r1, [r7, #0]
 8008602:	71fb      	strb	r3, [r7, #7]
 8008604:	4613      	mov	r3, r2
 8008606:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008608:	79fb      	ldrb	r3, [r7, #7]
 800860a:	2b23      	cmp	r3, #35	; 0x23
 800860c:	d84a      	bhi.n	80086a4 <CDC_Control_FS+0xac>
 800860e:	a201      	add	r2, pc, #4	; (adr r2, 8008614 <CDC_Control_FS+0x1c>)
 8008610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008614:	080086a5 	.word	0x080086a5
 8008618:	080086a5 	.word	0x080086a5
 800861c:	080086a5 	.word	0x080086a5
 8008620:	080086a5 	.word	0x080086a5
 8008624:	080086a5 	.word	0x080086a5
 8008628:	080086a5 	.word	0x080086a5
 800862c:	080086a5 	.word	0x080086a5
 8008630:	080086a5 	.word	0x080086a5
 8008634:	080086a5 	.word	0x080086a5
 8008638:	080086a5 	.word	0x080086a5
 800863c:	080086a5 	.word	0x080086a5
 8008640:	080086a5 	.word	0x080086a5
 8008644:	080086a5 	.word	0x080086a5
 8008648:	080086a5 	.word	0x080086a5
 800864c:	080086a5 	.word	0x080086a5
 8008650:	080086a5 	.word	0x080086a5
 8008654:	080086a5 	.word	0x080086a5
 8008658:	080086a5 	.word	0x080086a5
 800865c:	080086a5 	.word	0x080086a5
 8008660:	080086a5 	.word	0x080086a5
 8008664:	080086a5 	.word	0x080086a5
 8008668:	080086a5 	.word	0x080086a5
 800866c:	080086a5 	.word	0x080086a5
 8008670:	080086a5 	.word	0x080086a5
 8008674:	080086a5 	.word	0x080086a5
 8008678:	080086a5 	.word	0x080086a5
 800867c:	080086a5 	.word	0x080086a5
 8008680:	080086a5 	.word	0x080086a5
 8008684:	080086a5 	.word	0x080086a5
 8008688:	080086a5 	.word	0x080086a5
 800868c:	080086a5 	.word	0x080086a5
 8008690:	080086a5 	.word	0x080086a5
 8008694:	080086a5 	.word	0x080086a5
 8008698:	080086a5 	.word	0x080086a5
 800869c:	080086a5 	.word	0x080086a5
 80086a0:	080086a5 	.word	0x080086a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80086a4:	bf00      	nop
  }

  return (USBD_OK);
 80086a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086be:	6879      	ldr	r1, [r7, #4]
 80086c0:	4807      	ldr	r0, [pc, #28]	; (80086e0 <CDC_Receive_FS+0x2c>)
 80086c2:	f7fe fbc1 	bl	8006e48 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086c6:	4806      	ldr	r0, [pc, #24]	; (80086e0 <CDC_Receive_FS+0x2c>)
 80086c8:	f7fe fc1c 	bl	8006f04 <USBD_CDC_ReceivePacket>
  //CDC_Transmit_FS(Buf, *Len);
  USB_VCP_ReceiveCallback(Buf,Len);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7f8 fcd8 	bl	8001084 <USB_VCP_ReceiveCallback>
  return (USBD_OK);
 80086d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	200006c0 	.word	0x200006c0

080086e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80086f4:	4b0d      	ldr	r3, [pc, #52]	; (800872c <CDC_Transmit_FS+0x48>)
 80086f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008706:	2301      	movs	r3, #1
 8008708:	e00b      	b.n	8008722 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800870a:	887b      	ldrh	r3, [r7, #2]
 800870c:	461a      	mov	r2, r3
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	4806      	ldr	r0, [pc, #24]	; (800872c <CDC_Transmit_FS+0x48>)
 8008712:	f7fe fb77 	bl	8006e04 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008716:	4805      	ldr	r0, [pc, #20]	; (800872c <CDC_Transmit_FS+0x48>)
 8008718:	f7fe fbb4 	bl	8006e84 <USBD_CDC_TransmitPacket>
 800871c:	4603      	mov	r3, r0
 800871e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008720:	7bfb      	ldrb	r3, [r7, #15]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	200006c0 	.word	0x200006c0

08008730 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	4613      	mov	r3, r2
 800873c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	75fb      	strb	r3, [r7, #23]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  /* USER CODE END 13 */
  return result;
 8008742:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008746:	4618      	mov	r0, r3
 8008748:	371c      	adds	r7, #28
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
	...

08008754 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	6039      	str	r1, [r7, #0]
 800875e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	2212      	movs	r2, #18
 8008764:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008766:	4b03      	ldr	r3, [pc, #12]	; (8008774 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr
 8008774:	200000c8 	.word	0x200000c8

08008778 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	4603      	mov	r3, r0
 8008780:	6039      	str	r1, [r7, #0]
 8008782:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	2204      	movs	r2, #4
 8008788:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800878a:	4b03      	ldr	r3, [pc, #12]	; (8008798 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800878c:	4618      	mov	r0, r3
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	200000dc 	.word	0x200000dc

0800879c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	4603      	mov	r3, r0
 80087a4:	6039      	str	r1, [r7, #0]
 80087a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087a8:	79fb      	ldrb	r3, [r7, #7]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d105      	bne.n	80087ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	4907      	ldr	r1, [pc, #28]	; (80087d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80087b2:	4808      	ldr	r0, [pc, #32]	; (80087d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80087b4:	f7ff fdf4 	bl	80083a0 <USBD_GetString>
 80087b8:	e004      	b.n	80087c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087ba:	683a      	ldr	r2, [r7, #0]
 80087bc:	4904      	ldr	r1, [pc, #16]	; (80087d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80087be:	4805      	ldr	r0, [pc, #20]	; (80087d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80087c0:	f7ff fdee 	bl	80083a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087c4:	4b02      	ldr	r3, [pc, #8]	; (80087d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	2000199c 	.word	0x2000199c
 80087d4:	0800d91c 	.word	0x0800d91c

080087d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	6039      	str	r1, [r7, #0]
 80087e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087e4:	683a      	ldr	r2, [r7, #0]
 80087e6:	4904      	ldr	r1, [pc, #16]	; (80087f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087e8:	4804      	ldr	r0, [pc, #16]	; (80087fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087ea:	f7ff fdd9 	bl	80083a0 <USBD_GetString>
  return USBD_StrDesc;
 80087ee:	4b02      	ldr	r3, [pc, #8]	; (80087f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	2000199c 	.word	0x2000199c
 80087fc:	0800d934 	.word	0x0800d934

08008800 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	4603      	mov	r3, r0
 8008808:	6039      	str	r1, [r7, #0]
 800880a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	221a      	movs	r2, #26
 8008810:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008812:	f000 f843 	bl	800889c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008816:	4b02      	ldr	r3, [pc, #8]	; (8008820 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008818:	4618      	mov	r0, r3
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	200000e0 	.word	0x200000e0

08008824 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	6039      	str	r1, [r7, #0]
 800882e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008830:	79fb      	ldrb	r3, [r7, #7]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d105      	bne.n	8008842 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	4907      	ldr	r1, [pc, #28]	; (8008858 <USBD_FS_ConfigStrDescriptor+0x34>)
 800883a:	4808      	ldr	r0, [pc, #32]	; (800885c <USBD_FS_ConfigStrDescriptor+0x38>)
 800883c:	f7ff fdb0 	bl	80083a0 <USBD_GetString>
 8008840:	e004      	b.n	800884c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	4904      	ldr	r1, [pc, #16]	; (8008858 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008846:	4805      	ldr	r0, [pc, #20]	; (800885c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008848:	f7ff fdaa 	bl	80083a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800884c:	4b02      	ldr	r3, [pc, #8]	; (8008858 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	2000199c 	.word	0x2000199c
 800885c:	0800d948 	.word	0x0800d948

08008860 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	6039      	str	r1, [r7, #0]
 800886a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800886c:	79fb      	ldrb	r3, [r7, #7]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d105      	bne.n	800887e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	4907      	ldr	r1, [pc, #28]	; (8008894 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008876:	4808      	ldr	r0, [pc, #32]	; (8008898 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008878:	f7ff fd92 	bl	80083a0 <USBD_GetString>
 800887c:	e004      	b.n	8008888 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	4904      	ldr	r1, [pc, #16]	; (8008894 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008882:	4805      	ldr	r0, [pc, #20]	; (8008898 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008884:	f7ff fd8c 	bl	80083a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008888:	4b02      	ldr	r3, [pc, #8]	; (8008894 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	2000199c 	.word	0x2000199c
 8008898:	0800d954 	.word	0x0800d954

0800889c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088a2:	4b0f      	ldr	r3, [pc, #60]	; (80088e0 <Get_SerialNum+0x44>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088a8:	4b0e      	ldr	r3, [pc, #56]	; (80088e4 <Get_SerialNum+0x48>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088ae:	4b0e      	ldr	r3, [pc, #56]	; (80088e8 <Get_SerialNum+0x4c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4413      	add	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d009      	beq.n	80088d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80088c2:	2208      	movs	r2, #8
 80088c4:	4909      	ldr	r1, [pc, #36]	; (80088ec <Get_SerialNum+0x50>)
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f000 f814 	bl	80088f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088cc:	2204      	movs	r2, #4
 80088ce:	4908      	ldr	r1, [pc, #32]	; (80088f0 <Get_SerialNum+0x54>)
 80088d0:	68b8      	ldr	r0, [r7, #8]
 80088d2:	f000 f80f 	bl	80088f4 <IntToUnicode>
  }
}
 80088d6:	bf00      	nop
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	1fff7a10 	.word	0x1fff7a10
 80088e4:	1fff7a14 	.word	0x1fff7a14
 80088e8:	1fff7a18 	.word	0x1fff7a18
 80088ec:	200000e2 	.word	0x200000e2
 80088f0:	200000f2 	.word	0x200000f2

080088f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b087      	sub	sp, #28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	4613      	mov	r3, r2
 8008900:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008902:	2300      	movs	r3, #0
 8008904:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008906:	2300      	movs	r3, #0
 8008908:	75fb      	strb	r3, [r7, #23]
 800890a:	e027      	b.n	800895c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	0f1b      	lsrs	r3, r3, #28
 8008910:	2b09      	cmp	r3, #9
 8008912:	d80b      	bhi.n	800892c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	0f1b      	lsrs	r3, r3, #28
 8008918:	b2da      	uxtb	r2, r3
 800891a:	7dfb      	ldrb	r3, [r7, #23]
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	4619      	mov	r1, r3
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	440b      	add	r3, r1
 8008924:	3230      	adds	r2, #48	; 0x30
 8008926:	b2d2      	uxtb	r2, r2
 8008928:	701a      	strb	r2, [r3, #0]
 800892a:	e00a      	b.n	8008942 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	0f1b      	lsrs	r3, r3, #28
 8008930:	b2da      	uxtb	r2, r3
 8008932:	7dfb      	ldrb	r3, [r7, #23]
 8008934:	005b      	lsls	r3, r3, #1
 8008936:	4619      	mov	r1, r3
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	440b      	add	r3, r1
 800893c:	3237      	adds	r2, #55	; 0x37
 800893e:	b2d2      	uxtb	r2, r2
 8008940:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	011b      	lsls	r3, r3, #4
 8008946:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008948:	7dfb      	ldrb	r3, [r7, #23]
 800894a:	005b      	lsls	r3, r3, #1
 800894c:	3301      	adds	r3, #1
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	4413      	add	r3, r2
 8008952:	2200      	movs	r2, #0
 8008954:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008956:	7dfb      	ldrb	r3, [r7, #23]
 8008958:	3301      	adds	r3, #1
 800895a:	75fb      	strb	r3, [r7, #23]
 800895c:	7dfa      	ldrb	r2, [r7, #23]
 800895e:	79fb      	ldrb	r3, [r7, #7]
 8008960:	429a      	cmp	r2, r3
 8008962:	d3d3      	bcc.n	800890c <IntToUnicode+0x18>
  }
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop
 8008968:	371c      	adds	r7, #28
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
	...

08008974 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08a      	sub	sp, #40	; 0x28
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800897c:	f107 0314 	add.w	r3, r7, #20
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	605a      	str	r2, [r3, #4]
 8008986:	609a      	str	r2, [r3, #8]
 8008988:	60da      	str	r2, [r3, #12]
 800898a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008994:	d13a      	bne.n	8008a0c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008996:	2300      	movs	r3, #0
 8008998:	613b      	str	r3, [r7, #16]
 800899a:	4b1e      	ldr	r3, [pc, #120]	; (8008a14 <HAL_PCD_MspInit+0xa0>)
 800899c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899e:	4a1d      	ldr	r2, [pc, #116]	; (8008a14 <HAL_PCD_MspInit+0xa0>)
 80089a0:	f043 0301 	orr.w	r3, r3, #1
 80089a4:	6313      	str	r3, [r2, #48]	; 0x30
 80089a6:	4b1b      	ldr	r3, [pc, #108]	; (8008a14 <HAL_PCD_MspInit+0xa0>)
 80089a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	613b      	str	r3, [r7, #16]
 80089b0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80089b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80089b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089b8:	2302      	movs	r3, #2
 80089ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089bc:	2300      	movs	r3, #0
 80089be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089c0:	2303      	movs	r3, #3
 80089c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089c4:	230a      	movs	r3, #10
 80089c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089c8:	f107 0314 	add.w	r3, r7, #20
 80089cc:	4619      	mov	r1, r3
 80089ce:	4812      	ldr	r0, [pc, #72]	; (8008a18 <HAL_PCD_MspInit+0xa4>)
 80089d0:	f7f9 fcc8 	bl	8002364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089d4:	4b0f      	ldr	r3, [pc, #60]	; (8008a14 <HAL_PCD_MspInit+0xa0>)
 80089d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d8:	4a0e      	ldr	r2, [pc, #56]	; (8008a14 <HAL_PCD_MspInit+0xa0>)
 80089da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089de:	6353      	str	r3, [r2, #52]	; 0x34
 80089e0:	2300      	movs	r3, #0
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	4b0b      	ldr	r3, [pc, #44]	; (8008a14 <HAL_PCD_MspInit+0xa0>)
 80089e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e8:	4a0a      	ldr	r2, [pc, #40]	; (8008a14 <HAL_PCD_MspInit+0xa0>)
 80089ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089ee:	6453      	str	r3, [r2, #68]	; 0x44
 80089f0:	4b08      	ldr	r3, [pc, #32]	; (8008a14 <HAL_PCD_MspInit+0xa0>)
 80089f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089f8:	60fb      	str	r3, [r7, #12]
 80089fa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089fc:	2200      	movs	r2, #0
 80089fe:	2100      	movs	r1, #0
 8008a00:	2043      	movs	r0, #67	; 0x43
 8008a02:	f7f9 fc78 	bl	80022f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a06:	2043      	movs	r0, #67	; 0x43
 8008a08:	f7f9 fc91 	bl	800232e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a0c:	bf00      	nop
 8008a0e:	3728      	adds	r7, #40	; 0x28
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	40023800 	.word	0x40023800
 8008a18:	40020000 	.word	0x40020000

08008a1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008a30:	4619      	mov	r1, r3
 8008a32:	4610      	mov	r0, r2
 8008a34:	f7fe fb4f 	bl	80070d6 <USBD_LL_SetupStage>
}
 8008a38:	bf00      	nop
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8008a52:	78fa      	ldrb	r2, [r7, #3]
 8008a54:	6879      	ldr	r1, [r7, #4]
 8008a56:	4613      	mov	r3, r2
 8008a58:	00db      	lsls	r3, r3, #3
 8008a5a:	4413      	add	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	440b      	add	r3, r1
 8008a60:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	78fb      	ldrb	r3, [r7, #3]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	f7fe fb89 	bl	8007180 <USBD_LL_DataOutStage>
}
 8008a6e:	bf00      	nop
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8008a88:	78fa      	ldrb	r2, [r7, #3]
 8008a8a:	6879      	ldr	r1, [r7, #4]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	00db      	lsls	r3, r3, #3
 8008a90:	4413      	add	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	440b      	add	r3, r1
 8008a96:	3320      	adds	r3, #32
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	78fb      	ldrb	r3, [r7, #3]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	f7fe fc22 	bl	80072e6 <USBD_LL_DataInStage>
}
 8008aa2:	bf00      	nop
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b082      	sub	sp, #8
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7fe fd5c 	bl	8007576 <USBD_LL_SOF>
}
 8008abe:	bf00      	nop
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	79db      	ldrb	r3, [r3, #7]
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d001      	beq.n	8008ade <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ada:	f7f9 f8cf 	bl	8001c7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008ae4:	7bfa      	ldrb	r2, [r7, #15]
 8008ae6:	4611      	mov	r1, r2
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fe fd00 	bl	80074ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fe fca8 	bl	800744a <USBD_LL_Reset>
}
 8008afa:	bf00      	nop
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
	...

08008b04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fe fcfb 	bl	800750e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	6812      	ldr	r2, [r2, #0]
 8008b26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b2a:	f043 0301 	orr.w	r3, r3, #1
 8008b2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	7adb      	ldrb	r3, [r3, #11]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d005      	beq.n	8008b44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b38:	4b04      	ldr	r3, [pc, #16]	; (8008b4c <HAL_PCD_SuspendCallback+0x48>)
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	4a03      	ldr	r2, [pc, #12]	; (8008b4c <HAL_PCD_SuspendCallback+0x48>)
 8008b3e:	f043 0306 	orr.w	r3, r3, #6
 8008b42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b44:	bf00      	nop
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	e000ed00 	.word	0xe000ed00

08008b50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe fcf1 	bl	8007546 <USBD_LL_Resume>
}
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	460b      	mov	r3, r1
 8008b76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008b7e:	78fa      	ldrb	r2, [r7, #3]
 8008b80:	4611      	mov	r1, r2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fe fd49 	bl	800761a <USBD_LL_IsoOUTIncomplete>
}
 8008b88:	bf00      	nop
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008ba2:	78fa      	ldrb	r2, [r7, #3]
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fe fd05 	bl	80075b6 <USBD_LL_IsoINIncomplete>
}
 8008bac:	bf00      	nop
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fe fd5b 	bl	800767e <USBD_LL_DevConnected>
}
 8008bc8:	bf00      	nop
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fe fd58 	bl	8007694 <USBD_LL_DevDisconnected>
}
 8008be4:	bf00      	nop
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d13c      	bne.n	8008c76 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008bfc:	4a20      	ldr	r2, [pc, #128]	; (8008c80 <USBD_LL_Init+0x94>)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a1e      	ldr	r2, [pc, #120]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c08:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c0c:	4b1c      	ldr	r3, [pc, #112]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008c14:	4b1a      	ldr	r3, [pc, #104]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c16:	2204      	movs	r2, #4
 8008c18:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c1a:	4b19      	ldr	r3, [pc, #100]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c20:	4b17      	ldr	r3, [pc, #92]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c26:	4b16      	ldr	r3, [pc, #88]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c28:	2202      	movs	r2, #2
 8008c2a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c2c:	4b14      	ldr	r3, [pc, #80]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c32:	4b13      	ldr	r3, [pc, #76]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c38:	4b11      	ldr	r3, [pc, #68]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c3e:	4b10      	ldr	r3, [pc, #64]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c44:	4b0e      	ldr	r3, [pc, #56]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c4a:	480d      	ldr	r0, [pc, #52]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c4c:	f7f9 fd27 	bl	800269e <HAL_PCD_Init>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c56:	f7f9 f811 	bl	8001c7c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c5a:	2180      	movs	r1, #128	; 0x80
 8008c5c:	4808      	ldr	r0, [pc, #32]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c5e:	f7fa ff52 	bl	8003b06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c62:	2240      	movs	r2, #64	; 0x40
 8008c64:	2100      	movs	r1, #0
 8008c66:	4806      	ldr	r0, [pc, #24]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c68:	f7fa ff06 	bl	8003a78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c6c:	2280      	movs	r2, #128	; 0x80
 8008c6e:	2101      	movs	r1, #1
 8008c70:	4803      	ldr	r0, [pc, #12]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c72:	f7fa ff01 	bl	8003a78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	20001b9c 	.word	0x20001b9c

08008c84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7f9 fe0e 	bl	80028bc <HAL_PCD_Start>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 f942 	bl	8008f30 <USBD_Get_USB_Status>
 8008cac:	4603      	mov	r3, r0
 8008cae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	4608      	mov	r0, r1
 8008cc4:	4611      	mov	r1, r2
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	4603      	mov	r3, r0
 8008cca:	70fb      	strb	r3, [r7, #3]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	70bb      	strb	r3, [r7, #2]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ce2:	78bb      	ldrb	r3, [r7, #2]
 8008ce4:	883a      	ldrh	r2, [r7, #0]
 8008ce6:	78f9      	ldrb	r1, [r7, #3]
 8008ce8:	f7fa fae2 	bl	80032b0 <HAL_PCD_EP_Open>
 8008cec:	4603      	mov	r3, r0
 8008cee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 f91c 	bl	8008f30 <USBD_Get_USB_Status>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d20:	78fa      	ldrb	r2, [r7, #3]
 8008d22:	4611      	mov	r1, r2
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7fa fb2b 	bl	8003380 <HAL_PCD_EP_Close>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 f8fd 	bl	8008f30 <USBD_Get_USB_Status>
 8008d36:	4603      	mov	r3, r0
 8008d38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d5e:	78fa      	ldrb	r2, [r7, #3]
 8008d60:	4611      	mov	r1, r2
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fa fbe3 	bl	800352e <HAL_PCD_EP_SetStall>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 f8de 	bl	8008f30 <USBD_Get_USB_Status>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b084      	sub	sp, #16
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d9c:	78fa      	ldrb	r2, [r7, #3]
 8008d9e:	4611      	mov	r1, r2
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fa fc27 	bl	80035f4 <HAL_PCD_EP_ClrStall>
 8008da6:	4603      	mov	r3, r0
 8008da8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
 8008dac:	4618      	mov	r0, r3
 8008dae:	f000 f8bf 	bl	8008f30 <USBD_Get_USB_Status>
 8008db2:	4603      	mov	r3, r0
 8008db4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dd2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008dd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	da0b      	bge.n	8008df4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ddc:	78fb      	ldrb	r3, [r7, #3]
 8008dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008de2:	68f9      	ldr	r1, [r7, #12]
 8008de4:	4613      	mov	r3, r2
 8008de6:	00db      	lsls	r3, r3, #3
 8008de8:	4413      	add	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	440b      	add	r3, r1
 8008dee:	3316      	adds	r3, #22
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	e00b      	b.n	8008e0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008df4:	78fb      	ldrb	r3, [r7, #3]
 8008df6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dfa:	68f9      	ldr	r1, [r7, #12]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	4413      	add	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	440b      	add	r3, r1
 8008e06:	f203 2356 	addw	r3, r3, #598	; 0x256
 8008e0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e32:	78fa      	ldrb	r2, [r7, #3]
 8008e34:	4611      	mov	r1, r2
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fa fa16 	bl	8003268 <HAL_PCD_SetAddress>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 f874 	bl	8008f30 <USBD_Get_USB_Status>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b086      	sub	sp, #24
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	60f8      	str	r0, [r7, #12]
 8008e5e:	607a      	str	r2, [r7, #4]
 8008e60:	603b      	str	r3, [r7, #0]
 8008e62:	460b      	mov	r3, r1
 8008e64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e74:	7af9      	ldrb	r1, [r7, #11]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	f7fa fb1e 	bl	80034ba <HAL_PCD_EP_Transmit>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e82:	7dfb      	ldrb	r3, [r7, #23]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 f853 	bl	8008f30 <USBD_Get_USB_Status>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3718      	adds	r7, #24
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	607a      	str	r2, [r7, #4]
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008eb6:	7af9      	ldrb	r1, [r7, #11]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	f7fa faaa 	bl	8003414 <HAL_PCD_EP_Receive>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 f832 	bl	8008f30 <USBD_Get_USB_Status>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ed0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b082      	sub	sp, #8
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008eec:	78fa      	ldrb	r2, [r7, #3]
 8008eee:	4611      	mov	r1, r2
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fa faca 	bl	800348a <HAL_PCD_EP_GetRxCount>
 8008ef6:	4603      	mov	r3, r0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f08:	4b03      	ldr	r3, [pc, #12]	; (8008f18 <USBD_static_malloc+0x18>)
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	20002080 	.word	0x20002080

08008f1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]

}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	4603      	mov	r3, r0
 8008f38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f3e:	79fb      	ldrb	r3, [r7, #7]
 8008f40:	2b03      	cmp	r3, #3
 8008f42:	d817      	bhi.n	8008f74 <USBD_Get_USB_Status+0x44>
 8008f44:	a201      	add	r2, pc, #4	; (adr r2, 8008f4c <USBD_Get_USB_Status+0x1c>)
 8008f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4a:	bf00      	nop
 8008f4c:	08008f5d 	.word	0x08008f5d
 8008f50:	08008f63 	.word	0x08008f63
 8008f54:	08008f69 	.word	0x08008f69
 8008f58:	08008f6f 	.word	0x08008f6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f60:	e00b      	b.n	8008f7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f62:	2303      	movs	r3, #3
 8008f64:	73fb      	strb	r3, [r7, #15]
    break;
 8008f66:	e008      	b.n	8008f7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f6c:	e005      	b.n	8008f7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	73fb      	strb	r3, [r7, #15]
    break;
 8008f72:	e002      	b.n	8008f7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f74:	2303      	movs	r3, #3
 8008f76:	73fb      	strb	r3, [r7, #15]
    break;
 8008f78:	bf00      	nop
  }
  return usb_status;
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <__cvt>:
 8008f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f8c:	ec55 4b10 	vmov	r4, r5, d0
 8008f90:	2d00      	cmp	r5, #0
 8008f92:	460e      	mov	r6, r1
 8008f94:	4619      	mov	r1, r3
 8008f96:	462b      	mov	r3, r5
 8008f98:	bfbb      	ittet	lt
 8008f9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f9e:	461d      	movlt	r5, r3
 8008fa0:	2300      	movge	r3, #0
 8008fa2:	232d      	movlt	r3, #45	; 0x2d
 8008fa4:	700b      	strb	r3, [r1, #0]
 8008fa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fa8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008fac:	4691      	mov	r9, r2
 8008fae:	f023 0820 	bic.w	r8, r3, #32
 8008fb2:	bfbc      	itt	lt
 8008fb4:	4622      	movlt	r2, r4
 8008fb6:	4614      	movlt	r4, r2
 8008fb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fbc:	d005      	beq.n	8008fca <__cvt+0x42>
 8008fbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008fc2:	d100      	bne.n	8008fc6 <__cvt+0x3e>
 8008fc4:	3601      	adds	r6, #1
 8008fc6:	2102      	movs	r1, #2
 8008fc8:	e000      	b.n	8008fcc <__cvt+0x44>
 8008fca:	2103      	movs	r1, #3
 8008fcc:	ab03      	add	r3, sp, #12
 8008fce:	9301      	str	r3, [sp, #4]
 8008fd0:	ab02      	add	r3, sp, #8
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	ec45 4b10 	vmov	d0, r4, r5
 8008fd8:	4653      	mov	r3, sl
 8008fda:	4632      	mov	r2, r6
 8008fdc:	f001 f984 	bl	800a2e8 <_dtoa_r>
 8008fe0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008fe4:	4607      	mov	r7, r0
 8008fe6:	d102      	bne.n	8008fee <__cvt+0x66>
 8008fe8:	f019 0f01 	tst.w	r9, #1
 8008fec:	d022      	beq.n	8009034 <__cvt+0xac>
 8008fee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ff2:	eb07 0906 	add.w	r9, r7, r6
 8008ff6:	d110      	bne.n	800901a <__cvt+0x92>
 8008ff8:	783b      	ldrb	r3, [r7, #0]
 8008ffa:	2b30      	cmp	r3, #48	; 0x30
 8008ffc:	d10a      	bne.n	8009014 <__cvt+0x8c>
 8008ffe:	2200      	movs	r2, #0
 8009000:	2300      	movs	r3, #0
 8009002:	4620      	mov	r0, r4
 8009004:	4629      	mov	r1, r5
 8009006:	f7f7 fd67 	bl	8000ad8 <__aeabi_dcmpeq>
 800900a:	b918      	cbnz	r0, 8009014 <__cvt+0x8c>
 800900c:	f1c6 0601 	rsb	r6, r6, #1
 8009010:	f8ca 6000 	str.w	r6, [sl]
 8009014:	f8da 3000 	ldr.w	r3, [sl]
 8009018:	4499      	add	r9, r3
 800901a:	2200      	movs	r2, #0
 800901c:	2300      	movs	r3, #0
 800901e:	4620      	mov	r0, r4
 8009020:	4629      	mov	r1, r5
 8009022:	f7f7 fd59 	bl	8000ad8 <__aeabi_dcmpeq>
 8009026:	b108      	cbz	r0, 800902c <__cvt+0xa4>
 8009028:	f8cd 900c 	str.w	r9, [sp, #12]
 800902c:	2230      	movs	r2, #48	; 0x30
 800902e:	9b03      	ldr	r3, [sp, #12]
 8009030:	454b      	cmp	r3, r9
 8009032:	d307      	bcc.n	8009044 <__cvt+0xbc>
 8009034:	9b03      	ldr	r3, [sp, #12]
 8009036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009038:	1bdb      	subs	r3, r3, r7
 800903a:	4638      	mov	r0, r7
 800903c:	6013      	str	r3, [r2, #0]
 800903e:	b004      	add	sp, #16
 8009040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009044:	1c59      	adds	r1, r3, #1
 8009046:	9103      	str	r1, [sp, #12]
 8009048:	701a      	strb	r2, [r3, #0]
 800904a:	e7f0      	b.n	800902e <__cvt+0xa6>

0800904c <__exponent>:
 800904c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800904e:	4603      	mov	r3, r0
 8009050:	2900      	cmp	r1, #0
 8009052:	bfb8      	it	lt
 8009054:	4249      	neglt	r1, r1
 8009056:	f803 2b02 	strb.w	r2, [r3], #2
 800905a:	bfb4      	ite	lt
 800905c:	222d      	movlt	r2, #45	; 0x2d
 800905e:	222b      	movge	r2, #43	; 0x2b
 8009060:	2909      	cmp	r1, #9
 8009062:	7042      	strb	r2, [r0, #1]
 8009064:	dd2a      	ble.n	80090bc <__exponent+0x70>
 8009066:	f10d 0207 	add.w	r2, sp, #7
 800906a:	4617      	mov	r7, r2
 800906c:	260a      	movs	r6, #10
 800906e:	4694      	mov	ip, r2
 8009070:	fb91 f5f6 	sdiv	r5, r1, r6
 8009074:	fb06 1415 	mls	r4, r6, r5, r1
 8009078:	3430      	adds	r4, #48	; 0x30
 800907a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800907e:	460c      	mov	r4, r1
 8009080:	2c63      	cmp	r4, #99	; 0x63
 8009082:	f102 32ff 	add.w	r2, r2, #4294967295
 8009086:	4629      	mov	r1, r5
 8009088:	dcf1      	bgt.n	800906e <__exponent+0x22>
 800908a:	3130      	adds	r1, #48	; 0x30
 800908c:	f1ac 0402 	sub.w	r4, ip, #2
 8009090:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009094:	1c41      	adds	r1, r0, #1
 8009096:	4622      	mov	r2, r4
 8009098:	42ba      	cmp	r2, r7
 800909a:	d30a      	bcc.n	80090b2 <__exponent+0x66>
 800909c:	f10d 0209 	add.w	r2, sp, #9
 80090a0:	eba2 020c 	sub.w	r2, r2, ip
 80090a4:	42bc      	cmp	r4, r7
 80090a6:	bf88      	it	hi
 80090a8:	2200      	movhi	r2, #0
 80090aa:	4413      	add	r3, r2
 80090ac:	1a18      	subs	r0, r3, r0
 80090ae:	b003      	add	sp, #12
 80090b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090b2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80090b6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80090ba:	e7ed      	b.n	8009098 <__exponent+0x4c>
 80090bc:	2330      	movs	r3, #48	; 0x30
 80090be:	3130      	adds	r1, #48	; 0x30
 80090c0:	7083      	strb	r3, [r0, #2]
 80090c2:	70c1      	strb	r1, [r0, #3]
 80090c4:	1d03      	adds	r3, r0, #4
 80090c6:	e7f1      	b.n	80090ac <__exponent+0x60>

080090c8 <_printf_float>:
 80090c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090cc:	ed2d 8b02 	vpush	{d8}
 80090d0:	b08d      	sub	sp, #52	; 0x34
 80090d2:	460c      	mov	r4, r1
 80090d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090d8:	4616      	mov	r6, r2
 80090da:	461f      	mov	r7, r3
 80090dc:	4605      	mov	r5, r0
 80090de:	f000 ffef 	bl	800a0c0 <_localeconv_r>
 80090e2:	f8d0 a000 	ldr.w	sl, [r0]
 80090e6:	4650      	mov	r0, sl
 80090e8:	f7f7 f8ca 	bl	8000280 <strlen>
 80090ec:	2300      	movs	r3, #0
 80090ee:	930a      	str	r3, [sp, #40]	; 0x28
 80090f0:	6823      	ldr	r3, [r4, #0]
 80090f2:	9305      	str	r3, [sp, #20]
 80090f4:	f8d8 3000 	ldr.w	r3, [r8]
 80090f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80090fc:	3307      	adds	r3, #7
 80090fe:	f023 0307 	bic.w	r3, r3, #7
 8009102:	f103 0208 	add.w	r2, r3, #8
 8009106:	f8c8 2000 	str.w	r2, [r8]
 800910a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800910e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009112:	9307      	str	r3, [sp, #28]
 8009114:	f8cd 8018 	str.w	r8, [sp, #24]
 8009118:	ee08 0a10 	vmov	s16, r0
 800911c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009120:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009124:	4b9e      	ldr	r3, [pc, #632]	; (80093a0 <_printf_float+0x2d8>)
 8009126:	f04f 32ff 	mov.w	r2, #4294967295
 800912a:	f7f7 fd07 	bl	8000b3c <__aeabi_dcmpun>
 800912e:	bb88      	cbnz	r0, 8009194 <_printf_float+0xcc>
 8009130:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009134:	4b9a      	ldr	r3, [pc, #616]	; (80093a0 <_printf_float+0x2d8>)
 8009136:	f04f 32ff 	mov.w	r2, #4294967295
 800913a:	f7f7 fce1 	bl	8000b00 <__aeabi_dcmple>
 800913e:	bb48      	cbnz	r0, 8009194 <_printf_float+0xcc>
 8009140:	2200      	movs	r2, #0
 8009142:	2300      	movs	r3, #0
 8009144:	4640      	mov	r0, r8
 8009146:	4649      	mov	r1, r9
 8009148:	f7f7 fcd0 	bl	8000aec <__aeabi_dcmplt>
 800914c:	b110      	cbz	r0, 8009154 <_printf_float+0x8c>
 800914e:	232d      	movs	r3, #45	; 0x2d
 8009150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009154:	4a93      	ldr	r2, [pc, #588]	; (80093a4 <_printf_float+0x2dc>)
 8009156:	4b94      	ldr	r3, [pc, #592]	; (80093a8 <_printf_float+0x2e0>)
 8009158:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800915c:	bf94      	ite	ls
 800915e:	4690      	movls	r8, r2
 8009160:	4698      	movhi	r8, r3
 8009162:	2303      	movs	r3, #3
 8009164:	6123      	str	r3, [r4, #16]
 8009166:	9b05      	ldr	r3, [sp, #20]
 8009168:	f023 0304 	bic.w	r3, r3, #4
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	f04f 0900 	mov.w	r9, #0
 8009172:	9700      	str	r7, [sp, #0]
 8009174:	4633      	mov	r3, r6
 8009176:	aa0b      	add	r2, sp, #44	; 0x2c
 8009178:	4621      	mov	r1, r4
 800917a:	4628      	mov	r0, r5
 800917c:	f000 f9da 	bl	8009534 <_printf_common>
 8009180:	3001      	adds	r0, #1
 8009182:	f040 8090 	bne.w	80092a6 <_printf_float+0x1de>
 8009186:	f04f 30ff 	mov.w	r0, #4294967295
 800918a:	b00d      	add	sp, #52	; 0x34
 800918c:	ecbd 8b02 	vpop	{d8}
 8009190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009194:	4642      	mov	r2, r8
 8009196:	464b      	mov	r3, r9
 8009198:	4640      	mov	r0, r8
 800919a:	4649      	mov	r1, r9
 800919c:	f7f7 fcce 	bl	8000b3c <__aeabi_dcmpun>
 80091a0:	b140      	cbz	r0, 80091b4 <_printf_float+0xec>
 80091a2:	464b      	mov	r3, r9
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	bfbc      	itt	lt
 80091a8:	232d      	movlt	r3, #45	; 0x2d
 80091aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80091ae:	4a7f      	ldr	r2, [pc, #508]	; (80093ac <_printf_float+0x2e4>)
 80091b0:	4b7f      	ldr	r3, [pc, #508]	; (80093b0 <_printf_float+0x2e8>)
 80091b2:	e7d1      	b.n	8009158 <_printf_float+0x90>
 80091b4:	6863      	ldr	r3, [r4, #4]
 80091b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80091ba:	9206      	str	r2, [sp, #24]
 80091bc:	1c5a      	adds	r2, r3, #1
 80091be:	d13f      	bne.n	8009240 <_printf_float+0x178>
 80091c0:	2306      	movs	r3, #6
 80091c2:	6063      	str	r3, [r4, #4]
 80091c4:	9b05      	ldr	r3, [sp, #20]
 80091c6:	6861      	ldr	r1, [r4, #4]
 80091c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80091cc:	2300      	movs	r3, #0
 80091ce:	9303      	str	r3, [sp, #12]
 80091d0:	ab0a      	add	r3, sp, #40	; 0x28
 80091d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80091d6:	ab09      	add	r3, sp, #36	; 0x24
 80091d8:	ec49 8b10 	vmov	d0, r8, r9
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	6022      	str	r2, [r4, #0]
 80091e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80091e4:	4628      	mov	r0, r5
 80091e6:	f7ff fecf 	bl	8008f88 <__cvt>
 80091ea:	9b06      	ldr	r3, [sp, #24]
 80091ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091ee:	2b47      	cmp	r3, #71	; 0x47
 80091f0:	4680      	mov	r8, r0
 80091f2:	d108      	bne.n	8009206 <_printf_float+0x13e>
 80091f4:	1cc8      	adds	r0, r1, #3
 80091f6:	db02      	blt.n	80091fe <_printf_float+0x136>
 80091f8:	6863      	ldr	r3, [r4, #4]
 80091fa:	4299      	cmp	r1, r3
 80091fc:	dd41      	ble.n	8009282 <_printf_float+0x1ba>
 80091fe:	f1ab 0302 	sub.w	r3, fp, #2
 8009202:	fa5f fb83 	uxtb.w	fp, r3
 8009206:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800920a:	d820      	bhi.n	800924e <_printf_float+0x186>
 800920c:	3901      	subs	r1, #1
 800920e:	465a      	mov	r2, fp
 8009210:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009214:	9109      	str	r1, [sp, #36]	; 0x24
 8009216:	f7ff ff19 	bl	800904c <__exponent>
 800921a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800921c:	1813      	adds	r3, r2, r0
 800921e:	2a01      	cmp	r2, #1
 8009220:	4681      	mov	r9, r0
 8009222:	6123      	str	r3, [r4, #16]
 8009224:	dc02      	bgt.n	800922c <_printf_float+0x164>
 8009226:	6822      	ldr	r2, [r4, #0]
 8009228:	07d2      	lsls	r2, r2, #31
 800922a:	d501      	bpl.n	8009230 <_printf_float+0x168>
 800922c:	3301      	adds	r3, #1
 800922e:	6123      	str	r3, [r4, #16]
 8009230:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009234:	2b00      	cmp	r3, #0
 8009236:	d09c      	beq.n	8009172 <_printf_float+0xaa>
 8009238:	232d      	movs	r3, #45	; 0x2d
 800923a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800923e:	e798      	b.n	8009172 <_printf_float+0xaa>
 8009240:	9a06      	ldr	r2, [sp, #24]
 8009242:	2a47      	cmp	r2, #71	; 0x47
 8009244:	d1be      	bne.n	80091c4 <_printf_float+0xfc>
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1bc      	bne.n	80091c4 <_printf_float+0xfc>
 800924a:	2301      	movs	r3, #1
 800924c:	e7b9      	b.n	80091c2 <_printf_float+0xfa>
 800924e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009252:	d118      	bne.n	8009286 <_printf_float+0x1be>
 8009254:	2900      	cmp	r1, #0
 8009256:	6863      	ldr	r3, [r4, #4]
 8009258:	dd0b      	ble.n	8009272 <_printf_float+0x1aa>
 800925a:	6121      	str	r1, [r4, #16]
 800925c:	b913      	cbnz	r3, 8009264 <_printf_float+0x19c>
 800925e:	6822      	ldr	r2, [r4, #0]
 8009260:	07d0      	lsls	r0, r2, #31
 8009262:	d502      	bpl.n	800926a <_printf_float+0x1a2>
 8009264:	3301      	adds	r3, #1
 8009266:	440b      	add	r3, r1
 8009268:	6123      	str	r3, [r4, #16]
 800926a:	65a1      	str	r1, [r4, #88]	; 0x58
 800926c:	f04f 0900 	mov.w	r9, #0
 8009270:	e7de      	b.n	8009230 <_printf_float+0x168>
 8009272:	b913      	cbnz	r3, 800927a <_printf_float+0x1b2>
 8009274:	6822      	ldr	r2, [r4, #0]
 8009276:	07d2      	lsls	r2, r2, #31
 8009278:	d501      	bpl.n	800927e <_printf_float+0x1b6>
 800927a:	3302      	adds	r3, #2
 800927c:	e7f4      	b.n	8009268 <_printf_float+0x1a0>
 800927e:	2301      	movs	r3, #1
 8009280:	e7f2      	b.n	8009268 <_printf_float+0x1a0>
 8009282:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009288:	4299      	cmp	r1, r3
 800928a:	db05      	blt.n	8009298 <_printf_float+0x1d0>
 800928c:	6823      	ldr	r3, [r4, #0]
 800928e:	6121      	str	r1, [r4, #16]
 8009290:	07d8      	lsls	r0, r3, #31
 8009292:	d5ea      	bpl.n	800926a <_printf_float+0x1a2>
 8009294:	1c4b      	adds	r3, r1, #1
 8009296:	e7e7      	b.n	8009268 <_printf_float+0x1a0>
 8009298:	2900      	cmp	r1, #0
 800929a:	bfd4      	ite	le
 800929c:	f1c1 0202 	rsble	r2, r1, #2
 80092a0:	2201      	movgt	r2, #1
 80092a2:	4413      	add	r3, r2
 80092a4:	e7e0      	b.n	8009268 <_printf_float+0x1a0>
 80092a6:	6823      	ldr	r3, [r4, #0]
 80092a8:	055a      	lsls	r2, r3, #21
 80092aa:	d407      	bmi.n	80092bc <_printf_float+0x1f4>
 80092ac:	6923      	ldr	r3, [r4, #16]
 80092ae:	4642      	mov	r2, r8
 80092b0:	4631      	mov	r1, r6
 80092b2:	4628      	mov	r0, r5
 80092b4:	47b8      	blx	r7
 80092b6:	3001      	adds	r0, #1
 80092b8:	d12c      	bne.n	8009314 <_printf_float+0x24c>
 80092ba:	e764      	b.n	8009186 <_printf_float+0xbe>
 80092bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092c0:	f240 80e0 	bls.w	8009484 <_printf_float+0x3bc>
 80092c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092c8:	2200      	movs	r2, #0
 80092ca:	2300      	movs	r3, #0
 80092cc:	f7f7 fc04 	bl	8000ad8 <__aeabi_dcmpeq>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d034      	beq.n	800933e <_printf_float+0x276>
 80092d4:	4a37      	ldr	r2, [pc, #220]	; (80093b4 <_printf_float+0x2ec>)
 80092d6:	2301      	movs	r3, #1
 80092d8:	4631      	mov	r1, r6
 80092da:	4628      	mov	r0, r5
 80092dc:	47b8      	blx	r7
 80092de:	3001      	adds	r0, #1
 80092e0:	f43f af51 	beq.w	8009186 <_printf_float+0xbe>
 80092e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092e8:	429a      	cmp	r2, r3
 80092ea:	db02      	blt.n	80092f2 <_printf_float+0x22a>
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	07d8      	lsls	r0, r3, #31
 80092f0:	d510      	bpl.n	8009314 <_printf_float+0x24c>
 80092f2:	ee18 3a10 	vmov	r3, s16
 80092f6:	4652      	mov	r2, sl
 80092f8:	4631      	mov	r1, r6
 80092fa:	4628      	mov	r0, r5
 80092fc:	47b8      	blx	r7
 80092fe:	3001      	adds	r0, #1
 8009300:	f43f af41 	beq.w	8009186 <_printf_float+0xbe>
 8009304:	f04f 0800 	mov.w	r8, #0
 8009308:	f104 091a 	add.w	r9, r4, #26
 800930c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800930e:	3b01      	subs	r3, #1
 8009310:	4543      	cmp	r3, r8
 8009312:	dc09      	bgt.n	8009328 <_printf_float+0x260>
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	079b      	lsls	r3, r3, #30
 8009318:	f100 8107 	bmi.w	800952a <_printf_float+0x462>
 800931c:	68e0      	ldr	r0, [r4, #12]
 800931e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009320:	4298      	cmp	r0, r3
 8009322:	bfb8      	it	lt
 8009324:	4618      	movlt	r0, r3
 8009326:	e730      	b.n	800918a <_printf_float+0xc2>
 8009328:	2301      	movs	r3, #1
 800932a:	464a      	mov	r2, r9
 800932c:	4631      	mov	r1, r6
 800932e:	4628      	mov	r0, r5
 8009330:	47b8      	blx	r7
 8009332:	3001      	adds	r0, #1
 8009334:	f43f af27 	beq.w	8009186 <_printf_float+0xbe>
 8009338:	f108 0801 	add.w	r8, r8, #1
 800933c:	e7e6      	b.n	800930c <_printf_float+0x244>
 800933e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009340:	2b00      	cmp	r3, #0
 8009342:	dc39      	bgt.n	80093b8 <_printf_float+0x2f0>
 8009344:	4a1b      	ldr	r2, [pc, #108]	; (80093b4 <_printf_float+0x2ec>)
 8009346:	2301      	movs	r3, #1
 8009348:	4631      	mov	r1, r6
 800934a:	4628      	mov	r0, r5
 800934c:	47b8      	blx	r7
 800934e:	3001      	adds	r0, #1
 8009350:	f43f af19 	beq.w	8009186 <_printf_float+0xbe>
 8009354:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009358:	4313      	orrs	r3, r2
 800935a:	d102      	bne.n	8009362 <_printf_float+0x29a>
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	07d9      	lsls	r1, r3, #31
 8009360:	d5d8      	bpl.n	8009314 <_printf_float+0x24c>
 8009362:	ee18 3a10 	vmov	r3, s16
 8009366:	4652      	mov	r2, sl
 8009368:	4631      	mov	r1, r6
 800936a:	4628      	mov	r0, r5
 800936c:	47b8      	blx	r7
 800936e:	3001      	adds	r0, #1
 8009370:	f43f af09 	beq.w	8009186 <_printf_float+0xbe>
 8009374:	f04f 0900 	mov.w	r9, #0
 8009378:	f104 0a1a 	add.w	sl, r4, #26
 800937c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800937e:	425b      	negs	r3, r3
 8009380:	454b      	cmp	r3, r9
 8009382:	dc01      	bgt.n	8009388 <_printf_float+0x2c0>
 8009384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009386:	e792      	b.n	80092ae <_printf_float+0x1e6>
 8009388:	2301      	movs	r3, #1
 800938a:	4652      	mov	r2, sl
 800938c:	4631      	mov	r1, r6
 800938e:	4628      	mov	r0, r5
 8009390:	47b8      	blx	r7
 8009392:	3001      	adds	r0, #1
 8009394:	f43f aef7 	beq.w	8009186 <_printf_float+0xbe>
 8009398:	f109 0901 	add.w	r9, r9, #1
 800939c:	e7ee      	b.n	800937c <_printf_float+0x2b4>
 800939e:	bf00      	nop
 80093a0:	7fefffff 	.word	0x7fefffff
 80093a4:	0800d974 	.word	0x0800d974
 80093a8:	0800d978 	.word	0x0800d978
 80093ac:	0800d97c 	.word	0x0800d97c
 80093b0:	0800d980 	.word	0x0800d980
 80093b4:	0800d984 	.word	0x0800d984
 80093b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093bc:	429a      	cmp	r2, r3
 80093be:	bfa8      	it	ge
 80093c0:	461a      	movge	r2, r3
 80093c2:	2a00      	cmp	r2, #0
 80093c4:	4691      	mov	r9, r2
 80093c6:	dc37      	bgt.n	8009438 <_printf_float+0x370>
 80093c8:	f04f 0b00 	mov.w	fp, #0
 80093cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093d0:	f104 021a 	add.w	r2, r4, #26
 80093d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093d6:	9305      	str	r3, [sp, #20]
 80093d8:	eba3 0309 	sub.w	r3, r3, r9
 80093dc:	455b      	cmp	r3, fp
 80093de:	dc33      	bgt.n	8009448 <_printf_float+0x380>
 80093e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093e4:	429a      	cmp	r2, r3
 80093e6:	db3b      	blt.n	8009460 <_printf_float+0x398>
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	07da      	lsls	r2, r3, #31
 80093ec:	d438      	bmi.n	8009460 <_printf_float+0x398>
 80093ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80093f2:	eba2 0903 	sub.w	r9, r2, r3
 80093f6:	9b05      	ldr	r3, [sp, #20]
 80093f8:	1ad2      	subs	r2, r2, r3
 80093fa:	4591      	cmp	r9, r2
 80093fc:	bfa8      	it	ge
 80093fe:	4691      	movge	r9, r2
 8009400:	f1b9 0f00 	cmp.w	r9, #0
 8009404:	dc35      	bgt.n	8009472 <_printf_float+0x3aa>
 8009406:	f04f 0800 	mov.w	r8, #0
 800940a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800940e:	f104 0a1a 	add.w	sl, r4, #26
 8009412:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009416:	1a9b      	subs	r3, r3, r2
 8009418:	eba3 0309 	sub.w	r3, r3, r9
 800941c:	4543      	cmp	r3, r8
 800941e:	f77f af79 	ble.w	8009314 <_printf_float+0x24c>
 8009422:	2301      	movs	r3, #1
 8009424:	4652      	mov	r2, sl
 8009426:	4631      	mov	r1, r6
 8009428:	4628      	mov	r0, r5
 800942a:	47b8      	blx	r7
 800942c:	3001      	adds	r0, #1
 800942e:	f43f aeaa 	beq.w	8009186 <_printf_float+0xbe>
 8009432:	f108 0801 	add.w	r8, r8, #1
 8009436:	e7ec      	b.n	8009412 <_printf_float+0x34a>
 8009438:	4613      	mov	r3, r2
 800943a:	4631      	mov	r1, r6
 800943c:	4642      	mov	r2, r8
 800943e:	4628      	mov	r0, r5
 8009440:	47b8      	blx	r7
 8009442:	3001      	adds	r0, #1
 8009444:	d1c0      	bne.n	80093c8 <_printf_float+0x300>
 8009446:	e69e      	b.n	8009186 <_printf_float+0xbe>
 8009448:	2301      	movs	r3, #1
 800944a:	4631      	mov	r1, r6
 800944c:	4628      	mov	r0, r5
 800944e:	9205      	str	r2, [sp, #20]
 8009450:	47b8      	blx	r7
 8009452:	3001      	adds	r0, #1
 8009454:	f43f ae97 	beq.w	8009186 <_printf_float+0xbe>
 8009458:	9a05      	ldr	r2, [sp, #20]
 800945a:	f10b 0b01 	add.w	fp, fp, #1
 800945e:	e7b9      	b.n	80093d4 <_printf_float+0x30c>
 8009460:	ee18 3a10 	vmov	r3, s16
 8009464:	4652      	mov	r2, sl
 8009466:	4631      	mov	r1, r6
 8009468:	4628      	mov	r0, r5
 800946a:	47b8      	blx	r7
 800946c:	3001      	adds	r0, #1
 800946e:	d1be      	bne.n	80093ee <_printf_float+0x326>
 8009470:	e689      	b.n	8009186 <_printf_float+0xbe>
 8009472:	9a05      	ldr	r2, [sp, #20]
 8009474:	464b      	mov	r3, r9
 8009476:	4442      	add	r2, r8
 8009478:	4631      	mov	r1, r6
 800947a:	4628      	mov	r0, r5
 800947c:	47b8      	blx	r7
 800947e:	3001      	adds	r0, #1
 8009480:	d1c1      	bne.n	8009406 <_printf_float+0x33e>
 8009482:	e680      	b.n	8009186 <_printf_float+0xbe>
 8009484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009486:	2a01      	cmp	r2, #1
 8009488:	dc01      	bgt.n	800948e <_printf_float+0x3c6>
 800948a:	07db      	lsls	r3, r3, #31
 800948c:	d53a      	bpl.n	8009504 <_printf_float+0x43c>
 800948e:	2301      	movs	r3, #1
 8009490:	4642      	mov	r2, r8
 8009492:	4631      	mov	r1, r6
 8009494:	4628      	mov	r0, r5
 8009496:	47b8      	blx	r7
 8009498:	3001      	adds	r0, #1
 800949a:	f43f ae74 	beq.w	8009186 <_printf_float+0xbe>
 800949e:	ee18 3a10 	vmov	r3, s16
 80094a2:	4652      	mov	r2, sl
 80094a4:	4631      	mov	r1, r6
 80094a6:	4628      	mov	r0, r5
 80094a8:	47b8      	blx	r7
 80094aa:	3001      	adds	r0, #1
 80094ac:	f43f ae6b 	beq.w	8009186 <_printf_float+0xbe>
 80094b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094b4:	2200      	movs	r2, #0
 80094b6:	2300      	movs	r3, #0
 80094b8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80094bc:	f7f7 fb0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80094c0:	b9d8      	cbnz	r0, 80094fa <_printf_float+0x432>
 80094c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80094c6:	f108 0201 	add.w	r2, r8, #1
 80094ca:	4631      	mov	r1, r6
 80094cc:	4628      	mov	r0, r5
 80094ce:	47b8      	blx	r7
 80094d0:	3001      	adds	r0, #1
 80094d2:	d10e      	bne.n	80094f2 <_printf_float+0x42a>
 80094d4:	e657      	b.n	8009186 <_printf_float+0xbe>
 80094d6:	2301      	movs	r3, #1
 80094d8:	4652      	mov	r2, sl
 80094da:	4631      	mov	r1, r6
 80094dc:	4628      	mov	r0, r5
 80094de:	47b8      	blx	r7
 80094e0:	3001      	adds	r0, #1
 80094e2:	f43f ae50 	beq.w	8009186 <_printf_float+0xbe>
 80094e6:	f108 0801 	add.w	r8, r8, #1
 80094ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ec:	3b01      	subs	r3, #1
 80094ee:	4543      	cmp	r3, r8
 80094f0:	dcf1      	bgt.n	80094d6 <_printf_float+0x40e>
 80094f2:	464b      	mov	r3, r9
 80094f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80094f8:	e6da      	b.n	80092b0 <_printf_float+0x1e8>
 80094fa:	f04f 0800 	mov.w	r8, #0
 80094fe:	f104 0a1a 	add.w	sl, r4, #26
 8009502:	e7f2      	b.n	80094ea <_printf_float+0x422>
 8009504:	2301      	movs	r3, #1
 8009506:	4642      	mov	r2, r8
 8009508:	e7df      	b.n	80094ca <_printf_float+0x402>
 800950a:	2301      	movs	r3, #1
 800950c:	464a      	mov	r2, r9
 800950e:	4631      	mov	r1, r6
 8009510:	4628      	mov	r0, r5
 8009512:	47b8      	blx	r7
 8009514:	3001      	adds	r0, #1
 8009516:	f43f ae36 	beq.w	8009186 <_printf_float+0xbe>
 800951a:	f108 0801 	add.w	r8, r8, #1
 800951e:	68e3      	ldr	r3, [r4, #12]
 8009520:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009522:	1a5b      	subs	r3, r3, r1
 8009524:	4543      	cmp	r3, r8
 8009526:	dcf0      	bgt.n	800950a <_printf_float+0x442>
 8009528:	e6f8      	b.n	800931c <_printf_float+0x254>
 800952a:	f04f 0800 	mov.w	r8, #0
 800952e:	f104 0919 	add.w	r9, r4, #25
 8009532:	e7f4      	b.n	800951e <_printf_float+0x456>

08009534 <_printf_common>:
 8009534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009538:	4616      	mov	r6, r2
 800953a:	4699      	mov	r9, r3
 800953c:	688a      	ldr	r2, [r1, #8]
 800953e:	690b      	ldr	r3, [r1, #16]
 8009540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009544:	4293      	cmp	r3, r2
 8009546:	bfb8      	it	lt
 8009548:	4613      	movlt	r3, r2
 800954a:	6033      	str	r3, [r6, #0]
 800954c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009550:	4607      	mov	r7, r0
 8009552:	460c      	mov	r4, r1
 8009554:	b10a      	cbz	r2, 800955a <_printf_common+0x26>
 8009556:	3301      	adds	r3, #1
 8009558:	6033      	str	r3, [r6, #0]
 800955a:	6823      	ldr	r3, [r4, #0]
 800955c:	0699      	lsls	r1, r3, #26
 800955e:	bf42      	ittt	mi
 8009560:	6833      	ldrmi	r3, [r6, #0]
 8009562:	3302      	addmi	r3, #2
 8009564:	6033      	strmi	r3, [r6, #0]
 8009566:	6825      	ldr	r5, [r4, #0]
 8009568:	f015 0506 	ands.w	r5, r5, #6
 800956c:	d106      	bne.n	800957c <_printf_common+0x48>
 800956e:	f104 0a19 	add.w	sl, r4, #25
 8009572:	68e3      	ldr	r3, [r4, #12]
 8009574:	6832      	ldr	r2, [r6, #0]
 8009576:	1a9b      	subs	r3, r3, r2
 8009578:	42ab      	cmp	r3, r5
 800957a:	dc26      	bgt.n	80095ca <_printf_common+0x96>
 800957c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009580:	1e13      	subs	r3, r2, #0
 8009582:	6822      	ldr	r2, [r4, #0]
 8009584:	bf18      	it	ne
 8009586:	2301      	movne	r3, #1
 8009588:	0692      	lsls	r2, r2, #26
 800958a:	d42b      	bmi.n	80095e4 <_printf_common+0xb0>
 800958c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009590:	4649      	mov	r1, r9
 8009592:	4638      	mov	r0, r7
 8009594:	47c0      	blx	r8
 8009596:	3001      	adds	r0, #1
 8009598:	d01e      	beq.n	80095d8 <_printf_common+0xa4>
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	6922      	ldr	r2, [r4, #16]
 800959e:	f003 0306 	and.w	r3, r3, #6
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	bf02      	ittt	eq
 80095a6:	68e5      	ldreq	r5, [r4, #12]
 80095a8:	6833      	ldreq	r3, [r6, #0]
 80095aa:	1aed      	subeq	r5, r5, r3
 80095ac:	68a3      	ldr	r3, [r4, #8]
 80095ae:	bf0c      	ite	eq
 80095b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095b4:	2500      	movne	r5, #0
 80095b6:	4293      	cmp	r3, r2
 80095b8:	bfc4      	itt	gt
 80095ba:	1a9b      	subgt	r3, r3, r2
 80095bc:	18ed      	addgt	r5, r5, r3
 80095be:	2600      	movs	r6, #0
 80095c0:	341a      	adds	r4, #26
 80095c2:	42b5      	cmp	r5, r6
 80095c4:	d11a      	bne.n	80095fc <_printf_common+0xc8>
 80095c6:	2000      	movs	r0, #0
 80095c8:	e008      	b.n	80095dc <_printf_common+0xa8>
 80095ca:	2301      	movs	r3, #1
 80095cc:	4652      	mov	r2, sl
 80095ce:	4649      	mov	r1, r9
 80095d0:	4638      	mov	r0, r7
 80095d2:	47c0      	blx	r8
 80095d4:	3001      	adds	r0, #1
 80095d6:	d103      	bne.n	80095e0 <_printf_common+0xac>
 80095d8:	f04f 30ff 	mov.w	r0, #4294967295
 80095dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e0:	3501      	adds	r5, #1
 80095e2:	e7c6      	b.n	8009572 <_printf_common+0x3e>
 80095e4:	18e1      	adds	r1, r4, r3
 80095e6:	1c5a      	adds	r2, r3, #1
 80095e8:	2030      	movs	r0, #48	; 0x30
 80095ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095ee:	4422      	add	r2, r4
 80095f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095f8:	3302      	adds	r3, #2
 80095fa:	e7c7      	b.n	800958c <_printf_common+0x58>
 80095fc:	2301      	movs	r3, #1
 80095fe:	4622      	mov	r2, r4
 8009600:	4649      	mov	r1, r9
 8009602:	4638      	mov	r0, r7
 8009604:	47c0      	blx	r8
 8009606:	3001      	adds	r0, #1
 8009608:	d0e6      	beq.n	80095d8 <_printf_common+0xa4>
 800960a:	3601      	adds	r6, #1
 800960c:	e7d9      	b.n	80095c2 <_printf_common+0x8e>
	...

08009610 <_printf_i>:
 8009610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009614:	7e0f      	ldrb	r7, [r1, #24]
 8009616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009618:	2f78      	cmp	r7, #120	; 0x78
 800961a:	4691      	mov	r9, r2
 800961c:	4680      	mov	r8, r0
 800961e:	460c      	mov	r4, r1
 8009620:	469a      	mov	sl, r3
 8009622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009626:	d807      	bhi.n	8009638 <_printf_i+0x28>
 8009628:	2f62      	cmp	r7, #98	; 0x62
 800962a:	d80a      	bhi.n	8009642 <_printf_i+0x32>
 800962c:	2f00      	cmp	r7, #0
 800962e:	f000 80d4 	beq.w	80097da <_printf_i+0x1ca>
 8009632:	2f58      	cmp	r7, #88	; 0x58
 8009634:	f000 80c0 	beq.w	80097b8 <_printf_i+0x1a8>
 8009638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800963c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009640:	e03a      	b.n	80096b8 <_printf_i+0xa8>
 8009642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009646:	2b15      	cmp	r3, #21
 8009648:	d8f6      	bhi.n	8009638 <_printf_i+0x28>
 800964a:	a101      	add	r1, pc, #4	; (adr r1, 8009650 <_printf_i+0x40>)
 800964c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009650:	080096a9 	.word	0x080096a9
 8009654:	080096bd 	.word	0x080096bd
 8009658:	08009639 	.word	0x08009639
 800965c:	08009639 	.word	0x08009639
 8009660:	08009639 	.word	0x08009639
 8009664:	08009639 	.word	0x08009639
 8009668:	080096bd 	.word	0x080096bd
 800966c:	08009639 	.word	0x08009639
 8009670:	08009639 	.word	0x08009639
 8009674:	08009639 	.word	0x08009639
 8009678:	08009639 	.word	0x08009639
 800967c:	080097c1 	.word	0x080097c1
 8009680:	080096e9 	.word	0x080096e9
 8009684:	0800977b 	.word	0x0800977b
 8009688:	08009639 	.word	0x08009639
 800968c:	08009639 	.word	0x08009639
 8009690:	080097e3 	.word	0x080097e3
 8009694:	08009639 	.word	0x08009639
 8009698:	080096e9 	.word	0x080096e9
 800969c:	08009639 	.word	0x08009639
 80096a0:	08009639 	.word	0x08009639
 80096a4:	08009783 	.word	0x08009783
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	1d1a      	adds	r2, r3, #4
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	602a      	str	r2, [r5, #0]
 80096b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096b8:	2301      	movs	r3, #1
 80096ba:	e09f      	b.n	80097fc <_printf_i+0x1ec>
 80096bc:	6820      	ldr	r0, [r4, #0]
 80096be:	682b      	ldr	r3, [r5, #0]
 80096c0:	0607      	lsls	r7, r0, #24
 80096c2:	f103 0104 	add.w	r1, r3, #4
 80096c6:	6029      	str	r1, [r5, #0]
 80096c8:	d501      	bpl.n	80096ce <_printf_i+0xbe>
 80096ca:	681e      	ldr	r6, [r3, #0]
 80096cc:	e003      	b.n	80096d6 <_printf_i+0xc6>
 80096ce:	0646      	lsls	r6, r0, #25
 80096d0:	d5fb      	bpl.n	80096ca <_printf_i+0xba>
 80096d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80096d6:	2e00      	cmp	r6, #0
 80096d8:	da03      	bge.n	80096e2 <_printf_i+0xd2>
 80096da:	232d      	movs	r3, #45	; 0x2d
 80096dc:	4276      	negs	r6, r6
 80096de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096e2:	485a      	ldr	r0, [pc, #360]	; (800984c <_printf_i+0x23c>)
 80096e4:	230a      	movs	r3, #10
 80096e6:	e012      	b.n	800970e <_printf_i+0xfe>
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	6820      	ldr	r0, [r4, #0]
 80096ec:	1d19      	adds	r1, r3, #4
 80096ee:	6029      	str	r1, [r5, #0]
 80096f0:	0605      	lsls	r5, r0, #24
 80096f2:	d501      	bpl.n	80096f8 <_printf_i+0xe8>
 80096f4:	681e      	ldr	r6, [r3, #0]
 80096f6:	e002      	b.n	80096fe <_printf_i+0xee>
 80096f8:	0641      	lsls	r1, r0, #25
 80096fa:	d5fb      	bpl.n	80096f4 <_printf_i+0xe4>
 80096fc:	881e      	ldrh	r6, [r3, #0]
 80096fe:	4853      	ldr	r0, [pc, #332]	; (800984c <_printf_i+0x23c>)
 8009700:	2f6f      	cmp	r7, #111	; 0x6f
 8009702:	bf0c      	ite	eq
 8009704:	2308      	moveq	r3, #8
 8009706:	230a      	movne	r3, #10
 8009708:	2100      	movs	r1, #0
 800970a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800970e:	6865      	ldr	r5, [r4, #4]
 8009710:	60a5      	str	r5, [r4, #8]
 8009712:	2d00      	cmp	r5, #0
 8009714:	bfa2      	ittt	ge
 8009716:	6821      	ldrge	r1, [r4, #0]
 8009718:	f021 0104 	bicge.w	r1, r1, #4
 800971c:	6021      	strge	r1, [r4, #0]
 800971e:	b90e      	cbnz	r6, 8009724 <_printf_i+0x114>
 8009720:	2d00      	cmp	r5, #0
 8009722:	d04b      	beq.n	80097bc <_printf_i+0x1ac>
 8009724:	4615      	mov	r5, r2
 8009726:	fbb6 f1f3 	udiv	r1, r6, r3
 800972a:	fb03 6711 	mls	r7, r3, r1, r6
 800972e:	5dc7      	ldrb	r7, [r0, r7]
 8009730:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009734:	4637      	mov	r7, r6
 8009736:	42bb      	cmp	r3, r7
 8009738:	460e      	mov	r6, r1
 800973a:	d9f4      	bls.n	8009726 <_printf_i+0x116>
 800973c:	2b08      	cmp	r3, #8
 800973e:	d10b      	bne.n	8009758 <_printf_i+0x148>
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	07de      	lsls	r6, r3, #31
 8009744:	d508      	bpl.n	8009758 <_printf_i+0x148>
 8009746:	6923      	ldr	r3, [r4, #16]
 8009748:	6861      	ldr	r1, [r4, #4]
 800974a:	4299      	cmp	r1, r3
 800974c:	bfde      	ittt	le
 800974e:	2330      	movle	r3, #48	; 0x30
 8009750:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009754:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009758:	1b52      	subs	r2, r2, r5
 800975a:	6122      	str	r2, [r4, #16]
 800975c:	f8cd a000 	str.w	sl, [sp]
 8009760:	464b      	mov	r3, r9
 8009762:	aa03      	add	r2, sp, #12
 8009764:	4621      	mov	r1, r4
 8009766:	4640      	mov	r0, r8
 8009768:	f7ff fee4 	bl	8009534 <_printf_common>
 800976c:	3001      	adds	r0, #1
 800976e:	d14a      	bne.n	8009806 <_printf_i+0x1f6>
 8009770:	f04f 30ff 	mov.w	r0, #4294967295
 8009774:	b004      	add	sp, #16
 8009776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800977a:	6823      	ldr	r3, [r4, #0]
 800977c:	f043 0320 	orr.w	r3, r3, #32
 8009780:	6023      	str	r3, [r4, #0]
 8009782:	4833      	ldr	r0, [pc, #204]	; (8009850 <_printf_i+0x240>)
 8009784:	2778      	movs	r7, #120	; 0x78
 8009786:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	6829      	ldr	r1, [r5, #0]
 800978e:	061f      	lsls	r7, r3, #24
 8009790:	f851 6b04 	ldr.w	r6, [r1], #4
 8009794:	d402      	bmi.n	800979c <_printf_i+0x18c>
 8009796:	065f      	lsls	r7, r3, #25
 8009798:	bf48      	it	mi
 800979a:	b2b6      	uxthmi	r6, r6
 800979c:	07df      	lsls	r7, r3, #31
 800979e:	bf48      	it	mi
 80097a0:	f043 0320 	orrmi.w	r3, r3, #32
 80097a4:	6029      	str	r1, [r5, #0]
 80097a6:	bf48      	it	mi
 80097a8:	6023      	strmi	r3, [r4, #0]
 80097aa:	b91e      	cbnz	r6, 80097b4 <_printf_i+0x1a4>
 80097ac:	6823      	ldr	r3, [r4, #0]
 80097ae:	f023 0320 	bic.w	r3, r3, #32
 80097b2:	6023      	str	r3, [r4, #0]
 80097b4:	2310      	movs	r3, #16
 80097b6:	e7a7      	b.n	8009708 <_printf_i+0xf8>
 80097b8:	4824      	ldr	r0, [pc, #144]	; (800984c <_printf_i+0x23c>)
 80097ba:	e7e4      	b.n	8009786 <_printf_i+0x176>
 80097bc:	4615      	mov	r5, r2
 80097be:	e7bd      	b.n	800973c <_printf_i+0x12c>
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	6826      	ldr	r6, [r4, #0]
 80097c4:	6961      	ldr	r1, [r4, #20]
 80097c6:	1d18      	adds	r0, r3, #4
 80097c8:	6028      	str	r0, [r5, #0]
 80097ca:	0635      	lsls	r5, r6, #24
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	d501      	bpl.n	80097d4 <_printf_i+0x1c4>
 80097d0:	6019      	str	r1, [r3, #0]
 80097d2:	e002      	b.n	80097da <_printf_i+0x1ca>
 80097d4:	0670      	lsls	r0, r6, #25
 80097d6:	d5fb      	bpl.n	80097d0 <_printf_i+0x1c0>
 80097d8:	8019      	strh	r1, [r3, #0]
 80097da:	2300      	movs	r3, #0
 80097dc:	6123      	str	r3, [r4, #16]
 80097de:	4615      	mov	r5, r2
 80097e0:	e7bc      	b.n	800975c <_printf_i+0x14c>
 80097e2:	682b      	ldr	r3, [r5, #0]
 80097e4:	1d1a      	adds	r2, r3, #4
 80097e6:	602a      	str	r2, [r5, #0]
 80097e8:	681d      	ldr	r5, [r3, #0]
 80097ea:	6862      	ldr	r2, [r4, #4]
 80097ec:	2100      	movs	r1, #0
 80097ee:	4628      	mov	r0, r5
 80097f0:	f7f6 fcf6 	bl	80001e0 <memchr>
 80097f4:	b108      	cbz	r0, 80097fa <_printf_i+0x1ea>
 80097f6:	1b40      	subs	r0, r0, r5
 80097f8:	6060      	str	r0, [r4, #4]
 80097fa:	6863      	ldr	r3, [r4, #4]
 80097fc:	6123      	str	r3, [r4, #16]
 80097fe:	2300      	movs	r3, #0
 8009800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009804:	e7aa      	b.n	800975c <_printf_i+0x14c>
 8009806:	6923      	ldr	r3, [r4, #16]
 8009808:	462a      	mov	r2, r5
 800980a:	4649      	mov	r1, r9
 800980c:	4640      	mov	r0, r8
 800980e:	47d0      	blx	sl
 8009810:	3001      	adds	r0, #1
 8009812:	d0ad      	beq.n	8009770 <_printf_i+0x160>
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	079b      	lsls	r3, r3, #30
 8009818:	d413      	bmi.n	8009842 <_printf_i+0x232>
 800981a:	68e0      	ldr	r0, [r4, #12]
 800981c:	9b03      	ldr	r3, [sp, #12]
 800981e:	4298      	cmp	r0, r3
 8009820:	bfb8      	it	lt
 8009822:	4618      	movlt	r0, r3
 8009824:	e7a6      	b.n	8009774 <_printf_i+0x164>
 8009826:	2301      	movs	r3, #1
 8009828:	4632      	mov	r2, r6
 800982a:	4649      	mov	r1, r9
 800982c:	4640      	mov	r0, r8
 800982e:	47d0      	blx	sl
 8009830:	3001      	adds	r0, #1
 8009832:	d09d      	beq.n	8009770 <_printf_i+0x160>
 8009834:	3501      	adds	r5, #1
 8009836:	68e3      	ldr	r3, [r4, #12]
 8009838:	9903      	ldr	r1, [sp, #12]
 800983a:	1a5b      	subs	r3, r3, r1
 800983c:	42ab      	cmp	r3, r5
 800983e:	dcf2      	bgt.n	8009826 <_printf_i+0x216>
 8009840:	e7eb      	b.n	800981a <_printf_i+0x20a>
 8009842:	2500      	movs	r5, #0
 8009844:	f104 0619 	add.w	r6, r4, #25
 8009848:	e7f5      	b.n	8009836 <_printf_i+0x226>
 800984a:	bf00      	nop
 800984c:	0800d986 	.word	0x0800d986
 8009850:	0800d997 	.word	0x0800d997

08009854 <_scanf_float>:
 8009854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009858:	b087      	sub	sp, #28
 800985a:	4617      	mov	r7, r2
 800985c:	9303      	str	r3, [sp, #12]
 800985e:	688b      	ldr	r3, [r1, #8]
 8009860:	1e5a      	subs	r2, r3, #1
 8009862:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009866:	bf83      	ittte	hi
 8009868:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800986c:	195b      	addhi	r3, r3, r5
 800986e:	9302      	strhi	r3, [sp, #8]
 8009870:	2300      	movls	r3, #0
 8009872:	bf86      	itte	hi
 8009874:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009878:	608b      	strhi	r3, [r1, #8]
 800987a:	9302      	strls	r3, [sp, #8]
 800987c:	680b      	ldr	r3, [r1, #0]
 800987e:	468b      	mov	fp, r1
 8009880:	2500      	movs	r5, #0
 8009882:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009886:	f84b 3b1c 	str.w	r3, [fp], #28
 800988a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800988e:	4680      	mov	r8, r0
 8009890:	460c      	mov	r4, r1
 8009892:	465e      	mov	r6, fp
 8009894:	46aa      	mov	sl, r5
 8009896:	46a9      	mov	r9, r5
 8009898:	9501      	str	r5, [sp, #4]
 800989a:	68a2      	ldr	r2, [r4, #8]
 800989c:	b152      	cbz	r2, 80098b4 <_scanf_float+0x60>
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	2b4e      	cmp	r3, #78	; 0x4e
 80098a4:	d864      	bhi.n	8009970 <_scanf_float+0x11c>
 80098a6:	2b40      	cmp	r3, #64	; 0x40
 80098a8:	d83c      	bhi.n	8009924 <_scanf_float+0xd0>
 80098aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80098ae:	b2c8      	uxtb	r0, r1
 80098b0:	280e      	cmp	r0, #14
 80098b2:	d93a      	bls.n	800992a <_scanf_float+0xd6>
 80098b4:	f1b9 0f00 	cmp.w	r9, #0
 80098b8:	d003      	beq.n	80098c2 <_scanf_float+0x6e>
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098c6:	f1ba 0f01 	cmp.w	sl, #1
 80098ca:	f200 8113 	bhi.w	8009af4 <_scanf_float+0x2a0>
 80098ce:	455e      	cmp	r6, fp
 80098d0:	f200 8105 	bhi.w	8009ade <_scanf_float+0x28a>
 80098d4:	2501      	movs	r5, #1
 80098d6:	4628      	mov	r0, r5
 80098d8:	b007      	add	sp, #28
 80098da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80098e2:	2a0d      	cmp	r2, #13
 80098e4:	d8e6      	bhi.n	80098b4 <_scanf_float+0x60>
 80098e6:	a101      	add	r1, pc, #4	; (adr r1, 80098ec <_scanf_float+0x98>)
 80098e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80098ec:	08009a2b 	.word	0x08009a2b
 80098f0:	080098b5 	.word	0x080098b5
 80098f4:	080098b5 	.word	0x080098b5
 80098f8:	080098b5 	.word	0x080098b5
 80098fc:	08009a8b 	.word	0x08009a8b
 8009900:	08009a63 	.word	0x08009a63
 8009904:	080098b5 	.word	0x080098b5
 8009908:	080098b5 	.word	0x080098b5
 800990c:	08009a39 	.word	0x08009a39
 8009910:	080098b5 	.word	0x080098b5
 8009914:	080098b5 	.word	0x080098b5
 8009918:	080098b5 	.word	0x080098b5
 800991c:	080098b5 	.word	0x080098b5
 8009920:	080099f1 	.word	0x080099f1
 8009924:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009928:	e7db      	b.n	80098e2 <_scanf_float+0x8e>
 800992a:	290e      	cmp	r1, #14
 800992c:	d8c2      	bhi.n	80098b4 <_scanf_float+0x60>
 800992e:	a001      	add	r0, pc, #4	; (adr r0, 8009934 <_scanf_float+0xe0>)
 8009930:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009934:	080099e3 	.word	0x080099e3
 8009938:	080098b5 	.word	0x080098b5
 800993c:	080099e3 	.word	0x080099e3
 8009940:	08009a77 	.word	0x08009a77
 8009944:	080098b5 	.word	0x080098b5
 8009948:	08009991 	.word	0x08009991
 800994c:	080099cd 	.word	0x080099cd
 8009950:	080099cd 	.word	0x080099cd
 8009954:	080099cd 	.word	0x080099cd
 8009958:	080099cd 	.word	0x080099cd
 800995c:	080099cd 	.word	0x080099cd
 8009960:	080099cd 	.word	0x080099cd
 8009964:	080099cd 	.word	0x080099cd
 8009968:	080099cd 	.word	0x080099cd
 800996c:	080099cd 	.word	0x080099cd
 8009970:	2b6e      	cmp	r3, #110	; 0x6e
 8009972:	d809      	bhi.n	8009988 <_scanf_float+0x134>
 8009974:	2b60      	cmp	r3, #96	; 0x60
 8009976:	d8b2      	bhi.n	80098de <_scanf_float+0x8a>
 8009978:	2b54      	cmp	r3, #84	; 0x54
 800997a:	d077      	beq.n	8009a6c <_scanf_float+0x218>
 800997c:	2b59      	cmp	r3, #89	; 0x59
 800997e:	d199      	bne.n	80098b4 <_scanf_float+0x60>
 8009980:	2d07      	cmp	r5, #7
 8009982:	d197      	bne.n	80098b4 <_scanf_float+0x60>
 8009984:	2508      	movs	r5, #8
 8009986:	e029      	b.n	80099dc <_scanf_float+0x188>
 8009988:	2b74      	cmp	r3, #116	; 0x74
 800998a:	d06f      	beq.n	8009a6c <_scanf_float+0x218>
 800998c:	2b79      	cmp	r3, #121	; 0x79
 800998e:	e7f6      	b.n	800997e <_scanf_float+0x12a>
 8009990:	6821      	ldr	r1, [r4, #0]
 8009992:	05c8      	lsls	r0, r1, #23
 8009994:	d51a      	bpl.n	80099cc <_scanf_float+0x178>
 8009996:	9b02      	ldr	r3, [sp, #8]
 8009998:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800999c:	6021      	str	r1, [r4, #0]
 800999e:	f109 0901 	add.w	r9, r9, #1
 80099a2:	b11b      	cbz	r3, 80099ac <_scanf_float+0x158>
 80099a4:	3b01      	subs	r3, #1
 80099a6:	3201      	adds	r2, #1
 80099a8:	9302      	str	r3, [sp, #8]
 80099aa:	60a2      	str	r2, [r4, #8]
 80099ac:	68a3      	ldr	r3, [r4, #8]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	60a3      	str	r3, [r4, #8]
 80099b2:	6923      	ldr	r3, [r4, #16]
 80099b4:	3301      	adds	r3, #1
 80099b6:	6123      	str	r3, [r4, #16]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	2b00      	cmp	r3, #0
 80099be:	607b      	str	r3, [r7, #4]
 80099c0:	f340 8084 	ble.w	8009acc <_scanf_float+0x278>
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	3301      	adds	r3, #1
 80099c8:	603b      	str	r3, [r7, #0]
 80099ca:	e766      	b.n	800989a <_scanf_float+0x46>
 80099cc:	eb1a 0f05 	cmn.w	sl, r5
 80099d0:	f47f af70 	bne.w	80098b4 <_scanf_float+0x60>
 80099d4:	6822      	ldr	r2, [r4, #0]
 80099d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80099da:	6022      	str	r2, [r4, #0]
 80099dc:	f806 3b01 	strb.w	r3, [r6], #1
 80099e0:	e7e4      	b.n	80099ac <_scanf_float+0x158>
 80099e2:	6822      	ldr	r2, [r4, #0]
 80099e4:	0610      	lsls	r0, r2, #24
 80099e6:	f57f af65 	bpl.w	80098b4 <_scanf_float+0x60>
 80099ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099ee:	e7f4      	b.n	80099da <_scanf_float+0x186>
 80099f0:	f1ba 0f00 	cmp.w	sl, #0
 80099f4:	d10e      	bne.n	8009a14 <_scanf_float+0x1c0>
 80099f6:	f1b9 0f00 	cmp.w	r9, #0
 80099fa:	d10e      	bne.n	8009a1a <_scanf_float+0x1c6>
 80099fc:	6822      	ldr	r2, [r4, #0]
 80099fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009a02:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009a06:	d108      	bne.n	8009a1a <_scanf_float+0x1c6>
 8009a08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a0c:	6022      	str	r2, [r4, #0]
 8009a0e:	f04f 0a01 	mov.w	sl, #1
 8009a12:	e7e3      	b.n	80099dc <_scanf_float+0x188>
 8009a14:	f1ba 0f02 	cmp.w	sl, #2
 8009a18:	d055      	beq.n	8009ac6 <_scanf_float+0x272>
 8009a1a:	2d01      	cmp	r5, #1
 8009a1c:	d002      	beq.n	8009a24 <_scanf_float+0x1d0>
 8009a1e:	2d04      	cmp	r5, #4
 8009a20:	f47f af48 	bne.w	80098b4 <_scanf_float+0x60>
 8009a24:	3501      	adds	r5, #1
 8009a26:	b2ed      	uxtb	r5, r5
 8009a28:	e7d8      	b.n	80099dc <_scanf_float+0x188>
 8009a2a:	f1ba 0f01 	cmp.w	sl, #1
 8009a2e:	f47f af41 	bne.w	80098b4 <_scanf_float+0x60>
 8009a32:	f04f 0a02 	mov.w	sl, #2
 8009a36:	e7d1      	b.n	80099dc <_scanf_float+0x188>
 8009a38:	b97d      	cbnz	r5, 8009a5a <_scanf_float+0x206>
 8009a3a:	f1b9 0f00 	cmp.w	r9, #0
 8009a3e:	f47f af3c 	bne.w	80098ba <_scanf_float+0x66>
 8009a42:	6822      	ldr	r2, [r4, #0]
 8009a44:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009a48:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009a4c:	f47f af39 	bne.w	80098c2 <_scanf_float+0x6e>
 8009a50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a54:	6022      	str	r2, [r4, #0]
 8009a56:	2501      	movs	r5, #1
 8009a58:	e7c0      	b.n	80099dc <_scanf_float+0x188>
 8009a5a:	2d03      	cmp	r5, #3
 8009a5c:	d0e2      	beq.n	8009a24 <_scanf_float+0x1d0>
 8009a5e:	2d05      	cmp	r5, #5
 8009a60:	e7de      	b.n	8009a20 <_scanf_float+0x1cc>
 8009a62:	2d02      	cmp	r5, #2
 8009a64:	f47f af26 	bne.w	80098b4 <_scanf_float+0x60>
 8009a68:	2503      	movs	r5, #3
 8009a6a:	e7b7      	b.n	80099dc <_scanf_float+0x188>
 8009a6c:	2d06      	cmp	r5, #6
 8009a6e:	f47f af21 	bne.w	80098b4 <_scanf_float+0x60>
 8009a72:	2507      	movs	r5, #7
 8009a74:	e7b2      	b.n	80099dc <_scanf_float+0x188>
 8009a76:	6822      	ldr	r2, [r4, #0]
 8009a78:	0591      	lsls	r1, r2, #22
 8009a7a:	f57f af1b 	bpl.w	80098b4 <_scanf_float+0x60>
 8009a7e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009a82:	6022      	str	r2, [r4, #0]
 8009a84:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a88:	e7a8      	b.n	80099dc <_scanf_float+0x188>
 8009a8a:	6822      	ldr	r2, [r4, #0]
 8009a8c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009a90:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009a94:	d006      	beq.n	8009aa4 <_scanf_float+0x250>
 8009a96:	0550      	lsls	r0, r2, #21
 8009a98:	f57f af0c 	bpl.w	80098b4 <_scanf_float+0x60>
 8009a9c:	f1b9 0f00 	cmp.w	r9, #0
 8009aa0:	f43f af0f 	beq.w	80098c2 <_scanf_float+0x6e>
 8009aa4:	0591      	lsls	r1, r2, #22
 8009aa6:	bf58      	it	pl
 8009aa8:	9901      	ldrpl	r1, [sp, #4]
 8009aaa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009aae:	bf58      	it	pl
 8009ab0:	eba9 0101 	subpl.w	r1, r9, r1
 8009ab4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009ab8:	bf58      	it	pl
 8009aba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009abe:	6022      	str	r2, [r4, #0]
 8009ac0:	f04f 0900 	mov.w	r9, #0
 8009ac4:	e78a      	b.n	80099dc <_scanf_float+0x188>
 8009ac6:	f04f 0a03 	mov.w	sl, #3
 8009aca:	e787      	b.n	80099dc <_scanf_float+0x188>
 8009acc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009ad0:	4639      	mov	r1, r7
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	4798      	blx	r3
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	f43f aedf 	beq.w	800989a <_scanf_float+0x46>
 8009adc:	e6ea      	b.n	80098b4 <_scanf_float+0x60>
 8009ade:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ae2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ae6:	463a      	mov	r2, r7
 8009ae8:	4640      	mov	r0, r8
 8009aea:	4798      	blx	r3
 8009aec:	6923      	ldr	r3, [r4, #16]
 8009aee:	3b01      	subs	r3, #1
 8009af0:	6123      	str	r3, [r4, #16]
 8009af2:	e6ec      	b.n	80098ce <_scanf_float+0x7a>
 8009af4:	1e6b      	subs	r3, r5, #1
 8009af6:	2b06      	cmp	r3, #6
 8009af8:	d825      	bhi.n	8009b46 <_scanf_float+0x2f2>
 8009afa:	2d02      	cmp	r5, #2
 8009afc:	d836      	bhi.n	8009b6c <_scanf_float+0x318>
 8009afe:	455e      	cmp	r6, fp
 8009b00:	f67f aee8 	bls.w	80098d4 <_scanf_float+0x80>
 8009b04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b08:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b0c:	463a      	mov	r2, r7
 8009b0e:	4640      	mov	r0, r8
 8009b10:	4798      	blx	r3
 8009b12:	6923      	ldr	r3, [r4, #16]
 8009b14:	3b01      	subs	r3, #1
 8009b16:	6123      	str	r3, [r4, #16]
 8009b18:	e7f1      	b.n	8009afe <_scanf_float+0x2aa>
 8009b1a:	9802      	ldr	r0, [sp, #8]
 8009b1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b20:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009b24:	9002      	str	r0, [sp, #8]
 8009b26:	463a      	mov	r2, r7
 8009b28:	4640      	mov	r0, r8
 8009b2a:	4798      	blx	r3
 8009b2c:	6923      	ldr	r3, [r4, #16]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	6123      	str	r3, [r4, #16]
 8009b32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b36:	fa5f fa8a 	uxtb.w	sl, sl
 8009b3a:	f1ba 0f02 	cmp.w	sl, #2
 8009b3e:	d1ec      	bne.n	8009b1a <_scanf_float+0x2c6>
 8009b40:	3d03      	subs	r5, #3
 8009b42:	b2ed      	uxtb	r5, r5
 8009b44:	1b76      	subs	r6, r6, r5
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	05da      	lsls	r2, r3, #23
 8009b4a:	d52f      	bpl.n	8009bac <_scanf_float+0x358>
 8009b4c:	055b      	lsls	r3, r3, #21
 8009b4e:	d510      	bpl.n	8009b72 <_scanf_float+0x31e>
 8009b50:	455e      	cmp	r6, fp
 8009b52:	f67f aebf 	bls.w	80098d4 <_scanf_float+0x80>
 8009b56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b5e:	463a      	mov	r2, r7
 8009b60:	4640      	mov	r0, r8
 8009b62:	4798      	blx	r3
 8009b64:	6923      	ldr	r3, [r4, #16]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	6123      	str	r3, [r4, #16]
 8009b6a:	e7f1      	b.n	8009b50 <_scanf_float+0x2fc>
 8009b6c:	46aa      	mov	sl, r5
 8009b6e:	9602      	str	r6, [sp, #8]
 8009b70:	e7df      	b.n	8009b32 <_scanf_float+0x2de>
 8009b72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009b76:	6923      	ldr	r3, [r4, #16]
 8009b78:	2965      	cmp	r1, #101	; 0x65
 8009b7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b7e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009b82:	6123      	str	r3, [r4, #16]
 8009b84:	d00c      	beq.n	8009ba0 <_scanf_float+0x34c>
 8009b86:	2945      	cmp	r1, #69	; 0x45
 8009b88:	d00a      	beq.n	8009ba0 <_scanf_float+0x34c>
 8009b8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b8e:	463a      	mov	r2, r7
 8009b90:	4640      	mov	r0, r8
 8009b92:	4798      	blx	r3
 8009b94:	6923      	ldr	r3, [r4, #16]
 8009b96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	1eb5      	subs	r5, r6, #2
 8009b9e:	6123      	str	r3, [r4, #16]
 8009ba0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ba4:	463a      	mov	r2, r7
 8009ba6:	4640      	mov	r0, r8
 8009ba8:	4798      	blx	r3
 8009baa:	462e      	mov	r6, r5
 8009bac:	6825      	ldr	r5, [r4, #0]
 8009bae:	f015 0510 	ands.w	r5, r5, #16
 8009bb2:	d158      	bne.n	8009c66 <_scanf_float+0x412>
 8009bb4:	7035      	strb	r5, [r6, #0]
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bc0:	d11c      	bne.n	8009bfc <_scanf_float+0x3a8>
 8009bc2:	9b01      	ldr	r3, [sp, #4]
 8009bc4:	454b      	cmp	r3, r9
 8009bc6:	eba3 0209 	sub.w	r2, r3, r9
 8009bca:	d124      	bne.n	8009c16 <_scanf_float+0x3c2>
 8009bcc:	2200      	movs	r2, #0
 8009bce:	4659      	mov	r1, fp
 8009bd0:	4640      	mov	r0, r8
 8009bd2:	f002 fd35 	bl	800c640 <_strtod_r>
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	6821      	ldr	r1, [r4, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f011 0f02 	tst.w	r1, #2
 8009be0:	ec57 6b10 	vmov	r6, r7, d0
 8009be4:	f103 0204 	add.w	r2, r3, #4
 8009be8:	d020      	beq.n	8009c2c <_scanf_float+0x3d8>
 8009bea:	9903      	ldr	r1, [sp, #12]
 8009bec:	600a      	str	r2, [r1, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	e9c3 6700 	strd	r6, r7, [r3]
 8009bf4:	68e3      	ldr	r3, [r4, #12]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	60e3      	str	r3, [r4, #12]
 8009bfa:	e66c      	b.n	80098d6 <_scanf_float+0x82>
 8009bfc:	9b04      	ldr	r3, [sp, #16]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d0e4      	beq.n	8009bcc <_scanf_float+0x378>
 8009c02:	9905      	ldr	r1, [sp, #20]
 8009c04:	230a      	movs	r3, #10
 8009c06:	462a      	mov	r2, r5
 8009c08:	3101      	adds	r1, #1
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	f002 fda0 	bl	800c750 <_strtol_r>
 8009c10:	9b04      	ldr	r3, [sp, #16]
 8009c12:	9e05      	ldr	r6, [sp, #20]
 8009c14:	1ac2      	subs	r2, r0, r3
 8009c16:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009c1a:	429e      	cmp	r6, r3
 8009c1c:	bf28      	it	cs
 8009c1e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009c22:	4912      	ldr	r1, [pc, #72]	; (8009c6c <_scanf_float+0x418>)
 8009c24:	4630      	mov	r0, r6
 8009c26:	f000 f94b 	bl	8009ec0 <siprintf>
 8009c2a:	e7cf      	b.n	8009bcc <_scanf_float+0x378>
 8009c2c:	f011 0f04 	tst.w	r1, #4
 8009c30:	9903      	ldr	r1, [sp, #12]
 8009c32:	600a      	str	r2, [r1, #0]
 8009c34:	d1db      	bne.n	8009bee <_scanf_float+0x39a>
 8009c36:	f8d3 8000 	ldr.w	r8, [r3]
 8009c3a:	ee10 2a10 	vmov	r2, s0
 8009c3e:	ee10 0a10 	vmov	r0, s0
 8009c42:	463b      	mov	r3, r7
 8009c44:	4639      	mov	r1, r7
 8009c46:	f7f6 ff79 	bl	8000b3c <__aeabi_dcmpun>
 8009c4a:	b128      	cbz	r0, 8009c58 <_scanf_float+0x404>
 8009c4c:	4808      	ldr	r0, [pc, #32]	; (8009c70 <_scanf_float+0x41c>)
 8009c4e:	f000 fabb 	bl	800a1c8 <nanf>
 8009c52:	ed88 0a00 	vstr	s0, [r8]
 8009c56:	e7cd      	b.n	8009bf4 <_scanf_float+0x3a0>
 8009c58:	4630      	mov	r0, r6
 8009c5a:	4639      	mov	r1, r7
 8009c5c:	f7f6 ffcc 	bl	8000bf8 <__aeabi_d2f>
 8009c60:	f8c8 0000 	str.w	r0, [r8]
 8009c64:	e7c6      	b.n	8009bf4 <_scanf_float+0x3a0>
 8009c66:	2500      	movs	r5, #0
 8009c68:	e635      	b.n	80098d6 <_scanf_float+0x82>
 8009c6a:	bf00      	nop
 8009c6c:	0800d9a8 	.word	0x0800d9a8
 8009c70:	0800dd3d 	.word	0x0800dd3d

08009c74 <std>:
 8009c74:	2300      	movs	r3, #0
 8009c76:	b510      	push	{r4, lr}
 8009c78:	4604      	mov	r4, r0
 8009c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8009c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c82:	6083      	str	r3, [r0, #8]
 8009c84:	8181      	strh	r1, [r0, #12]
 8009c86:	6643      	str	r3, [r0, #100]	; 0x64
 8009c88:	81c2      	strh	r2, [r0, #14]
 8009c8a:	6183      	str	r3, [r0, #24]
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	2208      	movs	r2, #8
 8009c90:	305c      	adds	r0, #92	; 0x5c
 8009c92:	f000 fa0d 	bl	800a0b0 <memset>
 8009c96:	4b05      	ldr	r3, [pc, #20]	; (8009cac <std+0x38>)
 8009c98:	6263      	str	r3, [r4, #36]	; 0x24
 8009c9a:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <std+0x3c>)
 8009c9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c9e:	4b05      	ldr	r3, [pc, #20]	; (8009cb4 <std+0x40>)
 8009ca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ca2:	4b05      	ldr	r3, [pc, #20]	; (8009cb8 <std+0x44>)
 8009ca4:	6224      	str	r4, [r4, #32]
 8009ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8009ca8:	bd10      	pop	{r4, pc}
 8009caa:	bf00      	nop
 8009cac:	08009f01 	.word	0x08009f01
 8009cb0:	08009f23 	.word	0x08009f23
 8009cb4:	08009f5b 	.word	0x08009f5b
 8009cb8:	08009f7f 	.word	0x08009f7f

08009cbc <stdio_exit_handler>:
 8009cbc:	4a02      	ldr	r2, [pc, #8]	; (8009cc8 <stdio_exit_handler+0xc>)
 8009cbe:	4903      	ldr	r1, [pc, #12]	; (8009ccc <stdio_exit_handler+0x10>)
 8009cc0:	4803      	ldr	r0, [pc, #12]	; (8009cd0 <stdio_exit_handler+0x14>)
 8009cc2:	f000 b869 	b.w	8009d98 <_fwalk_sglue>
 8009cc6:	bf00      	nop
 8009cc8:	200000fc 	.word	0x200000fc
 8009ccc:	0800cd99 	.word	0x0800cd99
 8009cd0:	20000108 	.word	0x20000108

08009cd4 <cleanup_stdio>:
 8009cd4:	6841      	ldr	r1, [r0, #4]
 8009cd6:	4b0c      	ldr	r3, [pc, #48]	; (8009d08 <cleanup_stdio+0x34>)
 8009cd8:	4299      	cmp	r1, r3
 8009cda:	b510      	push	{r4, lr}
 8009cdc:	4604      	mov	r4, r0
 8009cde:	d001      	beq.n	8009ce4 <cleanup_stdio+0x10>
 8009ce0:	f003 f85a 	bl	800cd98 <_fflush_r>
 8009ce4:	68a1      	ldr	r1, [r4, #8]
 8009ce6:	4b09      	ldr	r3, [pc, #36]	; (8009d0c <cleanup_stdio+0x38>)
 8009ce8:	4299      	cmp	r1, r3
 8009cea:	d002      	beq.n	8009cf2 <cleanup_stdio+0x1e>
 8009cec:	4620      	mov	r0, r4
 8009cee:	f003 f853 	bl	800cd98 <_fflush_r>
 8009cf2:	68e1      	ldr	r1, [r4, #12]
 8009cf4:	4b06      	ldr	r3, [pc, #24]	; (8009d10 <cleanup_stdio+0x3c>)
 8009cf6:	4299      	cmp	r1, r3
 8009cf8:	d004      	beq.n	8009d04 <cleanup_stdio+0x30>
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d00:	f003 b84a 	b.w	800cd98 <_fflush_r>
 8009d04:	bd10      	pop	{r4, pc}
 8009d06:	bf00      	nop
 8009d08:	200022a0 	.word	0x200022a0
 8009d0c:	20002308 	.word	0x20002308
 8009d10:	20002370 	.word	0x20002370

08009d14 <global_stdio_init.part.0>:
 8009d14:	b510      	push	{r4, lr}
 8009d16:	4b0b      	ldr	r3, [pc, #44]	; (8009d44 <global_stdio_init.part.0+0x30>)
 8009d18:	4c0b      	ldr	r4, [pc, #44]	; (8009d48 <global_stdio_init.part.0+0x34>)
 8009d1a:	4a0c      	ldr	r2, [pc, #48]	; (8009d4c <global_stdio_init.part.0+0x38>)
 8009d1c:	601a      	str	r2, [r3, #0]
 8009d1e:	4620      	mov	r0, r4
 8009d20:	2200      	movs	r2, #0
 8009d22:	2104      	movs	r1, #4
 8009d24:	f7ff ffa6 	bl	8009c74 <std>
 8009d28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	2109      	movs	r1, #9
 8009d30:	f7ff ffa0 	bl	8009c74 <std>
 8009d34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009d38:	2202      	movs	r2, #2
 8009d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d3e:	2112      	movs	r1, #18
 8009d40:	f7ff bf98 	b.w	8009c74 <std>
 8009d44:	200023d8 	.word	0x200023d8
 8009d48:	200022a0 	.word	0x200022a0
 8009d4c:	08009cbd 	.word	0x08009cbd

08009d50 <__sfp_lock_acquire>:
 8009d50:	4801      	ldr	r0, [pc, #4]	; (8009d58 <__sfp_lock_acquire+0x8>)
 8009d52:	f000 ba29 	b.w	800a1a8 <__retarget_lock_acquire_recursive>
 8009d56:	bf00      	nop
 8009d58:	200023e1 	.word	0x200023e1

08009d5c <__sfp_lock_release>:
 8009d5c:	4801      	ldr	r0, [pc, #4]	; (8009d64 <__sfp_lock_release+0x8>)
 8009d5e:	f000 ba24 	b.w	800a1aa <__retarget_lock_release_recursive>
 8009d62:	bf00      	nop
 8009d64:	200023e1 	.word	0x200023e1

08009d68 <__sinit>:
 8009d68:	b510      	push	{r4, lr}
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	f7ff fff0 	bl	8009d50 <__sfp_lock_acquire>
 8009d70:	6a23      	ldr	r3, [r4, #32]
 8009d72:	b11b      	cbz	r3, 8009d7c <__sinit+0x14>
 8009d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d78:	f7ff bff0 	b.w	8009d5c <__sfp_lock_release>
 8009d7c:	4b04      	ldr	r3, [pc, #16]	; (8009d90 <__sinit+0x28>)
 8009d7e:	6223      	str	r3, [r4, #32]
 8009d80:	4b04      	ldr	r3, [pc, #16]	; (8009d94 <__sinit+0x2c>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1f5      	bne.n	8009d74 <__sinit+0xc>
 8009d88:	f7ff ffc4 	bl	8009d14 <global_stdio_init.part.0>
 8009d8c:	e7f2      	b.n	8009d74 <__sinit+0xc>
 8009d8e:	bf00      	nop
 8009d90:	08009cd5 	.word	0x08009cd5
 8009d94:	200023d8 	.word	0x200023d8

08009d98 <_fwalk_sglue>:
 8009d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d9c:	4607      	mov	r7, r0
 8009d9e:	4688      	mov	r8, r1
 8009da0:	4614      	mov	r4, r2
 8009da2:	2600      	movs	r6, #0
 8009da4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009da8:	f1b9 0901 	subs.w	r9, r9, #1
 8009dac:	d505      	bpl.n	8009dba <_fwalk_sglue+0x22>
 8009dae:	6824      	ldr	r4, [r4, #0]
 8009db0:	2c00      	cmp	r4, #0
 8009db2:	d1f7      	bne.n	8009da4 <_fwalk_sglue+0xc>
 8009db4:	4630      	mov	r0, r6
 8009db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dba:	89ab      	ldrh	r3, [r5, #12]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d907      	bls.n	8009dd0 <_fwalk_sglue+0x38>
 8009dc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	d003      	beq.n	8009dd0 <_fwalk_sglue+0x38>
 8009dc8:	4629      	mov	r1, r5
 8009dca:	4638      	mov	r0, r7
 8009dcc:	47c0      	blx	r8
 8009dce:	4306      	orrs	r6, r0
 8009dd0:	3568      	adds	r5, #104	; 0x68
 8009dd2:	e7e9      	b.n	8009da8 <_fwalk_sglue+0x10>

08009dd4 <iprintf>:
 8009dd4:	b40f      	push	{r0, r1, r2, r3}
 8009dd6:	b507      	push	{r0, r1, r2, lr}
 8009dd8:	4906      	ldr	r1, [pc, #24]	; (8009df4 <iprintf+0x20>)
 8009dda:	ab04      	add	r3, sp, #16
 8009ddc:	6808      	ldr	r0, [r1, #0]
 8009dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8009de2:	6881      	ldr	r1, [r0, #8]
 8009de4:	9301      	str	r3, [sp, #4]
 8009de6:	f002 fe37 	bl	800ca58 <_vfiprintf_r>
 8009dea:	b003      	add	sp, #12
 8009dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8009df0:	b004      	add	sp, #16
 8009df2:	4770      	bx	lr
 8009df4:	20000154 	.word	0x20000154

08009df8 <putchar>:
 8009df8:	4b02      	ldr	r3, [pc, #8]	; (8009e04 <putchar+0xc>)
 8009dfa:	4601      	mov	r1, r0
 8009dfc:	6818      	ldr	r0, [r3, #0]
 8009dfe:	6882      	ldr	r2, [r0, #8]
 8009e00:	f003 b854 	b.w	800ceac <_putc_r>
 8009e04:	20000154 	.word	0x20000154

08009e08 <_puts_r>:
 8009e08:	6a03      	ldr	r3, [r0, #32]
 8009e0a:	b570      	push	{r4, r5, r6, lr}
 8009e0c:	6884      	ldr	r4, [r0, #8]
 8009e0e:	4605      	mov	r5, r0
 8009e10:	460e      	mov	r6, r1
 8009e12:	b90b      	cbnz	r3, 8009e18 <_puts_r+0x10>
 8009e14:	f7ff ffa8 	bl	8009d68 <__sinit>
 8009e18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e1a:	07db      	lsls	r3, r3, #31
 8009e1c:	d405      	bmi.n	8009e2a <_puts_r+0x22>
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	0598      	lsls	r0, r3, #22
 8009e22:	d402      	bmi.n	8009e2a <_puts_r+0x22>
 8009e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e26:	f000 f9bf 	bl	800a1a8 <__retarget_lock_acquire_recursive>
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	0719      	lsls	r1, r3, #28
 8009e2e:	d513      	bpl.n	8009e58 <_puts_r+0x50>
 8009e30:	6923      	ldr	r3, [r4, #16]
 8009e32:	b18b      	cbz	r3, 8009e58 <_puts_r+0x50>
 8009e34:	3e01      	subs	r6, #1
 8009e36:	68a3      	ldr	r3, [r4, #8]
 8009e38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	60a3      	str	r3, [r4, #8]
 8009e40:	b9e9      	cbnz	r1, 8009e7e <_puts_r+0x76>
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	da2e      	bge.n	8009ea4 <_puts_r+0x9c>
 8009e46:	4622      	mov	r2, r4
 8009e48:	210a      	movs	r1, #10
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	f000 f89b 	bl	8009f86 <__swbuf_r>
 8009e50:	3001      	adds	r0, #1
 8009e52:	d007      	beq.n	8009e64 <_puts_r+0x5c>
 8009e54:	250a      	movs	r5, #10
 8009e56:	e007      	b.n	8009e68 <_puts_r+0x60>
 8009e58:	4621      	mov	r1, r4
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	f000 f8d0 	bl	800a000 <__swsetup_r>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d0e7      	beq.n	8009e34 <_puts_r+0x2c>
 8009e64:	f04f 35ff 	mov.w	r5, #4294967295
 8009e68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e6a:	07da      	lsls	r2, r3, #31
 8009e6c:	d405      	bmi.n	8009e7a <_puts_r+0x72>
 8009e6e:	89a3      	ldrh	r3, [r4, #12]
 8009e70:	059b      	lsls	r3, r3, #22
 8009e72:	d402      	bmi.n	8009e7a <_puts_r+0x72>
 8009e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e76:	f000 f998 	bl	800a1aa <__retarget_lock_release_recursive>
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	bd70      	pop	{r4, r5, r6, pc}
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	da04      	bge.n	8009e8c <_puts_r+0x84>
 8009e82:	69a2      	ldr	r2, [r4, #24]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	dc06      	bgt.n	8009e96 <_puts_r+0x8e>
 8009e88:	290a      	cmp	r1, #10
 8009e8a:	d004      	beq.n	8009e96 <_puts_r+0x8e>
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	1c5a      	adds	r2, r3, #1
 8009e90:	6022      	str	r2, [r4, #0]
 8009e92:	7019      	strb	r1, [r3, #0]
 8009e94:	e7cf      	b.n	8009e36 <_puts_r+0x2e>
 8009e96:	4622      	mov	r2, r4
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f000 f874 	bl	8009f86 <__swbuf_r>
 8009e9e:	3001      	adds	r0, #1
 8009ea0:	d1c9      	bne.n	8009e36 <_puts_r+0x2e>
 8009ea2:	e7df      	b.n	8009e64 <_puts_r+0x5c>
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	250a      	movs	r5, #10
 8009ea8:	1c5a      	adds	r2, r3, #1
 8009eaa:	6022      	str	r2, [r4, #0]
 8009eac:	701d      	strb	r5, [r3, #0]
 8009eae:	e7db      	b.n	8009e68 <_puts_r+0x60>

08009eb0 <puts>:
 8009eb0:	4b02      	ldr	r3, [pc, #8]	; (8009ebc <puts+0xc>)
 8009eb2:	4601      	mov	r1, r0
 8009eb4:	6818      	ldr	r0, [r3, #0]
 8009eb6:	f7ff bfa7 	b.w	8009e08 <_puts_r>
 8009eba:	bf00      	nop
 8009ebc:	20000154 	.word	0x20000154

08009ec0 <siprintf>:
 8009ec0:	b40e      	push	{r1, r2, r3}
 8009ec2:	b500      	push	{lr}
 8009ec4:	b09c      	sub	sp, #112	; 0x70
 8009ec6:	ab1d      	add	r3, sp, #116	; 0x74
 8009ec8:	9002      	str	r0, [sp, #8]
 8009eca:	9006      	str	r0, [sp, #24]
 8009ecc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ed0:	4809      	ldr	r0, [pc, #36]	; (8009ef8 <siprintf+0x38>)
 8009ed2:	9107      	str	r1, [sp, #28]
 8009ed4:	9104      	str	r1, [sp, #16]
 8009ed6:	4909      	ldr	r1, [pc, #36]	; (8009efc <siprintf+0x3c>)
 8009ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009edc:	9105      	str	r1, [sp, #20]
 8009ede:	6800      	ldr	r0, [r0, #0]
 8009ee0:	9301      	str	r3, [sp, #4]
 8009ee2:	a902      	add	r1, sp, #8
 8009ee4:	f002 fc90 	bl	800c808 <_svfiprintf_r>
 8009ee8:	9b02      	ldr	r3, [sp, #8]
 8009eea:	2200      	movs	r2, #0
 8009eec:	701a      	strb	r2, [r3, #0]
 8009eee:	b01c      	add	sp, #112	; 0x70
 8009ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ef4:	b003      	add	sp, #12
 8009ef6:	4770      	bx	lr
 8009ef8:	20000154 	.word	0x20000154
 8009efc:	ffff0208 	.word	0xffff0208

08009f00 <__sread>:
 8009f00:	b510      	push	{r4, lr}
 8009f02:	460c      	mov	r4, r1
 8009f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f08:	f000 f900 	bl	800a10c <_read_r>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	bfab      	itete	ge
 8009f10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f12:	89a3      	ldrhlt	r3, [r4, #12]
 8009f14:	181b      	addge	r3, r3, r0
 8009f16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f1a:	bfac      	ite	ge
 8009f1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f1e:	81a3      	strhlt	r3, [r4, #12]
 8009f20:	bd10      	pop	{r4, pc}

08009f22 <__swrite>:
 8009f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f26:	461f      	mov	r7, r3
 8009f28:	898b      	ldrh	r3, [r1, #12]
 8009f2a:	05db      	lsls	r3, r3, #23
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	460c      	mov	r4, r1
 8009f30:	4616      	mov	r6, r2
 8009f32:	d505      	bpl.n	8009f40 <__swrite+0x1e>
 8009f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f38:	2302      	movs	r3, #2
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f000 f8d4 	bl	800a0e8 <_lseek_r>
 8009f40:	89a3      	ldrh	r3, [r4, #12]
 8009f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f4a:	81a3      	strh	r3, [r4, #12]
 8009f4c:	4632      	mov	r2, r6
 8009f4e:	463b      	mov	r3, r7
 8009f50:	4628      	mov	r0, r5
 8009f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f56:	f000 b8eb 	b.w	800a130 <_write_r>

08009f5a <__sseek>:
 8009f5a:	b510      	push	{r4, lr}
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f62:	f000 f8c1 	bl	800a0e8 <_lseek_r>
 8009f66:	1c43      	adds	r3, r0, #1
 8009f68:	89a3      	ldrh	r3, [r4, #12]
 8009f6a:	bf15      	itete	ne
 8009f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f76:	81a3      	strheq	r3, [r4, #12]
 8009f78:	bf18      	it	ne
 8009f7a:	81a3      	strhne	r3, [r4, #12]
 8009f7c:	bd10      	pop	{r4, pc}

08009f7e <__sclose>:
 8009f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f82:	f000 b8a1 	b.w	800a0c8 <_close_r>

08009f86 <__swbuf_r>:
 8009f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f88:	460e      	mov	r6, r1
 8009f8a:	4614      	mov	r4, r2
 8009f8c:	4605      	mov	r5, r0
 8009f8e:	b118      	cbz	r0, 8009f98 <__swbuf_r+0x12>
 8009f90:	6a03      	ldr	r3, [r0, #32]
 8009f92:	b90b      	cbnz	r3, 8009f98 <__swbuf_r+0x12>
 8009f94:	f7ff fee8 	bl	8009d68 <__sinit>
 8009f98:	69a3      	ldr	r3, [r4, #24]
 8009f9a:	60a3      	str	r3, [r4, #8]
 8009f9c:	89a3      	ldrh	r3, [r4, #12]
 8009f9e:	071a      	lsls	r2, r3, #28
 8009fa0:	d525      	bpl.n	8009fee <__swbuf_r+0x68>
 8009fa2:	6923      	ldr	r3, [r4, #16]
 8009fa4:	b31b      	cbz	r3, 8009fee <__swbuf_r+0x68>
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	6922      	ldr	r2, [r4, #16]
 8009faa:	1a98      	subs	r0, r3, r2
 8009fac:	6963      	ldr	r3, [r4, #20]
 8009fae:	b2f6      	uxtb	r6, r6
 8009fb0:	4283      	cmp	r3, r0
 8009fb2:	4637      	mov	r7, r6
 8009fb4:	dc04      	bgt.n	8009fc0 <__swbuf_r+0x3a>
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	4628      	mov	r0, r5
 8009fba:	f002 feed 	bl	800cd98 <_fflush_r>
 8009fbe:	b9e0      	cbnz	r0, 8009ffa <__swbuf_r+0x74>
 8009fc0:	68a3      	ldr	r3, [r4, #8]
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	60a3      	str	r3, [r4, #8]
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	1c5a      	adds	r2, r3, #1
 8009fca:	6022      	str	r2, [r4, #0]
 8009fcc:	701e      	strb	r6, [r3, #0]
 8009fce:	6962      	ldr	r2, [r4, #20]
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d004      	beq.n	8009fe0 <__swbuf_r+0x5a>
 8009fd6:	89a3      	ldrh	r3, [r4, #12]
 8009fd8:	07db      	lsls	r3, r3, #31
 8009fda:	d506      	bpl.n	8009fea <__swbuf_r+0x64>
 8009fdc:	2e0a      	cmp	r6, #10
 8009fde:	d104      	bne.n	8009fea <__swbuf_r+0x64>
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	f002 fed8 	bl	800cd98 <_fflush_r>
 8009fe8:	b938      	cbnz	r0, 8009ffa <__swbuf_r+0x74>
 8009fea:	4638      	mov	r0, r7
 8009fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fee:	4621      	mov	r1, r4
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f000 f805 	bl	800a000 <__swsetup_r>
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d0d5      	beq.n	8009fa6 <__swbuf_r+0x20>
 8009ffa:	f04f 37ff 	mov.w	r7, #4294967295
 8009ffe:	e7f4      	b.n	8009fea <__swbuf_r+0x64>

0800a000 <__swsetup_r>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	4b2a      	ldr	r3, [pc, #168]	; (800a0ac <__swsetup_r+0xac>)
 800a004:	4605      	mov	r5, r0
 800a006:	6818      	ldr	r0, [r3, #0]
 800a008:	460c      	mov	r4, r1
 800a00a:	b118      	cbz	r0, 800a014 <__swsetup_r+0x14>
 800a00c:	6a03      	ldr	r3, [r0, #32]
 800a00e:	b90b      	cbnz	r3, 800a014 <__swsetup_r+0x14>
 800a010:	f7ff feaa 	bl	8009d68 <__sinit>
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a01a:	0718      	lsls	r0, r3, #28
 800a01c:	d422      	bmi.n	800a064 <__swsetup_r+0x64>
 800a01e:	06d9      	lsls	r1, r3, #27
 800a020:	d407      	bmi.n	800a032 <__swsetup_r+0x32>
 800a022:	2309      	movs	r3, #9
 800a024:	602b      	str	r3, [r5, #0]
 800a026:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a02a:	81a3      	strh	r3, [r4, #12]
 800a02c:	f04f 30ff 	mov.w	r0, #4294967295
 800a030:	e034      	b.n	800a09c <__swsetup_r+0x9c>
 800a032:	0758      	lsls	r0, r3, #29
 800a034:	d512      	bpl.n	800a05c <__swsetup_r+0x5c>
 800a036:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a038:	b141      	cbz	r1, 800a04c <__swsetup_r+0x4c>
 800a03a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a03e:	4299      	cmp	r1, r3
 800a040:	d002      	beq.n	800a048 <__swsetup_r+0x48>
 800a042:	4628      	mov	r0, r5
 800a044:	f000 ff42 	bl	800aecc <_free_r>
 800a048:	2300      	movs	r3, #0
 800a04a:	6363      	str	r3, [r4, #52]	; 0x34
 800a04c:	89a3      	ldrh	r3, [r4, #12]
 800a04e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a052:	81a3      	strh	r3, [r4, #12]
 800a054:	2300      	movs	r3, #0
 800a056:	6063      	str	r3, [r4, #4]
 800a058:	6923      	ldr	r3, [r4, #16]
 800a05a:	6023      	str	r3, [r4, #0]
 800a05c:	89a3      	ldrh	r3, [r4, #12]
 800a05e:	f043 0308 	orr.w	r3, r3, #8
 800a062:	81a3      	strh	r3, [r4, #12]
 800a064:	6923      	ldr	r3, [r4, #16]
 800a066:	b94b      	cbnz	r3, 800a07c <__swsetup_r+0x7c>
 800a068:	89a3      	ldrh	r3, [r4, #12]
 800a06a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a06e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a072:	d003      	beq.n	800a07c <__swsetup_r+0x7c>
 800a074:	4621      	mov	r1, r4
 800a076:	4628      	mov	r0, r5
 800a078:	f002 fedc 	bl	800ce34 <__smakebuf_r>
 800a07c:	89a0      	ldrh	r0, [r4, #12]
 800a07e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a082:	f010 0301 	ands.w	r3, r0, #1
 800a086:	d00a      	beq.n	800a09e <__swsetup_r+0x9e>
 800a088:	2300      	movs	r3, #0
 800a08a:	60a3      	str	r3, [r4, #8]
 800a08c:	6963      	ldr	r3, [r4, #20]
 800a08e:	425b      	negs	r3, r3
 800a090:	61a3      	str	r3, [r4, #24]
 800a092:	6923      	ldr	r3, [r4, #16]
 800a094:	b943      	cbnz	r3, 800a0a8 <__swsetup_r+0xa8>
 800a096:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a09a:	d1c4      	bne.n	800a026 <__swsetup_r+0x26>
 800a09c:	bd38      	pop	{r3, r4, r5, pc}
 800a09e:	0781      	lsls	r1, r0, #30
 800a0a0:	bf58      	it	pl
 800a0a2:	6963      	ldrpl	r3, [r4, #20]
 800a0a4:	60a3      	str	r3, [r4, #8]
 800a0a6:	e7f4      	b.n	800a092 <__swsetup_r+0x92>
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	e7f7      	b.n	800a09c <__swsetup_r+0x9c>
 800a0ac:	20000154 	.word	0x20000154

0800a0b0 <memset>:
 800a0b0:	4402      	add	r2, r0
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d100      	bne.n	800a0ba <memset+0xa>
 800a0b8:	4770      	bx	lr
 800a0ba:	f803 1b01 	strb.w	r1, [r3], #1
 800a0be:	e7f9      	b.n	800a0b4 <memset+0x4>

0800a0c0 <_localeconv_r>:
 800a0c0:	4800      	ldr	r0, [pc, #0]	; (800a0c4 <_localeconv_r+0x4>)
 800a0c2:	4770      	bx	lr
 800a0c4:	20000248 	.word	0x20000248

0800a0c8 <_close_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4d06      	ldr	r5, [pc, #24]	; (800a0e4 <_close_r+0x1c>)
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	4608      	mov	r0, r1
 800a0d2:	602b      	str	r3, [r5, #0]
 800a0d4:	f7f7 fef7 	bl	8001ec6 <_close>
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	d102      	bne.n	800a0e2 <_close_r+0x1a>
 800a0dc:	682b      	ldr	r3, [r5, #0]
 800a0de:	b103      	cbz	r3, 800a0e2 <_close_r+0x1a>
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	200023dc 	.word	0x200023dc

0800a0e8 <_lseek_r>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	4d07      	ldr	r5, [pc, #28]	; (800a108 <_lseek_r+0x20>)
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	4608      	mov	r0, r1
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	602a      	str	r2, [r5, #0]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	f7f7 ff0c 	bl	8001f14 <_lseek>
 800a0fc:	1c43      	adds	r3, r0, #1
 800a0fe:	d102      	bne.n	800a106 <_lseek_r+0x1e>
 800a100:	682b      	ldr	r3, [r5, #0]
 800a102:	b103      	cbz	r3, 800a106 <_lseek_r+0x1e>
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	bd38      	pop	{r3, r4, r5, pc}
 800a108:	200023dc 	.word	0x200023dc

0800a10c <_read_r>:
 800a10c:	b538      	push	{r3, r4, r5, lr}
 800a10e:	4d07      	ldr	r5, [pc, #28]	; (800a12c <_read_r+0x20>)
 800a110:	4604      	mov	r4, r0
 800a112:	4608      	mov	r0, r1
 800a114:	4611      	mov	r1, r2
 800a116:	2200      	movs	r2, #0
 800a118:	602a      	str	r2, [r5, #0]
 800a11a:	461a      	mov	r2, r3
 800a11c:	f7f7 fe9a 	bl	8001e54 <_read>
 800a120:	1c43      	adds	r3, r0, #1
 800a122:	d102      	bne.n	800a12a <_read_r+0x1e>
 800a124:	682b      	ldr	r3, [r5, #0]
 800a126:	b103      	cbz	r3, 800a12a <_read_r+0x1e>
 800a128:	6023      	str	r3, [r4, #0]
 800a12a:	bd38      	pop	{r3, r4, r5, pc}
 800a12c:	200023dc 	.word	0x200023dc

0800a130 <_write_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	4d07      	ldr	r5, [pc, #28]	; (800a150 <_write_r+0x20>)
 800a134:	4604      	mov	r4, r0
 800a136:	4608      	mov	r0, r1
 800a138:	4611      	mov	r1, r2
 800a13a:	2200      	movs	r2, #0
 800a13c:	602a      	str	r2, [r5, #0]
 800a13e:	461a      	mov	r2, r3
 800a140:	f7f7 fea5 	bl	8001e8e <_write>
 800a144:	1c43      	adds	r3, r0, #1
 800a146:	d102      	bne.n	800a14e <_write_r+0x1e>
 800a148:	682b      	ldr	r3, [r5, #0]
 800a14a:	b103      	cbz	r3, 800a14e <_write_r+0x1e>
 800a14c:	6023      	str	r3, [r4, #0]
 800a14e:	bd38      	pop	{r3, r4, r5, pc}
 800a150:	200023dc 	.word	0x200023dc

0800a154 <__errno>:
 800a154:	4b01      	ldr	r3, [pc, #4]	; (800a15c <__errno+0x8>)
 800a156:	6818      	ldr	r0, [r3, #0]
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	20000154 	.word	0x20000154

0800a160 <__libc_init_array>:
 800a160:	b570      	push	{r4, r5, r6, lr}
 800a162:	4d0d      	ldr	r5, [pc, #52]	; (800a198 <__libc_init_array+0x38>)
 800a164:	4c0d      	ldr	r4, [pc, #52]	; (800a19c <__libc_init_array+0x3c>)
 800a166:	1b64      	subs	r4, r4, r5
 800a168:	10a4      	asrs	r4, r4, #2
 800a16a:	2600      	movs	r6, #0
 800a16c:	42a6      	cmp	r6, r4
 800a16e:	d109      	bne.n	800a184 <__libc_init_array+0x24>
 800a170:	4d0b      	ldr	r5, [pc, #44]	; (800a1a0 <__libc_init_array+0x40>)
 800a172:	4c0c      	ldr	r4, [pc, #48]	; (800a1a4 <__libc_init_array+0x44>)
 800a174:	f003 fb74 	bl	800d860 <_init>
 800a178:	1b64      	subs	r4, r4, r5
 800a17a:	10a4      	asrs	r4, r4, #2
 800a17c:	2600      	movs	r6, #0
 800a17e:	42a6      	cmp	r6, r4
 800a180:	d105      	bne.n	800a18e <__libc_init_array+0x2e>
 800a182:	bd70      	pop	{r4, r5, r6, pc}
 800a184:	f855 3b04 	ldr.w	r3, [r5], #4
 800a188:	4798      	blx	r3
 800a18a:	3601      	adds	r6, #1
 800a18c:	e7ee      	b.n	800a16c <__libc_init_array+0xc>
 800a18e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a192:	4798      	blx	r3
 800a194:	3601      	adds	r6, #1
 800a196:	e7f2      	b.n	800a17e <__libc_init_array+0x1e>
 800a198:	0800dda8 	.word	0x0800dda8
 800a19c:	0800dda8 	.word	0x0800dda8
 800a1a0:	0800dda8 	.word	0x0800dda8
 800a1a4:	0800ddac 	.word	0x0800ddac

0800a1a8 <__retarget_lock_acquire_recursive>:
 800a1a8:	4770      	bx	lr

0800a1aa <__retarget_lock_release_recursive>:
 800a1aa:	4770      	bx	lr

0800a1ac <memcpy>:
 800a1ac:	440a      	add	r2, r1
 800a1ae:	4291      	cmp	r1, r2
 800a1b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1b4:	d100      	bne.n	800a1b8 <memcpy+0xc>
 800a1b6:	4770      	bx	lr
 800a1b8:	b510      	push	{r4, lr}
 800a1ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1c2:	4291      	cmp	r1, r2
 800a1c4:	d1f9      	bne.n	800a1ba <memcpy+0xe>
 800a1c6:	bd10      	pop	{r4, pc}

0800a1c8 <nanf>:
 800a1c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a1d0 <nanf+0x8>
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	7fc00000 	.word	0x7fc00000

0800a1d4 <quorem>:
 800a1d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d8:	6903      	ldr	r3, [r0, #16]
 800a1da:	690c      	ldr	r4, [r1, #16]
 800a1dc:	42a3      	cmp	r3, r4
 800a1de:	4607      	mov	r7, r0
 800a1e0:	db7e      	blt.n	800a2e0 <quorem+0x10c>
 800a1e2:	3c01      	subs	r4, #1
 800a1e4:	f101 0814 	add.w	r8, r1, #20
 800a1e8:	f100 0514 	add.w	r5, r0, #20
 800a1ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a202:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a206:	fbb2 f6f3 	udiv	r6, r2, r3
 800a20a:	d331      	bcc.n	800a270 <quorem+0x9c>
 800a20c:	f04f 0e00 	mov.w	lr, #0
 800a210:	4640      	mov	r0, r8
 800a212:	46ac      	mov	ip, r5
 800a214:	46f2      	mov	sl, lr
 800a216:	f850 2b04 	ldr.w	r2, [r0], #4
 800a21a:	b293      	uxth	r3, r2
 800a21c:	fb06 e303 	mla	r3, r6, r3, lr
 800a220:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a224:	0c1a      	lsrs	r2, r3, #16
 800a226:	b29b      	uxth	r3, r3
 800a228:	ebaa 0303 	sub.w	r3, sl, r3
 800a22c:	f8dc a000 	ldr.w	sl, [ip]
 800a230:	fa13 f38a 	uxtah	r3, r3, sl
 800a234:	fb06 220e 	mla	r2, r6, lr, r2
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	9b00      	ldr	r3, [sp, #0]
 800a23c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a240:	b292      	uxth	r2, r2
 800a242:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a246:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a24a:	f8bd 3000 	ldrh.w	r3, [sp]
 800a24e:	4581      	cmp	r9, r0
 800a250:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a254:	f84c 3b04 	str.w	r3, [ip], #4
 800a258:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a25c:	d2db      	bcs.n	800a216 <quorem+0x42>
 800a25e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a262:	b92b      	cbnz	r3, 800a270 <quorem+0x9c>
 800a264:	9b01      	ldr	r3, [sp, #4]
 800a266:	3b04      	subs	r3, #4
 800a268:	429d      	cmp	r5, r3
 800a26a:	461a      	mov	r2, r3
 800a26c:	d32c      	bcc.n	800a2c8 <quorem+0xf4>
 800a26e:	613c      	str	r4, [r7, #16]
 800a270:	4638      	mov	r0, r7
 800a272:	f001 f9f1 	bl	800b658 <__mcmp>
 800a276:	2800      	cmp	r0, #0
 800a278:	db22      	blt.n	800a2c0 <quorem+0xec>
 800a27a:	3601      	adds	r6, #1
 800a27c:	4629      	mov	r1, r5
 800a27e:	2000      	movs	r0, #0
 800a280:	f858 2b04 	ldr.w	r2, [r8], #4
 800a284:	f8d1 c000 	ldr.w	ip, [r1]
 800a288:	b293      	uxth	r3, r2
 800a28a:	1ac3      	subs	r3, r0, r3
 800a28c:	0c12      	lsrs	r2, r2, #16
 800a28e:	fa13 f38c 	uxtah	r3, r3, ip
 800a292:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a296:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2a0:	45c1      	cmp	r9, r8
 800a2a2:	f841 3b04 	str.w	r3, [r1], #4
 800a2a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a2aa:	d2e9      	bcs.n	800a280 <quorem+0xac>
 800a2ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2b4:	b922      	cbnz	r2, 800a2c0 <quorem+0xec>
 800a2b6:	3b04      	subs	r3, #4
 800a2b8:	429d      	cmp	r5, r3
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	d30a      	bcc.n	800a2d4 <quorem+0x100>
 800a2be:	613c      	str	r4, [r7, #16]
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	b003      	add	sp, #12
 800a2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c8:	6812      	ldr	r2, [r2, #0]
 800a2ca:	3b04      	subs	r3, #4
 800a2cc:	2a00      	cmp	r2, #0
 800a2ce:	d1ce      	bne.n	800a26e <quorem+0x9a>
 800a2d0:	3c01      	subs	r4, #1
 800a2d2:	e7c9      	b.n	800a268 <quorem+0x94>
 800a2d4:	6812      	ldr	r2, [r2, #0]
 800a2d6:	3b04      	subs	r3, #4
 800a2d8:	2a00      	cmp	r2, #0
 800a2da:	d1f0      	bne.n	800a2be <quorem+0xea>
 800a2dc:	3c01      	subs	r4, #1
 800a2de:	e7eb      	b.n	800a2b8 <quorem+0xe4>
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	e7ee      	b.n	800a2c2 <quorem+0xee>
 800a2e4:	0000      	movs	r0, r0
	...

0800a2e8 <_dtoa_r>:
 800a2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	ed2d 8b04 	vpush	{d8-d9}
 800a2f0:	69c5      	ldr	r5, [r0, #28]
 800a2f2:	b093      	sub	sp, #76	; 0x4c
 800a2f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a2f8:	ec57 6b10 	vmov	r6, r7, d0
 800a2fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a300:	9107      	str	r1, [sp, #28]
 800a302:	4604      	mov	r4, r0
 800a304:	920a      	str	r2, [sp, #40]	; 0x28
 800a306:	930d      	str	r3, [sp, #52]	; 0x34
 800a308:	b975      	cbnz	r5, 800a328 <_dtoa_r+0x40>
 800a30a:	2010      	movs	r0, #16
 800a30c:	f000 fe2a 	bl	800af64 <malloc>
 800a310:	4602      	mov	r2, r0
 800a312:	61e0      	str	r0, [r4, #28]
 800a314:	b920      	cbnz	r0, 800a320 <_dtoa_r+0x38>
 800a316:	4bae      	ldr	r3, [pc, #696]	; (800a5d0 <_dtoa_r+0x2e8>)
 800a318:	21ef      	movs	r1, #239	; 0xef
 800a31a:	48ae      	ldr	r0, [pc, #696]	; (800a5d4 <_dtoa_r+0x2ec>)
 800a31c:	f002 fe60 	bl	800cfe0 <__assert_func>
 800a320:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a324:	6005      	str	r5, [r0, #0]
 800a326:	60c5      	str	r5, [r0, #12]
 800a328:	69e3      	ldr	r3, [r4, #28]
 800a32a:	6819      	ldr	r1, [r3, #0]
 800a32c:	b151      	cbz	r1, 800a344 <_dtoa_r+0x5c>
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	604a      	str	r2, [r1, #4]
 800a332:	2301      	movs	r3, #1
 800a334:	4093      	lsls	r3, r2
 800a336:	608b      	str	r3, [r1, #8]
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 ff07 	bl	800b14c <_Bfree>
 800a33e:	69e3      	ldr	r3, [r4, #28]
 800a340:	2200      	movs	r2, #0
 800a342:	601a      	str	r2, [r3, #0]
 800a344:	1e3b      	subs	r3, r7, #0
 800a346:	bfbb      	ittet	lt
 800a348:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a34c:	9303      	strlt	r3, [sp, #12]
 800a34e:	2300      	movge	r3, #0
 800a350:	2201      	movlt	r2, #1
 800a352:	bfac      	ite	ge
 800a354:	f8c8 3000 	strge.w	r3, [r8]
 800a358:	f8c8 2000 	strlt.w	r2, [r8]
 800a35c:	4b9e      	ldr	r3, [pc, #632]	; (800a5d8 <_dtoa_r+0x2f0>)
 800a35e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a362:	ea33 0308 	bics.w	r3, r3, r8
 800a366:	d11b      	bne.n	800a3a0 <_dtoa_r+0xb8>
 800a368:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a36a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a36e:	6013      	str	r3, [r2, #0]
 800a370:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a374:	4333      	orrs	r3, r6
 800a376:	f000 8593 	beq.w	800aea0 <_dtoa_r+0xbb8>
 800a37a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a37c:	b963      	cbnz	r3, 800a398 <_dtoa_r+0xb0>
 800a37e:	4b97      	ldr	r3, [pc, #604]	; (800a5dc <_dtoa_r+0x2f4>)
 800a380:	e027      	b.n	800a3d2 <_dtoa_r+0xea>
 800a382:	4b97      	ldr	r3, [pc, #604]	; (800a5e0 <_dtoa_r+0x2f8>)
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	3308      	adds	r3, #8
 800a388:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a38a:	6013      	str	r3, [r2, #0]
 800a38c:	9800      	ldr	r0, [sp, #0]
 800a38e:	b013      	add	sp, #76	; 0x4c
 800a390:	ecbd 8b04 	vpop	{d8-d9}
 800a394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a398:	4b90      	ldr	r3, [pc, #576]	; (800a5dc <_dtoa_r+0x2f4>)
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	3303      	adds	r3, #3
 800a39e:	e7f3      	b.n	800a388 <_dtoa_r+0xa0>
 800a3a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	ec51 0b17 	vmov	r0, r1, d7
 800a3aa:	eeb0 8a47 	vmov.f32	s16, s14
 800a3ae:	eef0 8a67 	vmov.f32	s17, s15
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	f7f6 fb90 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3b8:	4681      	mov	r9, r0
 800a3ba:	b160      	cbz	r0, 800a3d6 <_dtoa_r+0xee>
 800a3bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3be:	2301      	movs	r3, #1
 800a3c0:	6013      	str	r3, [r2, #0]
 800a3c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f000 8568 	beq.w	800ae9a <_dtoa_r+0xbb2>
 800a3ca:	4b86      	ldr	r3, [pc, #536]	; (800a5e4 <_dtoa_r+0x2fc>)
 800a3cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3ce:	6013      	str	r3, [r2, #0]
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	e7da      	b.n	800a38c <_dtoa_r+0xa4>
 800a3d6:	aa10      	add	r2, sp, #64	; 0x40
 800a3d8:	a911      	add	r1, sp, #68	; 0x44
 800a3da:	4620      	mov	r0, r4
 800a3dc:	eeb0 0a48 	vmov.f32	s0, s16
 800a3e0:	eef0 0a68 	vmov.f32	s1, s17
 800a3e4:	f001 fa4e 	bl	800b884 <__d2b>
 800a3e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a3ec:	4682      	mov	sl, r0
 800a3ee:	2d00      	cmp	r5, #0
 800a3f0:	d07f      	beq.n	800a4f2 <_dtoa_r+0x20a>
 800a3f2:	ee18 3a90 	vmov	r3, s17
 800a3f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a3fe:	ec51 0b18 	vmov	r0, r1, d8
 800a402:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a406:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a40a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a40e:	4619      	mov	r1, r3
 800a410:	2200      	movs	r2, #0
 800a412:	4b75      	ldr	r3, [pc, #468]	; (800a5e8 <_dtoa_r+0x300>)
 800a414:	f7f5 ff40 	bl	8000298 <__aeabi_dsub>
 800a418:	a367      	add	r3, pc, #412	; (adr r3, 800a5b8 <_dtoa_r+0x2d0>)
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	f7f6 f8f3 	bl	8000608 <__aeabi_dmul>
 800a422:	a367      	add	r3, pc, #412	; (adr r3, 800a5c0 <_dtoa_r+0x2d8>)
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	f7f5 ff38 	bl	800029c <__adddf3>
 800a42c:	4606      	mov	r6, r0
 800a42e:	4628      	mov	r0, r5
 800a430:	460f      	mov	r7, r1
 800a432:	f7f6 f87f 	bl	8000534 <__aeabi_i2d>
 800a436:	a364      	add	r3, pc, #400	; (adr r3, 800a5c8 <_dtoa_r+0x2e0>)
 800a438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43c:	f7f6 f8e4 	bl	8000608 <__aeabi_dmul>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4630      	mov	r0, r6
 800a446:	4639      	mov	r1, r7
 800a448:	f7f5 ff28 	bl	800029c <__adddf3>
 800a44c:	4606      	mov	r6, r0
 800a44e:	460f      	mov	r7, r1
 800a450:	f7f6 fb8a 	bl	8000b68 <__aeabi_d2iz>
 800a454:	2200      	movs	r2, #0
 800a456:	4683      	mov	fp, r0
 800a458:	2300      	movs	r3, #0
 800a45a:	4630      	mov	r0, r6
 800a45c:	4639      	mov	r1, r7
 800a45e:	f7f6 fb45 	bl	8000aec <__aeabi_dcmplt>
 800a462:	b148      	cbz	r0, 800a478 <_dtoa_r+0x190>
 800a464:	4658      	mov	r0, fp
 800a466:	f7f6 f865 	bl	8000534 <__aeabi_i2d>
 800a46a:	4632      	mov	r2, r6
 800a46c:	463b      	mov	r3, r7
 800a46e:	f7f6 fb33 	bl	8000ad8 <__aeabi_dcmpeq>
 800a472:	b908      	cbnz	r0, 800a478 <_dtoa_r+0x190>
 800a474:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a478:	f1bb 0f16 	cmp.w	fp, #22
 800a47c:	d857      	bhi.n	800a52e <_dtoa_r+0x246>
 800a47e:	4b5b      	ldr	r3, [pc, #364]	; (800a5ec <_dtoa_r+0x304>)
 800a480:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a488:	ec51 0b18 	vmov	r0, r1, d8
 800a48c:	f7f6 fb2e 	bl	8000aec <__aeabi_dcmplt>
 800a490:	2800      	cmp	r0, #0
 800a492:	d04e      	beq.n	800a532 <_dtoa_r+0x24a>
 800a494:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a498:	2300      	movs	r3, #0
 800a49a:	930c      	str	r3, [sp, #48]	; 0x30
 800a49c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a49e:	1b5b      	subs	r3, r3, r5
 800a4a0:	1e5a      	subs	r2, r3, #1
 800a4a2:	bf45      	ittet	mi
 800a4a4:	f1c3 0301 	rsbmi	r3, r3, #1
 800a4a8:	9305      	strmi	r3, [sp, #20]
 800a4aa:	2300      	movpl	r3, #0
 800a4ac:	2300      	movmi	r3, #0
 800a4ae:	9206      	str	r2, [sp, #24]
 800a4b0:	bf54      	ite	pl
 800a4b2:	9305      	strpl	r3, [sp, #20]
 800a4b4:	9306      	strmi	r3, [sp, #24]
 800a4b6:	f1bb 0f00 	cmp.w	fp, #0
 800a4ba:	db3c      	blt.n	800a536 <_dtoa_r+0x24e>
 800a4bc:	9b06      	ldr	r3, [sp, #24]
 800a4be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a4c2:	445b      	add	r3, fp
 800a4c4:	9306      	str	r3, [sp, #24]
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	9308      	str	r3, [sp, #32]
 800a4ca:	9b07      	ldr	r3, [sp, #28]
 800a4cc:	2b09      	cmp	r3, #9
 800a4ce:	d868      	bhi.n	800a5a2 <_dtoa_r+0x2ba>
 800a4d0:	2b05      	cmp	r3, #5
 800a4d2:	bfc4      	itt	gt
 800a4d4:	3b04      	subgt	r3, #4
 800a4d6:	9307      	strgt	r3, [sp, #28]
 800a4d8:	9b07      	ldr	r3, [sp, #28]
 800a4da:	f1a3 0302 	sub.w	r3, r3, #2
 800a4de:	bfcc      	ite	gt
 800a4e0:	2500      	movgt	r5, #0
 800a4e2:	2501      	movle	r5, #1
 800a4e4:	2b03      	cmp	r3, #3
 800a4e6:	f200 8085 	bhi.w	800a5f4 <_dtoa_r+0x30c>
 800a4ea:	e8df f003 	tbb	[pc, r3]
 800a4ee:	3b2e      	.short	0x3b2e
 800a4f0:	5839      	.short	0x5839
 800a4f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a4f6:	441d      	add	r5, r3
 800a4f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a4fc:	2b20      	cmp	r3, #32
 800a4fe:	bfc1      	itttt	gt
 800a500:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a504:	fa08 f803 	lslgt.w	r8, r8, r3
 800a508:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a50c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a510:	bfd6      	itet	le
 800a512:	f1c3 0320 	rsble	r3, r3, #32
 800a516:	ea48 0003 	orrgt.w	r0, r8, r3
 800a51a:	fa06 f003 	lslle.w	r0, r6, r3
 800a51e:	f7f5 fff9 	bl	8000514 <__aeabi_ui2d>
 800a522:	2201      	movs	r2, #1
 800a524:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a528:	3d01      	subs	r5, #1
 800a52a:	920e      	str	r2, [sp, #56]	; 0x38
 800a52c:	e76f      	b.n	800a40e <_dtoa_r+0x126>
 800a52e:	2301      	movs	r3, #1
 800a530:	e7b3      	b.n	800a49a <_dtoa_r+0x1b2>
 800a532:	900c      	str	r0, [sp, #48]	; 0x30
 800a534:	e7b2      	b.n	800a49c <_dtoa_r+0x1b4>
 800a536:	9b05      	ldr	r3, [sp, #20]
 800a538:	eba3 030b 	sub.w	r3, r3, fp
 800a53c:	9305      	str	r3, [sp, #20]
 800a53e:	f1cb 0300 	rsb	r3, fp, #0
 800a542:	9308      	str	r3, [sp, #32]
 800a544:	2300      	movs	r3, #0
 800a546:	930b      	str	r3, [sp, #44]	; 0x2c
 800a548:	e7bf      	b.n	800a4ca <_dtoa_r+0x1e2>
 800a54a:	2300      	movs	r3, #0
 800a54c:	9309      	str	r3, [sp, #36]	; 0x24
 800a54e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a550:	2b00      	cmp	r3, #0
 800a552:	dc52      	bgt.n	800a5fa <_dtoa_r+0x312>
 800a554:	2301      	movs	r3, #1
 800a556:	9301      	str	r3, [sp, #4]
 800a558:	9304      	str	r3, [sp, #16]
 800a55a:	461a      	mov	r2, r3
 800a55c:	920a      	str	r2, [sp, #40]	; 0x28
 800a55e:	e00b      	b.n	800a578 <_dtoa_r+0x290>
 800a560:	2301      	movs	r3, #1
 800a562:	e7f3      	b.n	800a54c <_dtoa_r+0x264>
 800a564:	2300      	movs	r3, #0
 800a566:	9309      	str	r3, [sp, #36]	; 0x24
 800a568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a56a:	445b      	add	r3, fp
 800a56c:	9301      	str	r3, [sp, #4]
 800a56e:	3301      	adds	r3, #1
 800a570:	2b01      	cmp	r3, #1
 800a572:	9304      	str	r3, [sp, #16]
 800a574:	bfb8      	it	lt
 800a576:	2301      	movlt	r3, #1
 800a578:	69e0      	ldr	r0, [r4, #28]
 800a57a:	2100      	movs	r1, #0
 800a57c:	2204      	movs	r2, #4
 800a57e:	f102 0614 	add.w	r6, r2, #20
 800a582:	429e      	cmp	r6, r3
 800a584:	d93d      	bls.n	800a602 <_dtoa_r+0x31a>
 800a586:	6041      	str	r1, [r0, #4]
 800a588:	4620      	mov	r0, r4
 800a58a:	f000 fd9f 	bl	800b0cc <_Balloc>
 800a58e:	9000      	str	r0, [sp, #0]
 800a590:	2800      	cmp	r0, #0
 800a592:	d139      	bne.n	800a608 <_dtoa_r+0x320>
 800a594:	4b16      	ldr	r3, [pc, #88]	; (800a5f0 <_dtoa_r+0x308>)
 800a596:	4602      	mov	r2, r0
 800a598:	f240 11af 	movw	r1, #431	; 0x1af
 800a59c:	e6bd      	b.n	800a31a <_dtoa_r+0x32>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e7e1      	b.n	800a566 <_dtoa_r+0x27e>
 800a5a2:	2501      	movs	r5, #1
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	9307      	str	r3, [sp, #28]
 800a5a8:	9509      	str	r5, [sp, #36]	; 0x24
 800a5aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ae:	9301      	str	r3, [sp, #4]
 800a5b0:	9304      	str	r3, [sp, #16]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	2312      	movs	r3, #18
 800a5b6:	e7d1      	b.n	800a55c <_dtoa_r+0x274>
 800a5b8:	636f4361 	.word	0x636f4361
 800a5bc:	3fd287a7 	.word	0x3fd287a7
 800a5c0:	8b60c8b3 	.word	0x8b60c8b3
 800a5c4:	3fc68a28 	.word	0x3fc68a28
 800a5c8:	509f79fb 	.word	0x509f79fb
 800a5cc:	3fd34413 	.word	0x3fd34413
 800a5d0:	0800d9ba 	.word	0x0800d9ba
 800a5d4:	0800d9d1 	.word	0x0800d9d1
 800a5d8:	7ff00000 	.word	0x7ff00000
 800a5dc:	0800d9b6 	.word	0x0800d9b6
 800a5e0:	0800d9ad 	.word	0x0800d9ad
 800a5e4:	0800d985 	.word	0x0800d985
 800a5e8:	3ff80000 	.word	0x3ff80000
 800a5ec:	0800dac0 	.word	0x0800dac0
 800a5f0:	0800da29 	.word	0x0800da29
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a5f8:	e7d7      	b.n	800a5aa <_dtoa_r+0x2c2>
 800a5fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5fc:	9301      	str	r3, [sp, #4]
 800a5fe:	9304      	str	r3, [sp, #16]
 800a600:	e7ba      	b.n	800a578 <_dtoa_r+0x290>
 800a602:	3101      	adds	r1, #1
 800a604:	0052      	lsls	r2, r2, #1
 800a606:	e7ba      	b.n	800a57e <_dtoa_r+0x296>
 800a608:	69e3      	ldr	r3, [r4, #28]
 800a60a:	9a00      	ldr	r2, [sp, #0]
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	9b04      	ldr	r3, [sp, #16]
 800a610:	2b0e      	cmp	r3, #14
 800a612:	f200 80a8 	bhi.w	800a766 <_dtoa_r+0x47e>
 800a616:	2d00      	cmp	r5, #0
 800a618:	f000 80a5 	beq.w	800a766 <_dtoa_r+0x47e>
 800a61c:	f1bb 0f00 	cmp.w	fp, #0
 800a620:	dd38      	ble.n	800a694 <_dtoa_r+0x3ac>
 800a622:	4bc0      	ldr	r3, [pc, #768]	; (800a924 <_dtoa_r+0x63c>)
 800a624:	f00b 020f 	and.w	r2, fp, #15
 800a628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a62c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a630:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a634:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a638:	d019      	beq.n	800a66e <_dtoa_r+0x386>
 800a63a:	4bbb      	ldr	r3, [pc, #748]	; (800a928 <_dtoa_r+0x640>)
 800a63c:	ec51 0b18 	vmov	r0, r1, d8
 800a640:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a644:	f7f6 f90a 	bl	800085c <__aeabi_ddiv>
 800a648:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a64c:	f008 080f 	and.w	r8, r8, #15
 800a650:	2503      	movs	r5, #3
 800a652:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a928 <_dtoa_r+0x640>
 800a656:	f1b8 0f00 	cmp.w	r8, #0
 800a65a:	d10a      	bne.n	800a672 <_dtoa_r+0x38a>
 800a65c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a660:	4632      	mov	r2, r6
 800a662:	463b      	mov	r3, r7
 800a664:	f7f6 f8fa 	bl	800085c <__aeabi_ddiv>
 800a668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a66c:	e02b      	b.n	800a6c6 <_dtoa_r+0x3de>
 800a66e:	2502      	movs	r5, #2
 800a670:	e7ef      	b.n	800a652 <_dtoa_r+0x36a>
 800a672:	f018 0f01 	tst.w	r8, #1
 800a676:	d008      	beq.n	800a68a <_dtoa_r+0x3a2>
 800a678:	4630      	mov	r0, r6
 800a67a:	4639      	mov	r1, r7
 800a67c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a680:	f7f5 ffc2 	bl	8000608 <__aeabi_dmul>
 800a684:	3501      	adds	r5, #1
 800a686:	4606      	mov	r6, r0
 800a688:	460f      	mov	r7, r1
 800a68a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a68e:	f109 0908 	add.w	r9, r9, #8
 800a692:	e7e0      	b.n	800a656 <_dtoa_r+0x36e>
 800a694:	f000 809f 	beq.w	800a7d6 <_dtoa_r+0x4ee>
 800a698:	f1cb 0600 	rsb	r6, fp, #0
 800a69c:	4ba1      	ldr	r3, [pc, #644]	; (800a924 <_dtoa_r+0x63c>)
 800a69e:	4fa2      	ldr	r7, [pc, #648]	; (800a928 <_dtoa_r+0x640>)
 800a6a0:	f006 020f 	and.w	r2, r6, #15
 800a6a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	ec51 0b18 	vmov	r0, r1, d8
 800a6b0:	f7f5 ffaa 	bl	8000608 <__aeabi_dmul>
 800a6b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6b8:	1136      	asrs	r6, r6, #4
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	2502      	movs	r5, #2
 800a6be:	2e00      	cmp	r6, #0
 800a6c0:	d17e      	bne.n	800a7c0 <_dtoa_r+0x4d8>
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1d0      	bne.n	800a668 <_dtoa_r+0x380>
 800a6c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f000 8084 	beq.w	800a7da <_dtoa_r+0x4f2>
 800a6d2:	4b96      	ldr	r3, [pc, #600]	; (800a92c <_dtoa_r+0x644>)
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	4649      	mov	r1, r9
 800a6da:	f7f6 fa07 	bl	8000aec <__aeabi_dcmplt>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	d07b      	beq.n	800a7da <_dtoa_r+0x4f2>
 800a6e2:	9b04      	ldr	r3, [sp, #16]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d078      	beq.n	800a7da <_dtoa_r+0x4f2>
 800a6e8:	9b01      	ldr	r3, [sp, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	dd39      	ble.n	800a762 <_dtoa_r+0x47a>
 800a6ee:	4b90      	ldr	r3, [pc, #576]	; (800a930 <_dtoa_r+0x648>)
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	4640      	mov	r0, r8
 800a6f4:	4649      	mov	r1, r9
 800a6f6:	f7f5 ff87 	bl	8000608 <__aeabi_dmul>
 800a6fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6fe:	9e01      	ldr	r6, [sp, #4]
 800a700:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a704:	3501      	adds	r5, #1
 800a706:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a70a:	4628      	mov	r0, r5
 800a70c:	f7f5 ff12 	bl	8000534 <__aeabi_i2d>
 800a710:	4642      	mov	r2, r8
 800a712:	464b      	mov	r3, r9
 800a714:	f7f5 ff78 	bl	8000608 <__aeabi_dmul>
 800a718:	4b86      	ldr	r3, [pc, #536]	; (800a934 <_dtoa_r+0x64c>)
 800a71a:	2200      	movs	r2, #0
 800a71c:	f7f5 fdbe 	bl	800029c <__adddf3>
 800a720:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a728:	9303      	str	r3, [sp, #12]
 800a72a:	2e00      	cmp	r6, #0
 800a72c:	d158      	bne.n	800a7e0 <_dtoa_r+0x4f8>
 800a72e:	4b82      	ldr	r3, [pc, #520]	; (800a938 <_dtoa_r+0x650>)
 800a730:	2200      	movs	r2, #0
 800a732:	4640      	mov	r0, r8
 800a734:	4649      	mov	r1, r9
 800a736:	f7f5 fdaf 	bl	8000298 <__aeabi_dsub>
 800a73a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a73e:	4680      	mov	r8, r0
 800a740:	4689      	mov	r9, r1
 800a742:	f7f6 f9f1 	bl	8000b28 <__aeabi_dcmpgt>
 800a746:	2800      	cmp	r0, #0
 800a748:	f040 8296 	bne.w	800ac78 <_dtoa_r+0x990>
 800a74c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a750:	4640      	mov	r0, r8
 800a752:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a756:	4649      	mov	r1, r9
 800a758:	f7f6 f9c8 	bl	8000aec <__aeabi_dcmplt>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	f040 8289 	bne.w	800ac74 <_dtoa_r+0x98c>
 800a762:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f2c0 814e 	blt.w	800aa0a <_dtoa_r+0x722>
 800a76e:	f1bb 0f0e 	cmp.w	fp, #14
 800a772:	f300 814a 	bgt.w	800aa0a <_dtoa_r+0x722>
 800a776:	4b6b      	ldr	r3, [pc, #428]	; (800a924 <_dtoa_r+0x63c>)
 800a778:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a77c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a782:	2b00      	cmp	r3, #0
 800a784:	f280 80dc 	bge.w	800a940 <_dtoa_r+0x658>
 800a788:	9b04      	ldr	r3, [sp, #16]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f300 80d8 	bgt.w	800a940 <_dtoa_r+0x658>
 800a790:	f040 826f 	bne.w	800ac72 <_dtoa_r+0x98a>
 800a794:	4b68      	ldr	r3, [pc, #416]	; (800a938 <_dtoa_r+0x650>)
 800a796:	2200      	movs	r2, #0
 800a798:	4640      	mov	r0, r8
 800a79a:	4649      	mov	r1, r9
 800a79c:	f7f5 ff34 	bl	8000608 <__aeabi_dmul>
 800a7a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7a4:	f7f6 f9b6 	bl	8000b14 <__aeabi_dcmpge>
 800a7a8:	9e04      	ldr	r6, [sp, #16]
 800a7aa:	4637      	mov	r7, r6
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	f040 8245 	bne.w	800ac3c <_dtoa_r+0x954>
 800a7b2:	9d00      	ldr	r5, [sp, #0]
 800a7b4:	2331      	movs	r3, #49	; 0x31
 800a7b6:	f805 3b01 	strb.w	r3, [r5], #1
 800a7ba:	f10b 0b01 	add.w	fp, fp, #1
 800a7be:	e241      	b.n	800ac44 <_dtoa_r+0x95c>
 800a7c0:	07f2      	lsls	r2, r6, #31
 800a7c2:	d505      	bpl.n	800a7d0 <_dtoa_r+0x4e8>
 800a7c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7c8:	f7f5 ff1e 	bl	8000608 <__aeabi_dmul>
 800a7cc:	3501      	adds	r5, #1
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	1076      	asrs	r6, r6, #1
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	e773      	b.n	800a6be <_dtoa_r+0x3d6>
 800a7d6:	2502      	movs	r5, #2
 800a7d8:	e775      	b.n	800a6c6 <_dtoa_r+0x3de>
 800a7da:	9e04      	ldr	r6, [sp, #16]
 800a7dc:	465f      	mov	r7, fp
 800a7de:	e792      	b.n	800a706 <_dtoa_r+0x41e>
 800a7e0:	9900      	ldr	r1, [sp, #0]
 800a7e2:	4b50      	ldr	r3, [pc, #320]	; (800a924 <_dtoa_r+0x63c>)
 800a7e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7e8:	4431      	add	r1, r6
 800a7ea:	9102      	str	r1, [sp, #8]
 800a7ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7ee:	eeb0 9a47 	vmov.f32	s18, s14
 800a7f2:	eef0 9a67 	vmov.f32	s19, s15
 800a7f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a7fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7fe:	2900      	cmp	r1, #0
 800a800:	d044      	beq.n	800a88c <_dtoa_r+0x5a4>
 800a802:	494e      	ldr	r1, [pc, #312]	; (800a93c <_dtoa_r+0x654>)
 800a804:	2000      	movs	r0, #0
 800a806:	f7f6 f829 	bl	800085c <__aeabi_ddiv>
 800a80a:	ec53 2b19 	vmov	r2, r3, d9
 800a80e:	f7f5 fd43 	bl	8000298 <__aeabi_dsub>
 800a812:	9d00      	ldr	r5, [sp, #0]
 800a814:	ec41 0b19 	vmov	d9, r0, r1
 800a818:	4649      	mov	r1, r9
 800a81a:	4640      	mov	r0, r8
 800a81c:	f7f6 f9a4 	bl	8000b68 <__aeabi_d2iz>
 800a820:	4606      	mov	r6, r0
 800a822:	f7f5 fe87 	bl	8000534 <__aeabi_i2d>
 800a826:	4602      	mov	r2, r0
 800a828:	460b      	mov	r3, r1
 800a82a:	4640      	mov	r0, r8
 800a82c:	4649      	mov	r1, r9
 800a82e:	f7f5 fd33 	bl	8000298 <__aeabi_dsub>
 800a832:	3630      	adds	r6, #48	; 0x30
 800a834:	f805 6b01 	strb.w	r6, [r5], #1
 800a838:	ec53 2b19 	vmov	r2, r3, d9
 800a83c:	4680      	mov	r8, r0
 800a83e:	4689      	mov	r9, r1
 800a840:	f7f6 f954 	bl	8000aec <__aeabi_dcmplt>
 800a844:	2800      	cmp	r0, #0
 800a846:	d164      	bne.n	800a912 <_dtoa_r+0x62a>
 800a848:	4642      	mov	r2, r8
 800a84a:	464b      	mov	r3, r9
 800a84c:	4937      	ldr	r1, [pc, #220]	; (800a92c <_dtoa_r+0x644>)
 800a84e:	2000      	movs	r0, #0
 800a850:	f7f5 fd22 	bl	8000298 <__aeabi_dsub>
 800a854:	ec53 2b19 	vmov	r2, r3, d9
 800a858:	f7f6 f948 	bl	8000aec <__aeabi_dcmplt>
 800a85c:	2800      	cmp	r0, #0
 800a85e:	f040 80b6 	bne.w	800a9ce <_dtoa_r+0x6e6>
 800a862:	9b02      	ldr	r3, [sp, #8]
 800a864:	429d      	cmp	r5, r3
 800a866:	f43f af7c 	beq.w	800a762 <_dtoa_r+0x47a>
 800a86a:	4b31      	ldr	r3, [pc, #196]	; (800a930 <_dtoa_r+0x648>)
 800a86c:	ec51 0b19 	vmov	r0, r1, d9
 800a870:	2200      	movs	r2, #0
 800a872:	f7f5 fec9 	bl	8000608 <__aeabi_dmul>
 800a876:	4b2e      	ldr	r3, [pc, #184]	; (800a930 <_dtoa_r+0x648>)
 800a878:	ec41 0b19 	vmov	d9, r0, r1
 800a87c:	2200      	movs	r2, #0
 800a87e:	4640      	mov	r0, r8
 800a880:	4649      	mov	r1, r9
 800a882:	f7f5 fec1 	bl	8000608 <__aeabi_dmul>
 800a886:	4680      	mov	r8, r0
 800a888:	4689      	mov	r9, r1
 800a88a:	e7c5      	b.n	800a818 <_dtoa_r+0x530>
 800a88c:	ec51 0b17 	vmov	r0, r1, d7
 800a890:	f7f5 feba 	bl	8000608 <__aeabi_dmul>
 800a894:	9b02      	ldr	r3, [sp, #8]
 800a896:	9d00      	ldr	r5, [sp, #0]
 800a898:	930f      	str	r3, [sp, #60]	; 0x3c
 800a89a:	ec41 0b19 	vmov	d9, r0, r1
 800a89e:	4649      	mov	r1, r9
 800a8a0:	4640      	mov	r0, r8
 800a8a2:	f7f6 f961 	bl	8000b68 <__aeabi_d2iz>
 800a8a6:	4606      	mov	r6, r0
 800a8a8:	f7f5 fe44 	bl	8000534 <__aeabi_i2d>
 800a8ac:	3630      	adds	r6, #48	; 0x30
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	4640      	mov	r0, r8
 800a8b4:	4649      	mov	r1, r9
 800a8b6:	f7f5 fcef 	bl	8000298 <__aeabi_dsub>
 800a8ba:	f805 6b01 	strb.w	r6, [r5], #1
 800a8be:	9b02      	ldr	r3, [sp, #8]
 800a8c0:	429d      	cmp	r5, r3
 800a8c2:	4680      	mov	r8, r0
 800a8c4:	4689      	mov	r9, r1
 800a8c6:	f04f 0200 	mov.w	r2, #0
 800a8ca:	d124      	bne.n	800a916 <_dtoa_r+0x62e>
 800a8cc:	4b1b      	ldr	r3, [pc, #108]	; (800a93c <_dtoa_r+0x654>)
 800a8ce:	ec51 0b19 	vmov	r0, r1, d9
 800a8d2:	f7f5 fce3 	bl	800029c <__adddf3>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	460b      	mov	r3, r1
 800a8da:	4640      	mov	r0, r8
 800a8dc:	4649      	mov	r1, r9
 800a8de:	f7f6 f923 	bl	8000b28 <__aeabi_dcmpgt>
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	d173      	bne.n	800a9ce <_dtoa_r+0x6e6>
 800a8e6:	ec53 2b19 	vmov	r2, r3, d9
 800a8ea:	4914      	ldr	r1, [pc, #80]	; (800a93c <_dtoa_r+0x654>)
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	f7f5 fcd3 	bl	8000298 <__aeabi_dsub>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4640      	mov	r0, r8
 800a8f8:	4649      	mov	r1, r9
 800a8fa:	f7f6 f8f7 	bl	8000aec <__aeabi_dcmplt>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	f43f af2f 	beq.w	800a762 <_dtoa_r+0x47a>
 800a904:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a906:	1e6b      	subs	r3, r5, #1
 800a908:	930f      	str	r3, [sp, #60]	; 0x3c
 800a90a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a90e:	2b30      	cmp	r3, #48	; 0x30
 800a910:	d0f8      	beq.n	800a904 <_dtoa_r+0x61c>
 800a912:	46bb      	mov	fp, r7
 800a914:	e04a      	b.n	800a9ac <_dtoa_r+0x6c4>
 800a916:	4b06      	ldr	r3, [pc, #24]	; (800a930 <_dtoa_r+0x648>)
 800a918:	f7f5 fe76 	bl	8000608 <__aeabi_dmul>
 800a91c:	4680      	mov	r8, r0
 800a91e:	4689      	mov	r9, r1
 800a920:	e7bd      	b.n	800a89e <_dtoa_r+0x5b6>
 800a922:	bf00      	nop
 800a924:	0800dac0 	.word	0x0800dac0
 800a928:	0800da98 	.word	0x0800da98
 800a92c:	3ff00000 	.word	0x3ff00000
 800a930:	40240000 	.word	0x40240000
 800a934:	401c0000 	.word	0x401c0000
 800a938:	40140000 	.word	0x40140000
 800a93c:	3fe00000 	.word	0x3fe00000
 800a940:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a944:	9d00      	ldr	r5, [sp, #0]
 800a946:	4642      	mov	r2, r8
 800a948:	464b      	mov	r3, r9
 800a94a:	4630      	mov	r0, r6
 800a94c:	4639      	mov	r1, r7
 800a94e:	f7f5 ff85 	bl	800085c <__aeabi_ddiv>
 800a952:	f7f6 f909 	bl	8000b68 <__aeabi_d2iz>
 800a956:	9001      	str	r0, [sp, #4]
 800a958:	f7f5 fdec 	bl	8000534 <__aeabi_i2d>
 800a95c:	4642      	mov	r2, r8
 800a95e:	464b      	mov	r3, r9
 800a960:	f7f5 fe52 	bl	8000608 <__aeabi_dmul>
 800a964:	4602      	mov	r2, r0
 800a966:	460b      	mov	r3, r1
 800a968:	4630      	mov	r0, r6
 800a96a:	4639      	mov	r1, r7
 800a96c:	f7f5 fc94 	bl	8000298 <__aeabi_dsub>
 800a970:	9e01      	ldr	r6, [sp, #4]
 800a972:	9f04      	ldr	r7, [sp, #16]
 800a974:	3630      	adds	r6, #48	; 0x30
 800a976:	f805 6b01 	strb.w	r6, [r5], #1
 800a97a:	9e00      	ldr	r6, [sp, #0]
 800a97c:	1bae      	subs	r6, r5, r6
 800a97e:	42b7      	cmp	r7, r6
 800a980:	4602      	mov	r2, r0
 800a982:	460b      	mov	r3, r1
 800a984:	d134      	bne.n	800a9f0 <_dtoa_r+0x708>
 800a986:	f7f5 fc89 	bl	800029c <__adddf3>
 800a98a:	4642      	mov	r2, r8
 800a98c:	464b      	mov	r3, r9
 800a98e:	4606      	mov	r6, r0
 800a990:	460f      	mov	r7, r1
 800a992:	f7f6 f8c9 	bl	8000b28 <__aeabi_dcmpgt>
 800a996:	b9c8      	cbnz	r0, 800a9cc <_dtoa_r+0x6e4>
 800a998:	4642      	mov	r2, r8
 800a99a:	464b      	mov	r3, r9
 800a99c:	4630      	mov	r0, r6
 800a99e:	4639      	mov	r1, r7
 800a9a0:	f7f6 f89a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9a4:	b110      	cbz	r0, 800a9ac <_dtoa_r+0x6c4>
 800a9a6:	9b01      	ldr	r3, [sp, #4]
 800a9a8:	07db      	lsls	r3, r3, #31
 800a9aa:	d40f      	bmi.n	800a9cc <_dtoa_r+0x6e4>
 800a9ac:	4651      	mov	r1, sl
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f000 fbcc 	bl	800b14c <_Bfree>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9b8:	702b      	strb	r3, [r5, #0]
 800a9ba:	f10b 0301 	add.w	r3, fp, #1
 800a9be:	6013      	str	r3, [r2, #0]
 800a9c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f43f ace2 	beq.w	800a38c <_dtoa_r+0xa4>
 800a9c8:	601d      	str	r5, [r3, #0]
 800a9ca:	e4df      	b.n	800a38c <_dtoa_r+0xa4>
 800a9cc:	465f      	mov	r7, fp
 800a9ce:	462b      	mov	r3, r5
 800a9d0:	461d      	mov	r5, r3
 800a9d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9d6:	2a39      	cmp	r2, #57	; 0x39
 800a9d8:	d106      	bne.n	800a9e8 <_dtoa_r+0x700>
 800a9da:	9a00      	ldr	r2, [sp, #0]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d1f7      	bne.n	800a9d0 <_dtoa_r+0x6e8>
 800a9e0:	9900      	ldr	r1, [sp, #0]
 800a9e2:	2230      	movs	r2, #48	; 0x30
 800a9e4:	3701      	adds	r7, #1
 800a9e6:	700a      	strb	r2, [r1, #0]
 800a9e8:	781a      	ldrb	r2, [r3, #0]
 800a9ea:	3201      	adds	r2, #1
 800a9ec:	701a      	strb	r2, [r3, #0]
 800a9ee:	e790      	b.n	800a912 <_dtoa_r+0x62a>
 800a9f0:	4ba3      	ldr	r3, [pc, #652]	; (800ac80 <_dtoa_r+0x998>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f7f5 fe08 	bl	8000608 <__aeabi_dmul>
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	460f      	mov	r7, r1
 800aa00:	f7f6 f86a 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d09e      	beq.n	800a946 <_dtoa_r+0x65e>
 800aa08:	e7d0      	b.n	800a9ac <_dtoa_r+0x6c4>
 800aa0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa0c:	2a00      	cmp	r2, #0
 800aa0e:	f000 80ca 	beq.w	800aba6 <_dtoa_r+0x8be>
 800aa12:	9a07      	ldr	r2, [sp, #28]
 800aa14:	2a01      	cmp	r2, #1
 800aa16:	f300 80ad 	bgt.w	800ab74 <_dtoa_r+0x88c>
 800aa1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa1c:	2a00      	cmp	r2, #0
 800aa1e:	f000 80a5 	beq.w	800ab6c <_dtoa_r+0x884>
 800aa22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa26:	9e08      	ldr	r6, [sp, #32]
 800aa28:	9d05      	ldr	r5, [sp, #20]
 800aa2a:	9a05      	ldr	r2, [sp, #20]
 800aa2c:	441a      	add	r2, r3
 800aa2e:	9205      	str	r2, [sp, #20]
 800aa30:	9a06      	ldr	r2, [sp, #24]
 800aa32:	2101      	movs	r1, #1
 800aa34:	441a      	add	r2, r3
 800aa36:	4620      	mov	r0, r4
 800aa38:	9206      	str	r2, [sp, #24]
 800aa3a:	f000 fc87 	bl	800b34c <__i2b>
 800aa3e:	4607      	mov	r7, r0
 800aa40:	b165      	cbz	r5, 800aa5c <_dtoa_r+0x774>
 800aa42:	9b06      	ldr	r3, [sp, #24]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	dd09      	ble.n	800aa5c <_dtoa_r+0x774>
 800aa48:	42ab      	cmp	r3, r5
 800aa4a:	9a05      	ldr	r2, [sp, #20]
 800aa4c:	bfa8      	it	ge
 800aa4e:	462b      	movge	r3, r5
 800aa50:	1ad2      	subs	r2, r2, r3
 800aa52:	9205      	str	r2, [sp, #20]
 800aa54:	9a06      	ldr	r2, [sp, #24]
 800aa56:	1aed      	subs	r5, r5, r3
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	9306      	str	r3, [sp, #24]
 800aa5c:	9b08      	ldr	r3, [sp, #32]
 800aa5e:	b1f3      	cbz	r3, 800aa9e <_dtoa_r+0x7b6>
 800aa60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f000 80a3 	beq.w	800abae <_dtoa_r+0x8c6>
 800aa68:	2e00      	cmp	r6, #0
 800aa6a:	dd10      	ble.n	800aa8e <_dtoa_r+0x7a6>
 800aa6c:	4639      	mov	r1, r7
 800aa6e:	4632      	mov	r2, r6
 800aa70:	4620      	mov	r0, r4
 800aa72:	f000 fd2b 	bl	800b4cc <__pow5mult>
 800aa76:	4652      	mov	r2, sl
 800aa78:	4601      	mov	r1, r0
 800aa7a:	4607      	mov	r7, r0
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f000 fc7b 	bl	800b378 <__multiply>
 800aa82:	4651      	mov	r1, sl
 800aa84:	4680      	mov	r8, r0
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 fb60 	bl	800b14c <_Bfree>
 800aa8c:	46c2      	mov	sl, r8
 800aa8e:	9b08      	ldr	r3, [sp, #32]
 800aa90:	1b9a      	subs	r2, r3, r6
 800aa92:	d004      	beq.n	800aa9e <_dtoa_r+0x7b6>
 800aa94:	4651      	mov	r1, sl
 800aa96:	4620      	mov	r0, r4
 800aa98:	f000 fd18 	bl	800b4cc <__pow5mult>
 800aa9c:	4682      	mov	sl, r0
 800aa9e:	2101      	movs	r1, #1
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f000 fc53 	bl	800b34c <__i2b>
 800aaa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	4606      	mov	r6, r0
 800aaac:	f340 8081 	ble.w	800abb2 <_dtoa_r+0x8ca>
 800aab0:	461a      	mov	r2, r3
 800aab2:	4601      	mov	r1, r0
 800aab4:	4620      	mov	r0, r4
 800aab6:	f000 fd09 	bl	800b4cc <__pow5mult>
 800aaba:	9b07      	ldr	r3, [sp, #28]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	4606      	mov	r6, r0
 800aac0:	dd7a      	ble.n	800abb8 <_dtoa_r+0x8d0>
 800aac2:	f04f 0800 	mov.w	r8, #0
 800aac6:	6933      	ldr	r3, [r6, #16]
 800aac8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aacc:	6918      	ldr	r0, [r3, #16]
 800aace:	f000 fbef 	bl	800b2b0 <__hi0bits>
 800aad2:	f1c0 0020 	rsb	r0, r0, #32
 800aad6:	9b06      	ldr	r3, [sp, #24]
 800aad8:	4418      	add	r0, r3
 800aada:	f010 001f 	ands.w	r0, r0, #31
 800aade:	f000 8094 	beq.w	800ac0a <_dtoa_r+0x922>
 800aae2:	f1c0 0320 	rsb	r3, r0, #32
 800aae6:	2b04      	cmp	r3, #4
 800aae8:	f340 8085 	ble.w	800abf6 <_dtoa_r+0x90e>
 800aaec:	9b05      	ldr	r3, [sp, #20]
 800aaee:	f1c0 001c 	rsb	r0, r0, #28
 800aaf2:	4403      	add	r3, r0
 800aaf4:	9305      	str	r3, [sp, #20]
 800aaf6:	9b06      	ldr	r3, [sp, #24]
 800aaf8:	4403      	add	r3, r0
 800aafa:	4405      	add	r5, r0
 800aafc:	9306      	str	r3, [sp, #24]
 800aafe:	9b05      	ldr	r3, [sp, #20]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	dd05      	ble.n	800ab10 <_dtoa_r+0x828>
 800ab04:	4651      	mov	r1, sl
 800ab06:	461a      	mov	r2, r3
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f000 fd39 	bl	800b580 <__lshift>
 800ab0e:	4682      	mov	sl, r0
 800ab10:	9b06      	ldr	r3, [sp, #24]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	dd05      	ble.n	800ab22 <_dtoa_r+0x83a>
 800ab16:	4631      	mov	r1, r6
 800ab18:	461a      	mov	r2, r3
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f000 fd30 	bl	800b580 <__lshift>
 800ab20:	4606      	mov	r6, r0
 800ab22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d072      	beq.n	800ac0e <_dtoa_r+0x926>
 800ab28:	4631      	mov	r1, r6
 800ab2a:	4650      	mov	r0, sl
 800ab2c:	f000 fd94 	bl	800b658 <__mcmp>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	da6c      	bge.n	800ac0e <_dtoa_r+0x926>
 800ab34:	2300      	movs	r3, #0
 800ab36:	4651      	mov	r1, sl
 800ab38:	220a      	movs	r2, #10
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f000 fb28 	bl	800b190 <__multadd>
 800ab40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab42:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab46:	4682      	mov	sl, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f000 81b0 	beq.w	800aeae <_dtoa_r+0xbc6>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	4639      	mov	r1, r7
 800ab52:	220a      	movs	r2, #10
 800ab54:	4620      	mov	r0, r4
 800ab56:	f000 fb1b 	bl	800b190 <__multadd>
 800ab5a:	9b01      	ldr	r3, [sp, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	4607      	mov	r7, r0
 800ab60:	f300 8096 	bgt.w	800ac90 <_dtoa_r+0x9a8>
 800ab64:	9b07      	ldr	r3, [sp, #28]
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	dc59      	bgt.n	800ac1e <_dtoa_r+0x936>
 800ab6a:	e091      	b.n	800ac90 <_dtoa_r+0x9a8>
 800ab6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab72:	e758      	b.n	800aa26 <_dtoa_r+0x73e>
 800ab74:	9b04      	ldr	r3, [sp, #16]
 800ab76:	1e5e      	subs	r6, r3, #1
 800ab78:	9b08      	ldr	r3, [sp, #32]
 800ab7a:	42b3      	cmp	r3, r6
 800ab7c:	bfbf      	itttt	lt
 800ab7e:	9b08      	ldrlt	r3, [sp, #32]
 800ab80:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ab82:	9608      	strlt	r6, [sp, #32]
 800ab84:	1af3      	sublt	r3, r6, r3
 800ab86:	bfb4      	ite	lt
 800ab88:	18d2      	addlt	r2, r2, r3
 800ab8a:	1b9e      	subge	r6, r3, r6
 800ab8c:	9b04      	ldr	r3, [sp, #16]
 800ab8e:	bfbc      	itt	lt
 800ab90:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ab92:	2600      	movlt	r6, #0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	bfb7      	itett	lt
 800ab98:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ab9c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800aba0:	1a9d      	sublt	r5, r3, r2
 800aba2:	2300      	movlt	r3, #0
 800aba4:	e741      	b.n	800aa2a <_dtoa_r+0x742>
 800aba6:	9e08      	ldr	r6, [sp, #32]
 800aba8:	9d05      	ldr	r5, [sp, #20]
 800abaa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800abac:	e748      	b.n	800aa40 <_dtoa_r+0x758>
 800abae:	9a08      	ldr	r2, [sp, #32]
 800abb0:	e770      	b.n	800aa94 <_dtoa_r+0x7ac>
 800abb2:	9b07      	ldr	r3, [sp, #28]
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	dc19      	bgt.n	800abec <_dtoa_r+0x904>
 800abb8:	9b02      	ldr	r3, [sp, #8]
 800abba:	b9bb      	cbnz	r3, 800abec <_dtoa_r+0x904>
 800abbc:	9b03      	ldr	r3, [sp, #12]
 800abbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abc2:	b99b      	cbnz	r3, 800abec <_dtoa_r+0x904>
 800abc4:	9b03      	ldr	r3, [sp, #12]
 800abc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abca:	0d1b      	lsrs	r3, r3, #20
 800abcc:	051b      	lsls	r3, r3, #20
 800abce:	b183      	cbz	r3, 800abf2 <_dtoa_r+0x90a>
 800abd0:	9b05      	ldr	r3, [sp, #20]
 800abd2:	3301      	adds	r3, #1
 800abd4:	9305      	str	r3, [sp, #20]
 800abd6:	9b06      	ldr	r3, [sp, #24]
 800abd8:	3301      	adds	r3, #1
 800abda:	9306      	str	r3, [sp, #24]
 800abdc:	f04f 0801 	mov.w	r8, #1
 800abe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f47f af6f 	bne.w	800aac6 <_dtoa_r+0x7de>
 800abe8:	2001      	movs	r0, #1
 800abea:	e774      	b.n	800aad6 <_dtoa_r+0x7ee>
 800abec:	f04f 0800 	mov.w	r8, #0
 800abf0:	e7f6      	b.n	800abe0 <_dtoa_r+0x8f8>
 800abf2:	4698      	mov	r8, r3
 800abf4:	e7f4      	b.n	800abe0 <_dtoa_r+0x8f8>
 800abf6:	d082      	beq.n	800aafe <_dtoa_r+0x816>
 800abf8:	9a05      	ldr	r2, [sp, #20]
 800abfa:	331c      	adds	r3, #28
 800abfc:	441a      	add	r2, r3
 800abfe:	9205      	str	r2, [sp, #20]
 800ac00:	9a06      	ldr	r2, [sp, #24]
 800ac02:	441a      	add	r2, r3
 800ac04:	441d      	add	r5, r3
 800ac06:	9206      	str	r2, [sp, #24]
 800ac08:	e779      	b.n	800aafe <_dtoa_r+0x816>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	e7f4      	b.n	800abf8 <_dtoa_r+0x910>
 800ac0e:	9b04      	ldr	r3, [sp, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	dc37      	bgt.n	800ac84 <_dtoa_r+0x99c>
 800ac14:	9b07      	ldr	r3, [sp, #28]
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	dd34      	ble.n	800ac84 <_dtoa_r+0x99c>
 800ac1a:	9b04      	ldr	r3, [sp, #16]
 800ac1c:	9301      	str	r3, [sp, #4]
 800ac1e:	9b01      	ldr	r3, [sp, #4]
 800ac20:	b963      	cbnz	r3, 800ac3c <_dtoa_r+0x954>
 800ac22:	4631      	mov	r1, r6
 800ac24:	2205      	movs	r2, #5
 800ac26:	4620      	mov	r0, r4
 800ac28:	f000 fab2 	bl	800b190 <__multadd>
 800ac2c:	4601      	mov	r1, r0
 800ac2e:	4606      	mov	r6, r0
 800ac30:	4650      	mov	r0, sl
 800ac32:	f000 fd11 	bl	800b658 <__mcmp>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	f73f adbb 	bgt.w	800a7b2 <_dtoa_r+0x4ca>
 800ac3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac3e:	9d00      	ldr	r5, [sp, #0]
 800ac40:	ea6f 0b03 	mvn.w	fp, r3
 800ac44:	f04f 0800 	mov.w	r8, #0
 800ac48:	4631      	mov	r1, r6
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f000 fa7e 	bl	800b14c <_Bfree>
 800ac50:	2f00      	cmp	r7, #0
 800ac52:	f43f aeab 	beq.w	800a9ac <_dtoa_r+0x6c4>
 800ac56:	f1b8 0f00 	cmp.w	r8, #0
 800ac5a:	d005      	beq.n	800ac68 <_dtoa_r+0x980>
 800ac5c:	45b8      	cmp	r8, r7
 800ac5e:	d003      	beq.n	800ac68 <_dtoa_r+0x980>
 800ac60:	4641      	mov	r1, r8
 800ac62:	4620      	mov	r0, r4
 800ac64:	f000 fa72 	bl	800b14c <_Bfree>
 800ac68:	4639      	mov	r1, r7
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	f000 fa6e 	bl	800b14c <_Bfree>
 800ac70:	e69c      	b.n	800a9ac <_dtoa_r+0x6c4>
 800ac72:	2600      	movs	r6, #0
 800ac74:	4637      	mov	r7, r6
 800ac76:	e7e1      	b.n	800ac3c <_dtoa_r+0x954>
 800ac78:	46bb      	mov	fp, r7
 800ac7a:	4637      	mov	r7, r6
 800ac7c:	e599      	b.n	800a7b2 <_dtoa_r+0x4ca>
 800ac7e:	bf00      	nop
 800ac80:	40240000 	.word	0x40240000
 800ac84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	f000 80c8 	beq.w	800ae1c <_dtoa_r+0xb34>
 800ac8c:	9b04      	ldr	r3, [sp, #16]
 800ac8e:	9301      	str	r3, [sp, #4]
 800ac90:	2d00      	cmp	r5, #0
 800ac92:	dd05      	ble.n	800aca0 <_dtoa_r+0x9b8>
 800ac94:	4639      	mov	r1, r7
 800ac96:	462a      	mov	r2, r5
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f000 fc71 	bl	800b580 <__lshift>
 800ac9e:	4607      	mov	r7, r0
 800aca0:	f1b8 0f00 	cmp.w	r8, #0
 800aca4:	d05b      	beq.n	800ad5e <_dtoa_r+0xa76>
 800aca6:	6879      	ldr	r1, [r7, #4]
 800aca8:	4620      	mov	r0, r4
 800acaa:	f000 fa0f 	bl	800b0cc <_Balloc>
 800acae:	4605      	mov	r5, r0
 800acb0:	b928      	cbnz	r0, 800acbe <_dtoa_r+0x9d6>
 800acb2:	4b83      	ldr	r3, [pc, #524]	; (800aec0 <_dtoa_r+0xbd8>)
 800acb4:	4602      	mov	r2, r0
 800acb6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800acba:	f7ff bb2e 	b.w	800a31a <_dtoa_r+0x32>
 800acbe:	693a      	ldr	r2, [r7, #16]
 800acc0:	3202      	adds	r2, #2
 800acc2:	0092      	lsls	r2, r2, #2
 800acc4:	f107 010c 	add.w	r1, r7, #12
 800acc8:	300c      	adds	r0, #12
 800acca:	f7ff fa6f 	bl	800a1ac <memcpy>
 800acce:	2201      	movs	r2, #1
 800acd0:	4629      	mov	r1, r5
 800acd2:	4620      	mov	r0, r4
 800acd4:	f000 fc54 	bl	800b580 <__lshift>
 800acd8:	9b00      	ldr	r3, [sp, #0]
 800acda:	3301      	adds	r3, #1
 800acdc:	9304      	str	r3, [sp, #16]
 800acde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ace2:	4413      	add	r3, r2
 800ace4:	9308      	str	r3, [sp, #32]
 800ace6:	9b02      	ldr	r3, [sp, #8]
 800ace8:	f003 0301 	and.w	r3, r3, #1
 800acec:	46b8      	mov	r8, r7
 800acee:	9306      	str	r3, [sp, #24]
 800acf0:	4607      	mov	r7, r0
 800acf2:	9b04      	ldr	r3, [sp, #16]
 800acf4:	4631      	mov	r1, r6
 800acf6:	3b01      	subs	r3, #1
 800acf8:	4650      	mov	r0, sl
 800acfa:	9301      	str	r3, [sp, #4]
 800acfc:	f7ff fa6a 	bl	800a1d4 <quorem>
 800ad00:	4641      	mov	r1, r8
 800ad02:	9002      	str	r0, [sp, #8]
 800ad04:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ad08:	4650      	mov	r0, sl
 800ad0a:	f000 fca5 	bl	800b658 <__mcmp>
 800ad0e:	463a      	mov	r2, r7
 800ad10:	9005      	str	r0, [sp, #20]
 800ad12:	4631      	mov	r1, r6
 800ad14:	4620      	mov	r0, r4
 800ad16:	f000 fcbb 	bl	800b690 <__mdiff>
 800ad1a:	68c2      	ldr	r2, [r0, #12]
 800ad1c:	4605      	mov	r5, r0
 800ad1e:	bb02      	cbnz	r2, 800ad62 <_dtoa_r+0xa7a>
 800ad20:	4601      	mov	r1, r0
 800ad22:	4650      	mov	r0, sl
 800ad24:	f000 fc98 	bl	800b658 <__mcmp>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	4629      	mov	r1, r5
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	9209      	str	r2, [sp, #36]	; 0x24
 800ad30:	f000 fa0c 	bl	800b14c <_Bfree>
 800ad34:	9b07      	ldr	r3, [sp, #28]
 800ad36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad38:	9d04      	ldr	r5, [sp, #16]
 800ad3a:	ea43 0102 	orr.w	r1, r3, r2
 800ad3e:	9b06      	ldr	r3, [sp, #24]
 800ad40:	4319      	orrs	r1, r3
 800ad42:	d110      	bne.n	800ad66 <_dtoa_r+0xa7e>
 800ad44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ad48:	d029      	beq.n	800ad9e <_dtoa_r+0xab6>
 800ad4a:	9b05      	ldr	r3, [sp, #20]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	dd02      	ble.n	800ad56 <_dtoa_r+0xa6e>
 800ad50:	9b02      	ldr	r3, [sp, #8]
 800ad52:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ad56:	9b01      	ldr	r3, [sp, #4]
 800ad58:	f883 9000 	strb.w	r9, [r3]
 800ad5c:	e774      	b.n	800ac48 <_dtoa_r+0x960>
 800ad5e:	4638      	mov	r0, r7
 800ad60:	e7ba      	b.n	800acd8 <_dtoa_r+0x9f0>
 800ad62:	2201      	movs	r2, #1
 800ad64:	e7e1      	b.n	800ad2a <_dtoa_r+0xa42>
 800ad66:	9b05      	ldr	r3, [sp, #20]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	db04      	blt.n	800ad76 <_dtoa_r+0xa8e>
 800ad6c:	9907      	ldr	r1, [sp, #28]
 800ad6e:	430b      	orrs	r3, r1
 800ad70:	9906      	ldr	r1, [sp, #24]
 800ad72:	430b      	orrs	r3, r1
 800ad74:	d120      	bne.n	800adb8 <_dtoa_r+0xad0>
 800ad76:	2a00      	cmp	r2, #0
 800ad78:	dded      	ble.n	800ad56 <_dtoa_r+0xa6e>
 800ad7a:	4651      	mov	r1, sl
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f000 fbfe 	bl	800b580 <__lshift>
 800ad84:	4631      	mov	r1, r6
 800ad86:	4682      	mov	sl, r0
 800ad88:	f000 fc66 	bl	800b658 <__mcmp>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	dc03      	bgt.n	800ad98 <_dtoa_r+0xab0>
 800ad90:	d1e1      	bne.n	800ad56 <_dtoa_r+0xa6e>
 800ad92:	f019 0f01 	tst.w	r9, #1
 800ad96:	d0de      	beq.n	800ad56 <_dtoa_r+0xa6e>
 800ad98:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ad9c:	d1d8      	bne.n	800ad50 <_dtoa_r+0xa68>
 800ad9e:	9a01      	ldr	r2, [sp, #4]
 800ada0:	2339      	movs	r3, #57	; 0x39
 800ada2:	7013      	strb	r3, [r2, #0]
 800ada4:	462b      	mov	r3, r5
 800ada6:	461d      	mov	r5, r3
 800ada8:	3b01      	subs	r3, #1
 800adaa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800adae:	2a39      	cmp	r2, #57	; 0x39
 800adb0:	d06c      	beq.n	800ae8c <_dtoa_r+0xba4>
 800adb2:	3201      	adds	r2, #1
 800adb4:	701a      	strb	r2, [r3, #0]
 800adb6:	e747      	b.n	800ac48 <_dtoa_r+0x960>
 800adb8:	2a00      	cmp	r2, #0
 800adba:	dd07      	ble.n	800adcc <_dtoa_r+0xae4>
 800adbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800adc0:	d0ed      	beq.n	800ad9e <_dtoa_r+0xab6>
 800adc2:	9a01      	ldr	r2, [sp, #4]
 800adc4:	f109 0301 	add.w	r3, r9, #1
 800adc8:	7013      	strb	r3, [r2, #0]
 800adca:	e73d      	b.n	800ac48 <_dtoa_r+0x960>
 800adcc:	9b04      	ldr	r3, [sp, #16]
 800adce:	9a08      	ldr	r2, [sp, #32]
 800add0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800add4:	4293      	cmp	r3, r2
 800add6:	d043      	beq.n	800ae60 <_dtoa_r+0xb78>
 800add8:	4651      	mov	r1, sl
 800adda:	2300      	movs	r3, #0
 800addc:	220a      	movs	r2, #10
 800adde:	4620      	mov	r0, r4
 800ade0:	f000 f9d6 	bl	800b190 <__multadd>
 800ade4:	45b8      	cmp	r8, r7
 800ade6:	4682      	mov	sl, r0
 800ade8:	f04f 0300 	mov.w	r3, #0
 800adec:	f04f 020a 	mov.w	r2, #10
 800adf0:	4641      	mov	r1, r8
 800adf2:	4620      	mov	r0, r4
 800adf4:	d107      	bne.n	800ae06 <_dtoa_r+0xb1e>
 800adf6:	f000 f9cb 	bl	800b190 <__multadd>
 800adfa:	4680      	mov	r8, r0
 800adfc:	4607      	mov	r7, r0
 800adfe:	9b04      	ldr	r3, [sp, #16]
 800ae00:	3301      	adds	r3, #1
 800ae02:	9304      	str	r3, [sp, #16]
 800ae04:	e775      	b.n	800acf2 <_dtoa_r+0xa0a>
 800ae06:	f000 f9c3 	bl	800b190 <__multadd>
 800ae0a:	4639      	mov	r1, r7
 800ae0c:	4680      	mov	r8, r0
 800ae0e:	2300      	movs	r3, #0
 800ae10:	220a      	movs	r2, #10
 800ae12:	4620      	mov	r0, r4
 800ae14:	f000 f9bc 	bl	800b190 <__multadd>
 800ae18:	4607      	mov	r7, r0
 800ae1a:	e7f0      	b.n	800adfe <_dtoa_r+0xb16>
 800ae1c:	9b04      	ldr	r3, [sp, #16]
 800ae1e:	9301      	str	r3, [sp, #4]
 800ae20:	9d00      	ldr	r5, [sp, #0]
 800ae22:	4631      	mov	r1, r6
 800ae24:	4650      	mov	r0, sl
 800ae26:	f7ff f9d5 	bl	800a1d4 <quorem>
 800ae2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ae2e:	9b00      	ldr	r3, [sp, #0]
 800ae30:	f805 9b01 	strb.w	r9, [r5], #1
 800ae34:	1aea      	subs	r2, r5, r3
 800ae36:	9b01      	ldr	r3, [sp, #4]
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	dd07      	ble.n	800ae4c <_dtoa_r+0xb64>
 800ae3c:	4651      	mov	r1, sl
 800ae3e:	2300      	movs	r3, #0
 800ae40:	220a      	movs	r2, #10
 800ae42:	4620      	mov	r0, r4
 800ae44:	f000 f9a4 	bl	800b190 <__multadd>
 800ae48:	4682      	mov	sl, r0
 800ae4a:	e7ea      	b.n	800ae22 <_dtoa_r+0xb3a>
 800ae4c:	9b01      	ldr	r3, [sp, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	bfc8      	it	gt
 800ae52:	461d      	movgt	r5, r3
 800ae54:	9b00      	ldr	r3, [sp, #0]
 800ae56:	bfd8      	it	le
 800ae58:	2501      	movle	r5, #1
 800ae5a:	441d      	add	r5, r3
 800ae5c:	f04f 0800 	mov.w	r8, #0
 800ae60:	4651      	mov	r1, sl
 800ae62:	2201      	movs	r2, #1
 800ae64:	4620      	mov	r0, r4
 800ae66:	f000 fb8b 	bl	800b580 <__lshift>
 800ae6a:	4631      	mov	r1, r6
 800ae6c:	4682      	mov	sl, r0
 800ae6e:	f000 fbf3 	bl	800b658 <__mcmp>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	dc96      	bgt.n	800ada4 <_dtoa_r+0xabc>
 800ae76:	d102      	bne.n	800ae7e <_dtoa_r+0xb96>
 800ae78:	f019 0f01 	tst.w	r9, #1
 800ae7c:	d192      	bne.n	800ada4 <_dtoa_r+0xabc>
 800ae7e:	462b      	mov	r3, r5
 800ae80:	461d      	mov	r5, r3
 800ae82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae86:	2a30      	cmp	r2, #48	; 0x30
 800ae88:	d0fa      	beq.n	800ae80 <_dtoa_r+0xb98>
 800ae8a:	e6dd      	b.n	800ac48 <_dtoa_r+0x960>
 800ae8c:	9a00      	ldr	r2, [sp, #0]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d189      	bne.n	800ada6 <_dtoa_r+0xabe>
 800ae92:	f10b 0b01 	add.w	fp, fp, #1
 800ae96:	2331      	movs	r3, #49	; 0x31
 800ae98:	e796      	b.n	800adc8 <_dtoa_r+0xae0>
 800ae9a:	4b0a      	ldr	r3, [pc, #40]	; (800aec4 <_dtoa_r+0xbdc>)
 800ae9c:	f7ff ba99 	b.w	800a3d2 <_dtoa_r+0xea>
 800aea0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f47f aa6d 	bne.w	800a382 <_dtoa_r+0x9a>
 800aea8:	4b07      	ldr	r3, [pc, #28]	; (800aec8 <_dtoa_r+0xbe0>)
 800aeaa:	f7ff ba92 	b.w	800a3d2 <_dtoa_r+0xea>
 800aeae:	9b01      	ldr	r3, [sp, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	dcb5      	bgt.n	800ae20 <_dtoa_r+0xb38>
 800aeb4:	9b07      	ldr	r3, [sp, #28]
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	f73f aeb1 	bgt.w	800ac1e <_dtoa_r+0x936>
 800aebc:	e7b0      	b.n	800ae20 <_dtoa_r+0xb38>
 800aebe:	bf00      	nop
 800aec0:	0800da29 	.word	0x0800da29
 800aec4:	0800d984 	.word	0x0800d984
 800aec8:	0800d9ad 	.word	0x0800d9ad

0800aecc <_free_r>:
 800aecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aece:	2900      	cmp	r1, #0
 800aed0:	d044      	beq.n	800af5c <_free_r+0x90>
 800aed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aed6:	9001      	str	r0, [sp, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f1a1 0404 	sub.w	r4, r1, #4
 800aede:	bfb8      	it	lt
 800aee0:	18e4      	addlt	r4, r4, r3
 800aee2:	f000 f8e7 	bl	800b0b4 <__malloc_lock>
 800aee6:	4a1e      	ldr	r2, [pc, #120]	; (800af60 <_free_r+0x94>)
 800aee8:	9801      	ldr	r0, [sp, #4]
 800aeea:	6813      	ldr	r3, [r2, #0]
 800aeec:	b933      	cbnz	r3, 800aefc <_free_r+0x30>
 800aeee:	6063      	str	r3, [r4, #4]
 800aef0:	6014      	str	r4, [r2, #0]
 800aef2:	b003      	add	sp, #12
 800aef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aef8:	f000 b8e2 	b.w	800b0c0 <__malloc_unlock>
 800aefc:	42a3      	cmp	r3, r4
 800aefe:	d908      	bls.n	800af12 <_free_r+0x46>
 800af00:	6825      	ldr	r5, [r4, #0]
 800af02:	1961      	adds	r1, r4, r5
 800af04:	428b      	cmp	r3, r1
 800af06:	bf01      	itttt	eq
 800af08:	6819      	ldreq	r1, [r3, #0]
 800af0a:	685b      	ldreq	r3, [r3, #4]
 800af0c:	1949      	addeq	r1, r1, r5
 800af0e:	6021      	streq	r1, [r4, #0]
 800af10:	e7ed      	b.n	800aeee <_free_r+0x22>
 800af12:	461a      	mov	r2, r3
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	b10b      	cbz	r3, 800af1c <_free_r+0x50>
 800af18:	42a3      	cmp	r3, r4
 800af1a:	d9fa      	bls.n	800af12 <_free_r+0x46>
 800af1c:	6811      	ldr	r1, [r2, #0]
 800af1e:	1855      	adds	r5, r2, r1
 800af20:	42a5      	cmp	r5, r4
 800af22:	d10b      	bne.n	800af3c <_free_r+0x70>
 800af24:	6824      	ldr	r4, [r4, #0]
 800af26:	4421      	add	r1, r4
 800af28:	1854      	adds	r4, r2, r1
 800af2a:	42a3      	cmp	r3, r4
 800af2c:	6011      	str	r1, [r2, #0]
 800af2e:	d1e0      	bne.n	800aef2 <_free_r+0x26>
 800af30:	681c      	ldr	r4, [r3, #0]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	6053      	str	r3, [r2, #4]
 800af36:	440c      	add	r4, r1
 800af38:	6014      	str	r4, [r2, #0]
 800af3a:	e7da      	b.n	800aef2 <_free_r+0x26>
 800af3c:	d902      	bls.n	800af44 <_free_r+0x78>
 800af3e:	230c      	movs	r3, #12
 800af40:	6003      	str	r3, [r0, #0]
 800af42:	e7d6      	b.n	800aef2 <_free_r+0x26>
 800af44:	6825      	ldr	r5, [r4, #0]
 800af46:	1961      	adds	r1, r4, r5
 800af48:	428b      	cmp	r3, r1
 800af4a:	bf04      	itt	eq
 800af4c:	6819      	ldreq	r1, [r3, #0]
 800af4e:	685b      	ldreq	r3, [r3, #4]
 800af50:	6063      	str	r3, [r4, #4]
 800af52:	bf04      	itt	eq
 800af54:	1949      	addeq	r1, r1, r5
 800af56:	6021      	streq	r1, [r4, #0]
 800af58:	6054      	str	r4, [r2, #4]
 800af5a:	e7ca      	b.n	800aef2 <_free_r+0x26>
 800af5c:	b003      	add	sp, #12
 800af5e:	bd30      	pop	{r4, r5, pc}
 800af60:	200023e4 	.word	0x200023e4

0800af64 <malloc>:
 800af64:	4b02      	ldr	r3, [pc, #8]	; (800af70 <malloc+0xc>)
 800af66:	4601      	mov	r1, r0
 800af68:	6818      	ldr	r0, [r3, #0]
 800af6a:	f000 b823 	b.w	800afb4 <_malloc_r>
 800af6e:	bf00      	nop
 800af70:	20000154 	.word	0x20000154

0800af74 <sbrk_aligned>:
 800af74:	b570      	push	{r4, r5, r6, lr}
 800af76:	4e0e      	ldr	r6, [pc, #56]	; (800afb0 <sbrk_aligned+0x3c>)
 800af78:	460c      	mov	r4, r1
 800af7a:	6831      	ldr	r1, [r6, #0]
 800af7c:	4605      	mov	r5, r0
 800af7e:	b911      	cbnz	r1, 800af86 <sbrk_aligned+0x12>
 800af80:	f002 f816 	bl	800cfb0 <_sbrk_r>
 800af84:	6030      	str	r0, [r6, #0]
 800af86:	4621      	mov	r1, r4
 800af88:	4628      	mov	r0, r5
 800af8a:	f002 f811 	bl	800cfb0 <_sbrk_r>
 800af8e:	1c43      	adds	r3, r0, #1
 800af90:	d00a      	beq.n	800afa8 <sbrk_aligned+0x34>
 800af92:	1cc4      	adds	r4, r0, #3
 800af94:	f024 0403 	bic.w	r4, r4, #3
 800af98:	42a0      	cmp	r0, r4
 800af9a:	d007      	beq.n	800afac <sbrk_aligned+0x38>
 800af9c:	1a21      	subs	r1, r4, r0
 800af9e:	4628      	mov	r0, r5
 800afa0:	f002 f806 	bl	800cfb0 <_sbrk_r>
 800afa4:	3001      	adds	r0, #1
 800afa6:	d101      	bne.n	800afac <sbrk_aligned+0x38>
 800afa8:	f04f 34ff 	mov.w	r4, #4294967295
 800afac:	4620      	mov	r0, r4
 800afae:	bd70      	pop	{r4, r5, r6, pc}
 800afb0:	200023e8 	.word	0x200023e8

0800afb4 <_malloc_r>:
 800afb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afb8:	1ccd      	adds	r5, r1, #3
 800afba:	f025 0503 	bic.w	r5, r5, #3
 800afbe:	3508      	adds	r5, #8
 800afc0:	2d0c      	cmp	r5, #12
 800afc2:	bf38      	it	cc
 800afc4:	250c      	movcc	r5, #12
 800afc6:	2d00      	cmp	r5, #0
 800afc8:	4607      	mov	r7, r0
 800afca:	db01      	blt.n	800afd0 <_malloc_r+0x1c>
 800afcc:	42a9      	cmp	r1, r5
 800afce:	d905      	bls.n	800afdc <_malloc_r+0x28>
 800afd0:	230c      	movs	r3, #12
 800afd2:	603b      	str	r3, [r7, #0]
 800afd4:	2600      	movs	r6, #0
 800afd6:	4630      	mov	r0, r6
 800afd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b0b0 <_malloc_r+0xfc>
 800afe0:	f000 f868 	bl	800b0b4 <__malloc_lock>
 800afe4:	f8d8 3000 	ldr.w	r3, [r8]
 800afe8:	461c      	mov	r4, r3
 800afea:	bb5c      	cbnz	r4, 800b044 <_malloc_r+0x90>
 800afec:	4629      	mov	r1, r5
 800afee:	4638      	mov	r0, r7
 800aff0:	f7ff ffc0 	bl	800af74 <sbrk_aligned>
 800aff4:	1c43      	adds	r3, r0, #1
 800aff6:	4604      	mov	r4, r0
 800aff8:	d155      	bne.n	800b0a6 <_malloc_r+0xf2>
 800affa:	f8d8 4000 	ldr.w	r4, [r8]
 800affe:	4626      	mov	r6, r4
 800b000:	2e00      	cmp	r6, #0
 800b002:	d145      	bne.n	800b090 <_malloc_r+0xdc>
 800b004:	2c00      	cmp	r4, #0
 800b006:	d048      	beq.n	800b09a <_malloc_r+0xe6>
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	4631      	mov	r1, r6
 800b00c:	4638      	mov	r0, r7
 800b00e:	eb04 0903 	add.w	r9, r4, r3
 800b012:	f001 ffcd 	bl	800cfb0 <_sbrk_r>
 800b016:	4581      	cmp	r9, r0
 800b018:	d13f      	bne.n	800b09a <_malloc_r+0xe6>
 800b01a:	6821      	ldr	r1, [r4, #0]
 800b01c:	1a6d      	subs	r5, r5, r1
 800b01e:	4629      	mov	r1, r5
 800b020:	4638      	mov	r0, r7
 800b022:	f7ff ffa7 	bl	800af74 <sbrk_aligned>
 800b026:	3001      	adds	r0, #1
 800b028:	d037      	beq.n	800b09a <_malloc_r+0xe6>
 800b02a:	6823      	ldr	r3, [r4, #0]
 800b02c:	442b      	add	r3, r5
 800b02e:	6023      	str	r3, [r4, #0]
 800b030:	f8d8 3000 	ldr.w	r3, [r8]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d038      	beq.n	800b0aa <_malloc_r+0xf6>
 800b038:	685a      	ldr	r2, [r3, #4]
 800b03a:	42a2      	cmp	r2, r4
 800b03c:	d12b      	bne.n	800b096 <_malloc_r+0xe2>
 800b03e:	2200      	movs	r2, #0
 800b040:	605a      	str	r2, [r3, #4]
 800b042:	e00f      	b.n	800b064 <_malloc_r+0xb0>
 800b044:	6822      	ldr	r2, [r4, #0]
 800b046:	1b52      	subs	r2, r2, r5
 800b048:	d41f      	bmi.n	800b08a <_malloc_r+0xd6>
 800b04a:	2a0b      	cmp	r2, #11
 800b04c:	d917      	bls.n	800b07e <_malloc_r+0xca>
 800b04e:	1961      	adds	r1, r4, r5
 800b050:	42a3      	cmp	r3, r4
 800b052:	6025      	str	r5, [r4, #0]
 800b054:	bf18      	it	ne
 800b056:	6059      	strne	r1, [r3, #4]
 800b058:	6863      	ldr	r3, [r4, #4]
 800b05a:	bf08      	it	eq
 800b05c:	f8c8 1000 	streq.w	r1, [r8]
 800b060:	5162      	str	r2, [r4, r5]
 800b062:	604b      	str	r3, [r1, #4]
 800b064:	4638      	mov	r0, r7
 800b066:	f104 060b 	add.w	r6, r4, #11
 800b06a:	f000 f829 	bl	800b0c0 <__malloc_unlock>
 800b06e:	f026 0607 	bic.w	r6, r6, #7
 800b072:	1d23      	adds	r3, r4, #4
 800b074:	1af2      	subs	r2, r6, r3
 800b076:	d0ae      	beq.n	800afd6 <_malloc_r+0x22>
 800b078:	1b9b      	subs	r3, r3, r6
 800b07a:	50a3      	str	r3, [r4, r2]
 800b07c:	e7ab      	b.n	800afd6 <_malloc_r+0x22>
 800b07e:	42a3      	cmp	r3, r4
 800b080:	6862      	ldr	r2, [r4, #4]
 800b082:	d1dd      	bne.n	800b040 <_malloc_r+0x8c>
 800b084:	f8c8 2000 	str.w	r2, [r8]
 800b088:	e7ec      	b.n	800b064 <_malloc_r+0xb0>
 800b08a:	4623      	mov	r3, r4
 800b08c:	6864      	ldr	r4, [r4, #4]
 800b08e:	e7ac      	b.n	800afea <_malloc_r+0x36>
 800b090:	4634      	mov	r4, r6
 800b092:	6876      	ldr	r6, [r6, #4]
 800b094:	e7b4      	b.n	800b000 <_malloc_r+0x4c>
 800b096:	4613      	mov	r3, r2
 800b098:	e7cc      	b.n	800b034 <_malloc_r+0x80>
 800b09a:	230c      	movs	r3, #12
 800b09c:	603b      	str	r3, [r7, #0]
 800b09e:	4638      	mov	r0, r7
 800b0a0:	f000 f80e 	bl	800b0c0 <__malloc_unlock>
 800b0a4:	e797      	b.n	800afd6 <_malloc_r+0x22>
 800b0a6:	6025      	str	r5, [r4, #0]
 800b0a8:	e7dc      	b.n	800b064 <_malloc_r+0xb0>
 800b0aa:	605b      	str	r3, [r3, #4]
 800b0ac:	deff      	udf	#255	; 0xff
 800b0ae:	bf00      	nop
 800b0b0:	200023e4 	.word	0x200023e4

0800b0b4 <__malloc_lock>:
 800b0b4:	4801      	ldr	r0, [pc, #4]	; (800b0bc <__malloc_lock+0x8>)
 800b0b6:	f7ff b877 	b.w	800a1a8 <__retarget_lock_acquire_recursive>
 800b0ba:	bf00      	nop
 800b0bc:	200023e0 	.word	0x200023e0

0800b0c0 <__malloc_unlock>:
 800b0c0:	4801      	ldr	r0, [pc, #4]	; (800b0c8 <__malloc_unlock+0x8>)
 800b0c2:	f7ff b872 	b.w	800a1aa <__retarget_lock_release_recursive>
 800b0c6:	bf00      	nop
 800b0c8:	200023e0 	.word	0x200023e0

0800b0cc <_Balloc>:
 800b0cc:	b570      	push	{r4, r5, r6, lr}
 800b0ce:	69c6      	ldr	r6, [r0, #28]
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	460d      	mov	r5, r1
 800b0d4:	b976      	cbnz	r6, 800b0f4 <_Balloc+0x28>
 800b0d6:	2010      	movs	r0, #16
 800b0d8:	f7ff ff44 	bl	800af64 <malloc>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	61e0      	str	r0, [r4, #28]
 800b0e0:	b920      	cbnz	r0, 800b0ec <_Balloc+0x20>
 800b0e2:	4b18      	ldr	r3, [pc, #96]	; (800b144 <_Balloc+0x78>)
 800b0e4:	4818      	ldr	r0, [pc, #96]	; (800b148 <_Balloc+0x7c>)
 800b0e6:	216b      	movs	r1, #107	; 0x6b
 800b0e8:	f001 ff7a 	bl	800cfe0 <__assert_func>
 800b0ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0f0:	6006      	str	r6, [r0, #0]
 800b0f2:	60c6      	str	r6, [r0, #12]
 800b0f4:	69e6      	ldr	r6, [r4, #28]
 800b0f6:	68f3      	ldr	r3, [r6, #12]
 800b0f8:	b183      	cbz	r3, 800b11c <_Balloc+0x50>
 800b0fa:	69e3      	ldr	r3, [r4, #28]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b102:	b9b8      	cbnz	r0, 800b134 <_Balloc+0x68>
 800b104:	2101      	movs	r1, #1
 800b106:	fa01 f605 	lsl.w	r6, r1, r5
 800b10a:	1d72      	adds	r2, r6, #5
 800b10c:	0092      	lsls	r2, r2, #2
 800b10e:	4620      	mov	r0, r4
 800b110:	f001 ff84 	bl	800d01c <_calloc_r>
 800b114:	b160      	cbz	r0, 800b130 <_Balloc+0x64>
 800b116:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b11a:	e00e      	b.n	800b13a <_Balloc+0x6e>
 800b11c:	2221      	movs	r2, #33	; 0x21
 800b11e:	2104      	movs	r1, #4
 800b120:	4620      	mov	r0, r4
 800b122:	f001 ff7b 	bl	800d01c <_calloc_r>
 800b126:	69e3      	ldr	r3, [r4, #28]
 800b128:	60f0      	str	r0, [r6, #12]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1e4      	bne.n	800b0fa <_Balloc+0x2e>
 800b130:	2000      	movs	r0, #0
 800b132:	bd70      	pop	{r4, r5, r6, pc}
 800b134:	6802      	ldr	r2, [r0, #0]
 800b136:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b13a:	2300      	movs	r3, #0
 800b13c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b140:	e7f7      	b.n	800b132 <_Balloc+0x66>
 800b142:	bf00      	nop
 800b144:	0800d9ba 	.word	0x0800d9ba
 800b148:	0800da3a 	.word	0x0800da3a

0800b14c <_Bfree>:
 800b14c:	b570      	push	{r4, r5, r6, lr}
 800b14e:	69c6      	ldr	r6, [r0, #28]
 800b150:	4605      	mov	r5, r0
 800b152:	460c      	mov	r4, r1
 800b154:	b976      	cbnz	r6, 800b174 <_Bfree+0x28>
 800b156:	2010      	movs	r0, #16
 800b158:	f7ff ff04 	bl	800af64 <malloc>
 800b15c:	4602      	mov	r2, r0
 800b15e:	61e8      	str	r0, [r5, #28]
 800b160:	b920      	cbnz	r0, 800b16c <_Bfree+0x20>
 800b162:	4b09      	ldr	r3, [pc, #36]	; (800b188 <_Bfree+0x3c>)
 800b164:	4809      	ldr	r0, [pc, #36]	; (800b18c <_Bfree+0x40>)
 800b166:	218f      	movs	r1, #143	; 0x8f
 800b168:	f001 ff3a 	bl	800cfe0 <__assert_func>
 800b16c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b170:	6006      	str	r6, [r0, #0]
 800b172:	60c6      	str	r6, [r0, #12]
 800b174:	b13c      	cbz	r4, 800b186 <_Bfree+0x3a>
 800b176:	69eb      	ldr	r3, [r5, #28]
 800b178:	6862      	ldr	r2, [r4, #4]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b180:	6021      	str	r1, [r4, #0]
 800b182:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b186:	bd70      	pop	{r4, r5, r6, pc}
 800b188:	0800d9ba 	.word	0x0800d9ba
 800b18c:	0800da3a 	.word	0x0800da3a

0800b190 <__multadd>:
 800b190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b194:	690d      	ldr	r5, [r1, #16]
 800b196:	4607      	mov	r7, r0
 800b198:	460c      	mov	r4, r1
 800b19a:	461e      	mov	r6, r3
 800b19c:	f101 0c14 	add.w	ip, r1, #20
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	f8dc 3000 	ldr.w	r3, [ip]
 800b1a6:	b299      	uxth	r1, r3
 800b1a8:	fb02 6101 	mla	r1, r2, r1, r6
 800b1ac:	0c1e      	lsrs	r6, r3, #16
 800b1ae:	0c0b      	lsrs	r3, r1, #16
 800b1b0:	fb02 3306 	mla	r3, r2, r6, r3
 800b1b4:	b289      	uxth	r1, r1
 800b1b6:	3001      	adds	r0, #1
 800b1b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b1bc:	4285      	cmp	r5, r0
 800b1be:	f84c 1b04 	str.w	r1, [ip], #4
 800b1c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b1c6:	dcec      	bgt.n	800b1a2 <__multadd+0x12>
 800b1c8:	b30e      	cbz	r6, 800b20e <__multadd+0x7e>
 800b1ca:	68a3      	ldr	r3, [r4, #8]
 800b1cc:	42ab      	cmp	r3, r5
 800b1ce:	dc19      	bgt.n	800b204 <__multadd+0x74>
 800b1d0:	6861      	ldr	r1, [r4, #4]
 800b1d2:	4638      	mov	r0, r7
 800b1d4:	3101      	adds	r1, #1
 800b1d6:	f7ff ff79 	bl	800b0cc <_Balloc>
 800b1da:	4680      	mov	r8, r0
 800b1dc:	b928      	cbnz	r0, 800b1ea <__multadd+0x5a>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	4b0c      	ldr	r3, [pc, #48]	; (800b214 <__multadd+0x84>)
 800b1e2:	480d      	ldr	r0, [pc, #52]	; (800b218 <__multadd+0x88>)
 800b1e4:	21ba      	movs	r1, #186	; 0xba
 800b1e6:	f001 fefb 	bl	800cfe0 <__assert_func>
 800b1ea:	6922      	ldr	r2, [r4, #16]
 800b1ec:	3202      	adds	r2, #2
 800b1ee:	f104 010c 	add.w	r1, r4, #12
 800b1f2:	0092      	lsls	r2, r2, #2
 800b1f4:	300c      	adds	r0, #12
 800b1f6:	f7fe ffd9 	bl	800a1ac <memcpy>
 800b1fa:	4621      	mov	r1, r4
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	f7ff ffa5 	bl	800b14c <_Bfree>
 800b202:	4644      	mov	r4, r8
 800b204:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b208:	3501      	adds	r5, #1
 800b20a:	615e      	str	r6, [r3, #20]
 800b20c:	6125      	str	r5, [r4, #16]
 800b20e:	4620      	mov	r0, r4
 800b210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b214:	0800da29 	.word	0x0800da29
 800b218:	0800da3a 	.word	0x0800da3a

0800b21c <__s2b>:
 800b21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b220:	460c      	mov	r4, r1
 800b222:	4615      	mov	r5, r2
 800b224:	461f      	mov	r7, r3
 800b226:	2209      	movs	r2, #9
 800b228:	3308      	adds	r3, #8
 800b22a:	4606      	mov	r6, r0
 800b22c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b230:	2100      	movs	r1, #0
 800b232:	2201      	movs	r2, #1
 800b234:	429a      	cmp	r2, r3
 800b236:	db09      	blt.n	800b24c <__s2b+0x30>
 800b238:	4630      	mov	r0, r6
 800b23a:	f7ff ff47 	bl	800b0cc <_Balloc>
 800b23e:	b940      	cbnz	r0, 800b252 <__s2b+0x36>
 800b240:	4602      	mov	r2, r0
 800b242:	4b19      	ldr	r3, [pc, #100]	; (800b2a8 <__s2b+0x8c>)
 800b244:	4819      	ldr	r0, [pc, #100]	; (800b2ac <__s2b+0x90>)
 800b246:	21d3      	movs	r1, #211	; 0xd3
 800b248:	f001 feca 	bl	800cfe0 <__assert_func>
 800b24c:	0052      	lsls	r2, r2, #1
 800b24e:	3101      	adds	r1, #1
 800b250:	e7f0      	b.n	800b234 <__s2b+0x18>
 800b252:	9b08      	ldr	r3, [sp, #32]
 800b254:	6143      	str	r3, [r0, #20]
 800b256:	2d09      	cmp	r5, #9
 800b258:	f04f 0301 	mov.w	r3, #1
 800b25c:	6103      	str	r3, [r0, #16]
 800b25e:	dd16      	ble.n	800b28e <__s2b+0x72>
 800b260:	f104 0909 	add.w	r9, r4, #9
 800b264:	46c8      	mov	r8, r9
 800b266:	442c      	add	r4, r5
 800b268:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b26c:	4601      	mov	r1, r0
 800b26e:	3b30      	subs	r3, #48	; 0x30
 800b270:	220a      	movs	r2, #10
 800b272:	4630      	mov	r0, r6
 800b274:	f7ff ff8c 	bl	800b190 <__multadd>
 800b278:	45a0      	cmp	r8, r4
 800b27a:	d1f5      	bne.n	800b268 <__s2b+0x4c>
 800b27c:	f1a5 0408 	sub.w	r4, r5, #8
 800b280:	444c      	add	r4, r9
 800b282:	1b2d      	subs	r5, r5, r4
 800b284:	1963      	adds	r3, r4, r5
 800b286:	42bb      	cmp	r3, r7
 800b288:	db04      	blt.n	800b294 <__s2b+0x78>
 800b28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b28e:	340a      	adds	r4, #10
 800b290:	2509      	movs	r5, #9
 800b292:	e7f6      	b.n	800b282 <__s2b+0x66>
 800b294:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b298:	4601      	mov	r1, r0
 800b29a:	3b30      	subs	r3, #48	; 0x30
 800b29c:	220a      	movs	r2, #10
 800b29e:	4630      	mov	r0, r6
 800b2a0:	f7ff ff76 	bl	800b190 <__multadd>
 800b2a4:	e7ee      	b.n	800b284 <__s2b+0x68>
 800b2a6:	bf00      	nop
 800b2a8:	0800da29 	.word	0x0800da29
 800b2ac:	0800da3a 	.word	0x0800da3a

0800b2b0 <__hi0bits>:
 800b2b0:	0c03      	lsrs	r3, r0, #16
 800b2b2:	041b      	lsls	r3, r3, #16
 800b2b4:	b9d3      	cbnz	r3, 800b2ec <__hi0bits+0x3c>
 800b2b6:	0400      	lsls	r0, r0, #16
 800b2b8:	2310      	movs	r3, #16
 800b2ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b2be:	bf04      	itt	eq
 800b2c0:	0200      	lsleq	r0, r0, #8
 800b2c2:	3308      	addeq	r3, #8
 800b2c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b2c8:	bf04      	itt	eq
 800b2ca:	0100      	lsleq	r0, r0, #4
 800b2cc:	3304      	addeq	r3, #4
 800b2ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b2d2:	bf04      	itt	eq
 800b2d4:	0080      	lsleq	r0, r0, #2
 800b2d6:	3302      	addeq	r3, #2
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	db05      	blt.n	800b2e8 <__hi0bits+0x38>
 800b2dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b2e0:	f103 0301 	add.w	r3, r3, #1
 800b2e4:	bf08      	it	eq
 800b2e6:	2320      	moveq	r3, #32
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	4770      	bx	lr
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	e7e4      	b.n	800b2ba <__hi0bits+0xa>

0800b2f0 <__lo0bits>:
 800b2f0:	6803      	ldr	r3, [r0, #0]
 800b2f2:	f013 0207 	ands.w	r2, r3, #7
 800b2f6:	d00c      	beq.n	800b312 <__lo0bits+0x22>
 800b2f8:	07d9      	lsls	r1, r3, #31
 800b2fa:	d422      	bmi.n	800b342 <__lo0bits+0x52>
 800b2fc:	079a      	lsls	r2, r3, #30
 800b2fe:	bf49      	itett	mi
 800b300:	085b      	lsrmi	r3, r3, #1
 800b302:	089b      	lsrpl	r3, r3, #2
 800b304:	6003      	strmi	r3, [r0, #0]
 800b306:	2201      	movmi	r2, #1
 800b308:	bf5c      	itt	pl
 800b30a:	6003      	strpl	r3, [r0, #0]
 800b30c:	2202      	movpl	r2, #2
 800b30e:	4610      	mov	r0, r2
 800b310:	4770      	bx	lr
 800b312:	b299      	uxth	r1, r3
 800b314:	b909      	cbnz	r1, 800b31a <__lo0bits+0x2a>
 800b316:	0c1b      	lsrs	r3, r3, #16
 800b318:	2210      	movs	r2, #16
 800b31a:	b2d9      	uxtb	r1, r3
 800b31c:	b909      	cbnz	r1, 800b322 <__lo0bits+0x32>
 800b31e:	3208      	adds	r2, #8
 800b320:	0a1b      	lsrs	r3, r3, #8
 800b322:	0719      	lsls	r1, r3, #28
 800b324:	bf04      	itt	eq
 800b326:	091b      	lsreq	r3, r3, #4
 800b328:	3204      	addeq	r2, #4
 800b32a:	0799      	lsls	r1, r3, #30
 800b32c:	bf04      	itt	eq
 800b32e:	089b      	lsreq	r3, r3, #2
 800b330:	3202      	addeq	r2, #2
 800b332:	07d9      	lsls	r1, r3, #31
 800b334:	d403      	bmi.n	800b33e <__lo0bits+0x4e>
 800b336:	085b      	lsrs	r3, r3, #1
 800b338:	f102 0201 	add.w	r2, r2, #1
 800b33c:	d003      	beq.n	800b346 <__lo0bits+0x56>
 800b33e:	6003      	str	r3, [r0, #0]
 800b340:	e7e5      	b.n	800b30e <__lo0bits+0x1e>
 800b342:	2200      	movs	r2, #0
 800b344:	e7e3      	b.n	800b30e <__lo0bits+0x1e>
 800b346:	2220      	movs	r2, #32
 800b348:	e7e1      	b.n	800b30e <__lo0bits+0x1e>
	...

0800b34c <__i2b>:
 800b34c:	b510      	push	{r4, lr}
 800b34e:	460c      	mov	r4, r1
 800b350:	2101      	movs	r1, #1
 800b352:	f7ff febb 	bl	800b0cc <_Balloc>
 800b356:	4602      	mov	r2, r0
 800b358:	b928      	cbnz	r0, 800b366 <__i2b+0x1a>
 800b35a:	4b05      	ldr	r3, [pc, #20]	; (800b370 <__i2b+0x24>)
 800b35c:	4805      	ldr	r0, [pc, #20]	; (800b374 <__i2b+0x28>)
 800b35e:	f240 1145 	movw	r1, #325	; 0x145
 800b362:	f001 fe3d 	bl	800cfe0 <__assert_func>
 800b366:	2301      	movs	r3, #1
 800b368:	6144      	str	r4, [r0, #20]
 800b36a:	6103      	str	r3, [r0, #16]
 800b36c:	bd10      	pop	{r4, pc}
 800b36e:	bf00      	nop
 800b370:	0800da29 	.word	0x0800da29
 800b374:	0800da3a 	.word	0x0800da3a

0800b378 <__multiply>:
 800b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37c:	4691      	mov	r9, r2
 800b37e:	690a      	ldr	r2, [r1, #16]
 800b380:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b384:	429a      	cmp	r2, r3
 800b386:	bfb8      	it	lt
 800b388:	460b      	movlt	r3, r1
 800b38a:	460c      	mov	r4, r1
 800b38c:	bfbc      	itt	lt
 800b38e:	464c      	movlt	r4, r9
 800b390:	4699      	movlt	r9, r3
 800b392:	6927      	ldr	r7, [r4, #16]
 800b394:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b398:	68a3      	ldr	r3, [r4, #8]
 800b39a:	6861      	ldr	r1, [r4, #4]
 800b39c:	eb07 060a 	add.w	r6, r7, sl
 800b3a0:	42b3      	cmp	r3, r6
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	bfb8      	it	lt
 800b3a6:	3101      	addlt	r1, #1
 800b3a8:	f7ff fe90 	bl	800b0cc <_Balloc>
 800b3ac:	b930      	cbnz	r0, 800b3bc <__multiply+0x44>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	4b44      	ldr	r3, [pc, #272]	; (800b4c4 <__multiply+0x14c>)
 800b3b2:	4845      	ldr	r0, [pc, #276]	; (800b4c8 <__multiply+0x150>)
 800b3b4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b3b8:	f001 fe12 	bl	800cfe0 <__assert_func>
 800b3bc:	f100 0514 	add.w	r5, r0, #20
 800b3c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b3c4:	462b      	mov	r3, r5
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	4543      	cmp	r3, r8
 800b3ca:	d321      	bcc.n	800b410 <__multiply+0x98>
 800b3cc:	f104 0314 	add.w	r3, r4, #20
 800b3d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b3d4:	f109 0314 	add.w	r3, r9, #20
 800b3d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b3dc:	9202      	str	r2, [sp, #8]
 800b3de:	1b3a      	subs	r2, r7, r4
 800b3e0:	3a15      	subs	r2, #21
 800b3e2:	f022 0203 	bic.w	r2, r2, #3
 800b3e6:	3204      	adds	r2, #4
 800b3e8:	f104 0115 	add.w	r1, r4, #21
 800b3ec:	428f      	cmp	r7, r1
 800b3ee:	bf38      	it	cc
 800b3f0:	2204      	movcc	r2, #4
 800b3f2:	9201      	str	r2, [sp, #4]
 800b3f4:	9a02      	ldr	r2, [sp, #8]
 800b3f6:	9303      	str	r3, [sp, #12]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d80c      	bhi.n	800b416 <__multiply+0x9e>
 800b3fc:	2e00      	cmp	r6, #0
 800b3fe:	dd03      	ble.n	800b408 <__multiply+0x90>
 800b400:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b404:	2b00      	cmp	r3, #0
 800b406:	d05b      	beq.n	800b4c0 <__multiply+0x148>
 800b408:	6106      	str	r6, [r0, #16]
 800b40a:	b005      	add	sp, #20
 800b40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b410:	f843 2b04 	str.w	r2, [r3], #4
 800b414:	e7d8      	b.n	800b3c8 <__multiply+0x50>
 800b416:	f8b3 a000 	ldrh.w	sl, [r3]
 800b41a:	f1ba 0f00 	cmp.w	sl, #0
 800b41e:	d024      	beq.n	800b46a <__multiply+0xf2>
 800b420:	f104 0e14 	add.w	lr, r4, #20
 800b424:	46a9      	mov	r9, r5
 800b426:	f04f 0c00 	mov.w	ip, #0
 800b42a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b42e:	f8d9 1000 	ldr.w	r1, [r9]
 800b432:	fa1f fb82 	uxth.w	fp, r2
 800b436:	b289      	uxth	r1, r1
 800b438:	fb0a 110b 	mla	r1, sl, fp, r1
 800b43c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b440:	f8d9 2000 	ldr.w	r2, [r9]
 800b444:	4461      	add	r1, ip
 800b446:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b44a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b44e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b452:	b289      	uxth	r1, r1
 800b454:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b458:	4577      	cmp	r7, lr
 800b45a:	f849 1b04 	str.w	r1, [r9], #4
 800b45e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b462:	d8e2      	bhi.n	800b42a <__multiply+0xb2>
 800b464:	9a01      	ldr	r2, [sp, #4]
 800b466:	f845 c002 	str.w	ip, [r5, r2]
 800b46a:	9a03      	ldr	r2, [sp, #12]
 800b46c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b470:	3304      	adds	r3, #4
 800b472:	f1b9 0f00 	cmp.w	r9, #0
 800b476:	d021      	beq.n	800b4bc <__multiply+0x144>
 800b478:	6829      	ldr	r1, [r5, #0]
 800b47a:	f104 0c14 	add.w	ip, r4, #20
 800b47e:	46ae      	mov	lr, r5
 800b480:	f04f 0a00 	mov.w	sl, #0
 800b484:	f8bc b000 	ldrh.w	fp, [ip]
 800b488:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b48c:	fb09 220b 	mla	r2, r9, fp, r2
 800b490:	4452      	add	r2, sl
 800b492:	b289      	uxth	r1, r1
 800b494:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b498:	f84e 1b04 	str.w	r1, [lr], #4
 800b49c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b4a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b4a4:	f8be 1000 	ldrh.w	r1, [lr]
 800b4a8:	fb09 110a 	mla	r1, r9, sl, r1
 800b4ac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b4b0:	4567      	cmp	r7, ip
 800b4b2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b4b6:	d8e5      	bhi.n	800b484 <__multiply+0x10c>
 800b4b8:	9a01      	ldr	r2, [sp, #4]
 800b4ba:	50a9      	str	r1, [r5, r2]
 800b4bc:	3504      	adds	r5, #4
 800b4be:	e799      	b.n	800b3f4 <__multiply+0x7c>
 800b4c0:	3e01      	subs	r6, #1
 800b4c2:	e79b      	b.n	800b3fc <__multiply+0x84>
 800b4c4:	0800da29 	.word	0x0800da29
 800b4c8:	0800da3a 	.word	0x0800da3a

0800b4cc <__pow5mult>:
 800b4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4d0:	4615      	mov	r5, r2
 800b4d2:	f012 0203 	ands.w	r2, r2, #3
 800b4d6:	4606      	mov	r6, r0
 800b4d8:	460f      	mov	r7, r1
 800b4da:	d007      	beq.n	800b4ec <__pow5mult+0x20>
 800b4dc:	4c25      	ldr	r4, [pc, #148]	; (800b574 <__pow5mult+0xa8>)
 800b4de:	3a01      	subs	r2, #1
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b4e6:	f7ff fe53 	bl	800b190 <__multadd>
 800b4ea:	4607      	mov	r7, r0
 800b4ec:	10ad      	asrs	r5, r5, #2
 800b4ee:	d03d      	beq.n	800b56c <__pow5mult+0xa0>
 800b4f0:	69f4      	ldr	r4, [r6, #28]
 800b4f2:	b97c      	cbnz	r4, 800b514 <__pow5mult+0x48>
 800b4f4:	2010      	movs	r0, #16
 800b4f6:	f7ff fd35 	bl	800af64 <malloc>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	61f0      	str	r0, [r6, #28]
 800b4fe:	b928      	cbnz	r0, 800b50c <__pow5mult+0x40>
 800b500:	4b1d      	ldr	r3, [pc, #116]	; (800b578 <__pow5mult+0xac>)
 800b502:	481e      	ldr	r0, [pc, #120]	; (800b57c <__pow5mult+0xb0>)
 800b504:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b508:	f001 fd6a 	bl	800cfe0 <__assert_func>
 800b50c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b510:	6004      	str	r4, [r0, #0]
 800b512:	60c4      	str	r4, [r0, #12]
 800b514:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b518:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b51c:	b94c      	cbnz	r4, 800b532 <__pow5mult+0x66>
 800b51e:	f240 2171 	movw	r1, #625	; 0x271
 800b522:	4630      	mov	r0, r6
 800b524:	f7ff ff12 	bl	800b34c <__i2b>
 800b528:	2300      	movs	r3, #0
 800b52a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b52e:	4604      	mov	r4, r0
 800b530:	6003      	str	r3, [r0, #0]
 800b532:	f04f 0900 	mov.w	r9, #0
 800b536:	07eb      	lsls	r3, r5, #31
 800b538:	d50a      	bpl.n	800b550 <__pow5mult+0x84>
 800b53a:	4639      	mov	r1, r7
 800b53c:	4622      	mov	r2, r4
 800b53e:	4630      	mov	r0, r6
 800b540:	f7ff ff1a 	bl	800b378 <__multiply>
 800b544:	4639      	mov	r1, r7
 800b546:	4680      	mov	r8, r0
 800b548:	4630      	mov	r0, r6
 800b54a:	f7ff fdff 	bl	800b14c <_Bfree>
 800b54e:	4647      	mov	r7, r8
 800b550:	106d      	asrs	r5, r5, #1
 800b552:	d00b      	beq.n	800b56c <__pow5mult+0xa0>
 800b554:	6820      	ldr	r0, [r4, #0]
 800b556:	b938      	cbnz	r0, 800b568 <__pow5mult+0x9c>
 800b558:	4622      	mov	r2, r4
 800b55a:	4621      	mov	r1, r4
 800b55c:	4630      	mov	r0, r6
 800b55e:	f7ff ff0b 	bl	800b378 <__multiply>
 800b562:	6020      	str	r0, [r4, #0]
 800b564:	f8c0 9000 	str.w	r9, [r0]
 800b568:	4604      	mov	r4, r0
 800b56a:	e7e4      	b.n	800b536 <__pow5mult+0x6a>
 800b56c:	4638      	mov	r0, r7
 800b56e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b572:	bf00      	nop
 800b574:	0800db88 	.word	0x0800db88
 800b578:	0800d9ba 	.word	0x0800d9ba
 800b57c:	0800da3a 	.word	0x0800da3a

0800b580 <__lshift>:
 800b580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b584:	460c      	mov	r4, r1
 800b586:	6849      	ldr	r1, [r1, #4]
 800b588:	6923      	ldr	r3, [r4, #16]
 800b58a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b58e:	68a3      	ldr	r3, [r4, #8]
 800b590:	4607      	mov	r7, r0
 800b592:	4691      	mov	r9, r2
 800b594:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b598:	f108 0601 	add.w	r6, r8, #1
 800b59c:	42b3      	cmp	r3, r6
 800b59e:	db0b      	blt.n	800b5b8 <__lshift+0x38>
 800b5a0:	4638      	mov	r0, r7
 800b5a2:	f7ff fd93 	bl	800b0cc <_Balloc>
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	b948      	cbnz	r0, 800b5be <__lshift+0x3e>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	4b28      	ldr	r3, [pc, #160]	; (800b650 <__lshift+0xd0>)
 800b5ae:	4829      	ldr	r0, [pc, #164]	; (800b654 <__lshift+0xd4>)
 800b5b0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b5b4:	f001 fd14 	bl	800cfe0 <__assert_func>
 800b5b8:	3101      	adds	r1, #1
 800b5ba:	005b      	lsls	r3, r3, #1
 800b5bc:	e7ee      	b.n	800b59c <__lshift+0x1c>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	f100 0114 	add.w	r1, r0, #20
 800b5c4:	f100 0210 	add.w	r2, r0, #16
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	4553      	cmp	r3, sl
 800b5cc:	db33      	blt.n	800b636 <__lshift+0xb6>
 800b5ce:	6920      	ldr	r0, [r4, #16]
 800b5d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5d4:	f104 0314 	add.w	r3, r4, #20
 800b5d8:	f019 091f 	ands.w	r9, r9, #31
 800b5dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b5e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b5e4:	d02b      	beq.n	800b63e <__lshift+0xbe>
 800b5e6:	f1c9 0e20 	rsb	lr, r9, #32
 800b5ea:	468a      	mov	sl, r1
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	6818      	ldr	r0, [r3, #0]
 800b5f0:	fa00 f009 	lsl.w	r0, r0, r9
 800b5f4:	4310      	orrs	r0, r2
 800b5f6:	f84a 0b04 	str.w	r0, [sl], #4
 800b5fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5fe:	459c      	cmp	ip, r3
 800b600:	fa22 f20e 	lsr.w	r2, r2, lr
 800b604:	d8f3      	bhi.n	800b5ee <__lshift+0x6e>
 800b606:	ebac 0304 	sub.w	r3, ip, r4
 800b60a:	3b15      	subs	r3, #21
 800b60c:	f023 0303 	bic.w	r3, r3, #3
 800b610:	3304      	adds	r3, #4
 800b612:	f104 0015 	add.w	r0, r4, #21
 800b616:	4584      	cmp	ip, r0
 800b618:	bf38      	it	cc
 800b61a:	2304      	movcc	r3, #4
 800b61c:	50ca      	str	r2, [r1, r3]
 800b61e:	b10a      	cbz	r2, 800b624 <__lshift+0xa4>
 800b620:	f108 0602 	add.w	r6, r8, #2
 800b624:	3e01      	subs	r6, #1
 800b626:	4638      	mov	r0, r7
 800b628:	612e      	str	r6, [r5, #16]
 800b62a:	4621      	mov	r1, r4
 800b62c:	f7ff fd8e 	bl	800b14c <_Bfree>
 800b630:	4628      	mov	r0, r5
 800b632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b636:	f842 0f04 	str.w	r0, [r2, #4]!
 800b63a:	3301      	adds	r3, #1
 800b63c:	e7c5      	b.n	800b5ca <__lshift+0x4a>
 800b63e:	3904      	subs	r1, #4
 800b640:	f853 2b04 	ldr.w	r2, [r3], #4
 800b644:	f841 2f04 	str.w	r2, [r1, #4]!
 800b648:	459c      	cmp	ip, r3
 800b64a:	d8f9      	bhi.n	800b640 <__lshift+0xc0>
 800b64c:	e7ea      	b.n	800b624 <__lshift+0xa4>
 800b64e:	bf00      	nop
 800b650:	0800da29 	.word	0x0800da29
 800b654:	0800da3a 	.word	0x0800da3a

0800b658 <__mcmp>:
 800b658:	b530      	push	{r4, r5, lr}
 800b65a:	6902      	ldr	r2, [r0, #16]
 800b65c:	690c      	ldr	r4, [r1, #16]
 800b65e:	1b12      	subs	r2, r2, r4
 800b660:	d10e      	bne.n	800b680 <__mcmp+0x28>
 800b662:	f100 0314 	add.w	r3, r0, #20
 800b666:	3114      	adds	r1, #20
 800b668:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b66c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b670:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b674:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b678:	42a5      	cmp	r5, r4
 800b67a:	d003      	beq.n	800b684 <__mcmp+0x2c>
 800b67c:	d305      	bcc.n	800b68a <__mcmp+0x32>
 800b67e:	2201      	movs	r2, #1
 800b680:	4610      	mov	r0, r2
 800b682:	bd30      	pop	{r4, r5, pc}
 800b684:	4283      	cmp	r3, r0
 800b686:	d3f3      	bcc.n	800b670 <__mcmp+0x18>
 800b688:	e7fa      	b.n	800b680 <__mcmp+0x28>
 800b68a:	f04f 32ff 	mov.w	r2, #4294967295
 800b68e:	e7f7      	b.n	800b680 <__mcmp+0x28>

0800b690 <__mdiff>:
 800b690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b694:	460c      	mov	r4, r1
 800b696:	4606      	mov	r6, r0
 800b698:	4611      	mov	r1, r2
 800b69a:	4620      	mov	r0, r4
 800b69c:	4690      	mov	r8, r2
 800b69e:	f7ff ffdb 	bl	800b658 <__mcmp>
 800b6a2:	1e05      	subs	r5, r0, #0
 800b6a4:	d110      	bne.n	800b6c8 <__mdiff+0x38>
 800b6a6:	4629      	mov	r1, r5
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f7ff fd0f 	bl	800b0cc <_Balloc>
 800b6ae:	b930      	cbnz	r0, 800b6be <__mdiff+0x2e>
 800b6b0:	4b3a      	ldr	r3, [pc, #232]	; (800b79c <__mdiff+0x10c>)
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	f240 2137 	movw	r1, #567	; 0x237
 800b6b8:	4839      	ldr	r0, [pc, #228]	; (800b7a0 <__mdiff+0x110>)
 800b6ba:	f001 fc91 	bl	800cfe0 <__assert_func>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b6c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c8:	bfa4      	itt	ge
 800b6ca:	4643      	movge	r3, r8
 800b6cc:	46a0      	movge	r8, r4
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b6d4:	bfa6      	itte	ge
 800b6d6:	461c      	movge	r4, r3
 800b6d8:	2500      	movge	r5, #0
 800b6da:	2501      	movlt	r5, #1
 800b6dc:	f7ff fcf6 	bl	800b0cc <_Balloc>
 800b6e0:	b920      	cbnz	r0, 800b6ec <__mdiff+0x5c>
 800b6e2:	4b2e      	ldr	r3, [pc, #184]	; (800b79c <__mdiff+0x10c>)
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	f240 2145 	movw	r1, #581	; 0x245
 800b6ea:	e7e5      	b.n	800b6b8 <__mdiff+0x28>
 800b6ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b6f0:	6926      	ldr	r6, [r4, #16]
 800b6f2:	60c5      	str	r5, [r0, #12]
 800b6f4:	f104 0914 	add.w	r9, r4, #20
 800b6f8:	f108 0514 	add.w	r5, r8, #20
 800b6fc:	f100 0e14 	add.w	lr, r0, #20
 800b700:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b704:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b708:	f108 0210 	add.w	r2, r8, #16
 800b70c:	46f2      	mov	sl, lr
 800b70e:	2100      	movs	r1, #0
 800b710:	f859 3b04 	ldr.w	r3, [r9], #4
 800b714:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b718:	fa11 f88b 	uxtah	r8, r1, fp
 800b71c:	b299      	uxth	r1, r3
 800b71e:	0c1b      	lsrs	r3, r3, #16
 800b720:	eba8 0801 	sub.w	r8, r8, r1
 800b724:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b728:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b72c:	fa1f f888 	uxth.w	r8, r8
 800b730:	1419      	asrs	r1, r3, #16
 800b732:	454e      	cmp	r6, r9
 800b734:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b738:	f84a 3b04 	str.w	r3, [sl], #4
 800b73c:	d8e8      	bhi.n	800b710 <__mdiff+0x80>
 800b73e:	1b33      	subs	r3, r6, r4
 800b740:	3b15      	subs	r3, #21
 800b742:	f023 0303 	bic.w	r3, r3, #3
 800b746:	3304      	adds	r3, #4
 800b748:	3415      	adds	r4, #21
 800b74a:	42a6      	cmp	r6, r4
 800b74c:	bf38      	it	cc
 800b74e:	2304      	movcc	r3, #4
 800b750:	441d      	add	r5, r3
 800b752:	4473      	add	r3, lr
 800b754:	469e      	mov	lr, r3
 800b756:	462e      	mov	r6, r5
 800b758:	4566      	cmp	r6, ip
 800b75a:	d30e      	bcc.n	800b77a <__mdiff+0xea>
 800b75c:	f10c 0203 	add.w	r2, ip, #3
 800b760:	1b52      	subs	r2, r2, r5
 800b762:	f022 0203 	bic.w	r2, r2, #3
 800b766:	3d03      	subs	r5, #3
 800b768:	45ac      	cmp	ip, r5
 800b76a:	bf38      	it	cc
 800b76c:	2200      	movcc	r2, #0
 800b76e:	4413      	add	r3, r2
 800b770:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b774:	b17a      	cbz	r2, 800b796 <__mdiff+0x106>
 800b776:	6107      	str	r7, [r0, #16]
 800b778:	e7a4      	b.n	800b6c4 <__mdiff+0x34>
 800b77a:	f856 8b04 	ldr.w	r8, [r6], #4
 800b77e:	fa11 f288 	uxtah	r2, r1, r8
 800b782:	1414      	asrs	r4, r2, #16
 800b784:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b788:	b292      	uxth	r2, r2
 800b78a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b78e:	f84e 2b04 	str.w	r2, [lr], #4
 800b792:	1421      	asrs	r1, r4, #16
 800b794:	e7e0      	b.n	800b758 <__mdiff+0xc8>
 800b796:	3f01      	subs	r7, #1
 800b798:	e7ea      	b.n	800b770 <__mdiff+0xe0>
 800b79a:	bf00      	nop
 800b79c:	0800da29 	.word	0x0800da29
 800b7a0:	0800da3a 	.word	0x0800da3a

0800b7a4 <__ulp>:
 800b7a4:	b082      	sub	sp, #8
 800b7a6:	ed8d 0b00 	vstr	d0, [sp]
 800b7aa:	9a01      	ldr	r2, [sp, #4]
 800b7ac:	4b0f      	ldr	r3, [pc, #60]	; (800b7ec <__ulp+0x48>)
 800b7ae:	4013      	ands	r3, r2
 800b7b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	dc08      	bgt.n	800b7ca <__ulp+0x26>
 800b7b8:	425b      	negs	r3, r3
 800b7ba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b7be:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b7c2:	da04      	bge.n	800b7ce <__ulp+0x2a>
 800b7c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b7c8:	4113      	asrs	r3, r2
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	e008      	b.n	800b7e0 <__ulp+0x3c>
 800b7ce:	f1a2 0314 	sub.w	r3, r2, #20
 800b7d2:	2b1e      	cmp	r3, #30
 800b7d4:	bfda      	itte	le
 800b7d6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b7da:	40da      	lsrle	r2, r3
 800b7dc:	2201      	movgt	r2, #1
 800b7de:	2300      	movs	r3, #0
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	4610      	mov	r0, r2
 800b7e4:	ec41 0b10 	vmov	d0, r0, r1
 800b7e8:	b002      	add	sp, #8
 800b7ea:	4770      	bx	lr
 800b7ec:	7ff00000 	.word	0x7ff00000

0800b7f0 <__b2d>:
 800b7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f4:	6906      	ldr	r6, [r0, #16]
 800b7f6:	f100 0814 	add.w	r8, r0, #20
 800b7fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b7fe:	1f37      	subs	r7, r6, #4
 800b800:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b804:	4610      	mov	r0, r2
 800b806:	f7ff fd53 	bl	800b2b0 <__hi0bits>
 800b80a:	f1c0 0320 	rsb	r3, r0, #32
 800b80e:	280a      	cmp	r0, #10
 800b810:	600b      	str	r3, [r1, #0]
 800b812:	491b      	ldr	r1, [pc, #108]	; (800b880 <__b2d+0x90>)
 800b814:	dc15      	bgt.n	800b842 <__b2d+0x52>
 800b816:	f1c0 0c0b 	rsb	ip, r0, #11
 800b81a:	fa22 f30c 	lsr.w	r3, r2, ip
 800b81e:	45b8      	cmp	r8, r7
 800b820:	ea43 0501 	orr.w	r5, r3, r1
 800b824:	bf34      	ite	cc
 800b826:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b82a:	2300      	movcs	r3, #0
 800b82c:	3015      	adds	r0, #21
 800b82e:	fa02 f000 	lsl.w	r0, r2, r0
 800b832:	fa23 f30c 	lsr.w	r3, r3, ip
 800b836:	4303      	orrs	r3, r0
 800b838:	461c      	mov	r4, r3
 800b83a:	ec45 4b10 	vmov	d0, r4, r5
 800b83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b842:	45b8      	cmp	r8, r7
 800b844:	bf3a      	itte	cc
 800b846:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b84a:	f1a6 0708 	subcc.w	r7, r6, #8
 800b84e:	2300      	movcs	r3, #0
 800b850:	380b      	subs	r0, #11
 800b852:	d012      	beq.n	800b87a <__b2d+0x8a>
 800b854:	f1c0 0120 	rsb	r1, r0, #32
 800b858:	fa23 f401 	lsr.w	r4, r3, r1
 800b85c:	4082      	lsls	r2, r0
 800b85e:	4322      	orrs	r2, r4
 800b860:	4547      	cmp	r7, r8
 800b862:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b866:	bf8c      	ite	hi
 800b868:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b86c:	2200      	movls	r2, #0
 800b86e:	4083      	lsls	r3, r0
 800b870:	40ca      	lsrs	r2, r1
 800b872:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b876:	4313      	orrs	r3, r2
 800b878:	e7de      	b.n	800b838 <__b2d+0x48>
 800b87a:	ea42 0501 	orr.w	r5, r2, r1
 800b87e:	e7db      	b.n	800b838 <__b2d+0x48>
 800b880:	3ff00000 	.word	0x3ff00000

0800b884 <__d2b>:
 800b884:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b888:	460f      	mov	r7, r1
 800b88a:	2101      	movs	r1, #1
 800b88c:	ec59 8b10 	vmov	r8, r9, d0
 800b890:	4616      	mov	r6, r2
 800b892:	f7ff fc1b 	bl	800b0cc <_Balloc>
 800b896:	4604      	mov	r4, r0
 800b898:	b930      	cbnz	r0, 800b8a8 <__d2b+0x24>
 800b89a:	4602      	mov	r2, r0
 800b89c:	4b24      	ldr	r3, [pc, #144]	; (800b930 <__d2b+0xac>)
 800b89e:	4825      	ldr	r0, [pc, #148]	; (800b934 <__d2b+0xb0>)
 800b8a0:	f240 310f 	movw	r1, #783	; 0x30f
 800b8a4:	f001 fb9c 	bl	800cfe0 <__assert_func>
 800b8a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b8ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8b0:	bb2d      	cbnz	r5, 800b8fe <__d2b+0x7a>
 800b8b2:	9301      	str	r3, [sp, #4]
 800b8b4:	f1b8 0300 	subs.w	r3, r8, #0
 800b8b8:	d026      	beq.n	800b908 <__d2b+0x84>
 800b8ba:	4668      	mov	r0, sp
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	f7ff fd17 	bl	800b2f0 <__lo0bits>
 800b8c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b8c6:	b1e8      	cbz	r0, 800b904 <__d2b+0x80>
 800b8c8:	f1c0 0320 	rsb	r3, r0, #32
 800b8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b8d0:	430b      	orrs	r3, r1
 800b8d2:	40c2      	lsrs	r2, r0
 800b8d4:	6163      	str	r3, [r4, #20]
 800b8d6:	9201      	str	r2, [sp, #4]
 800b8d8:	9b01      	ldr	r3, [sp, #4]
 800b8da:	61a3      	str	r3, [r4, #24]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	bf14      	ite	ne
 800b8e0:	2202      	movne	r2, #2
 800b8e2:	2201      	moveq	r2, #1
 800b8e4:	6122      	str	r2, [r4, #16]
 800b8e6:	b1bd      	cbz	r5, 800b918 <__d2b+0x94>
 800b8e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b8ec:	4405      	add	r5, r0
 800b8ee:	603d      	str	r5, [r7, #0]
 800b8f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b8f4:	6030      	str	r0, [r6, #0]
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	b003      	add	sp, #12
 800b8fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b902:	e7d6      	b.n	800b8b2 <__d2b+0x2e>
 800b904:	6161      	str	r1, [r4, #20]
 800b906:	e7e7      	b.n	800b8d8 <__d2b+0x54>
 800b908:	a801      	add	r0, sp, #4
 800b90a:	f7ff fcf1 	bl	800b2f0 <__lo0bits>
 800b90e:	9b01      	ldr	r3, [sp, #4]
 800b910:	6163      	str	r3, [r4, #20]
 800b912:	3020      	adds	r0, #32
 800b914:	2201      	movs	r2, #1
 800b916:	e7e5      	b.n	800b8e4 <__d2b+0x60>
 800b918:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b91c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b920:	6038      	str	r0, [r7, #0]
 800b922:	6918      	ldr	r0, [r3, #16]
 800b924:	f7ff fcc4 	bl	800b2b0 <__hi0bits>
 800b928:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b92c:	e7e2      	b.n	800b8f4 <__d2b+0x70>
 800b92e:	bf00      	nop
 800b930:	0800da29 	.word	0x0800da29
 800b934:	0800da3a 	.word	0x0800da3a

0800b938 <__ratio>:
 800b938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93c:	4688      	mov	r8, r1
 800b93e:	4669      	mov	r1, sp
 800b940:	4681      	mov	r9, r0
 800b942:	f7ff ff55 	bl	800b7f0 <__b2d>
 800b946:	a901      	add	r1, sp, #4
 800b948:	4640      	mov	r0, r8
 800b94a:	ec55 4b10 	vmov	r4, r5, d0
 800b94e:	f7ff ff4f 	bl	800b7f0 <__b2d>
 800b952:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b956:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b95a:	eba3 0c02 	sub.w	ip, r3, r2
 800b95e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b962:	1a9b      	subs	r3, r3, r2
 800b964:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b968:	ec51 0b10 	vmov	r0, r1, d0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	bfd6      	itet	le
 800b970:	460a      	movle	r2, r1
 800b972:	462a      	movgt	r2, r5
 800b974:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b978:	468b      	mov	fp, r1
 800b97a:	462f      	mov	r7, r5
 800b97c:	bfd4      	ite	le
 800b97e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b982:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b986:	4620      	mov	r0, r4
 800b988:	ee10 2a10 	vmov	r2, s0
 800b98c:	465b      	mov	r3, fp
 800b98e:	4639      	mov	r1, r7
 800b990:	f7f4 ff64 	bl	800085c <__aeabi_ddiv>
 800b994:	ec41 0b10 	vmov	d0, r0, r1
 800b998:	b003      	add	sp, #12
 800b99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b99e <__copybits>:
 800b99e:	3901      	subs	r1, #1
 800b9a0:	b570      	push	{r4, r5, r6, lr}
 800b9a2:	1149      	asrs	r1, r1, #5
 800b9a4:	6914      	ldr	r4, [r2, #16]
 800b9a6:	3101      	adds	r1, #1
 800b9a8:	f102 0314 	add.w	r3, r2, #20
 800b9ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b9b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b9b4:	1f05      	subs	r5, r0, #4
 800b9b6:	42a3      	cmp	r3, r4
 800b9b8:	d30c      	bcc.n	800b9d4 <__copybits+0x36>
 800b9ba:	1aa3      	subs	r3, r4, r2
 800b9bc:	3b11      	subs	r3, #17
 800b9be:	f023 0303 	bic.w	r3, r3, #3
 800b9c2:	3211      	adds	r2, #17
 800b9c4:	42a2      	cmp	r2, r4
 800b9c6:	bf88      	it	hi
 800b9c8:	2300      	movhi	r3, #0
 800b9ca:	4418      	add	r0, r3
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	4288      	cmp	r0, r1
 800b9d0:	d305      	bcc.n	800b9de <__copybits+0x40>
 800b9d2:	bd70      	pop	{r4, r5, r6, pc}
 800b9d4:	f853 6b04 	ldr.w	r6, [r3], #4
 800b9d8:	f845 6f04 	str.w	r6, [r5, #4]!
 800b9dc:	e7eb      	b.n	800b9b6 <__copybits+0x18>
 800b9de:	f840 3b04 	str.w	r3, [r0], #4
 800b9e2:	e7f4      	b.n	800b9ce <__copybits+0x30>

0800b9e4 <__any_on>:
 800b9e4:	f100 0214 	add.w	r2, r0, #20
 800b9e8:	6900      	ldr	r0, [r0, #16]
 800b9ea:	114b      	asrs	r3, r1, #5
 800b9ec:	4298      	cmp	r0, r3
 800b9ee:	b510      	push	{r4, lr}
 800b9f0:	db11      	blt.n	800ba16 <__any_on+0x32>
 800b9f2:	dd0a      	ble.n	800ba0a <__any_on+0x26>
 800b9f4:	f011 011f 	ands.w	r1, r1, #31
 800b9f8:	d007      	beq.n	800ba0a <__any_on+0x26>
 800b9fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b9fe:	fa24 f001 	lsr.w	r0, r4, r1
 800ba02:	fa00 f101 	lsl.w	r1, r0, r1
 800ba06:	428c      	cmp	r4, r1
 800ba08:	d10b      	bne.n	800ba22 <__any_on+0x3e>
 800ba0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d803      	bhi.n	800ba1a <__any_on+0x36>
 800ba12:	2000      	movs	r0, #0
 800ba14:	bd10      	pop	{r4, pc}
 800ba16:	4603      	mov	r3, r0
 800ba18:	e7f7      	b.n	800ba0a <__any_on+0x26>
 800ba1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba1e:	2900      	cmp	r1, #0
 800ba20:	d0f5      	beq.n	800ba0e <__any_on+0x2a>
 800ba22:	2001      	movs	r0, #1
 800ba24:	e7f6      	b.n	800ba14 <__any_on+0x30>

0800ba26 <sulp>:
 800ba26:	b570      	push	{r4, r5, r6, lr}
 800ba28:	4604      	mov	r4, r0
 800ba2a:	460d      	mov	r5, r1
 800ba2c:	ec45 4b10 	vmov	d0, r4, r5
 800ba30:	4616      	mov	r6, r2
 800ba32:	f7ff feb7 	bl	800b7a4 <__ulp>
 800ba36:	ec51 0b10 	vmov	r0, r1, d0
 800ba3a:	b17e      	cbz	r6, 800ba5c <sulp+0x36>
 800ba3c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ba40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	dd09      	ble.n	800ba5c <sulp+0x36>
 800ba48:	051b      	lsls	r3, r3, #20
 800ba4a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ba4e:	2400      	movs	r4, #0
 800ba50:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ba54:	4622      	mov	r2, r4
 800ba56:	462b      	mov	r3, r5
 800ba58:	f7f4 fdd6 	bl	8000608 <__aeabi_dmul>
 800ba5c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba60 <_strtod_l>:
 800ba60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba64:	ed2d 8b02 	vpush	{d8}
 800ba68:	b09b      	sub	sp, #108	; 0x6c
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	9213      	str	r2, [sp, #76]	; 0x4c
 800ba6e:	2200      	movs	r2, #0
 800ba70:	9216      	str	r2, [sp, #88]	; 0x58
 800ba72:	460d      	mov	r5, r1
 800ba74:	f04f 0800 	mov.w	r8, #0
 800ba78:	f04f 0900 	mov.w	r9, #0
 800ba7c:	460a      	mov	r2, r1
 800ba7e:	9215      	str	r2, [sp, #84]	; 0x54
 800ba80:	7811      	ldrb	r1, [r2, #0]
 800ba82:	292b      	cmp	r1, #43	; 0x2b
 800ba84:	d04c      	beq.n	800bb20 <_strtod_l+0xc0>
 800ba86:	d83a      	bhi.n	800bafe <_strtod_l+0x9e>
 800ba88:	290d      	cmp	r1, #13
 800ba8a:	d834      	bhi.n	800baf6 <_strtod_l+0x96>
 800ba8c:	2908      	cmp	r1, #8
 800ba8e:	d834      	bhi.n	800bafa <_strtod_l+0x9a>
 800ba90:	2900      	cmp	r1, #0
 800ba92:	d03d      	beq.n	800bb10 <_strtod_l+0xb0>
 800ba94:	2200      	movs	r2, #0
 800ba96:	920a      	str	r2, [sp, #40]	; 0x28
 800ba98:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ba9a:	7832      	ldrb	r2, [r6, #0]
 800ba9c:	2a30      	cmp	r2, #48	; 0x30
 800ba9e:	f040 80b4 	bne.w	800bc0a <_strtod_l+0x1aa>
 800baa2:	7872      	ldrb	r2, [r6, #1]
 800baa4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800baa8:	2a58      	cmp	r2, #88	; 0x58
 800baaa:	d170      	bne.n	800bb8e <_strtod_l+0x12e>
 800baac:	9302      	str	r3, [sp, #8]
 800baae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bab0:	9301      	str	r3, [sp, #4]
 800bab2:	ab16      	add	r3, sp, #88	; 0x58
 800bab4:	9300      	str	r3, [sp, #0]
 800bab6:	4a8e      	ldr	r2, [pc, #568]	; (800bcf0 <_strtod_l+0x290>)
 800bab8:	ab17      	add	r3, sp, #92	; 0x5c
 800baba:	a915      	add	r1, sp, #84	; 0x54
 800babc:	4620      	mov	r0, r4
 800babe:	f001 fb2b 	bl	800d118 <__gethex>
 800bac2:	f010 070f 	ands.w	r7, r0, #15
 800bac6:	4605      	mov	r5, r0
 800bac8:	d005      	beq.n	800bad6 <_strtod_l+0x76>
 800baca:	2f06      	cmp	r7, #6
 800bacc:	d12a      	bne.n	800bb24 <_strtod_l+0xc4>
 800bace:	3601      	adds	r6, #1
 800bad0:	2300      	movs	r3, #0
 800bad2:	9615      	str	r6, [sp, #84]	; 0x54
 800bad4:	930a      	str	r3, [sp, #40]	; 0x28
 800bad6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f040 857f 	bne.w	800c5dc <_strtod_l+0xb7c>
 800bade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bae0:	b1db      	cbz	r3, 800bb1a <_strtod_l+0xba>
 800bae2:	4642      	mov	r2, r8
 800bae4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bae8:	ec43 2b10 	vmov	d0, r2, r3
 800baec:	b01b      	add	sp, #108	; 0x6c
 800baee:	ecbd 8b02 	vpop	{d8}
 800baf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf6:	2920      	cmp	r1, #32
 800baf8:	d1cc      	bne.n	800ba94 <_strtod_l+0x34>
 800bafa:	3201      	adds	r2, #1
 800bafc:	e7bf      	b.n	800ba7e <_strtod_l+0x1e>
 800bafe:	292d      	cmp	r1, #45	; 0x2d
 800bb00:	d1c8      	bne.n	800ba94 <_strtod_l+0x34>
 800bb02:	2101      	movs	r1, #1
 800bb04:	910a      	str	r1, [sp, #40]	; 0x28
 800bb06:	1c51      	adds	r1, r2, #1
 800bb08:	9115      	str	r1, [sp, #84]	; 0x54
 800bb0a:	7852      	ldrb	r2, [r2, #1]
 800bb0c:	2a00      	cmp	r2, #0
 800bb0e:	d1c3      	bne.n	800ba98 <_strtod_l+0x38>
 800bb10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb12:	9515      	str	r5, [sp, #84]	; 0x54
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	f040 855f 	bne.w	800c5d8 <_strtod_l+0xb78>
 800bb1a:	4642      	mov	r2, r8
 800bb1c:	464b      	mov	r3, r9
 800bb1e:	e7e3      	b.n	800bae8 <_strtod_l+0x88>
 800bb20:	2100      	movs	r1, #0
 800bb22:	e7ef      	b.n	800bb04 <_strtod_l+0xa4>
 800bb24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bb26:	b13a      	cbz	r2, 800bb38 <_strtod_l+0xd8>
 800bb28:	2135      	movs	r1, #53	; 0x35
 800bb2a:	a818      	add	r0, sp, #96	; 0x60
 800bb2c:	f7ff ff37 	bl	800b99e <__copybits>
 800bb30:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bb32:	4620      	mov	r0, r4
 800bb34:	f7ff fb0a 	bl	800b14c <_Bfree>
 800bb38:	3f01      	subs	r7, #1
 800bb3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bb3c:	2f04      	cmp	r7, #4
 800bb3e:	d806      	bhi.n	800bb4e <_strtod_l+0xee>
 800bb40:	e8df f007 	tbb	[pc, r7]
 800bb44:	201d0314 	.word	0x201d0314
 800bb48:	14          	.byte	0x14
 800bb49:	00          	.byte	0x00
 800bb4a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800bb4e:	05e9      	lsls	r1, r5, #23
 800bb50:	bf48      	it	mi
 800bb52:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800bb56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bb5a:	0d1b      	lsrs	r3, r3, #20
 800bb5c:	051b      	lsls	r3, r3, #20
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d1b9      	bne.n	800bad6 <_strtod_l+0x76>
 800bb62:	f7fe faf7 	bl	800a154 <__errno>
 800bb66:	2322      	movs	r3, #34	; 0x22
 800bb68:	6003      	str	r3, [r0, #0]
 800bb6a:	e7b4      	b.n	800bad6 <_strtod_l+0x76>
 800bb6c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800bb70:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bb74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bb78:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bb7c:	e7e7      	b.n	800bb4e <_strtod_l+0xee>
 800bb7e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800bcf8 <_strtod_l+0x298>
 800bb82:	e7e4      	b.n	800bb4e <_strtod_l+0xee>
 800bb84:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bb88:	f04f 38ff 	mov.w	r8, #4294967295
 800bb8c:	e7df      	b.n	800bb4e <_strtod_l+0xee>
 800bb8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb90:	1c5a      	adds	r2, r3, #1
 800bb92:	9215      	str	r2, [sp, #84]	; 0x54
 800bb94:	785b      	ldrb	r3, [r3, #1]
 800bb96:	2b30      	cmp	r3, #48	; 0x30
 800bb98:	d0f9      	beq.n	800bb8e <_strtod_l+0x12e>
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d09b      	beq.n	800bad6 <_strtod_l+0x76>
 800bb9e:	2301      	movs	r3, #1
 800bba0:	f04f 0a00 	mov.w	sl, #0
 800bba4:	9304      	str	r3, [sp, #16]
 800bba6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bba8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbaa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bbae:	46d3      	mov	fp, sl
 800bbb0:	220a      	movs	r2, #10
 800bbb2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800bbb4:	7806      	ldrb	r6, [r0, #0]
 800bbb6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bbba:	b2d9      	uxtb	r1, r3
 800bbbc:	2909      	cmp	r1, #9
 800bbbe:	d926      	bls.n	800bc0e <_strtod_l+0x1ae>
 800bbc0:	494c      	ldr	r1, [pc, #304]	; (800bcf4 <_strtod_l+0x294>)
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f001 f9c0 	bl	800cf48 <strncmp>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d030      	beq.n	800bc2e <_strtod_l+0x1ce>
 800bbcc:	2000      	movs	r0, #0
 800bbce:	4632      	mov	r2, r6
 800bbd0:	9005      	str	r0, [sp, #20]
 800bbd2:	465e      	mov	r6, fp
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2a65      	cmp	r2, #101	; 0x65
 800bbd8:	d001      	beq.n	800bbde <_strtod_l+0x17e>
 800bbda:	2a45      	cmp	r2, #69	; 0x45
 800bbdc:	d113      	bne.n	800bc06 <_strtod_l+0x1a6>
 800bbde:	b91e      	cbnz	r6, 800bbe8 <_strtod_l+0x188>
 800bbe0:	9a04      	ldr	r2, [sp, #16]
 800bbe2:	4302      	orrs	r2, r0
 800bbe4:	d094      	beq.n	800bb10 <_strtod_l+0xb0>
 800bbe6:	2600      	movs	r6, #0
 800bbe8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800bbea:	1c6a      	adds	r2, r5, #1
 800bbec:	9215      	str	r2, [sp, #84]	; 0x54
 800bbee:	786a      	ldrb	r2, [r5, #1]
 800bbf0:	2a2b      	cmp	r2, #43	; 0x2b
 800bbf2:	d074      	beq.n	800bcde <_strtod_l+0x27e>
 800bbf4:	2a2d      	cmp	r2, #45	; 0x2d
 800bbf6:	d078      	beq.n	800bcea <_strtod_l+0x28a>
 800bbf8:	f04f 0c00 	mov.w	ip, #0
 800bbfc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bc00:	2909      	cmp	r1, #9
 800bc02:	d97f      	bls.n	800bd04 <_strtod_l+0x2a4>
 800bc04:	9515      	str	r5, [sp, #84]	; 0x54
 800bc06:	2700      	movs	r7, #0
 800bc08:	e09e      	b.n	800bd48 <_strtod_l+0x2e8>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	e7c8      	b.n	800bba0 <_strtod_l+0x140>
 800bc0e:	f1bb 0f08 	cmp.w	fp, #8
 800bc12:	bfd8      	it	le
 800bc14:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800bc16:	f100 0001 	add.w	r0, r0, #1
 800bc1a:	bfda      	itte	le
 800bc1c:	fb02 3301 	mlale	r3, r2, r1, r3
 800bc20:	9309      	strle	r3, [sp, #36]	; 0x24
 800bc22:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800bc26:	f10b 0b01 	add.w	fp, fp, #1
 800bc2a:	9015      	str	r0, [sp, #84]	; 0x54
 800bc2c:	e7c1      	b.n	800bbb2 <_strtod_l+0x152>
 800bc2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc30:	1c5a      	adds	r2, r3, #1
 800bc32:	9215      	str	r2, [sp, #84]	; 0x54
 800bc34:	785a      	ldrb	r2, [r3, #1]
 800bc36:	f1bb 0f00 	cmp.w	fp, #0
 800bc3a:	d037      	beq.n	800bcac <_strtod_l+0x24c>
 800bc3c:	9005      	str	r0, [sp, #20]
 800bc3e:	465e      	mov	r6, fp
 800bc40:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bc44:	2b09      	cmp	r3, #9
 800bc46:	d912      	bls.n	800bc6e <_strtod_l+0x20e>
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e7c4      	b.n	800bbd6 <_strtod_l+0x176>
 800bc4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc4e:	1c5a      	adds	r2, r3, #1
 800bc50:	9215      	str	r2, [sp, #84]	; 0x54
 800bc52:	785a      	ldrb	r2, [r3, #1]
 800bc54:	3001      	adds	r0, #1
 800bc56:	2a30      	cmp	r2, #48	; 0x30
 800bc58:	d0f8      	beq.n	800bc4c <_strtod_l+0x1ec>
 800bc5a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bc5e:	2b08      	cmp	r3, #8
 800bc60:	f200 84c1 	bhi.w	800c5e6 <_strtod_l+0xb86>
 800bc64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc66:	9005      	str	r0, [sp, #20]
 800bc68:	2000      	movs	r0, #0
 800bc6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	3a30      	subs	r2, #48	; 0x30
 800bc70:	f100 0301 	add.w	r3, r0, #1
 800bc74:	d014      	beq.n	800bca0 <_strtod_l+0x240>
 800bc76:	9905      	ldr	r1, [sp, #20]
 800bc78:	4419      	add	r1, r3
 800bc7a:	9105      	str	r1, [sp, #20]
 800bc7c:	4633      	mov	r3, r6
 800bc7e:	eb00 0c06 	add.w	ip, r0, r6
 800bc82:	210a      	movs	r1, #10
 800bc84:	4563      	cmp	r3, ip
 800bc86:	d113      	bne.n	800bcb0 <_strtod_l+0x250>
 800bc88:	1833      	adds	r3, r6, r0
 800bc8a:	2b08      	cmp	r3, #8
 800bc8c:	f106 0601 	add.w	r6, r6, #1
 800bc90:	4406      	add	r6, r0
 800bc92:	dc1a      	bgt.n	800bcca <_strtod_l+0x26a>
 800bc94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc96:	230a      	movs	r3, #10
 800bc98:	fb03 2301 	mla	r3, r3, r1, r2
 800bc9c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc9e:	2300      	movs	r3, #0
 800bca0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bca2:	1c51      	adds	r1, r2, #1
 800bca4:	9115      	str	r1, [sp, #84]	; 0x54
 800bca6:	7852      	ldrb	r2, [r2, #1]
 800bca8:	4618      	mov	r0, r3
 800bcaa:	e7c9      	b.n	800bc40 <_strtod_l+0x1e0>
 800bcac:	4658      	mov	r0, fp
 800bcae:	e7d2      	b.n	800bc56 <_strtod_l+0x1f6>
 800bcb0:	2b08      	cmp	r3, #8
 800bcb2:	f103 0301 	add.w	r3, r3, #1
 800bcb6:	dc03      	bgt.n	800bcc0 <_strtod_l+0x260>
 800bcb8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bcba:	434f      	muls	r7, r1
 800bcbc:	9709      	str	r7, [sp, #36]	; 0x24
 800bcbe:	e7e1      	b.n	800bc84 <_strtod_l+0x224>
 800bcc0:	2b10      	cmp	r3, #16
 800bcc2:	bfd8      	it	le
 800bcc4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800bcc8:	e7dc      	b.n	800bc84 <_strtod_l+0x224>
 800bcca:	2e10      	cmp	r6, #16
 800bccc:	bfdc      	itt	le
 800bcce:	230a      	movle	r3, #10
 800bcd0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800bcd4:	e7e3      	b.n	800bc9e <_strtod_l+0x23e>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	9305      	str	r3, [sp, #20]
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e780      	b.n	800bbe0 <_strtod_l+0x180>
 800bcde:	f04f 0c00 	mov.w	ip, #0
 800bce2:	1caa      	adds	r2, r5, #2
 800bce4:	9215      	str	r2, [sp, #84]	; 0x54
 800bce6:	78aa      	ldrb	r2, [r5, #2]
 800bce8:	e788      	b.n	800bbfc <_strtod_l+0x19c>
 800bcea:	f04f 0c01 	mov.w	ip, #1
 800bcee:	e7f8      	b.n	800bce2 <_strtod_l+0x282>
 800bcf0:	0800db98 	.word	0x0800db98
 800bcf4:	0800db94 	.word	0x0800db94
 800bcf8:	7ff00000 	.word	0x7ff00000
 800bcfc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bcfe:	1c51      	adds	r1, r2, #1
 800bd00:	9115      	str	r1, [sp, #84]	; 0x54
 800bd02:	7852      	ldrb	r2, [r2, #1]
 800bd04:	2a30      	cmp	r2, #48	; 0x30
 800bd06:	d0f9      	beq.n	800bcfc <_strtod_l+0x29c>
 800bd08:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bd0c:	2908      	cmp	r1, #8
 800bd0e:	f63f af7a 	bhi.w	800bc06 <_strtod_l+0x1a6>
 800bd12:	3a30      	subs	r2, #48	; 0x30
 800bd14:	9208      	str	r2, [sp, #32]
 800bd16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bd18:	920c      	str	r2, [sp, #48]	; 0x30
 800bd1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bd1c:	1c57      	adds	r7, r2, #1
 800bd1e:	9715      	str	r7, [sp, #84]	; 0x54
 800bd20:	7852      	ldrb	r2, [r2, #1]
 800bd22:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bd26:	f1be 0f09 	cmp.w	lr, #9
 800bd2a:	d938      	bls.n	800bd9e <_strtod_l+0x33e>
 800bd2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bd2e:	1a7f      	subs	r7, r7, r1
 800bd30:	2f08      	cmp	r7, #8
 800bd32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bd36:	dc03      	bgt.n	800bd40 <_strtod_l+0x2e0>
 800bd38:	9908      	ldr	r1, [sp, #32]
 800bd3a:	428f      	cmp	r7, r1
 800bd3c:	bfa8      	it	ge
 800bd3e:	460f      	movge	r7, r1
 800bd40:	f1bc 0f00 	cmp.w	ip, #0
 800bd44:	d000      	beq.n	800bd48 <_strtod_l+0x2e8>
 800bd46:	427f      	negs	r7, r7
 800bd48:	2e00      	cmp	r6, #0
 800bd4a:	d14f      	bne.n	800bdec <_strtod_l+0x38c>
 800bd4c:	9904      	ldr	r1, [sp, #16]
 800bd4e:	4301      	orrs	r1, r0
 800bd50:	f47f aec1 	bne.w	800bad6 <_strtod_l+0x76>
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f47f aedb 	bne.w	800bb10 <_strtod_l+0xb0>
 800bd5a:	2a69      	cmp	r2, #105	; 0x69
 800bd5c:	d029      	beq.n	800bdb2 <_strtod_l+0x352>
 800bd5e:	dc26      	bgt.n	800bdae <_strtod_l+0x34e>
 800bd60:	2a49      	cmp	r2, #73	; 0x49
 800bd62:	d026      	beq.n	800bdb2 <_strtod_l+0x352>
 800bd64:	2a4e      	cmp	r2, #78	; 0x4e
 800bd66:	f47f aed3 	bne.w	800bb10 <_strtod_l+0xb0>
 800bd6a:	499b      	ldr	r1, [pc, #620]	; (800bfd8 <_strtod_l+0x578>)
 800bd6c:	a815      	add	r0, sp, #84	; 0x54
 800bd6e:	f001 fc13 	bl	800d598 <__match>
 800bd72:	2800      	cmp	r0, #0
 800bd74:	f43f aecc 	beq.w	800bb10 <_strtod_l+0xb0>
 800bd78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	2b28      	cmp	r3, #40	; 0x28
 800bd7e:	d12f      	bne.n	800bde0 <_strtod_l+0x380>
 800bd80:	4996      	ldr	r1, [pc, #600]	; (800bfdc <_strtod_l+0x57c>)
 800bd82:	aa18      	add	r2, sp, #96	; 0x60
 800bd84:	a815      	add	r0, sp, #84	; 0x54
 800bd86:	f001 fc1b 	bl	800d5c0 <__hexnan>
 800bd8a:	2805      	cmp	r0, #5
 800bd8c:	d128      	bne.n	800bde0 <_strtod_l+0x380>
 800bd8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bd90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bd94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bd98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bd9c:	e69b      	b.n	800bad6 <_strtod_l+0x76>
 800bd9e:	9f08      	ldr	r7, [sp, #32]
 800bda0:	210a      	movs	r1, #10
 800bda2:	fb01 2107 	mla	r1, r1, r7, r2
 800bda6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800bdaa:	9208      	str	r2, [sp, #32]
 800bdac:	e7b5      	b.n	800bd1a <_strtod_l+0x2ba>
 800bdae:	2a6e      	cmp	r2, #110	; 0x6e
 800bdb0:	e7d9      	b.n	800bd66 <_strtod_l+0x306>
 800bdb2:	498b      	ldr	r1, [pc, #556]	; (800bfe0 <_strtod_l+0x580>)
 800bdb4:	a815      	add	r0, sp, #84	; 0x54
 800bdb6:	f001 fbef 	bl	800d598 <__match>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	f43f aea8 	beq.w	800bb10 <_strtod_l+0xb0>
 800bdc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdc2:	4988      	ldr	r1, [pc, #544]	; (800bfe4 <_strtod_l+0x584>)
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	a815      	add	r0, sp, #84	; 0x54
 800bdc8:	9315      	str	r3, [sp, #84]	; 0x54
 800bdca:	f001 fbe5 	bl	800d598 <__match>
 800bdce:	b910      	cbnz	r0, 800bdd6 <_strtod_l+0x376>
 800bdd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	9315      	str	r3, [sp, #84]	; 0x54
 800bdd6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800bff4 <_strtod_l+0x594>
 800bdda:	f04f 0800 	mov.w	r8, #0
 800bdde:	e67a      	b.n	800bad6 <_strtod_l+0x76>
 800bde0:	4881      	ldr	r0, [pc, #516]	; (800bfe8 <_strtod_l+0x588>)
 800bde2:	f001 f8f5 	bl	800cfd0 <nan>
 800bde6:	ec59 8b10 	vmov	r8, r9, d0
 800bdea:	e674      	b.n	800bad6 <_strtod_l+0x76>
 800bdec:	9b05      	ldr	r3, [sp, #20]
 800bdee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdf0:	1afb      	subs	r3, r7, r3
 800bdf2:	f1bb 0f00 	cmp.w	fp, #0
 800bdf6:	bf08      	it	eq
 800bdf8:	46b3      	moveq	fp, r6
 800bdfa:	2e10      	cmp	r6, #16
 800bdfc:	9308      	str	r3, [sp, #32]
 800bdfe:	4635      	mov	r5, r6
 800be00:	bfa8      	it	ge
 800be02:	2510      	movge	r5, #16
 800be04:	f7f4 fb86 	bl	8000514 <__aeabi_ui2d>
 800be08:	2e09      	cmp	r6, #9
 800be0a:	4680      	mov	r8, r0
 800be0c:	4689      	mov	r9, r1
 800be0e:	dd13      	ble.n	800be38 <_strtod_l+0x3d8>
 800be10:	4b76      	ldr	r3, [pc, #472]	; (800bfec <_strtod_l+0x58c>)
 800be12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800be16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800be1a:	f7f4 fbf5 	bl	8000608 <__aeabi_dmul>
 800be1e:	4680      	mov	r8, r0
 800be20:	4650      	mov	r0, sl
 800be22:	4689      	mov	r9, r1
 800be24:	f7f4 fb76 	bl	8000514 <__aeabi_ui2d>
 800be28:	4602      	mov	r2, r0
 800be2a:	460b      	mov	r3, r1
 800be2c:	4640      	mov	r0, r8
 800be2e:	4649      	mov	r1, r9
 800be30:	f7f4 fa34 	bl	800029c <__adddf3>
 800be34:	4680      	mov	r8, r0
 800be36:	4689      	mov	r9, r1
 800be38:	2e0f      	cmp	r6, #15
 800be3a:	dc38      	bgt.n	800beae <_strtod_l+0x44e>
 800be3c:	9b08      	ldr	r3, [sp, #32]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f43f ae49 	beq.w	800bad6 <_strtod_l+0x76>
 800be44:	dd24      	ble.n	800be90 <_strtod_l+0x430>
 800be46:	2b16      	cmp	r3, #22
 800be48:	dc0b      	bgt.n	800be62 <_strtod_l+0x402>
 800be4a:	4968      	ldr	r1, [pc, #416]	; (800bfec <_strtod_l+0x58c>)
 800be4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800be50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be54:	4642      	mov	r2, r8
 800be56:	464b      	mov	r3, r9
 800be58:	f7f4 fbd6 	bl	8000608 <__aeabi_dmul>
 800be5c:	4680      	mov	r8, r0
 800be5e:	4689      	mov	r9, r1
 800be60:	e639      	b.n	800bad6 <_strtod_l+0x76>
 800be62:	9a08      	ldr	r2, [sp, #32]
 800be64:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800be68:	4293      	cmp	r3, r2
 800be6a:	db20      	blt.n	800beae <_strtod_l+0x44e>
 800be6c:	4c5f      	ldr	r4, [pc, #380]	; (800bfec <_strtod_l+0x58c>)
 800be6e:	f1c6 060f 	rsb	r6, r6, #15
 800be72:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800be76:	4642      	mov	r2, r8
 800be78:	464b      	mov	r3, r9
 800be7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be7e:	f7f4 fbc3 	bl	8000608 <__aeabi_dmul>
 800be82:	9b08      	ldr	r3, [sp, #32]
 800be84:	1b9e      	subs	r6, r3, r6
 800be86:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800be8a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800be8e:	e7e3      	b.n	800be58 <_strtod_l+0x3f8>
 800be90:	9b08      	ldr	r3, [sp, #32]
 800be92:	3316      	adds	r3, #22
 800be94:	db0b      	blt.n	800beae <_strtod_l+0x44e>
 800be96:	9b05      	ldr	r3, [sp, #20]
 800be98:	1bdf      	subs	r7, r3, r7
 800be9a:	4b54      	ldr	r3, [pc, #336]	; (800bfec <_strtod_l+0x58c>)
 800be9c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bea4:	4640      	mov	r0, r8
 800bea6:	4649      	mov	r1, r9
 800bea8:	f7f4 fcd8 	bl	800085c <__aeabi_ddiv>
 800beac:	e7d6      	b.n	800be5c <_strtod_l+0x3fc>
 800beae:	9b08      	ldr	r3, [sp, #32]
 800beb0:	1b75      	subs	r5, r6, r5
 800beb2:	441d      	add	r5, r3
 800beb4:	2d00      	cmp	r5, #0
 800beb6:	dd70      	ble.n	800bf9a <_strtod_l+0x53a>
 800beb8:	f015 030f 	ands.w	r3, r5, #15
 800bebc:	d00a      	beq.n	800bed4 <_strtod_l+0x474>
 800bebe:	494b      	ldr	r1, [pc, #300]	; (800bfec <_strtod_l+0x58c>)
 800bec0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bec4:	4642      	mov	r2, r8
 800bec6:	464b      	mov	r3, r9
 800bec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800becc:	f7f4 fb9c 	bl	8000608 <__aeabi_dmul>
 800bed0:	4680      	mov	r8, r0
 800bed2:	4689      	mov	r9, r1
 800bed4:	f035 050f 	bics.w	r5, r5, #15
 800bed8:	d04d      	beq.n	800bf76 <_strtod_l+0x516>
 800beda:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800bede:	dd22      	ble.n	800bf26 <_strtod_l+0x4c6>
 800bee0:	2500      	movs	r5, #0
 800bee2:	46ab      	mov	fp, r5
 800bee4:	9509      	str	r5, [sp, #36]	; 0x24
 800bee6:	9505      	str	r5, [sp, #20]
 800bee8:	2322      	movs	r3, #34	; 0x22
 800beea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800bff4 <_strtod_l+0x594>
 800beee:	6023      	str	r3, [r4, #0]
 800bef0:	f04f 0800 	mov.w	r8, #0
 800bef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f43f aded 	beq.w	800bad6 <_strtod_l+0x76>
 800befc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800befe:	4620      	mov	r0, r4
 800bf00:	f7ff f924 	bl	800b14c <_Bfree>
 800bf04:	9905      	ldr	r1, [sp, #20]
 800bf06:	4620      	mov	r0, r4
 800bf08:	f7ff f920 	bl	800b14c <_Bfree>
 800bf0c:	4659      	mov	r1, fp
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f7ff f91c 	bl	800b14c <_Bfree>
 800bf14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf16:	4620      	mov	r0, r4
 800bf18:	f7ff f918 	bl	800b14c <_Bfree>
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f7ff f914 	bl	800b14c <_Bfree>
 800bf24:	e5d7      	b.n	800bad6 <_strtod_l+0x76>
 800bf26:	4b32      	ldr	r3, [pc, #200]	; (800bff0 <_strtod_l+0x590>)
 800bf28:	9304      	str	r3, [sp, #16]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	112d      	asrs	r5, r5, #4
 800bf2e:	4640      	mov	r0, r8
 800bf30:	4649      	mov	r1, r9
 800bf32:	469a      	mov	sl, r3
 800bf34:	2d01      	cmp	r5, #1
 800bf36:	dc21      	bgt.n	800bf7c <_strtod_l+0x51c>
 800bf38:	b10b      	cbz	r3, 800bf3e <_strtod_l+0x4de>
 800bf3a:	4680      	mov	r8, r0
 800bf3c:	4689      	mov	r9, r1
 800bf3e:	492c      	ldr	r1, [pc, #176]	; (800bff0 <_strtod_l+0x590>)
 800bf40:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bf44:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bf48:	4642      	mov	r2, r8
 800bf4a:	464b      	mov	r3, r9
 800bf4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf50:	f7f4 fb5a 	bl	8000608 <__aeabi_dmul>
 800bf54:	4b27      	ldr	r3, [pc, #156]	; (800bff4 <_strtod_l+0x594>)
 800bf56:	460a      	mov	r2, r1
 800bf58:	400b      	ands	r3, r1
 800bf5a:	4927      	ldr	r1, [pc, #156]	; (800bff8 <_strtod_l+0x598>)
 800bf5c:	428b      	cmp	r3, r1
 800bf5e:	4680      	mov	r8, r0
 800bf60:	d8be      	bhi.n	800bee0 <_strtod_l+0x480>
 800bf62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bf66:	428b      	cmp	r3, r1
 800bf68:	bf86      	itte	hi
 800bf6a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800bffc <_strtod_l+0x59c>
 800bf6e:	f04f 38ff 	movhi.w	r8, #4294967295
 800bf72:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bf76:	2300      	movs	r3, #0
 800bf78:	9304      	str	r3, [sp, #16]
 800bf7a:	e07b      	b.n	800c074 <_strtod_l+0x614>
 800bf7c:	07ea      	lsls	r2, r5, #31
 800bf7e:	d505      	bpl.n	800bf8c <_strtod_l+0x52c>
 800bf80:	9b04      	ldr	r3, [sp, #16]
 800bf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf86:	f7f4 fb3f 	bl	8000608 <__aeabi_dmul>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	9a04      	ldr	r2, [sp, #16]
 800bf8e:	3208      	adds	r2, #8
 800bf90:	f10a 0a01 	add.w	sl, sl, #1
 800bf94:	106d      	asrs	r5, r5, #1
 800bf96:	9204      	str	r2, [sp, #16]
 800bf98:	e7cc      	b.n	800bf34 <_strtod_l+0x4d4>
 800bf9a:	d0ec      	beq.n	800bf76 <_strtod_l+0x516>
 800bf9c:	426d      	negs	r5, r5
 800bf9e:	f015 020f 	ands.w	r2, r5, #15
 800bfa2:	d00a      	beq.n	800bfba <_strtod_l+0x55a>
 800bfa4:	4b11      	ldr	r3, [pc, #68]	; (800bfec <_strtod_l+0x58c>)
 800bfa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfaa:	4640      	mov	r0, r8
 800bfac:	4649      	mov	r1, r9
 800bfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb2:	f7f4 fc53 	bl	800085c <__aeabi_ddiv>
 800bfb6:	4680      	mov	r8, r0
 800bfb8:	4689      	mov	r9, r1
 800bfba:	112d      	asrs	r5, r5, #4
 800bfbc:	d0db      	beq.n	800bf76 <_strtod_l+0x516>
 800bfbe:	2d1f      	cmp	r5, #31
 800bfc0:	dd1e      	ble.n	800c000 <_strtod_l+0x5a0>
 800bfc2:	2500      	movs	r5, #0
 800bfc4:	46ab      	mov	fp, r5
 800bfc6:	9509      	str	r5, [sp, #36]	; 0x24
 800bfc8:	9505      	str	r5, [sp, #20]
 800bfca:	2322      	movs	r3, #34	; 0x22
 800bfcc:	f04f 0800 	mov.w	r8, #0
 800bfd0:	f04f 0900 	mov.w	r9, #0
 800bfd4:	6023      	str	r3, [r4, #0]
 800bfd6:	e78d      	b.n	800bef4 <_strtod_l+0x494>
 800bfd8:	0800d981 	.word	0x0800d981
 800bfdc:	0800dbac 	.word	0x0800dbac
 800bfe0:	0800d979 	.word	0x0800d979
 800bfe4:	0800d9b0 	.word	0x0800d9b0
 800bfe8:	0800dd3d 	.word	0x0800dd3d
 800bfec:	0800dac0 	.word	0x0800dac0
 800bff0:	0800da98 	.word	0x0800da98
 800bff4:	7ff00000 	.word	0x7ff00000
 800bff8:	7ca00000 	.word	0x7ca00000
 800bffc:	7fefffff 	.word	0x7fefffff
 800c000:	f015 0310 	ands.w	r3, r5, #16
 800c004:	bf18      	it	ne
 800c006:	236a      	movne	r3, #106	; 0x6a
 800c008:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c3ac <_strtod_l+0x94c>
 800c00c:	9304      	str	r3, [sp, #16]
 800c00e:	4640      	mov	r0, r8
 800c010:	4649      	mov	r1, r9
 800c012:	2300      	movs	r3, #0
 800c014:	07ea      	lsls	r2, r5, #31
 800c016:	d504      	bpl.n	800c022 <_strtod_l+0x5c2>
 800c018:	e9da 2300 	ldrd	r2, r3, [sl]
 800c01c:	f7f4 faf4 	bl	8000608 <__aeabi_dmul>
 800c020:	2301      	movs	r3, #1
 800c022:	106d      	asrs	r5, r5, #1
 800c024:	f10a 0a08 	add.w	sl, sl, #8
 800c028:	d1f4      	bne.n	800c014 <_strtod_l+0x5b4>
 800c02a:	b10b      	cbz	r3, 800c030 <_strtod_l+0x5d0>
 800c02c:	4680      	mov	r8, r0
 800c02e:	4689      	mov	r9, r1
 800c030:	9b04      	ldr	r3, [sp, #16]
 800c032:	b1bb      	cbz	r3, 800c064 <_strtod_l+0x604>
 800c034:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c038:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	4649      	mov	r1, r9
 800c040:	dd10      	ble.n	800c064 <_strtod_l+0x604>
 800c042:	2b1f      	cmp	r3, #31
 800c044:	f340 811e 	ble.w	800c284 <_strtod_l+0x824>
 800c048:	2b34      	cmp	r3, #52	; 0x34
 800c04a:	bfde      	ittt	le
 800c04c:	f04f 33ff 	movle.w	r3, #4294967295
 800c050:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c054:	4093      	lslle	r3, r2
 800c056:	f04f 0800 	mov.w	r8, #0
 800c05a:	bfcc      	ite	gt
 800c05c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c060:	ea03 0901 	andle.w	r9, r3, r1
 800c064:	2200      	movs	r2, #0
 800c066:	2300      	movs	r3, #0
 800c068:	4640      	mov	r0, r8
 800c06a:	4649      	mov	r1, r9
 800c06c:	f7f4 fd34 	bl	8000ad8 <__aeabi_dcmpeq>
 800c070:	2800      	cmp	r0, #0
 800c072:	d1a6      	bne.n	800bfc2 <_strtod_l+0x562>
 800c074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c07a:	4633      	mov	r3, r6
 800c07c:	465a      	mov	r2, fp
 800c07e:	4620      	mov	r0, r4
 800c080:	f7ff f8cc 	bl	800b21c <__s2b>
 800c084:	9009      	str	r0, [sp, #36]	; 0x24
 800c086:	2800      	cmp	r0, #0
 800c088:	f43f af2a 	beq.w	800bee0 <_strtod_l+0x480>
 800c08c:	9a08      	ldr	r2, [sp, #32]
 800c08e:	9b05      	ldr	r3, [sp, #20]
 800c090:	2a00      	cmp	r2, #0
 800c092:	eba3 0307 	sub.w	r3, r3, r7
 800c096:	bfa8      	it	ge
 800c098:	2300      	movge	r3, #0
 800c09a:	930c      	str	r3, [sp, #48]	; 0x30
 800c09c:	2500      	movs	r5, #0
 800c09e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c0a2:	9312      	str	r3, [sp, #72]	; 0x48
 800c0a4:	46ab      	mov	fp, r5
 800c0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	6859      	ldr	r1, [r3, #4]
 800c0ac:	f7ff f80e 	bl	800b0cc <_Balloc>
 800c0b0:	9005      	str	r0, [sp, #20]
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	f43f af18 	beq.w	800bee8 <_strtod_l+0x488>
 800c0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0ba:	691a      	ldr	r2, [r3, #16]
 800c0bc:	3202      	adds	r2, #2
 800c0be:	f103 010c 	add.w	r1, r3, #12
 800c0c2:	0092      	lsls	r2, r2, #2
 800c0c4:	300c      	adds	r0, #12
 800c0c6:	f7fe f871 	bl	800a1ac <memcpy>
 800c0ca:	ec49 8b10 	vmov	d0, r8, r9
 800c0ce:	aa18      	add	r2, sp, #96	; 0x60
 800c0d0:	a917      	add	r1, sp, #92	; 0x5c
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f7ff fbd6 	bl	800b884 <__d2b>
 800c0d8:	ec49 8b18 	vmov	d8, r8, r9
 800c0dc:	9016      	str	r0, [sp, #88]	; 0x58
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	f43f af02 	beq.w	800bee8 <_strtod_l+0x488>
 800c0e4:	2101      	movs	r1, #1
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	f7ff f930 	bl	800b34c <__i2b>
 800c0ec:	4683      	mov	fp, r0
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	f43f aefa 	beq.w	800bee8 <_strtod_l+0x488>
 800c0f4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c0f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c0f8:	2e00      	cmp	r6, #0
 800c0fa:	bfab      	itete	ge
 800c0fc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c0fe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c100:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c102:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c106:	bfac      	ite	ge
 800c108:	eb06 0a03 	addge.w	sl, r6, r3
 800c10c:	1b9f      	sublt	r7, r3, r6
 800c10e:	9b04      	ldr	r3, [sp, #16]
 800c110:	1af6      	subs	r6, r6, r3
 800c112:	4416      	add	r6, r2
 800c114:	4ba0      	ldr	r3, [pc, #640]	; (800c398 <_strtod_l+0x938>)
 800c116:	3e01      	subs	r6, #1
 800c118:	429e      	cmp	r6, r3
 800c11a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c11e:	f280 80c4 	bge.w	800c2aa <_strtod_l+0x84a>
 800c122:	1b9b      	subs	r3, r3, r6
 800c124:	2b1f      	cmp	r3, #31
 800c126:	eba2 0203 	sub.w	r2, r2, r3
 800c12a:	f04f 0101 	mov.w	r1, #1
 800c12e:	f300 80b0 	bgt.w	800c292 <_strtod_l+0x832>
 800c132:	fa01 f303 	lsl.w	r3, r1, r3
 800c136:	930e      	str	r3, [sp, #56]	; 0x38
 800c138:	2300      	movs	r3, #0
 800c13a:	930d      	str	r3, [sp, #52]	; 0x34
 800c13c:	eb0a 0602 	add.w	r6, sl, r2
 800c140:	9b04      	ldr	r3, [sp, #16]
 800c142:	45b2      	cmp	sl, r6
 800c144:	4417      	add	r7, r2
 800c146:	441f      	add	r7, r3
 800c148:	4653      	mov	r3, sl
 800c14a:	bfa8      	it	ge
 800c14c:	4633      	movge	r3, r6
 800c14e:	42bb      	cmp	r3, r7
 800c150:	bfa8      	it	ge
 800c152:	463b      	movge	r3, r7
 800c154:	2b00      	cmp	r3, #0
 800c156:	bfc2      	ittt	gt
 800c158:	1af6      	subgt	r6, r6, r3
 800c15a:	1aff      	subgt	r7, r7, r3
 800c15c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c160:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c162:	2b00      	cmp	r3, #0
 800c164:	dd17      	ble.n	800c196 <_strtod_l+0x736>
 800c166:	4659      	mov	r1, fp
 800c168:	461a      	mov	r2, r3
 800c16a:	4620      	mov	r0, r4
 800c16c:	f7ff f9ae 	bl	800b4cc <__pow5mult>
 800c170:	4683      	mov	fp, r0
 800c172:	2800      	cmp	r0, #0
 800c174:	f43f aeb8 	beq.w	800bee8 <_strtod_l+0x488>
 800c178:	4601      	mov	r1, r0
 800c17a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c17c:	4620      	mov	r0, r4
 800c17e:	f7ff f8fb 	bl	800b378 <__multiply>
 800c182:	900b      	str	r0, [sp, #44]	; 0x2c
 800c184:	2800      	cmp	r0, #0
 800c186:	f43f aeaf 	beq.w	800bee8 <_strtod_l+0x488>
 800c18a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c18c:	4620      	mov	r0, r4
 800c18e:	f7fe ffdd 	bl	800b14c <_Bfree>
 800c192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c194:	9316      	str	r3, [sp, #88]	; 0x58
 800c196:	2e00      	cmp	r6, #0
 800c198:	f300 808c 	bgt.w	800c2b4 <_strtod_l+0x854>
 800c19c:	9b08      	ldr	r3, [sp, #32]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	dd08      	ble.n	800c1b4 <_strtod_l+0x754>
 800c1a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c1a4:	9905      	ldr	r1, [sp, #20]
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f7ff f990 	bl	800b4cc <__pow5mult>
 800c1ac:	9005      	str	r0, [sp, #20]
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	f43f ae9a 	beq.w	800bee8 <_strtod_l+0x488>
 800c1b4:	2f00      	cmp	r7, #0
 800c1b6:	dd08      	ble.n	800c1ca <_strtod_l+0x76a>
 800c1b8:	9905      	ldr	r1, [sp, #20]
 800c1ba:	463a      	mov	r2, r7
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f7ff f9df 	bl	800b580 <__lshift>
 800c1c2:	9005      	str	r0, [sp, #20]
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	f43f ae8f 	beq.w	800bee8 <_strtod_l+0x488>
 800c1ca:	f1ba 0f00 	cmp.w	sl, #0
 800c1ce:	dd08      	ble.n	800c1e2 <_strtod_l+0x782>
 800c1d0:	4659      	mov	r1, fp
 800c1d2:	4652      	mov	r2, sl
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f7ff f9d3 	bl	800b580 <__lshift>
 800c1da:	4683      	mov	fp, r0
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	f43f ae83 	beq.w	800bee8 <_strtod_l+0x488>
 800c1e2:	9a05      	ldr	r2, [sp, #20]
 800c1e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f7ff fa52 	bl	800b690 <__mdiff>
 800c1ec:	4605      	mov	r5, r0
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	f43f ae7a 	beq.w	800bee8 <_strtod_l+0x488>
 800c1f4:	68c3      	ldr	r3, [r0, #12]
 800c1f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	60c3      	str	r3, [r0, #12]
 800c1fc:	4659      	mov	r1, fp
 800c1fe:	f7ff fa2b 	bl	800b658 <__mcmp>
 800c202:	2800      	cmp	r0, #0
 800c204:	da60      	bge.n	800c2c8 <_strtod_l+0x868>
 800c206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c208:	ea53 0308 	orrs.w	r3, r3, r8
 800c20c:	f040 8084 	bne.w	800c318 <_strtod_l+0x8b8>
 800c210:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c214:	2b00      	cmp	r3, #0
 800c216:	d17f      	bne.n	800c318 <_strtod_l+0x8b8>
 800c218:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c21c:	0d1b      	lsrs	r3, r3, #20
 800c21e:	051b      	lsls	r3, r3, #20
 800c220:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c224:	d978      	bls.n	800c318 <_strtod_l+0x8b8>
 800c226:	696b      	ldr	r3, [r5, #20]
 800c228:	b913      	cbnz	r3, 800c230 <_strtod_l+0x7d0>
 800c22a:	692b      	ldr	r3, [r5, #16]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	dd73      	ble.n	800c318 <_strtod_l+0x8b8>
 800c230:	4629      	mov	r1, r5
 800c232:	2201      	movs	r2, #1
 800c234:	4620      	mov	r0, r4
 800c236:	f7ff f9a3 	bl	800b580 <__lshift>
 800c23a:	4659      	mov	r1, fp
 800c23c:	4605      	mov	r5, r0
 800c23e:	f7ff fa0b 	bl	800b658 <__mcmp>
 800c242:	2800      	cmp	r0, #0
 800c244:	dd68      	ble.n	800c318 <_strtod_l+0x8b8>
 800c246:	9904      	ldr	r1, [sp, #16]
 800c248:	4a54      	ldr	r2, [pc, #336]	; (800c39c <_strtod_l+0x93c>)
 800c24a:	464b      	mov	r3, r9
 800c24c:	2900      	cmp	r1, #0
 800c24e:	f000 8084 	beq.w	800c35a <_strtod_l+0x8fa>
 800c252:	ea02 0109 	and.w	r1, r2, r9
 800c256:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c25a:	dc7e      	bgt.n	800c35a <_strtod_l+0x8fa>
 800c25c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c260:	f77f aeb3 	ble.w	800bfca <_strtod_l+0x56a>
 800c264:	4b4e      	ldr	r3, [pc, #312]	; (800c3a0 <_strtod_l+0x940>)
 800c266:	4640      	mov	r0, r8
 800c268:	4649      	mov	r1, r9
 800c26a:	2200      	movs	r2, #0
 800c26c:	f7f4 f9cc 	bl	8000608 <__aeabi_dmul>
 800c270:	4b4a      	ldr	r3, [pc, #296]	; (800c39c <_strtod_l+0x93c>)
 800c272:	400b      	ands	r3, r1
 800c274:	4680      	mov	r8, r0
 800c276:	4689      	mov	r9, r1
 800c278:	2b00      	cmp	r3, #0
 800c27a:	f47f ae3f 	bne.w	800befc <_strtod_l+0x49c>
 800c27e:	2322      	movs	r3, #34	; 0x22
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	e63b      	b.n	800befc <_strtod_l+0x49c>
 800c284:	f04f 32ff 	mov.w	r2, #4294967295
 800c288:	fa02 f303 	lsl.w	r3, r2, r3
 800c28c:	ea03 0808 	and.w	r8, r3, r8
 800c290:	e6e8      	b.n	800c064 <_strtod_l+0x604>
 800c292:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c296:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c29a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c29e:	36e2      	adds	r6, #226	; 0xe2
 800c2a0:	fa01 f306 	lsl.w	r3, r1, r6
 800c2a4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c2a8:	e748      	b.n	800c13c <_strtod_l+0x6dc>
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c2b2:	e743      	b.n	800c13c <_strtod_l+0x6dc>
 800c2b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c2b6:	4632      	mov	r2, r6
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f7ff f961 	bl	800b580 <__lshift>
 800c2be:	9016      	str	r0, [sp, #88]	; 0x58
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	f47f af6b 	bne.w	800c19c <_strtod_l+0x73c>
 800c2c6:	e60f      	b.n	800bee8 <_strtod_l+0x488>
 800c2c8:	46ca      	mov	sl, r9
 800c2ca:	d171      	bne.n	800c3b0 <_strtod_l+0x950>
 800c2cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c2d2:	b352      	cbz	r2, 800c32a <_strtod_l+0x8ca>
 800c2d4:	4a33      	ldr	r2, [pc, #204]	; (800c3a4 <_strtod_l+0x944>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d12a      	bne.n	800c330 <_strtod_l+0x8d0>
 800c2da:	9b04      	ldr	r3, [sp, #16]
 800c2dc:	4641      	mov	r1, r8
 800c2de:	b1fb      	cbz	r3, 800c320 <_strtod_l+0x8c0>
 800c2e0:	4b2e      	ldr	r3, [pc, #184]	; (800c39c <_strtod_l+0x93c>)
 800c2e2:	ea09 0303 	and.w	r3, r9, r3
 800c2e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ee:	d81a      	bhi.n	800c326 <_strtod_l+0x8c6>
 800c2f0:	0d1b      	lsrs	r3, r3, #20
 800c2f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2fa:	4299      	cmp	r1, r3
 800c2fc:	d118      	bne.n	800c330 <_strtod_l+0x8d0>
 800c2fe:	4b2a      	ldr	r3, [pc, #168]	; (800c3a8 <_strtod_l+0x948>)
 800c300:	459a      	cmp	sl, r3
 800c302:	d102      	bne.n	800c30a <_strtod_l+0x8aa>
 800c304:	3101      	adds	r1, #1
 800c306:	f43f adef 	beq.w	800bee8 <_strtod_l+0x488>
 800c30a:	4b24      	ldr	r3, [pc, #144]	; (800c39c <_strtod_l+0x93c>)
 800c30c:	ea0a 0303 	and.w	r3, sl, r3
 800c310:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c314:	f04f 0800 	mov.w	r8, #0
 800c318:	9b04      	ldr	r3, [sp, #16]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d1a2      	bne.n	800c264 <_strtod_l+0x804>
 800c31e:	e5ed      	b.n	800befc <_strtod_l+0x49c>
 800c320:	f04f 33ff 	mov.w	r3, #4294967295
 800c324:	e7e9      	b.n	800c2fa <_strtod_l+0x89a>
 800c326:	4613      	mov	r3, r2
 800c328:	e7e7      	b.n	800c2fa <_strtod_l+0x89a>
 800c32a:	ea53 0308 	orrs.w	r3, r3, r8
 800c32e:	d08a      	beq.n	800c246 <_strtod_l+0x7e6>
 800c330:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c332:	b1e3      	cbz	r3, 800c36e <_strtod_l+0x90e>
 800c334:	ea13 0f0a 	tst.w	r3, sl
 800c338:	d0ee      	beq.n	800c318 <_strtod_l+0x8b8>
 800c33a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c33c:	9a04      	ldr	r2, [sp, #16]
 800c33e:	4640      	mov	r0, r8
 800c340:	4649      	mov	r1, r9
 800c342:	b1c3      	cbz	r3, 800c376 <_strtod_l+0x916>
 800c344:	f7ff fb6f 	bl	800ba26 <sulp>
 800c348:	4602      	mov	r2, r0
 800c34a:	460b      	mov	r3, r1
 800c34c:	ec51 0b18 	vmov	r0, r1, d8
 800c350:	f7f3 ffa4 	bl	800029c <__adddf3>
 800c354:	4680      	mov	r8, r0
 800c356:	4689      	mov	r9, r1
 800c358:	e7de      	b.n	800c318 <_strtod_l+0x8b8>
 800c35a:	4013      	ands	r3, r2
 800c35c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c360:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c364:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c368:	f04f 38ff 	mov.w	r8, #4294967295
 800c36c:	e7d4      	b.n	800c318 <_strtod_l+0x8b8>
 800c36e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c370:	ea13 0f08 	tst.w	r3, r8
 800c374:	e7e0      	b.n	800c338 <_strtod_l+0x8d8>
 800c376:	f7ff fb56 	bl	800ba26 <sulp>
 800c37a:	4602      	mov	r2, r0
 800c37c:	460b      	mov	r3, r1
 800c37e:	ec51 0b18 	vmov	r0, r1, d8
 800c382:	f7f3 ff89 	bl	8000298 <__aeabi_dsub>
 800c386:	2200      	movs	r2, #0
 800c388:	2300      	movs	r3, #0
 800c38a:	4680      	mov	r8, r0
 800c38c:	4689      	mov	r9, r1
 800c38e:	f7f4 fba3 	bl	8000ad8 <__aeabi_dcmpeq>
 800c392:	2800      	cmp	r0, #0
 800c394:	d0c0      	beq.n	800c318 <_strtod_l+0x8b8>
 800c396:	e618      	b.n	800bfca <_strtod_l+0x56a>
 800c398:	fffffc02 	.word	0xfffffc02
 800c39c:	7ff00000 	.word	0x7ff00000
 800c3a0:	39500000 	.word	0x39500000
 800c3a4:	000fffff 	.word	0x000fffff
 800c3a8:	7fefffff 	.word	0x7fefffff
 800c3ac:	0800dbc0 	.word	0x0800dbc0
 800c3b0:	4659      	mov	r1, fp
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	f7ff fac0 	bl	800b938 <__ratio>
 800c3b8:	ec57 6b10 	vmov	r6, r7, d0
 800c3bc:	ee10 0a10 	vmov	r0, s0
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c3c6:	4639      	mov	r1, r7
 800c3c8:	f7f4 fb9a 	bl	8000b00 <__aeabi_dcmple>
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d071      	beq.n	800c4b4 <_strtod_l+0xa54>
 800c3d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d17c      	bne.n	800c4d0 <_strtod_l+0xa70>
 800c3d6:	f1b8 0f00 	cmp.w	r8, #0
 800c3da:	d15a      	bne.n	800c492 <_strtod_l+0xa32>
 800c3dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d15d      	bne.n	800c4a0 <_strtod_l+0xa40>
 800c3e4:	4b90      	ldr	r3, [pc, #576]	; (800c628 <_strtod_l+0xbc8>)
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	4639      	mov	r1, r7
 800c3ec:	f7f4 fb7e 	bl	8000aec <__aeabi_dcmplt>
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	d15c      	bne.n	800c4ae <_strtod_l+0xa4e>
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	4639      	mov	r1, r7
 800c3f8:	4b8c      	ldr	r3, [pc, #560]	; (800c62c <_strtod_l+0xbcc>)
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f7f4 f904 	bl	8000608 <__aeabi_dmul>
 800c400:	4606      	mov	r6, r0
 800c402:	460f      	mov	r7, r1
 800c404:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c408:	9606      	str	r6, [sp, #24]
 800c40a:	9307      	str	r3, [sp, #28]
 800c40c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c410:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c414:	4b86      	ldr	r3, [pc, #536]	; (800c630 <_strtod_l+0xbd0>)
 800c416:	ea0a 0303 	and.w	r3, sl, r3
 800c41a:	930d      	str	r3, [sp, #52]	; 0x34
 800c41c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c41e:	4b85      	ldr	r3, [pc, #532]	; (800c634 <_strtod_l+0xbd4>)
 800c420:	429a      	cmp	r2, r3
 800c422:	f040 8090 	bne.w	800c546 <_strtod_l+0xae6>
 800c426:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c42a:	ec49 8b10 	vmov	d0, r8, r9
 800c42e:	f7ff f9b9 	bl	800b7a4 <__ulp>
 800c432:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c436:	ec51 0b10 	vmov	r0, r1, d0
 800c43a:	f7f4 f8e5 	bl	8000608 <__aeabi_dmul>
 800c43e:	4642      	mov	r2, r8
 800c440:	464b      	mov	r3, r9
 800c442:	f7f3 ff2b 	bl	800029c <__adddf3>
 800c446:	460b      	mov	r3, r1
 800c448:	4979      	ldr	r1, [pc, #484]	; (800c630 <_strtod_l+0xbd0>)
 800c44a:	4a7b      	ldr	r2, [pc, #492]	; (800c638 <_strtod_l+0xbd8>)
 800c44c:	4019      	ands	r1, r3
 800c44e:	4291      	cmp	r1, r2
 800c450:	4680      	mov	r8, r0
 800c452:	d944      	bls.n	800c4de <_strtod_l+0xa7e>
 800c454:	ee18 2a90 	vmov	r2, s17
 800c458:	4b78      	ldr	r3, [pc, #480]	; (800c63c <_strtod_l+0xbdc>)
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d104      	bne.n	800c468 <_strtod_l+0xa08>
 800c45e:	ee18 3a10 	vmov	r3, s16
 800c462:	3301      	adds	r3, #1
 800c464:	f43f ad40 	beq.w	800bee8 <_strtod_l+0x488>
 800c468:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c63c <_strtod_l+0xbdc>
 800c46c:	f04f 38ff 	mov.w	r8, #4294967295
 800c470:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c472:	4620      	mov	r0, r4
 800c474:	f7fe fe6a 	bl	800b14c <_Bfree>
 800c478:	9905      	ldr	r1, [sp, #20]
 800c47a:	4620      	mov	r0, r4
 800c47c:	f7fe fe66 	bl	800b14c <_Bfree>
 800c480:	4659      	mov	r1, fp
 800c482:	4620      	mov	r0, r4
 800c484:	f7fe fe62 	bl	800b14c <_Bfree>
 800c488:	4629      	mov	r1, r5
 800c48a:	4620      	mov	r0, r4
 800c48c:	f7fe fe5e 	bl	800b14c <_Bfree>
 800c490:	e609      	b.n	800c0a6 <_strtod_l+0x646>
 800c492:	f1b8 0f01 	cmp.w	r8, #1
 800c496:	d103      	bne.n	800c4a0 <_strtod_l+0xa40>
 800c498:	f1b9 0f00 	cmp.w	r9, #0
 800c49c:	f43f ad95 	beq.w	800bfca <_strtod_l+0x56a>
 800c4a0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c5f8 <_strtod_l+0xb98>
 800c4a4:	4f60      	ldr	r7, [pc, #384]	; (800c628 <_strtod_l+0xbc8>)
 800c4a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c4aa:	2600      	movs	r6, #0
 800c4ac:	e7ae      	b.n	800c40c <_strtod_l+0x9ac>
 800c4ae:	4f5f      	ldr	r7, [pc, #380]	; (800c62c <_strtod_l+0xbcc>)
 800c4b0:	2600      	movs	r6, #0
 800c4b2:	e7a7      	b.n	800c404 <_strtod_l+0x9a4>
 800c4b4:	4b5d      	ldr	r3, [pc, #372]	; (800c62c <_strtod_l+0xbcc>)
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	4639      	mov	r1, r7
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f7f4 f8a4 	bl	8000608 <__aeabi_dmul>
 800c4c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	460f      	mov	r7, r1
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d09c      	beq.n	800c404 <_strtod_l+0x9a4>
 800c4ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c4ce:	e79d      	b.n	800c40c <_strtod_l+0x9ac>
 800c4d0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c600 <_strtod_l+0xba0>
 800c4d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c4d8:	ec57 6b17 	vmov	r6, r7, d7
 800c4dc:	e796      	b.n	800c40c <_strtod_l+0x9ac>
 800c4de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c4e2:	9b04      	ldr	r3, [sp, #16]
 800c4e4:	46ca      	mov	sl, r9
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d1c2      	bne.n	800c470 <_strtod_l+0xa10>
 800c4ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c4ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c4f0:	0d1b      	lsrs	r3, r3, #20
 800c4f2:	051b      	lsls	r3, r3, #20
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d1bb      	bne.n	800c470 <_strtod_l+0xa10>
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	4639      	mov	r1, r7
 800c4fc:	f7f4 fbe4 	bl	8000cc8 <__aeabi_d2lz>
 800c500:	f7f4 f854 	bl	80005ac <__aeabi_l2d>
 800c504:	4602      	mov	r2, r0
 800c506:	460b      	mov	r3, r1
 800c508:	4630      	mov	r0, r6
 800c50a:	4639      	mov	r1, r7
 800c50c:	f7f3 fec4 	bl	8000298 <__aeabi_dsub>
 800c510:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c512:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c516:	ea43 0308 	orr.w	r3, r3, r8
 800c51a:	4313      	orrs	r3, r2
 800c51c:	4606      	mov	r6, r0
 800c51e:	460f      	mov	r7, r1
 800c520:	d054      	beq.n	800c5cc <_strtod_l+0xb6c>
 800c522:	a339      	add	r3, pc, #228	; (adr r3, 800c608 <_strtod_l+0xba8>)
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	f7f4 fae0 	bl	8000aec <__aeabi_dcmplt>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	f47f ace5 	bne.w	800befc <_strtod_l+0x49c>
 800c532:	a337      	add	r3, pc, #220	; (adr r3, 800c610 <_strtod_l+0xbb0>)
 800c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c538:	4630      	mov	r0, r6
 800c53a:	4639      	mov	r1, r7
 800c53c:	f7f4 faf4 	bl	8000b28 <__aeabi_dcmpgt>
 800c540:	2800      	cmp	r0, #0
 800c542:	d095      	beq.n	800c470 <_strtod_l+0xa10>
 800c544:	e4da      	b.n	800befc <_strtod_l+0x49c>
 800c546:	9b04      	ldr	r3, [sp, #16]
 800c548:	b333      	cbz	r3, 800c598 <_strtod_l+0xb38>
 800c54a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c54c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c550:	d822      	bhi.n	800c598 <_strtod_l+0xb38>
 800c552:	a331      	add	r3, pc, #196	; (adr r3, 800c618 <_strtod_l+0xbb8>)
 800c554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c558:	4630      	mov	r0, r6
 800c55a:	4639      	mov	r1, r7
 800c55c:	f7f4 fad0 	bl	8000b00 <__aeabi_dcmple>
 800c560:	b1a0      	cbz	r0, 800c58c <_strtod_l+0xb2c>
 800c562:	4639      	mov	r1, r7
 800c564:	4630      	mov	r0, r6
 800c566:	f7f4 fb27 	bl	8000bb8 <__aeabi_d2uiz>
 800c56a:	2801      	cmp	r0, #1
 800c56c:	bf38      	it	cc
 800c56e:	2001      	movcc	r0, #1
 800c570:	f7f3 ffd0 	bl	8000514 <__aeabi_ui2d>
 800c574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c576:	4606      	mov	r6, r0
 800c578:	460f      	mov	r7, r1
 800c57a:	bb23      	cbnz	r3, 800c5c6 <_strtod_l+0xb66>
 800c57c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c580:	9010      	str	r0, [sp, #64]	; 0x40
 800c582:	9311      	str	r3, [sp, #68]	; 0x44
 800c584:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c588:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c58c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c58e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c590:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c594:	1a9b      	subs	r3, r3, r2
 800c596:	930f      	str	r3, [sp, #60]	; 0x3c
 800c598:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c59c:	eeb0 0a48 	vmov.f32	s0, s16
 800c5a0:	eef0 0a68 	vmov.f32	s1, s17
 800c5a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c5a8:	f7ff f8fc 	bl	800b7a4 <__ulp>
 800c5ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c5b0:	ec53 2b10 	vmov	r2, r3, d0
 800c5b4:	f7f4 f828 	bl	8000608 <__aeabi_dmul>
 800c5b8:	ec53 2b18 	vmov	r2, r3, d8
 800c5bc:	f7f3 fe6e 	bl	800029c <__adddf3>
 800c5c0:	4680      	mov	r8, r0
 800c5c2:	4689      	mov	r9, r1
 800c5c4:	e78d      	b.n	800c4e2 <_strtod_l+0xa82>
 800c5c6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c5ca:	e7db      	b.n	800c584 <_strtod_l+0xb24>
 800c5cc:	a314      	add	r3, pc, #80	; (adr r3, 800c620 <_strtod_l+0xbc0>)
 800c5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d2:	f7f4 fa8b 	bl	8000aec <__aeabi_dcmplt>
 800c5d6:	e7b3      	b.n	800c540 <_strtod_l+0xae0>
 800c5d8:	2300      	movs	r3, #0
 800c5da:	930a      	str	r3, [sp, #40]	; 0x28
 800c5dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c5de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5e0:	6013      	str	r3, [r2, #0]
 800c5e2:	f7ff ba7c 	b.w	800bade <_strtod_l+0x7e>
 800c5e6:	2a65      	cmp	r2, #101	; 0x65
 800c5e8:	f43f ab75 	beq.w	800bcd6 <_strtod_l+0x276>
 800c5ec:	2a45      	cmp	r2, #69	; 0x45
 800c5ee:	f43f ab72 	beq.w	800bcd6 <_strtod_l+0x276>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	f7ff bbaa 	b.w	800bd4c <_strtod_l+0x2ec>
 800c5f8:	00000000 	.word	0x00000000
 800c5fc:	bff00000 	.word	0xbff00000
 800c600:	00000000 	.word	0x00000000
 800c604:	3ff00000 	.word	0x3ff00000
 800c608:	94a03595 	.word	0x94a03595
 800c60c:	3fdfffff 	.word	0x3fdfffff
 800c610:	35afe535 	.word	0x35afe535
 800c614:	3fe00000 	.word	0x3fe00000
 800c618:	ffc00000 	.word	0xffc00000
 800c61c:	41dfffff 	.word	0x41dfffff
 800c620:	94a03595 	.word	0x94a03595
 800c624:	3fcfffff 	.word	0x3fcfffff
 800c628:	3ff00000 	.word	0x3ff00000
 800c62c:	3fe00000 	.word	0x3fe00000
 800c630:	7ff00000 	.word	0x7ff00000
 800c634:	7fe00000 	.word	0x7fe00000
 800c638:	7c9fffff 	.word	0x7c9fffff
 800c63c:	7fefffff 	.word	0x7fefffff

0800c640 <_strtod_r>:
 800c640:	4b01      	ldr	r3, [pc, #4]	; (800c648 <_strtod_r+0x8>)
 800c642:	f7ff ba0d 	b.w	800ba60 <_strtod_l>
 800c646:	bf00      	nop
 800c648:	20000158 	.word	0x20000158

0800c64c <_strtol_l.constprop.0>:
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c652:	d001      	beq.n	800c658 <_strtol_l.constprop.0+0xc>
 800c654:	2b24      	cmp	r3, #36	; 0x24
 800c656:	d906      	bls.n	800c666 <_strtol_l.constprop.0+0x1a>
 800c658:	f7fd fd7c 	bl	800a154 <__errno>
 800c65c:	2316      	movs	r3, #22
 800c65e:	6003      	str	r3, [r0, #0]
 800c660:	2000      	movs	r0, #0
 800c662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c666:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c74c <_strtol_l.constprop.0+0x100>
 800c66a:	460d      	mov	r5, r1
 800c66c:	462e      	mov	r6, r5
 800c66e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c672:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c676:	f017 0708 	ands.w	r7, r7, #8
 800c67a:	d1f7      	bne.n	800c66c <_strtol_l.constprop.0+0x20>
 800c67c:	2c2d      	cmp	r4, #45	; 0x2d
 800c67e:	d132      	bne.n	800c6e6 <_strtol_l.constprop.0+0x9a>
 800c680:	782c      	ldrb	r4, [r5, #0]
 800c682:	2701      	movs	r7, #1
 800c684:	1cb5      	adds	r5, r6, #2
 800c686:	2b00      	cmp	r3, #0
 800c688:	d05b      	beq.n	800c742 <_strtol_l.constprop.0+0xf6>
 800c68a:	2b10      	cmp	r3, #16
 800c68c:	d109      	bne.n	800c6a2 <_strtol_l.constprop.0+0x56>
 800c68e:	2c30      	cmp	r4, #48	; 0x30
 800c690:	d107      	bne.n	800c6a2 <_strtol_l.constprop.0+0x56>
 800c692:	782c      	ldrb	r4, [r5, #0]
 800c694:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c698:	2c58      	cmp	r4, #88	; 0x58
 800c69a:	d14d      	bne.n	800c738 <_strtol_l.constprop.0+0xec>
 800c69c:	786c      	ldrb	r4, [r5, #1]
 800c69e:	2310      	movs	r3, #16
 800c6a0:	3502      	adds	r5, #2
 800c6a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c6a6:	f108 38ff 	add.w	r8, r8, #4294967295
 800c6aa:	f04f 0e00 	mov.w	lr, #0
 800c6ae:	fbb8 f9f3 	udiv	r9, r8, r3
 800c6b2:	4676      	mov	r6, lr
 800c6b4:	fb03 8a19 	mls	sl, r3, r9, r8
 800c6b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c6bc:	f1bc 0f09 	cmp.w	ip, #9
 800c6c0:	d816      	bhi.n	800c6f0 <_strtol_l.constprop.0+0xa4>
 800c6c2:	4664      	mov	r4, ip
 800c6c4:	42a3      	cmp	r3, r4
 800c6c6:	dd24      	ble.n	800c712 <_strtol_l.constprop.0+0xc6>
 800c6c8:	f1be 3fff 	cmp.w	lr, #4294967295
 800c6cc:	d008      	beq.n	800c6e0 <_strtol_l.constprop.0+0x94>
 800c6ce:	45b1      	cmp	r9, r6
 800c6d0:	d31c      	bcc.n	800c70c <_strtol_l.constprop.0+0xc0>
 800c6d2:	d101      	bne.n	800c6d8 <_strtol_l.constprop.0+0x8c>
 800c6d4:	45a2      	cmp	sl, r4
 800c6d6:	db19      	blt.n	800c70c <_strtol_l.constprop.0+0xc0>
 800c6d8:	fb06 4603 	mla	r6, r6, r3, r4
 800c6dc:	f04f 0e01 	mov.w	lr, #1
 800c6e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6e4:	e7e8      	b.n	800c6b8 <_strtol_l.constprop.0+0x6c>
 800c6e6:	2c2b      	cmp	r4, #43	; 0x2b
 800c6e8:	bf04      	itt	eq
 800c6ea:	782c      	ldrbeq	r4, [r5, #0]
 800c6ec:	1cb5      	addeq	r5, r6, #2
 800c6ee:	e7ca      	b.n	800c686 <_strtol_l.constprop.0+0x3a>
 800c6f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c6f4:	f1bc 0f19 	cmp.w	ip, #25
 800c6f8:	d801      	bhi.n	800c6fe <_strtol_l.constprop.0+0xb2>
 800c6fa:	3c37      	subs	r4, #55	; 0x37
 800c6fc:	e7e2      	b.n	800c6c4 <_strtol_l.constprop.0+0x78>
 800c6fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c702:	f1bc 0f19 	cmp.w	ip, #25
 800c706:	d804      	bhi.n	800c712 <_strtol_l.constprop.0+0xc6>
 800c708:	3c57      	subs	r4, #87	; 0x57
 800c70a:	e7db      	b.n	800c6c4 <_strtol_l.constprop.0+0x78>
 800c70c:	f04f 3eff 	mov.w	lr, #4294967295
 800c710:	e7e6      	b.n	800c6e0 <_strtol_l.constprop.0+0x94>
 800c712:	f1be 3fff 	cmp.w	lr, #4294967295
 800c716:	d105      	bne.n	800c724 <_strtol_l.constprop.0+0xd8>
 800c718:	2322      	movs	r3, #34	; 0x22
 800c71a:	6003      	str	r3, [r0, #0]
 800c71c:	4646      	mov	r6, r8
 800c71e:	b942      	cbnz	r2, 800c732 <_strtol_l.constprop.0+0xe6>
 800c720:	4630      	mov	r0, r6
 800c722:	e79e      	b.n	800c662 <_strtol_l.constprop.0+0x16>
 800c724:	b107      	cbz	r7, 800c728 <_strtol_l.constprop.0+0xdc>
 800c726:	4276      	negs	r6, r6
 800c728:	2a00      	cmp	r2, #0
 800c72a:	d0f9      	beq.n	800c720 <_strtol_l.constprop.0+0xd4>
 800c72c:	f1be 0f00 	cmp.w	lr, #0
 800c730:	d000      	beq.n	800c734 <_strtol_l.constprop.0+0xe8>
 800c732:	1e69      	subs	r1, r5, #1
 800c734:	6011      	str	r1, [r2, #0]
 800c736:	e7f3      	b.n	800c720 <_strtol_l.constprop.0+0xd4>
 800c738:	2430      	movs	r4, #48	; 0x30
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1b1      	bne.n	800c6a2 <_strtol_l.constprop.0+0x56>
 800c73e:	2308      	movs	r3, #8
 800c740:	e7af      	b.n	800c6a2 <_strtol_l.constprop.0+0x56>
 800c742:	2c30      	cmp	r4, #48	; 0x30
 800c744:	d0a5      	beq.n	800c692 <_strtol_l.constprop.0+0x46>
 800c746:	230a      	movs	r3, #10
 800c748:	e7ab      	b.n	800c6a2 <_strtol_l.constprop.0+0x56>
 800c74a:	bf00      	nop
 800c74c:	0800dbe9 	.word	0x0800dbe9

0800c750 <_strtol_r>:
 800c750:	f7ff bf7c 	b.w	800c64c <_strtol_l.constprop.0>

0800c754 <__ssputs_r>:
 800c754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c758:	688e      	ldr	r6, [r1, #8]
 800c75a:	461f      	mov	r7, r3
 800c75c:	42be      	cmp	r6, r7
 800c75e:	680b      	ldr	r3, [r1, #0]
 800c760:	4682      	mov	sl, r0
 800c762:	460c      	mov	r4, r1
 800c764:	4690      	mov	r8, r2
 800c766:	d82c      	bhi.n	800c7c2 <__ssputs_r+0x6e>
 800c768:	898a      	ldrh	r2, [r1, #12]
 800c76a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c76e:	d026      	beq.n	800c7be <__ssputs_r+0x6a>
 800c770:	6965      	ldr	r5, [r4, #20]
 800c772:	6909      	ldr	r1, [r1, #16]
 800c774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c778:	eba3 0901 	sub.w	r9, r3, r1
 800c77c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c780:	1c7b      	adds	r3, r7, #1
 800c782:	444b      	add	r3, r9
 800c784:	106d      	asrs	r5, r5, #1
 800c786:	429d      	cmp	r5, r3
 800c788:	bf38      	it	cc
 800c78a:	461d      	movcc	r5, r3
 800c78c:	0553      	lsls	r3, r2, #21
 800c78e:	d527      	bpl.n	800c7e0 <__ssputs_r+0x8c>
 800c790:	4629      	mov	r1, r5
 800c792:	f7fe fc0f 	bl	800afb4 <_malloc_r>
 800c796:	4606      	mov	r6, r0
 800c798:	b360      	cbz	r0, 800c7f4 <__ssputs_r+0xa0>
 800c79a:	6921      	ldr	r1, [r4, #16]
 800c79c:	464a      	mov	r2, r9
 800c79e:	f7fd fd05 	bl	800a1ac <memcpy>
 800c7a2:	89a3      	ldrh	r3, [r4, #12]
 800c7a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7ac:	81a3      	strh	r3, [r4, #12]
 800c7ae:	6126      	str	r6, [r4, #16]
 800c7b0:	6165      	str	r5, [r4, #20]
 800c7b2:	444e      	add	r6, r9
 800c7b4:	eba5 0509 	sub.w	r5, r5, r9
 800c7b8:	6026      	str	r6, [r4, #0]
 800c7ba:	60a5      	str	r5, [r4, #8]
 800c7bc:	463e      	mov	r6, r7
 800c7be:	42be      	cmp	r6, r7
 800c7c0:	d900      	bls.n	800c7c4 <__ssputs_r+0x70>
 800c7c2:	463e      	mov	r6, r7
 800c7c4:	6820      	ldr	r0, [r4, #0]
 800c7c6:	4632      	mov	r2, r6
 800c7c8:	4641      	mov	r1, r8
 800c7ca:	f000 fba3 	bl	800cf14 <memmove>
 800c7ce:	68a3      	ldr	r3, [r4, #8]
 800c7d0:	1b9b      	subs	r3, r3, r6
 800c7d2:	60a3      	str	r3, [r4, #8]
 800c7d4:	6823      	ldr	r3, [r4, #0]
 800c7d6:	4433      	add	r3, r6
 800c7d8:	6023      	str	r3, [r4, #0]
 800c7da:	2000      	movs	r0, #0
 800c7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7e0:	462a      	mov	r2, r5
 800c7e2:	f000 ff9a 	bl	800d71a <_realloc_r>
 800c7e6:	4606      	mov	r6, r0
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	d1e0      	bne.n	800c7ae <__ssputs_r+0x5a>
 800c7ec:	6921      	ldr	r1, [r4, #16]
 800c7ee:	4650      	mov	r0, sl
 800c7f0:	f7fe fb6c 	bl	800aecc <_free_r>
 800c7f4:	230c      	movs	r3, #12
 800c7f6:	f8ca 3000 	str.w	r3, [sl]
 800c7fa:	89a3      	ldrh	r3, [r4, #12]
 800c7fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c800:	81a3      	strh	r3, [r4, #12]
 800c802:	f04f 30ff 	mov.w	r0, #4294967295
 800c806:	e7e9      	b.n	800c7dc <__ssputs_r+0x88>

0800c808 <_svfiprintf_r>:
 800c808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c80c:	4698      	mov	r8, r3
 800c80e:	898b      	ldrh	r3, [r1, #12]
 800c810:	061b      	lsls	r3, r3, #24
 800c812:	b09d      	sub	sp, #116	; 0x74
 800c814:	4607      	mov	r7, r0
 800c816:	460d      	mov	r5, r1
 800c818:	4614      	mov	r4, r2
 800c81a:	d50e      	bpl.n	800c83a <_svfiprintf_r+0x32>
 800c81c:	690b      	ldr	r3, [r1, #16]
 800c81e:	b963      	cbnz	r3, 800c83a <_svfiprintf_r+0x32>
 800c820:	2140      	movs	r1, #64	; 0x40
 800c822:	f7fe fbc7 	bl	800afb4 <_malloc_r>
 800c826:	6028      	str	r0, [r5, #0]
 800c828:	6128      	str	r0, [r5, #16]
 800c82a:	b920      	cbnz	r0, 800c836 <_svfiprintf_r+0x2e>
 800c82c:	230c      	movs	r3, #12
 800c82e:	603b      	str	r3, [r7, #0]
 800c830:	f04f 30ff 	mov.w	r0, #4294967295
 800c834:	e0d0      	b.n	800c9d8 <_svfiprintf_r+0x1d0>
 800c836:	2340      	movs	r3, #64	; 0x40
 800c838:	616b      	str	r3, [r5, #20]
 800c83a:	2300      	movs	r3, #0
 800c83c:	9309      	str	r3, [sp, #36]	; 0x24
 800c83e:	2320      	movs	r3, #32
 800c840:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c844:	f8cd 800c 	str.w	r8, [sp, #12]
 800c848:	2330      	movs	r3, #48	; 0x30
 800c84a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c9f0 <_svfiprintf_r+0x1e8>
 800c84e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c852:	f04f 0901 	mov.w	r9, #1
 800c856:	4623      	mov	r3, r4
 800c858:	469a      	mov	sl, r3
 800c85a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c85e:	b10a      	cbz	r2, 800c864 <_svfiprintf_r+0x5c>
 800c860:	2a25      	cmp	r2, #37	; 0x25
 800c862:	d1f9      	bne.n	800c858 <_svfiprintf_r+0x50>
 800c864:	ebba 0b04 	subs.w	fp, sl, r4
 800c868:	d00b      	beq.n	800c882 <_svfiprintf_r+0x7a>
 800c86a:	465b      	mov	r3, fp
 800c86c:	4622      	mov	r2, r4
 800c86e:	4629      	mov	r1, r5
 800c870:	4638      	mov	r0, r7
 800c872:	f7ff ff6f 	bl	800c754 <__ssputs_r>
 800c876:	3001      	adds	r0, #1
 800c878:	f000 80a9 	beq.w	800c9ce <_svfiprintf_r+0x1c6>
 800c87c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c87e:	445a      	add	r2, fp
 800c880:	9209      	str	r2, [sp, #36]	; 0x24
 800c882:	f89a 3000 	ldrb.w	r3, [sl]
 800c886:	2b00      	cmp	r3, #0
 800c888:	f000 80a1 	beq.w	800c9ce <_svfiprintf_r+0x1c6>
 800c88c:	2300      	movs	r3, #0
 800c88e:	f04f 32ff 	mov.w	r2, #4294967295
 800c892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c896:	f10a 0a01 	add.w	sl, sl, #1
 800c89a:	9304      	str	r3, [sp, #16]
 800c89c:	9307      	str	r3, [sp, #28]
 800c89e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8a2:	931a      	str	r3, [sp, #104]	; 0x68
 800c8a4:	4654      	mov	r4, sl
 800c8a6:	2205      	movs	r2, #5
 800c8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8ac:	4850      	ldr	r0, [pc, #320]	; (800c9f0 <_svfiprintf_r+0x1e8>)
 800c8ae:	f7f3 fc97 	bl	80001e0 <memchr>
 800c8b2:	9a04      	ldr	r2, [sp, #16]
 800c8b4:	b9d8      	cbnz	r0, 800c8ee <_svfiprintf_r+0xe6>
 800c8b6:	06d0      	lsls	r0, r2, #27
 800c8b8:	bf44      	itt	mi
 800c8ba:	2320      	movmi	r3, #32
 800c8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8c0:	0711      	lsls	r1, r2, #28
 800c8c2:	bf44      	itt	mi
 800c8c4:	232b      	movmi	r3, #43	; 0x2b
 800c8c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c8ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c8d0:	d015      	beq.n	800c8fe <_svfiprintf_r+0xf6>
 800c8d2:	9a07      	ldr	r2, [sp, #28]
 800c8d4:	4654      	mov	r4, sl
 800c8d6:	2000      	movs	r0, #0
 800c8d8:	f04f 0c0a 	mov.w	ip, #10
 800c8dc:	4621      	mov	r1, r4
 800c8de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8e2:	3b30      	subs	r3, #48	; 0x30
 800c8e4:	2b09      	cmp	r3, #9
 800c8e6:	d94d      	bls.n	800c984 <_svfiprintf_r+0x17c>
 800c8e8:	b1b0      	cbz	r0, 800c918 <_svfiprintf_r+0x110>
 800c8ea:	9207      	str	r2, [sp, #28]
 800c8ec:	e014      	b.n	800c918 <_svfiprintf_r+0x110>
 800c8ee:	eba0 0308 	sub.w	r3, r0, r8
 800c8f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	9304      	str	r3, [sp, #16]
 800c8fa:	46a2      	mov	sl, r4
 800c8fc:	e7d2      	b.n	800c8a4 <_svfiprintf_r+0x9c>
 800c8fe:	9b03      	ldr	r3, [sp, #12]
 800c900:	1d19      	adds	r1, r3, #4
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	9103      	str	r1, [sp, #12]
 800c906:	2b00      	cmp	r3, #0
 800c908:	bfbb      	ittet	lt
 800c90a:	425b      	neglt	r3, r3
 800c90c:	f042 0202 	orrlt.w	r2, r2, #2
 800c910:	9307      	strge	r3, [sp, #28]
 800c912:	9307      	strlt	r3, [sp, #28]
 800c914:	bfb8      	it	lt
 800c916:	9204      	strlt	r2, [sp, #16]
 800c918:	7823      	ldrb	r3, [r4, #0]
 800c91a:	2b2e      	cmp	r3, #46	; 0x2e
 800c91c:	d10c      	bne.n	800c938 <_svfiprintf_r+0x130>
 800c91e:	7863      	ldrb	r3, [r4, #1]
 800c920:	2b2a      	cmp	r3, #42	; 0x2a
 800c922:	d134      	bne.n	800c98e <_svfiprintf_r+0x186>
 800c924:	9b03      	ldr	r3, [sp, #12]
 800c926:	1d1a      	adds	r2, r3, #4
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	9203      	str	r2, [sp, #12]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	bfb8      	it	lt
 800c930:	f04f 33ff 	movlt.w	r3, #4294967295
 800c934:	3402      	adds	r4, #2
 800c936:	9305      	str	r3, [sp, #20]
 800c938:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ca00 <_svfiprintf_r+0x1f8>
 800c93c:	7821      	ldrb	r1, [r4, #0]
 800c93e:	2203      	movs	r2, #3
 800c940:	4650      	mov	r0, sl
 800c942:	f7f3 fc4d 	bl	80001e0 <memchr>
 800c946:	b138      	cbz	r0, 800c958 <_svfiprintf_r+0x150>
 800c948:	9b04      	ldr	r3, [sp, #16]
 800c94a:	eba0 000a 	sub.w	r0, r0, sl
 800c94e:	2240      	movs	r2, #64	; 0x40
 800c950:	4082      	lsls	r2, r0
 800c952:	4313      	orrs	r3, r2
 800c954:	3401      	adds	r4, #1
 800c956:	9304      	str	r3, [sp, #16]
 800c958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c95c:	4825      	ldr	r0, [pc, #148]	; (800c9f4 <_svfiprintf_r+0x1ec>)
 800c95e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c962:	2206      	movs	r2, #6
 800c964:	f7f3 fc3c 	bl	80001e0 <memchr>
 800c968:	2800      	cmp	r0, #0
 800c96a:	d038      	beq.n	800c9de <_svfiprintf_r+0x1d6>
 800c96c:	4b22      	ldr	r3, [pc, #136]	; (800c9f8 <_svfiprintf_r+0x1f0>)
 800c96e:	bb1b      	cbnz	r3, 800c9b8 <_svfiprintf_r+0x1b0>
 800c970:	9b03      	ldr	r3, [sp, #12]
 800c972:	3307      	adds	r3, #7
 800c974:	f023 0307 	bic.w	r3, r3, #7
 800c978:	3308      	adds	r3, #8
 800c97a:	9303      	str	r3, [sp, #12]
 800c97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c97e:	4433      	add	r3, r6
 800c980:	9309      	str	r3, [sp, #36]	; 0x24
 800c982:	e768      	b.n	800c856 <_svfiprintf_r+0x4e>
 800c984:	fb0c 3202 	mla	r2, ip, r2, r3
 800c988:	460c      	mov	r4, r1
 800c98a:	2001      	movs	r0, #1
 800c98c:	e7a6      	b.n	800c8dc <_svfiprintf_r+0xd4>
 800c98e:	2300      	movs	r3, #0
 800c990:	3401      	adds	r4, #1
 800c992:	9305      	str	r3, [sp, #20]
 800c994:	4619      	mov	r1, r3
 800c996:	f04f 0c0a 	mov.w	ip, #10
 800c99a:	4620      	mov	r0, r4
 800c99c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9a0:	3a30      	subs	r2, #48	; 0x30
 800c9a2:	2a09      	cmp	r2, #9
 800c9a4:	d903      	bls.n	800c9ae <_svfiprintf_r+0x1a6>
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d0c6      	beq.n	800c938 <_svfiprintf_r+0x130>
 800c9aa:	9105      	str	r1, [sp, #20]
 800c9ac:	e7c4      	b.n	800c938 <_svfiprintf_r+0x130>
 800c9ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e7f0      	b.n	800c99a <_svfiprintf_r+0x192>
 800c9b8:	ab03      	add	r3, sp, #12
 800c9ba:	9300      	str	r3, [sp, #0]
 800c9bc:	462a      	mov	r2, r5
 800c9be:	4b0f      	ldr	r3, [pc, #60]	; (800c9fc <_svfiprintf_r+0x1f4>)
 800c9c0:	a904      	add	r1, sp, #16
 800c9c2:	4638      	mov	r0, r7
 800c9c4:	f7fc fb80 	bl	80090c8 <_printf_float>
 800c9c8:	1c42      	adds	r2, r0, #1
 800c9ca:	4606      	mov	r6, r0
 800c9cc:	d1d6      	bne.n	800c97c <_svfiprintf_r+0x174>
 800c9ce:	89ab      	ldrh	r3, [r5, #12]
 800c9d0:	065b      	lsls	r3, r3, #25
 800c9d2:	f53f af2d 	bmi.w	800c830 <_svfiprintf_r+0x28>
 800c9d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9d8:	b01d      	add	sp, #116	; 0x74
 800c9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9de:	ab03      	add	r3, sp, #12
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	462a      	mov	r2, r5
 800c9e4:	4b05      	ldr	r3, [pc, #20]	; (800c9fc <_svfiprintf_r+0x1f4>)
 800c9e6:	a904      	add	r1, sp, #16
 800c9e8:	4638      	mov	r0, r7
 800c9ea:	f7fc fe11 	bl	8009610 <_printf_i>
 800c9ee:	e7eb      	b.n	800c9c8 <_svfiprintf_r+0x1c0>
 800c9f0:	0800dce9 	.word	0x0800dce9
 800c9f4:	0800dcf3 	.word	0x0800dcf3
 800c9f8:	080090c9 	.word	0x080090c9
 800c9fc:	0800c755 	.word	0x0800c755
 800ca00:	0800dcef 	.word	0x0800dcef

0800ca04 <__sfputc_r>:
 800ca04:	6893      	ldr	r3, [r2, #8]
 800ca06:	3b01      	subs	r3, #1
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	b410      	push	{r4}
 800ca0c:	6093      	str	r3, [r2, #8]
 800ca0e:	da08      	bge.n	800ca22 <__sfputc_r+0x1e>
 800ca10:	6994      	ldr	r4, [r2, #24]
 800ca12:	42a3      	cmp	r3, r4
 800ca14:	db01      	blt.n	800ca1a <__sfputc_r+0x16>
 800ca16:	290a      	cmp	r1, #10
 800ca18:	d103      	bne.n	800ca22 <__sfputc_r+0x1e>
 800ca1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca1e:	f7fd bab2 	b.w	8009f86 <__swbuf_r>
 800ca22:	6813      	ldr	r3, [r2, #0]
 800ca24:	1c58      	adds	r0, r3, #1
 800ca26:	6010      	str	r0, [r2, #0]
 800ca28:	7019      	strb	r1, [r3, #0]
 800ca2a:	4608      	mov	r0, r1
 800ca2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca30:	4770      	bx	lr

0800ca32 <__sfputs_r>:
 800ca32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca34:	4606      	mov	r6, r0
 800ca36:	460f      	mov	r7, r1
 800ca38:	4614      	mov	r4, r2
 800ca3a:	18d5      	adds	r5, r2, r3
 800ca3c:	42ac      	cmp	r4, r5
 800ca3e:	d101      	bne.n	800ca44 <__sfputs_r+0x12>
 800ca40:	2000      	movs	r0, #0
 800ca42:	e007      	b.n	800ca54 <__sfputs_r+0x22>
 800ca44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca48:	463a      	mov	r2, r7
 800ca4a:	4630      	mov	r0, r6
 800ca4c:	f7ff ffda 	bl	800ca04 <__sfputc_r>
 800ca50:	1c43      	adds	r3, r0, #1
 800ca52:	d1f3      	bne.n	800ca3c <__sfputs_r+0xa>
 800ca54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca58 <_vfiprintf_r>:
 800ca58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca5c:	460d      	mov	r5, r1
 800ca5e:	b09d      	sub	sp, #116	; 0x74
 800ca60:	4614      	mov	r4, r2
 800ca62:	4698      	mov	r8, r3
 800ca64:	4606      	mov	r6, r0
 800ca66:	b118      	cbz	r0, 800ca70 <_vfiprintf_r+0x18>
 800ca68:	6a03      	ldr	r3, [r0, #32]
 800ca6a:	b90b      	cbnz	r3, 800ca70 <_vfiprintf_r+0x18>
 800ca6c:	f7fd f97c 	bl	8009d68 <__sinit>
 800ca70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca72:	07d9      	lsls	r1, r3, #31
 800ca74:	d405      	bmi.n	800ca82 <_vfiprintf_r+0x2a>
 800ca76:	89ab      	ldrh	r3, [r5, #12]
 800ca78:	059a      	lsls	r2, r3, #22
 800ca7a:	d402      	bmi.n	800ca82 <_vfiprintf_r+0x2a>
 800ca7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca7e:	f7fd fb93 	bl	800a1a8 <__retarget_lock_acquire_recursive>
 800ca82:	89ab      	ldrh	r3, [r5, #12]
 800ca84:	071b      	lsls	r3, r3, #28
 800ca86:	d501      	bpl.n	800ca8c <_vfiprintf_r+0x34>
 800ca88:	692b      	ldr	r3, [r5, #16]
 800ca8a:	b99b      	cbnz	r3, 800cab4 <_vfiprintf_r+0x5c>
 800ca8c:	4629      	mov	r1, r5
 800ca8e:	4630      	mov	r0, r6
 800ca90:	f7fd fab6 	bl	800a000 <__swsetup_r>
 800ca94:	b170      	cbz	r0, 800cab4 <_vfiprintf_r+0x5c>
 800ca96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca98:	07dc      	lsls	r4, r3, #31
 800ca9a:	d504      	bpl.n	800caa6 <_vfiprintf_r+0x4e>
 800ca9c:	f04f 30ff 	mov.w	r0, #4294967295
 800caa0:	b01d      	add	sp, #116	; 0x74
 800caa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa6:	89ab      	ldrh	r3, [r5, #12]
 800caa8:	0598      	lsls	r0, r3, #22
 800caaa:	d4f7      	bmi.n	800ca9c <_vfiprintf_r+0x44>
 800caac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caae:	f7fd fb7c 	bl	800a1aa <__retarget_lock_release_recursive>
 800cab2:	e7f3      	b.n	800ca9c <_vfiprintf_r+0x44>
 800cab4:	2300      	movs	r3, #0
 800cab6:	9309      	str	r3, [sp, #36]	; 0x24
 800cab8:	2320      	movs	r3, #32
 800caba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cabe:	f8cd 800c 	str.w	r8, [sp, #12]
 800cac2:	2330      	movs	r3, #48	; 0x30
 800cac4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cc78 <_vfiprintf_r+0x220>
 800cac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cacc:	f04f 0901 	mov.w	r9, #1
 800cad0:	4623      	mov	r3, r4
 800cad2:	469a      	mov	sl, r3
 800cad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cad8:	b10a      	cbz	r2, 800cade <_vfiprintf_r+0x86>
 800cada:	2a25      	cmp	r2, #37	; 0x25
 800cadc:	d1f9      	bne.n	800cad2 <_vfiprintf_r+0x7a>
 800cade:	ebba 0b04 	subs.w	fp, sl, r4
 800cae2:	d00b      	beq.n	800cafc <_vfiprintf_r+0xa4>
 800cae4:	465b      	mov	r3, fp
 800cae6:	4622      	mov	r2, r4
 800cae8:	4629      	mov	r1, r5
 800caea:	4630      	mov	r0, r6
 800caec:	f7ff ffa1 	bl	800ca32 <__sfputs_r>
 800caf0:	3001      	adds	r0, #1
 800caf2:	f000 80a9 	beq.w	800cc48 <_vfiprintf_r+0x1f0>
 800caf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caf8:	445a      	add	r2, fp
 800cafa:	9209      	str	r2, [sp, #36]	; 0x24
 800cafc:	f89a 3000 	ldrb.w	r3, [sl]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	f000 80a1 	beq.w	800cc48 <_vfiprintf_r+0x1f0>
 800cb06:	2300      	movs	r3, #0
 800cb08:	f04f 32ff 	mov.w	r2, #4294967295
 800cb0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb10:	f10a 0a01 	add.w	sl, sl, #1
 800cb14:	9304      	str	r3, [sp, #16]
 800cb16:	9307      	str	r3, [sp, #28]
 800cb18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb1c:	931a      	str	r3, [sp, #104]	; 0x68
 800cb1e:	4654      	mov	r4, sl
 800cb20:	2205      	movs	r2, #5
 800cb22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb26:	4854      	ldr	r0, [pc, #336]	; (800cc78 <_vfiprintf_r+0x220>)
 800cb28:	f7f3 fb5a 	bl	80001e0 <memchr>
 800cb2c:	9a04      	ldr	r2, [sp, #16]
 800cb2e:	b9d8      	cbnz	r0, 800cb68 <_vfiprintf_r+0x110>
 800cb30:	06d1      	lsls	r1, r2, #27
 800cb32:	bf44      	itt	mi
 800cb34:	2320      	movmi	r3, #32
 800cb36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb3a:	0713      	lsls	r3, r2, #28
 800cb3c:	bf44      	itt	mi
 800cb3e:	232b      	movmi	r3, #43	; 0x2b
 800cb40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb44:	f89a 3000 	ldrb.w	r3, [sl]
 800cb48:	2b2a      	cmp	r3, #42	; 0x2a
 800cb4a:	d015      	beq.n	800cb78 <_vfiprintf_r+0x120>
 800cb4c:	9a07      	ldr	r2, [sp, #28]
 800cb4e:	4654      	mov	r4, sl
 800cb50:	2000      	movs	r0, #0
 800cb52:	f04f 0c0a 	mov.w	ip, #10
 800cb56:	4621      	mov	r1, r4
 800cb58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb5c:	3b30      	subs	r3, #48	; 0x30
 800cb5e:	2b09      	cmp	r3, #9
 800cb60:	d94d      	bls.n	800cbfe <_vfiprintf_r+0x1a6>
 800cb62:	b1b0      	cbz	r0, 800cb92 <_vfiprintf_r+0x13a>
 800cb64:	9207      	str	r2, [sp, #28]
 800cb66:	e014      	b.n	800cb92 <_vfiprintf_r+0x13a>
 800cb68:	eba0 0308 	sub.w	r3, r0, r8
 800cb6c:	fa09 f303 	lsl.w	r3, r9, r3
 800cb70:	4313      	orrs	r3, r2
 800cb72:	9304      	str	r3, [sp, #16]
 800cb74:	46a2      	mov	sl, r4
 800cb76:	e7d2      	b.n	800cb1e <_vfiprintf_r+0xc6>
 800cb78:	9b03      	ldr	r3, [sp, #12]
 800cb7a:	1d19      	adds	r1, r3, #4
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	9103      	str	r1, [sp, #12]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	bfbb      	ittet	lt
 800cb84:	425b      	neglt	r3, r3
 800cb86:	f042 0202 	orrlt.w	r2, r2, #2
 800cb8a:	9307      	strge	r3, [sp, #28]
 800cb8c:	9307      	strlt	r3, [sp, #28]
 800cb8e:	bfb8      	it	lt
 800cb90:	9204      	strlt	r2, [sp, #16]
 800cb92:	7823      	ldrb	r3, [r4, #0]
 800cb94:	2b2e      	cmp	r3, #46	; 0x2e
 800cb96:	d10c      	bne.n	800cbb2 <_vfiprintf_r+0x15a>
 800cb98:	7863      	ldrb	r3, [r4, #1]
 800cb9a:	2b2a      	cmp	r3, #42	; 0x2a
 800cb9c:	d134      	bne.n	800cc08 <_vfiprintf_r+0x1b0>
 800cb9e:	9b03      	ldr	r3, [sp, #12]
 800cba0:	1d1a      	adds	r2, r3, #4
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	9203      	str	r2, [sp, #12]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	bfb8      	it	lt
 800cbaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbae:	3402      	adds	r4, #2
 800cbb0:	9305      	str	r3, [sp, #20]
 800cbb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cc88 <_vfiprintf_r+0x230>
 800cbb6:	7821      	ldrb	r1, [r4, #0]
 800cbb8:	2203      	movs	r2, #3
 800cbba:	4650      	mov	r0, sl
 800cbbc:	f7f3 fb10 	bl	80001e0 <memchr>
 800cbc0:	b138      	cbz	r0, 800cbd2 <_vfiprintf_r+0x17a>
 800cbc2:	9b04      	ldr	r3, [sp, #16]
 800cbc4:	eba0 000a 	sub.w	r0, r0, sl
 800cbc8:	2240      	movs	r2, #64	; 0x40
 800cbca:	4082      	lsls	r2, r0
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	3401      	adds	r4, #1
 800cbd0:	9304      	str	r3, [sp, #16]
 800cbd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbd6:	4829      	ldr	r0, [pc, #164]	; (800cc7c <_vfiprintf_r+0x224>)
 800cbd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbdc:	2206      	movs	r2, #6
 800cbde:	f7f3 faff 	bl	80001e0 <memchr>
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d03f      	beq.n	800cc66 <_vfiprintf_r+0x20e>
 800cbe6:	4b26      	ldr	r3, [pc, #152]	; (800cc80 <_vfiprintf_r+0x228>)
 800cbe8:	bb1b      	cbnz	r3, 800cc32 <_vfiprintf_r+0x1da>
 800cbea:	9b03      	ldr	r3, [sp, #12]
 800cbec:	3307      	adds	r3, #7
 800cbee:	f023 0307 	bic.w	r3, r3, #7
 800cbf2:	3308      	adds	r3, #8
 800cbf4:	9303      	str	r3, [sp, #12]
 800cbf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbf8:	443b      	add	r3, r7
 800cbfa:	9309      	str	r3, [sp, #36]	; 0x24
 800cbfc:	e768      	b.n	800cad0 <_vfiprintf_r+0x78>
 800cbfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc02:	460c      	mov	r4, r1
 800cc04:	2001      	movs	r0, #1
 800cc06:	e7a6      	b.n	800cb56 <_vfiprintf_r+0xfe>
 800cc08:	2300      	movs	r3, #0
 800cc0a:	3401      	adds	r4, #1
 800cc0c:	9305      	str	r3, [sp, #20]
 800cc0e:	4619      	mov	r1, r3
 800cc10:	f04f 0c0a 	mov.w	ip, #10
 800cc14:	4620      	mov	r0, r4
 800cc16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc1a:	3a30      	subs	r2, #48	; 0x30
 800cc1c:	2a09      	cmp	r2, #9
 800cc1e:	d903      	bls.n	800cc28 <_vfiprintf_r+0x1d0>
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d0c6      	beq.n	800cbb2 <_vfiprintf_r+0x15a>
 800cc24:	9105      	str	r1, [sp, #20]
 800cc26:	e7c4      	b.n	800cbb2 <_vfiprintf_r+0x15a>
 800cc28:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e7f0      	b.n	800cc14 <_vfiprintf_r+0x1bc>
 800cc32:	ab03      	add	r3, sp, #12
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	462a      	mov	r2, r5
 800cc38:	4b12      	ldr	r3, [pc, #72]	; (800cc84 <_vfiprintf_r+0x22c>)
 800cc3a:	a904      	add	r1, sp, #16
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	f7fc fa43 	bl	80090c8 <_printf_float>
 800cc42:	4607      	mov	r7, r0
 800cc44:	1c78      	adds	r0, r7, #1
 800cc46:	d1d6      	bne.n	800cbf6 <_vfiprintf_r+0x19e>
 800cc48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc4a:	07d9      	lsls	r1, r3, #31
 800cc4c:	d405      	bmi.n	800cc5a <_vfiprintf_r+0x202>
 800cc4e:	89ab      	ldrh	r3, [r5, #12]
 800cc50:	059a      	lsls	r2, r3, #22
 800cc52:	d402      	bmi.n	800cc5a <_vfiprintf_r+0x202>
 800cc54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc56:	f7fd faa8 	bl	800a1aa <__retarget_lock_release_recursive>
 800cc5a:	89ab      	ldrh	r3, [r5, #12]
 800cc5c:	065b      	lsls	r3, r3, #25
 800cc5e:	f53f af1d 	bmi.w	800ca9c <_vfiprintf_r+0x44>
 800cc62:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc64:	e71c      	b.n	800caa0 <_vfiprintf_r+0x48>
 800cc66:	ab03      	add	r3, sp, #12
 800cc68:	9300      	str	r3, [sp, #0]
 800cc6a:	462a      	mov	r2, r5
 800cc6c:	4b05      	ldr	r3, [pc, #20]	; (800cc84 <_vfiprintf_r+0x22c>)
 800cc6e:	a904      	add	r1, sp, #16
 800cc70:	4630      	mov	r0, r6
 800cc72:	f7fc fccd 	bl	8009610 <_printf_i>
 800cc76:	e7e4      	b.n	800cc42 <_vfiprintf_r+0x1ea>
 800cc78:	0800dce9 	.word	0x0800dce9
 800cc7c:	0800dcf3 	.word	0x0800dcf3
 800cc80:	080090c9 	.word	0x080090c9
 800cc84:	0800ca33 	.word	0x0800ca33
 800cc88:	0800dcef 	.word	0x0800dcef

0800cc8c <__sflush_r>:
 800cc8c:	898a      	ldrh	r2, [r1, #12]
 800cc8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc92:	4605      	mov	r5, r0
 800cc94:	0710      	lsls	r0, r2, #28
 800cc96:	460c      	mov	r4, r1
 800cc98:	d458      	bmi.n	800cd4c <__sflush_r+0xc0>
 800cc9a:	684b      	ldr	r3, [r1, #4]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	dc05      	bgt.n	800ccac <__sflush_r+0x20>
 800cca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	dc02      	bgt.n	800ccac <__sflush_r+0x20>
 800cca6:	2000      	movs	r0, #0
 800cca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccae:	2e00      	cmp	r6, #0
 800ccb0:	d0f9      	beq.n	800cca6 <__sflush_r+0x1a>
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ccb8:	682f      	ldr	r7, [r5, #0]
 800ccba:	6a21      	ldr	r1, [r4, #32]
 800ccbc:	602b      	str	r3, [r5, #0]
 800ccbe:	d032      	beq.n	800cd26 <__sflush_r+0x9a>
 800ccc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ccc2:	89a3      	ldrh	r3, [r4, #12]
 800ccc4:	075a      	lsls	r2, r3, #29
 800ccc6:	d505      	bpl.n	800ccd4 <__sflush_r+0x48>
 800ccc8:	6863      	ldr	r3, [r4, #4]
 800ccca:	1ac0      	subs	r0, r0, r3
 800cccc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ccce:	b10b      	cbz	r3, 800ccd4 <__sflush_r+0x48>
 800ccd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ccd2:	1ac0      	subs	r0, r0, r3
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccda:	6a21      	ldr	r1, [r4, #32]
 800ccdc:	4628      	mov	r0, r5
 800ccde:	47b0      	blx	r6
 800cce0:	1c43      	adds	r3, r0, #1
 800cce2:	89a3      	ldrh	r3, [r4, #12]
 800cce4:	d106      	bne.n	800ccf4 <__sflush_r+0x68>
 800cce6:	6829      	ldr	r1, [r5, #0]
 800cce8:	291d      	cmp	r1, #29
 800ccea:	d82b      	bhi.n	800cd44 <__sflush_r+0xb8>
 800ccec:	4a29      	ldr	r2, [pc, #164]	; (800cd94 <__sflush_r+0x108>)
 800ccee:	410a      	asrs	r2, r1
 800ccf0:	07d6      	lsls	r6, r2, #31
 800ccf2:	d427      	bmi.n	800cd44 <__sflush_r+0xb8>
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	6062      	str	r2, [r4, #4]
 800ccf8:	04d9      	lsls	r1, r3, #19
 800ccfa:	6922      	ldr	r2, [r4, #16]
 800ccfc:	6022      	str	r2, [r4, #0]
 800ccfe:	d504      	bpl.n	800cd0a <__sflush_r+0x7e>
 800cd00:	1c42      	adds	r2, r0, #1
 800cd02:	d101      	bne.n	800cd08 <__sflush_r+0x7c>
 800cd04:	682b      	ldr	r3, [r5, #0]
 800cd06:	b903      	cbnz	r3, 800cd0a <__sflush_r+0x7e>
 800cd08:	6560      	str	r0, [r4, #84]	; 0x54
 800cd0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd0c:	602f      	str	r7, [r5, #0]
 800cd0e:	2900      	cmp	r1, #0
 800cd10:	d0c9      	beq.n	800cca6 <__sflush_r+0x1a>
 800cd12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd16:	4299      	cmp	r1, r3
 800cd18:	d002      	beq.n	800cd20 <__sflush_r+0x94>
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	f7fe f8d6 	bl	800aecc <_free_r>
 800cd20:	2000      	movs	r0, #0
 800cd22:	6360      	str	r0, [r4, #52]	; 0x34
 800cd24:	e7c0      	b.n	800cca8 <__sflush_r+0x1c>
 800cd26:	2301      	movs	r3, #1
 800cd28:	4628      	mov	r0, r5
 800cd2a:	47b0      	blx	r6
 800cd2c:	1c41      	adds	r1, r0, #1
 800cd2e:	d1c8      	bne.n	800ccc2 <__sflush_r+0x36>
 800cd30:	682b      	ldr	r3, [r5, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d0c5      	beq.n	800ccc2 <__sflush_r+0x36>
 800cd36:	2b1d      	cmp	r3, #29
 800cd38:	d001      	beq.n	800cd3e <__sflush_r+0xb2>
 800cd3a:	2b16      	cmp	r3, #22
 800cd3c:	d101      	bne.n	800cd42 <__sflush_r+0xb6>
 800cd3e:	602f      	str	r7, [r5, #0]
 800cd40:	e7b1      	b.n	800cca6 <__sflush_r+0x1a>
 800cd42:	89a3      	ldrh	r3, [r4, #12]
 800cd44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd48:	81a3      	strh	r3, [r4, #12]
 800cd4a:	e7ad      	b.n	800cca8 <__sflush_r+0x1c>
 800cd4c:	690f      	ldr	r7, [r1, #16]
 800cd4e:	2f00      	cmp	r7, #0
 800cd50:	d0a9      	beq.n	800cca6 <__sflush_r+0x1a>
 800cd52:	0793      	lsls	r3, r2, #30
 800cd54:	680e      	ldr	r6, [r1, #0]
 800cd56:	bf08      	it	eq
 800cd58:	694b      	ldreq	r3, [r1, #20]
 800cd5a:	600f      	str	r7, [r1, #0]
 800cd5c:	bf18      	it	ne
 800cd5e:	2300      	movne	r3, #0
 800cd60:	eba6 0807 	sub.w	r8, r6, r7
 800cd64:	608b      	str	r3, [r1, #8]
 800cd66:	f1b8 0f00 	cmp.w	r8, #0
 800cd6a:	dd9c      	ble.n	800cca6 <__sflush_r+0x1a>
 800cd6c:	6a21      	ldr	r1, [r4, #32]
 800cd6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd70:	4643      	mov	r3, r8
 800cd72:	463a      	mov	r2, r7
 800cd74:	4628      	mov	r0, r5
 800cd76:	47b0      	blx	r6
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	dc06      	bgt.n	800cd8a <__sflush_r+0xfe>
 800cd7c:	89a3      	ldrh	r3, [r4, #12]
 800cd7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd82:	81a3      	strh	r3, [r4, #12]
 800cd84:	f04f 30ff 	mov.w	r0, #4294967295
 800cd88:	e78e      	b.n	800cca8 <__sflush_r+0x1c>
 800cd8a:	4407      	add	r7, r0
 800cd8c:	eba8 0800 	sub.w	r8, r8, r0
 800cd90:	e7e9      	b.n	800cd66 <__sflush_r+0xda>
 800cd92:	bf00      	nop
 800cd94:	dfbffffe 	.word	0xdfbffffe

0800cd98 <_fflush_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	690b      	ldr	r3, [r1, #16]
 800cd9c:	4605      	mov	r5, r0
 800cd9e:	460c      	mov	r4, r1
 800cda0:	b913      	cbnz	r3, 800cda8 <_fflush_r+0x10>
 800cda2:	2500      	movs	r5, #0
 800cda4:	4628      	mov	r0, r5
 800cda6:	bd38      	pop	{r3, r4, r5, pc}
 800cda8:	b118      	cbz	r0, 800cdb2 <_fflush_r+0x1a>
 800cdaa:	6a03      	ldr	r3, [r0, #32]
 800cdac:	b90b      	cbnz	r3, 800cdb2 <_fflush_r+0x1a>
 800cdae:	f7fc ffdb 	bl	8009d68 <__sinit>
 800cdb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d0f3      	beq.n	800cda2 <_fflush_r+0xa>
 800cdba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cdbc:	07d0      	lsls	r0, r2, #31
 800cdbe:	d404      	bmi.n	800cdca <_fflush_r+0x32>
 800cdc0:	0599      	lsls	r1, r3, #22
 800cdc2:	d402      	bmi.n	800cdca <_fflush_r+0x32>
 800cdc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdc6:	f7fd f9ef 	bl	800a1a8 <__retarget_lock_acquire_recursive>
 800cdca:	4628      	mov	r0, r5
 800cdcc:	4621      	mov	r1, r4
 800cdce:	f7ff ff5d 	bl	800cc8c <__sflush_r>
 800cdd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdd4:	07da      	lsls	r2, r3, #31
 800cdd6:	4605      	mov	r5, r0
 800cdd8:	d4e4      	bmi.n	800cda4 <_fflush_r+0xc>
 800cdda:	89a3      	ldrh	r3, [r4, #12]
 800cddc:	059b      	lsls	r3, r3, #22
 800cdde:	d4e1      	bmi.n	800cda4 <_fflush_r+0xc>
 800cde0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cde2:	f7fd f9e2 	bl	800a1aa <__retarget_lock_release_recursive>
 800cde6:	e7dd      	b.n	800cda4 <_fflush_r+0xc>

0800cde8 <__swhatbuf_r>:
 800cde8:	b570      	push	{r4, r5, r6, lr}
 800cdea:	460c      	mov	r4, r1
 800cdec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf0:	2900      	cmp	r1, #0
 800cdf2:	b096      	sub	sp, #88	; 0x58
 800cdf4:	4615      	mov	r5, r2
 800cdf6:	461e      	mov	r6, r3
 800cdf8:	da0d      	bge.n	800ce16 <__swhatbuf_r+0x2e>
 800cdfa:	89a3      	ldrh	r3, [r4, #12]
 800cdfc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ce00:	f04f 0100 	mov.w	r1, #0
 800ce04:	bf0c      	ite	eq
 800ce06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ce0a:	2340      	movne	r3, #64	; 0x40
 800ce0c:	2000      	movs	r0, #0
 800ce0e:	6031      	str	r1, [r6, #0]
 800ce10:	602b      	str	r3, [r5, #0]
 800ce12:	b016      	add	sp, #88	; 0x58
 800ce14:	bd70      	pop	{r4, r5, r6, pc}
 800ce16:	466a      	mov	r2, sp
 800ce18:	f000 f8a8 	bl	800cf6c <_fstat_r>
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	dbec      	blt.n	800cdfa <__swhatbuf_r+0x12>
 800ce20:	9901      	ldr	r1, [sp, #4]
 800ce22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ce26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ce2a:	4259      	negs	r1, r3
 800ce2c:	4159      	adcs	r1, r3
 800ce2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce32:	e7eb      	b.n	800ce0c <__swhatbuf_r+0x24>

0800ce34 <__smakebuf_r>:
 800ce34:	898b      	ldrh	r3, [r1, #12]
 800ce36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce38:	079d      	lsls	r5, r3, #30
 800ce3a:	4606      	mov	r6, r0
 800ce3c:	460c      	mov	r4, r1
 800ce3e:	d507      	bpl.n	800ce50 <__smakebuf_r+0x1c>
 800ce40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce44:	6023      	str	r3, [r4, #0]
 800ce46:	6123      	str	r3, [r4, #16]
 800ce48:	2301      	movs	r3, #1
 800ce4a:	6163      	str	r3, [r4, #20]
 800ce4c:	b002      	add	sp, #8
 800ce4e:	bd70      	pop	{r4, r5, r6, pc}
 800ce50:	ab01      	add	r3, sp, #4
 800ce52:	466a      	mov	r2, sp
 800ce54:	f7ff ffc8 	bl	800cde8 <__swhatbuf_r>
 800ce58:	9900      	ldr	r1, [sp, #0]
 800ce5a:	4605      	mov	r5, r0
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	f7fe f8a9 	bl	800afb4 <_malloc_r>
 800ce62:	b948      	cbnz	r0, 800ce78 <__smakebuf_r+0x44>
 800ce64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce68:	059a      	lsls	r2, r3, #22
 800ce6a:	d4ef      	bmi.n	800ce4c <__smakebuf_r+0x18>
 800ce6c:	f023 0303 	bic.w	r3, r3, #3
 800ce70:	f043 0302 	orr.w	r3, r3, #2
 800ce74:	81a3      	strh	r3, [r4, #12]
 800ce76:	e7e3      	b.n	800ce40 <__smakebuf_r+0xc>
 800ce78:	89a3      	ldrh	r3, [r4, #12]
 800ce7a:	6020      	str	r0, [r4, #0]
 800ce7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce80:	81a3      	strh	r3, [r4, #12]
 800ce82:	9b00      	ldr	r3, [sp, #0]
 800ce84:	6163      	str	r3, [r4, #20]
 800ce86:	9b01      	ldr	r3, [sp, #4]
 800ce88:	6120      	str	r0, [r4, #16]
 800ce8a:	b15b      	cbz	r3, 800cea4 <__smakebuf_r+0x70>
 800ce8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce90:	4630      	mov	r0, r6
 800ce92:	f000 f87d 	bl	800cf90 <_isatty_r>
 800ce96:	b128      	cbz	r0, 800cea4 <__smakebuf_r+0x70>
 800ce98:	89a3      	ldrh	r3, [r4, #12]
 800ce9a:	f023 0303 	bic.w	r3, r3, #3
 800ce9e:	f043 0301 	orr.w	r3, r3, #1
 800cea2:	81a3      	strh	r3, [r4, #12]
 800cea4:	89a3      	ldrh	r3, [r4, #12]
 800cea6:	431d      	orrs	r5, r3
 800cea8:	81a5      	strh	r5, [r4, #12]
 800ceaa:	e7cf      	b.n	800ce4c <__smakebuf_r+0x18>

0800ceac <_putc_r>:
 800ceac:	b570      	push	{r4, r5, r6, lr}
 800ceae:	460d      	mov	r5, r1
 800ceb0:	4614      	mov	r4, r2
 800ceb2:	4606      	mov	r6, r0
 800ceb4:	b118      	cbz	r0, 800cebe <_putc_r+0x12>
 800ceb6:	6a03      	ldr	r3, [r0, #32]
 800ceb8:	b90b      	cbnz	r3, 800cebe <_putc_r+0x12>
 800ceba:	f7fc ff55 	bl	8009d68 <__sinit>
 800cebe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cec0:	07d8      	lsls	r0, r3, #31
 800cec2:	d405      	bmi.n	800ced0 <_putc_r+0x24>
 800cec4:	89a3      	ldrh	r3, [r4, #12]
 800cec6:	0599      	lsls	r1, r3, #22
 800cec8:	d402      	bmi.n	800ced0 <_putc_r+0x24>
 800ceca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cecc:	f7fd f96c 	bl	800a1a8 <__retarget_lock_acquire_recursive>
 800ced0:	68a3      	ldr	r3, [r4, #8]
 800ced2:	3b01      	subs	r3, #1
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	60a3      	str	r3, [r4, #8]
 800ced8:	da05      	bge.n	800cee6 <_putc_r+0x3a>
 800ceda:	69a2      	ldr	r2, [r4, #24]
 800cedc:	4293      	cmp	r3, r2
 800cede:	db12      	blt.n	800cf06 <_putc_r+0x5a>
 800cee0:	b2eb      	uxtb	r3, r5
 800cee2:	2b0a      	cmp	r3, #10
 800cee4:	d00f      	beq.n	800cf06 <_putc_r+0x5a>
 800cee6:	6823      	ldr	r3, [r4, #0]
 800cee8:	1c5a      	adds	r2, r3, #1
 800ceea:	6022      	str	r2, [r4, #0]
 800ceec:	701d      	strb	r5, [r3, #0]
 800ceee:	b2ed      	uxtb	r5, r5
 800cef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cef2:	07da      	lsls	r2, r3, #31
 800cef4:	d405      	bmi.n	800cf02 <_putc_r+0x56>
 800cef6:	89a3      	ldrh	r3, [r4, #12]
 800cef8:	059b      	lsls	r3, r3, #22
 800cefa:	d402      	bmi.n	800cf02 <_putc_r+0x56>
 800cefc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cefe:	f7fd f954 	bl	800a1aa <__retarget_lock_release_recursive>
 800cf02:	4628      	mov	r0, r5
 800cf04:	bd70      	pop	{r4, r5, r6, pc}
 800cf06:	4629      	mov	r1, r5
 800cf08:	4622      	mov	r2, r4
 800cf0a:	4630      	mov	r0, r6
 800cf0c:	f7fd f83b 	bl	8009f86 <__swbuf_r>
 800cf10:	4605      	mov	r5, r0
 800cf12:	e7ed      	b.n	800cef0 <_putc_r+0x44>

0800cf14 <memmove>:
 800cf14:	4288      	cmp	r0, r1
 800cf16:	b510      	push	{r4, lr}
 800cf18:	eb01 0402 	add.w	r4, r1, r2
 800cf1c:	d902      	bls.n	800cf24 <memmove+0x10>
 800cf1e:	4284      	cmp	r4, r0
 800cf20:	4623      	mov	r3, r4
 800cf22:	d807      	bhi.n	800cf34 <memmove+0x20>
 800cf24:	1e43      	subs	r3, r0, #1
 800cf26:	42a1      	cmp	r1, r4
 800cf28:	d008      	beq.n	800cf3c <memmove+0x28>
 800cf2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf32:	e7f8      	b.n	800cf26 <memmove+0x12>
 800cf34:	4402      	add	r2, r0
 800cf36:	4601      	mov	r1, r0
 800cf38:	428a      	cmp	r2, r1
 800cf3a:	d100      	bne.n	800cf3e <memmove+0x2a>
 800cf3c:	bd10      	pop	{r4, pc}
 800cf3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf46:	e7f7      	b.n	800cf38 <memmove+0x24>

0800cf48 <strncmp>:
 800cf48:	b510      	push	{r4, lr}
 800cf4a:	b16a      	cbz	r2, 800cf68 <strncmp+0x20>
 800cf4c:	3901      	subs	r1, #1
 800cf4e:	1884      	adds	r4, r0, r2
 800cf50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d103      	bne.n	800cf64 <strncmp+0x1c>
 800cf5c:	42a0      	cmp	r0, r4
 800cf5e:	d001      	beq.n	800cf64 <strncmp+0x1c>
 800cf60:	2a00      	cmp	r2, #0
 800cf62:	d1f5      	bne.n	800cf50 <strncmp+0x8>
 800cf64:	1ad0      	subs	r0, r2, r3
 800cf66:	bd10      	pop	{r4, pc}
 800cf68:	4610      	mov	r0, r2
 800cf6a:	e7fc      	b.n	800cf66 <strncmp+0x1e>

0800cf6c <_fstat_r>:
 800cf6c:	b538      	push	{r3, r4, r5, lr}
 800cf6e:	4d07      	ldr	r5, [pc, #28]	; (800cf8c <_fstat_r+0x20>)
 800cf70:	2300      	movs	r3, #0
 800cf72:	4604      	mov	r4, r0
 800cf74:	4608      	mov	r0, r1
 800cf76:	4611      	mov	r1, r2
 800cf78:	602b      	str	r3, [r5, #0]
 800cf7a:	f7f4 ffb0 	bl	8001ede <_fstat>
 800cf7e:	1c43      	adds	r3, r0, #1
 800cf80:	d102      	bne.n	800cf88 <_fstat_r+0x1c>
 800cf82:	682b      	ldr	r3, [r5, #0]
 800cf84:	b103      	cbz	r3, 800cf88 <_fstat_r+0x1c>
 800cf86:	6023      	str	r3, [r4, #0]
 800cf88:	bd38      	pop	{r3, r4, r5, pc}
 800cf8a:	bf00      	nop
 800cf8c:	200023dc 	.word	0x200023dc

0800cf90 <_isatty_r>:
 800cf90:	b538      	push	{r3, r4, r5, lr}
 800cf92:	4d06      	ldr	r5, [pc, #24]	; (800cfac <_isatty_r+0x1c>)
 800cf94:	2300      	movs	r3, #0
 800cf96:	4604      	mov	r4, r0
 800cf98:	4608      	mov	r0, r1
 800cf9a:	602b      	str	r3, [r5, #0]
 800cf9c:	f7f4 ffaf 	bl	8001efe <_isatty>
 800cfa0:	1c43      	adds	r3, r0, #1
 800cfa2:	d102      	bne.n	800cfaa <_isatty_r+0x1a>
 800cfa4:	682b      	ldr	r3, [r5, #0]
 800cfa6:	b103      	cbz	r3, 800cfaa <_isatty_r+0x1a>
 800cfa8:	6023      	str	r3, [r4, #0]
 800cfaa:	bd38      	pop	{r3, r4, r5, pc}
 800cfac:	200023dc 	.word	0x200023dc

0800cfb0 <_sbrk_r>:
 800cfb0:	b538      	push	{r3, r4, r5, lr}
 800cfb2:	4d06      	ldr	r5, [pc, #24]	; (800cfcc <_sbrk_r+0x1c>)
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	4604      	mov	r4, r0
 800cfb8:	4608      	mov	r0, r1
 800cfba:	602b      	str	r3, [r5, #0]
 800cfbc:	f7f4 ffb8 	bl	8001f30 <_sbrk>
 800cfc0:	1c43      	adds	r3, r0, #1
 800cfc2:	d102      	bne.n	800cfca <_sbrk_r+0x1a>
 800cfc4:	682b      	ldr	r3, [r5, #0]
 800cfc6:	b103      	cbz	r3, 800cfca <_sbrk_r+0x1a>
 800cfc8:	6023      	str	r3, [r4, #0]
 800cfca:	bd38      	pop	{r3, r4, r5, pc}
 800cfcc:	200023dc 	.word	0x200023dc

0800cfd0 <nan>:
 800cfd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cfd8 <nan+0x8>
 800cfd4:	4770      	bx	lr
 800cfd6:	bf00      	nop
 800cfd8:	00000000 	.word	0x00000000
 800cfdc:	7ff80000 	.word	0x7ff80000

0800cfe0 <__assert_func>:
 800cfe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfe2:	4614      	mov	r4, r2
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	4b09      	ldr	r3, [pc, #36]	; (800d00c <__assert_func+0x2c>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4605      	mov	r5, r0
 800cfec:	68d8      	ldr	r0, [r3, #12]
 800cfee:	b14c      	cbz	r4, 800d004 <__assert_func+0x24>
 800cff0:	4b07      	ldr	r3, [pc, #28]	; (800d010 <__assert_func+0x30>)
 800cff2:	9100      	str	r1, [sp, #0]
 800cff4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cff8:	4906      	ldr	r1, [pc, #24]	; (800d014 <__assert_func+0x34>)
 800cffa:	462b      	mov	r3, r5
 800cffc:	f000 fbca 	bl	800d794 <fiprintf>
 800d000:	f000 fbda 	bl	800d7b8 <abort>
 800d004:	4b04      	ldr	r3, [pc, #16]	; (800d018 <__assert_func+0x38>)
 800d006:	461c      	mov	r4, r3
 800d008:	e7f3      	b.n	800cff2 <__assert_func+0x12>
 800d00a:	bf00      	nop
 800d00c:	20000154 	.word	0x20000154
 800d010:	0800dd02 	.word	0x0800dd02
 800d014:	0800dd0f 	.word	0x0800dd0f
 800d018:	0800dd3d 	.word	0x0800dd3d

0800d01c <_calloc_r>:
 800d01c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d01e:	fba1 2402 	umull	r2, r4, r1, r2
 800d022:	b94c      	cbnz	r4, 800d038 <_calloc_r+0x1c>
 800d024:	4611      	mov	r1, r2
 800d026:	9201      	str	r2, [sp, #4]
 800d028:	f7fd ffc4 	bl	800afb4 <_malloc_r>
 800d02c:	9a01      	ldr	r2, [sp, #4]
 800d02e:	4605      	mov	r5, r0
 800d030:	b930      	cbnz	r0, 800d040 <_calloc_r+0x24>
 800d032:	4628      	mov	r0, r5
 800d034:	b003      	add	sp, #12
 800d036:	bd30      	pop	{r4, r5, pc}
 800d038:	220c      	movs	r2, #12
 800d03a:	6002      	str	r2, [r0, #0]
 800d03c:	2500      	movs	r5, #0
 800d03e:	e7f8      	b.n	800d032 <_calloc_r+0x16>
 800d040:	4621      	mov	r1, r4
 800d042:	f7fd f835 	bl	800a0b0 <memset>
 800d046:	e7f4      	b.n	800d032 <_calloc_r+0x16>

0800d048 <rshift>:
 800d048:	6903      	ldr	r3, [r0, #16]
 800d04a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d04e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d052:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d056:	f100 0414 	add.w	r4, r0, #20
 800d05a:	dd45      	ble.n	800d0e8 <rshift+0xa0>
 800d05c:	f011 011f 	ands.w	r1, r1, #31
 800d060:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d064:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d068:	d10c      	bne.n	800d084 <rshift+0x3c>
 800d06a:	f100 0710 	add.w	r7, r0, #16
 800d06e:	4629      	mov	r1, r5
 800d070:	42b1      	cmp	r1, r6
 800d072:	d334      	bcc.n	800d0de <rshift+0x96>
 800d074:	1a9b      	subs	r3, r3, r2
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	1eea      	subs	r2, r5, #3
 800d07a:	4296      	cmp	r6, r2
 800d07c:	bf38      	it	cc
 800d07e:	2300      	movcc	r3, #0
 800d080:	4423      	add	r3, r4
 800d082:	e015      	b.n	800d0b0 <rshift+0x68>
 800d084:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d088:	f1c1 0820 	rsb	r8, r1, #32
 800d08c:	40cf      	lsrs	r7, r1
 800d08e:	f105 0e04 	add.w	lr, r5, #4
 800d092:	46a1      	mov	r9, r4
 800d094:	4576      	cmp	r6, lr
 800d096:	46f4      	mov	ip, lr
 800d098:	d815      	bhi.n	800d0c6 <rshift+0x7e>
 800d09a:	1a9a      	subs	r2, r3, r2
 800d09c:	0092      	lsls	r2, r2, #2
 800d09e:	3a04      	subs	r2, #4
 800d0a0:	3501      	adds	r5, #1
 800d0a2:	42ae      	cmp	r6, r5
 800d0a4:	bf38      	it	cc
 800d0a6:	2200      	movcc	r2, #0
 800d0a8:	18a3      	adds	r3, r4, r2
 800d0aa:	50a7      	str	r7, [r4, r2]
 800d0ac:	b107      	cbz	r7, 800d0b0 <rshift+0x68>
 800d0ae:	3304      	adds	r3, #4
 800d0b0:	1b1a      	subs	r2, r3, r4
 800d0b2:	42a3      	cmp	r3, r4
 800d0b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d0b8:	bf08      	it	eq
 800d0ba:	2300      	moveq	r3, #0
 800d0bc:	6102      	str	r2, [r0, #16]
 800d0be:	bf08      	it	eq
 800d0c0:	6143      	streq	r3, [r0, #20]
 800d0c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0c6:	f8dc c000 	ldr.w	ip, [ip]
 800d0ca:	fa0c fc08 	lsl.w	ip, ip, r8
 800d0ce:	ea4c 0707 	orr.w	r7, ip, r7
 800d0d2:	f849 7b04 	str.w	r7, [r9], #4
 800d0d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d0da:	40cf      	lsrs	r7, r1
 800d0dc:	e7da      	b.n	800d094 <rshift+0x4c>
 800d0de:	f851 cb04 	ldr.w	ip, [r1], #4
 800d0e2:	f847 cf04 	str.w	ip, [r7, #4]!
 800d0e6:	e7c3      	b.n	800d070 <rshift+0x28>
 800d0e8:	4623      	mov	r3, r4
 800d0ea:	e7e1      	b.n	800d0b0 <rshift+0x68>

0800d0ec <__hexdig_fun>:
 800d0ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d0f0:	2b09      	cmp	r3, #9
 800d0f2:	d802      	bhi.n	800d0fa <__hexdig_fun+0xe>
 800d0f4:	3820      	subs	r0, #32
 800d0f6:	b2c0      	uxtb	r0, r0
 800d0f8:	4770      	bx	lr
 800d0fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d0fe:	2b05      	cmp	r3, #5
 800d100:	d801      	bhi.n	800d106 <__hexdig_fun+0x1a>
 800d102:	3847      	subs	r0, #71	; 0x47
 800d104:	e7f7      	b.n	800d0f6 <__hexdig_fun+0xa>
 800d106:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d10a:	2b05      	cmp	r3, #5
 800d10c:	d801      	bhi.n	800d112 <__hexdig_fun+0x26>
 800d10e:	3827      	subs	r0, #39	; 0x27
 800d110:	e7f1      	b.n	800d0f6 <__hexdig_fun+0xa>
 800d112:	2000      	movs	r0, #0
 800d114:	4770      	bx	lr
	...

0800d118 <__gethex>:
 800d118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d11c:	4617      	mov	r7, r2
 800d11e:	680a      	ldr	r2, [r1, #0]
 800d120:	b085      	sub	sp, #20
 800d122:	f102 0b02 	add.w	fp, r2, #2
 800d126:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d12a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d12e:	4681      	mov	r9, r0
 800d130:	468a      	mov	sl, r1
 800d132:	9302      	str	r3, [sp, #8]
 800d134:	32fe      	adds	r2, #254	; 0xfe
 800d136:	eb02 030b 	add.w	r3, r2, fp
 800d13a:	46d8      	mov	r8, fp
 800d13c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d140:	9301      	str	r3, [sp, #4]
 800d142:	2830      	cmp	r0, #48	; 0x30
 800d144:	d0f7      	beq.n	800d136 <__gethex+0x1e>
 800d146:	f7ff ffd1 	bl	800d0ec <__hexdig_fun>
 800d14a:	4604      	mov	r4, r0
 800d14c:	2800      	cmp	r0, #0
 800d14e:	d138      	bne.n	800d1c2 <__gethex+0xaa>
 800d150:	49a7      	ldr	r1, [pc, #668]	; (800d3f0 <__gethex+0x2d8>)
 800d152:	2201      	movs	r2, #1
 800d154:	4640      	mov	r0, r8
 800d156:	f7ff fef7 	bl	800cf48 <strncmp>
 800d15a:	4606      	mov	r6, r0
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d169      	bne.n	800d234 <__gethex+0x11c>
 800d160:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d164:	465d      	mov	r5, fp
 800d166:	f7ff ffc1 	bl	800d0ec <__hexdig_fun>
 800d16a:	2800      	cmp	r0, #0
 800d16c:	d064      	beq.n	800d238 <__gethex+0x120>
 800d16e:	465a      	mov	r2, fp
 800d170:	7810      	ldrb	r0, [r2, #0]
 800d172:	2830      	cmp	r0, #48	; 0x30
 800d174:	4690      	mov	r8, r2
 800d176:	f102 0201 	add.w	r2, r2, #1
 800d17a:	d0f9      	beq.n	800d170 <__gethex+0x58>
 800d17c:	f7ff ffb6 	bl	800d0ec <__hexdig_fun>
 800d180:	2301      	movs	r3, #1
 800d182:	fab0 f480 	clz	r4, r0
 800d186:	0964      	lsrs	r4, r4, #5
 800d188:	465e      	mov	r6, fp
 800d18a:	9301      	str	r3, [sp, #4]
 800d18c:	4642      	mov	r2, r8
 800d18e:	4615      	mov	r5, r2
 800d190:	3201      	adds	r2, #1
 800d192:	7828      	ldrb	r0, [r5, #0]
 800d194:	f7ff ffaa 	bl	800d0ec <__hexdig_fun>
 800d198:	2800      	cmp	r0, #0
 800d19a:	d1f8      	bne.n	800d18e <__gethex+0x76>
 800d19c:	4994      	ldr	r1, [pc, #592]	; (800d3f0 <__gethex+0x2d8>)
 800d19e:	2201      	movs	r2, #1
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	f7ff fed1 	bl	800cf48 <strncmp>
 800d1a6:	b978      	cbnz	r0, 800d1c8 <__gethex+0xb0>
 800d1a8:	b946      	cbnz	r6, 800d1bc <__gethex+0xa4>
 800d1aa:	1c6e      	adds	r6, r5, #1
 800d1ac:	4632      	mov	r2, r6
 800d1ae:	4615      	mov	r5, r2
 800d1b0:	3201      	adds	r2, #1
 800d1b2:	7828      	ldrb	r0, [r5, #0]
 800d1b4:	f7ff ff9a 	bl	800d0ec <__hexdig_fun>
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	d1f8      	bne.n	800d1ae <__gethex+0x96>
 800d1bc:	1b73      	subs	r3, r6, r5
 800d1be:	009e      	lsls	r6, r3, #2
 800d1c0:	e004      	b.n	800d1cc <__gethex+0xb4>
 800d1c2:	2400      	movs	r4, #0
 800d1c4:	4626      	mov	r6, r4
 800d1c6:	e7e1      	b.n	800d18c <__gethex+0x74>
 800d1c8:	2e00      	cmp	r6, #0
 800d1ca:	d1f7      	bne.n	800d1bc <__gethex+0xa4>
 800d1cc:	782b      	ldrb	r3, [r5, #0]
 800d1ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d1d2:	2b50      	cmp	r3, #80	; 0x50
 800d1d4:	d13d      	bne.n	800d252 <__gethex+0x13a>
 800d1d6:	786b      	ldrb	r3, [r5, #1]
 800d1d8:	2b2b      	cmp	r3, #43	; 0x2b
 800d1da:	d02f      	beq.n	800d23c <__gethex+0x124>
 800d1dc:	2b2d      	cmp	r3, #45	; 0x2d
 800d1de:	d031      	beq.n	800d244 <__gethex+0x12c>
 800d1e0:	1c69      	adds	r1, r5, #1
 800d1e2:	f04f 0b00 	mov.w	fp, #0
 800d1e6:	7808      	ldrb	r0, [r1, #0]
 800d1e8:	f7ff ff80 	bl	800d0ec <__hexdig_fun>
 800d1ec:	1e42      	subs	r2, r0, #1
 800d1ee:	b2d2      	uxtb	r2, r2
 800d1f0:	2a18      	cmp	r2, #24
 800d1f2:	d82e      	bhi.n	800d252 <__gethex+0x13a>
 800d1f4:	f1a0 0210 	sub.w	r2, r0, #16
 800d1f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d1fc:	f7ff ff76 	bl	800d0ec <__hexdig_fun>
 800d200:	f100 3cff 	add.w	ip, r0, #4294967295
 800d204:	fa5f fc8c 	uxtb.w	ip, ip
 800d208:	f1bc 0f18 	cmp.w	ip, #24
 800d20c:	d91d      	bls.n	800d24a <__gethex+0x132>
 800d20e:	f1bb 0f00 	cmp.w	fp, #0
 800d212:	d000      	beq.n	800d216 <__gethex+0xfe>
 800d214:	4252      	negs	r2, r2
 800d216:	4416      	add	r6, r2
 800d218:	f8ca 1000 	str.w	r1, [sl]
 800d21c:	b1dc      	cbz	r4, 800d256 <__gethex+0x13e>
 800d21e:	9b01      	ldr	r3, [sp, #4]
 800d220:	2b00      	cmp	r3, #0
 800d222:	bf14      	ite	ne
 800d224:	f04f 0800 	movne.w	r8, #0
 800d228:	f04f 0806 	moveq.w	r8, #6
 800d22c:	4640      	mov	r0, r8
 800d22e:	b005      	add	sp, #20
 800d230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d234:	4645      	mov	r5, r8
 800d236:	4626      	mov	r6, r4
 800d238:	2401      	movs	r4, #1
 800d23a:	e7c7      	b.n	800d1cc <__gethex+0xb4>
 800d23c:	f04f 0b00 	mov.w	fp, #0
 800d240:	1ca9      	adds	r1, r5, #2
 800d242:	e7d0      	b.n	800d1e6 <__gethex+0xce>
 800d244:	f04f 0b01 	mov.w	fp, #1
 800d248:	e7fa      	b.n	800d240 <__gethex+0x128>
 800d24a:	230a      	movs	r3, #10
 800d24c:	fb03 0002 	mla	r0, r3, r2, r0
 800d250:	e7d0      	b.n	800d1f4 <__gethex+0xdc>
 800d252:	4629      	mov	r1, r5
 800d254:	e7e0      	b.n	800d218 <__gethex+0x100>
 800d256:	eba5 0308 	sub.w	r3, r5, r8
 800d25a:	3b01      	subs	r3, #1
 800d25c:	4621      	mov	r1, r4
 800d25e:	2b07      	cmp	r3, #7
 800d260:	dc0a      	bgt.n	800d278 <__gethex+0x160>
 800d262:	4648      	mov	r0, r9
 800d264:	f7fd ff32 	bl	800b0cc <_Balloc>
 800d268:	4604      	mov	r4, r0
 800d26a:	b940      	cbnz	r0, 800d27e <__gethex+0x166>
 800d26c:	4b61      	ldr	r3, [pc, #388]	; (800d3f4 <__gethex+0x2dc>)
 800d26e:	4602      	mov	r2, r0
 800d270:	21e4      	movs	r1, #228	; 0xe4
 800d272:	4861      	ldr	r0, [pc, #388]	; (800d3f8 <__gethex+0x2e0>)
 800d274:	f7ff feb4 	bl	800cfe0 <__assert_func>
 800d278:	3101      	adds	r1, #1
 800d27a:	105b      	asrs	r3, r3, #1
 800d27c:	e7ef      	b.n	800d25e <__gethex+0x146>
 800d27e:	f100 0a14 	add.w	sl, r0, #20
 800d282:	2300      	movs	r3, #0
 800d284:	495a      	ldr	r1, [pc, #360]	; (800d3f0 <__gethex+0x2d8>)
 800d286:	f8cd a004 	str.w	sl, [sp, #4]
 800d28a:	469b      	mov	fp, r3
 800d28c:	45a8      	cmp	r8, r5
 800d28e:	d342      	bcc.n	800d316 <__gethex+0x1fe>
 800d290:	9801      	ldr	r0, [sp, #4]
 800d292:	f840 bb04 	str.w	fp, [r0], #4
 800d296:	eba0 000a 	sub.w	r0, r0, sl
 800d29a:	1080      	asrs	r0, r0, #2
 800d29c:	6120      	str	r0, [r4, #16]
 800d29e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d2a2:	4658      	mov	r0, fp
 800d2a4:	f7fe f804 	bl	800b2b0 <__hi0bits>
 800d2a8:	683d      	ldr	r5, [r7, #0]
 800d2aa:	eba8 0000 	sub.w	r0, r8, r0
 800d2ae:	42a8      	cmp	r0, r5
 800d2b0:	dd59      	ble.n	800d366 <__gethex+0x24e>
 800d2b2:	eba0 0805 	sub.w	r8, r0, r5
 800d2b6:	4641      	mov	r1, r8
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	f7fe fb93 	bl	800b9e4 <__any_on>
 800d2be:	4683      	mov	fp, r0
 800d2c0:	b1b8      	cbz	r0, 800d2f2 <__gethex+0x1da>
 800d2c2:	f108 33ff 	add.w	r3, r8, #4294967295
 800d2c6:	1159      	asrs	r1, r3, #5
 800d2c8:	f003 021f 	and.w	r2, r3, #31
 800d2cc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d2d0:	f04f 0b01 	mov.w	fp, #1
 800d2d4:	fa0b f202 	lsl.w	r2, fp, r2
 800d2d8:	420a      	tst	r2, r1
 800d2da:	d00a      	beq.n	800d2f2 <__gethex+0x1da>
 800d2dc:	455b      	cmp	r3, fp
 800d2de:	dd06      	ble.n	800d2ee <__gethex+0x1d6>
 800d2e0:	f1a8 0102 	sub.w	r1, r8, #2
 800d2e4:	4620      	mov	r0, r4
 800d2e6:	f7fe fb7d 	bl	800b9e4 <__any_on>
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	d138      	bne.n	800d360 <__gethex+0x248>
 800d2ee:	f04f 0b02 	mov.w	fp, #2
 800d2f2:	4641      	mov	r1, r8
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f7ff fea7 	bl	800d048 <rshift>
 800d2fa:	4446      	add	r6, r8
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	42b3      	cmp	r3, r6
 800d300:	da41      	bge.n	800d386 <__gethex+0x26e>
 800d302:	4621      	mov	r1, r4
 800d304:	4648      	mov	r0, r9
 800d306:	f7fd ff21 	bl	800b14c <_Bfree>
 800d30a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d30c:	2300      	movs	r3, #0
 800d30e:	6013      	str	r3, [r2, #0]
 800d310:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d314:	e78a      	b.n	800d22c <__gethex+0x114>
 800d316:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d31a:	2a2e      	cmp	r2, #46	; 0x2e
 800d31c:	d014      	beq.n	800d348 <__gethex+0x230>
 800d31e:	2b20      	cmp	r3, #32
 800d320:	d106      	bne.n	800d330 <__gethex+0x218>
 800d322:	9b01      	ldr	r3, [sp, #4]
 800d324:	f843 bb04 	str.w	fp, [r3], #4
 800d328:	f04f 0b00 	mov.w	fp, #0
 800d32c:	9301      	str	r3, [sp, #4]
 800d32e:	465b      	mov	r3, fp
 800d330:	7828      	ldrb	r0, [r5, #0]
 800d332:	9303      	str	r3, [sp, #12]
 800d334:	f7ff feda 	bl	800d0ec <__hexdig_fun>
 800d338:	9b03      	ldr	r3, [sp, #12]
 800d33a:	f000 000f 	and.w	r0, r0, #15
 800d33e:	4098      	lsls	r0, r3
 800d340:	ea4b 0b00 	orr.w	fp, fp, r0
 800d344:	3304      	adds	r3, #4
 800d346:	e7a1      	b.n	800d28c <__gethex+0x174>
 800d348:	45a8      	cmp	r8, r5
 800d34a:	d8e8      	bhi.n	800d31e <__gethex+0x206>
 800d34c:	2201      	movs	r2, #1
 800d34e:	4628      	mov	r0, r5
 800d350:	9303      	str	r3, [sp, #12]
 800d352:	f7ff fdf9 	bl	800cf48 <strncmp>
 800d356:	4926      	ldr	r1, [pc, #152]	; (800d3f0 <__gethex+0x2d8>)
 800d358:	9b03      	ldr	r3, [sp, #12]
 800d35a:	2800      	cmp	r0, #0
 800d35c:	d1df      	bne.n	800d31e <__gethex+0x206>
 800d35e:	e795      	b.n	800d28c <__gethex+0x174>
 800d360:	f04f 0b03 	mov.w	fp, #3
 800d364:	e7c5      	b.n	800d2f2 <__gethex+0x1da>
 800d366:	da0b      	bge.n	800d380 <__gethex+0x268>
 800d368:	eba5 0800 	sub.w	r8, r5, r0
 800d36c:	4621      	mov	r1, r4
 800d36e:	4642      	mov	r2, r8
 800d370:	4648      	mov	r0, r9
 800d372:	f7fe f905 	bl	800b580 <__lshift>
 800d376:	eba6 0608 	sub.w	r6, r6, r8
 800d37a:	4604      	mov	r4, r0
 800d37c:	f100 0a14 	add.w	sl, r0, #20
 800d380:	f04f 0b00 	mov.w	fp, #0
 800d384:	e7ba      	b.n	800d2fc <__gethex+0x1e4>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	42b3      	cmp	r3, r6
 800d38a:	dd73      	ble.n	800d474 <__gethex+0x35c>
 800d38c:	1b9e      	subs	r6, r3, r6
 800d38e:	42b5      	cmp	r5, r6
 800d390:	dc34      	bgt.n	800d3fc <__gethex+0x2e4>
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2b02      	cmp	r3, #2
 800d396:	d023      	beq.n	800d3e0 <__gethex+0x2c8>
 800d398:	2b03      	cmp	r3, #3
 800d39a:	d025      	beq.n	800d3e8 <__gethex+0x2d0>
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d115      	bne.n	800d3cc <__gethex+0x2b4>
 800d3a0:	42b5      	cmp	r5, r6
 800d3a2:	d113      	bne.n	800d3cc <__gethex+0x2b4>
 800d3a4:	2d01      	cmp	r5, #1
 800d3a6:	d10b      	bne.n	800d3c0 <__gethex+0x2a8>
 800d3a8:	9a02      	ldr	r2, [sp, #8]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6013      	str	r3, [r2, #0]
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	6123      	str	r3, [r4, #16]
 800d3b2:	f8ca 3000 	str.w	r3, [sl]
 800d3b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3b8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d3bc:	601c      	str	r4, [r3, #0]
 800d3be:	e735      	b.n	800d22c <__gethex+0x114>
 800d3c0:	1e69      	subs	r1, r5, #1
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f7fe fb0e 	bl	800b9e4 <__any_on>
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d1ed      	bne.n	800d3a8 <__gethex+0x290>
 800d3cc:	4621      	mov	r1, r4
 800d3ce:	4648      	mov	r0, r9
 800d3d0:	f7fd febc 	bl	800b14c <_Bfree>
 800d3d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	6013      	str	r3, [r2, #0]
 800d3da:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d3de:	e725      	b.n	800d22c <__gethex+0x114>
 800d3e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d1f2      	bne.n	800d3cc <__gethex+0x2b4>
 800d3e6:	e7df      	b.n	800d3a8 <__gethex+0x290>
 800d3e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1dc      	bne.n	800d3a8 <__gethex+0x290>
 800d3ee:	e7ed      	b.n	800d3cc <__gethex+0x2b4>
 800d3f0:	0800db94 	.word	0x0800db94
 800d3f4:	0800da29 	.word	0x0800da29
 800d3f8:	0800dd3e 	.word	0x0800dd3e
 800d3fc:	f106 38ff 	add.w	r8, r6, #4294967295
 800d400:	f1bb 0f00 	cmp.w	fp, #0
 800d404:	d133      	bne.n	800d46e <__gethex+0x356>
 800d406:	f1b8 0f00 	cmp.w	r8, #0
 800d40a:	d004      	beq.n	800d416 <__gethex+0x2fe>
 800d40c:	4641      	mov	r1, r8
 800d40e:	4620      	mov	r0, r4
 800d410:	f7fe fae8 	bl	800b9e4 <__any_on>
 800d414:	4683      	mov	fp, r0
 800d416:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d41a:	2301      	movs	r3, #1
 800d41c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d420:	f008 081f 	and.w	r8, r8, #31
 800d424:	fa03 f308 	lsl.w	r3, r3, r8
 800d428:	4213      	tst	r3, r2
 800d42a:	4631      	mov	r1, r6
 800d42c:	4620      	mov	r0, r4
 800d42e:	bf18      	it	ne
 800d430:	f04b 0b02 	orrne.w	fp, fp, #2
 800d434:	1bad      	subs	r5, r5, r6
 800d436:	f7ff fe07 	bl	800d048 <rshift>
 800d43a:	687e      	ldr	r6, [r7, #4]
 800d43c:	f04f 0802 	mov.w	r8, #2
 800d440:	f1bb 0f00 	cmp.w	fp, #0
 800d444:	d04a      	beq.n	800d4dc <__gethex+0x3c4>
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2b02      	cmp	r3, #2
 800d44a:	d016      	beq.n	800d47a <__gethex+0x362>
 800d44c:	2b03      	cmp	r3, #3
 800d44e:	d018      	beq.n	800d482 <__gethex+0x36a>
 800d450:	2b01      	cmp	r3, #1
 800d452:	d109      	bne.n	800d468 <__gethex+0x350>
 800d454:	f01b 0f02 	tst.w	fp, #2
 800d458:	d006      	beq.n	800d468 <__gethex+0x350>
 800d45a:	f8da 3000 	ldr.w	r3, [sl]
 800d45e:	ea4b 0b03 	orr.w	fp, fp, r3
 800d462:	f01b 0f01 	tst.w	fp, #1
 800d466:	d10f      	bne.n	800d488 <__gethex+0x370>
 800d468:	f048 0810 	orr.w	r8, r8, #16
 800d46c:	e036      	b.n	800d4dc <__gethex+0x3c4>
 800d46e:	f04f 0b01 	mov.w	fp, #1
 800d472:	e7d0      	b.n	800d416 <__gethex+0x2fe>
 800d474:	f04f 0801 	mov.w	r8, #1
 800d478:	e7e2      	b.n	800d440 <__gethex+0x328>
 800d47a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d47c:	f1c3 0301 	rsb	r3, r3, #1
 800d480:	930f      	str	r3, [sp, #60]	; 0x3c
 800d482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d484:	2b00      	cmp	r3, #0
 800d486:	d0ef      	beq.n	800d468 <__gethex+0x350>
 800d488:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d48c:	f104 0214 	add.w	r2, r4, #20
 800d490:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d494:	9301      	str	r3, [sp, #4]
 800d496:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d49a:	2300      	movs	r3, #0
 800d49c:	4694      	mov	ip, r2
 800d49e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d4a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d4a6:	d01e      	beq.n	800d4e6 <__gethex+0x3ce>
 800d4a8:	3101      	adds	r1, #1
 800d4aa:	f8cc 1000 	str.w	r1, [ip]
 800d4ae:	f1b8 0f02 	cmp.w	r8, #2
 800d4b2:	f104 0214 	add.w	r2, r4, #20
 800d4b6:	d13d      	bne.n	800d534 <__gethex+0x41c>
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	3b01      	subs	r3, #1
 800d4bc:	42ab      	cmp	r3, r5
 800d4be:	d10b      	bne.n	800d4d8 <__gethex+0x3c0>
 800d4c0:	1169      	asrs	r1, r5, #5
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	f005 051f 	and.w	r5, r5, #31
 800d4c8:	fa03 f505 	lsl.w	r5, r3, r5
 800d4cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4d0:	421d      	tst	r5, r3
 800d4d2:	bf18      	it	ne
 800d4d4:	f04f 0801 	movne.w	r8, #1
 800d4d8:	f048 0820 	orr.w	r8, r8, #32
 800d4dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4de:	601c      	str	r4, [r3, #0]
 800d4e0:	9b02      	ldr	r3, [sp, #8]
 800d4e2:	601e      	str	r6, [r3, #0]
 800d4e4:	e6a2      	b.n	800d22c <__gethex+0x114>
 800d4e6:	4290      	cmp	r0, r2
 800d4e8:	f842 3c04 	str.w	r3, [r2, #-4]
 800d4ec:	d8d6      	bhi.n	800d49c <__gethex+0x384>
 800d4ee:	68a2      	ldr	r2, [r4, #8]
 800d4f0:	4593      	cmp	fp, r2
 800d4f2:	db17      	blt.n	800d524 <__gethex+0x40c>
 800d4f4:	6861      	ldr	r1, [r4, #4]
 800d4f6:	4648      	mov	r0, r9
 800d4f8:	3101      	adds	r1, #1
 800d4fa:	f7fd fde7 	bl	800b0cc <_Balloc>
 800d4fe:	4682      	mov	sl, r0
 800d500:	b918      	cbnz	r0, 800d50a <__gethex+0x3f2>
 800d502:	4b1b      	ldr	r3, [pc, #108]	; (800d570 <__gethex+0x458>)
 800d504:	4602      	mov	r2, r0
 800d506:	2184      	movs	r1, #132	; 0x84
 800d508:	e6b3      	b.n	800d272 <__gethex+0x15a>
 800d50a:	6922      	ldr	r2, [r4, #16]
 800d50c:	3202      	adds	r2, #2
 800d50e:	f104 010c 	add.w	r1, r4, #12
 800d512:	0092      	lsls	r2, r2, #2
 800d514:	300c      	adds	r0, #12
 800d516:	f7fc fe49 	bl	800a1ac <memcpy>
 800d51a:	4621      	mov	r1, r4
 800d51c:	4648      	mov	r0, r9
 800d51e:	f7fd fe15 	bl	800b14c <_Bfree>
 800d522:	4654      	mov	r4, sl
 800d524:	6922      	ldr	r2, [r4, #16]
 800d526:	1c51      	adds	r1, r2, #1
 800d528:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d52c:	6121      	str	r1, [r4, #16]
 800d52e:	2101      	movs	r1, #1
 800d530:	6151      	str	r1, [r2, #20]
 800d532:	e7bc      	b.n	800d4ae <__gethex+0x396>
 800d534:	6921      	ldr	r1, [r4, #16]
 800d536:	4559      	cmp	r1, fp
 800d538:	dd0b      	ble.n	800d552 <__gethex+0x43a>
 800d53a:	2101      	movs	r1, #1
 800d53c:	4620      	mov	r0, r4
 800d53e:	f7ff fd83 	bl	800d048 <rshift>
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	3601      	adds	r6, #1
 800d546:	42b3      	cmp	r3, r6
 800d548:	f6ff aedb 	blt.w	800d302 <__gethex+0x1ea>
 800d54c:	f04f 0801 	mov.w	r8, #1
 800d550:	e7c2      	b.n	800d4d8 <__gethex+0x3c0>
 800d552:	f015 051f 	ands.w	r5, r5, #31
 800d556:	d0f9      	beq.n	800d54c <__gethex+0x434>
 800d558:	9b01      	ldr	r3, [sp, #4]
 800d55a:	441a      	add	r2, r3
 800d55c:	f1c5 0520 	rsb	r5, r5, #32
 800d560:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d564:	f7fd fea4 	bl	800b2b0 <__hi0bits>
 800d568:	42a8      	cmp	r0, r5
 800d56a:	dbe6      	blt.n	800d53a <__gethex+0x422>
 800d56c:	e7ee      	b.n	800d54c <__gethex+0x434>
 800d56e:	bf00      	nop
 800d570:	0800da29 	.word	0x0800da29

0800d574 <L_shift>:
 800d574:	f1c2 0208 	rsb	r2, r2, #8
 800d578:	0092      	lsls	r2, r2, #2
 800d57a:	b570      	push	{r4, r5, r6, lr}
 800d57c:	f1c2 0620 	rsb	r6, r2, #32
 800d580:	6843      	ldr	r3, [r0, #4]
 800d582:	6804      	ldr	r4, [r0, #0]
 800d584:	fa03 f506 	lsl.w	r5, r3, r6
 800d588:	432c      	orrs	r4, r5
 800d58a:	40d3      	lsrs	r3, r2
 800d58c:	6004      	str	r4, [r0, #0]
 800d58e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d592:	4288      	cmp	r0, r1
 800d594:	d3f4      	bcc.n	800d580 <L_shift+0xc>
 800d596:	bd70      	pop	{r4, r5, r6, pc}

0800d598 <__match>:
 800d598:	b530      	push	{r4, r5, lr}
 800d59a:	6803      	ldr	r3, [r0, #0]
 800d59c:	3301      	adds	r3, #1
 800d59e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5a2:	b914      	cbnz	r4, 800d5aa <__match+0x12>
 800d5a4:	6003      	str	r3, [r0, #0]
 800d5a6:	2001      	movs	r0, #1
 800d5a8:	bd30      	pop	{r4, r5, pc}
 800d5aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d5b2:	2d19      	cmp	r5, #25
 800d5b4:	bf98      	it	ls
 800d5b6:	3220      	addls	r2, #32
 800d5b8:	42a2      	cmp	r2, r4
 800d5ba:	d0f0      	beq.n	800d59e <__match+0x6>
 800d5bc:	2000      	movs	r0, #0
 800d5be:	e7f3      	b.n	800d5a8 <__match+0x10>

0800d5c0 <__hexnan>:
 800d5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c4:	680b      	ldr	r3, [r1, #0]
 800d5c6:	6801      	ldr	r1, [r0, #0]
 800d5c8:	115e      	asrs	r6, r3, #5
 800d5ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d5ce:	f013 031f 	ands.w	r3, r3, #31
 800d5d2:	b087      	sub	sp, #28
 800d5d4:	bf18      	it	ne
 800d5d6:	3604      	addne	r6, #4
 800d5d8:	2500      	movs	r5, #0
 800d5da:	1f37      	subs	r7, r6, #4
 800d5dc:	4682      	mov	sl, r0
 800d5de:	4690      	mov	r8, r2
 800d5e0:	9301      	str	r3, [sp, #4]
 800d5e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d5e6:	46b9      	mov	r9, r7
 800d5e8:	463c      	mov	r4, r7
 800d5ea:	9502      	str	r5, [sp, #8]
 800d5ec:	46ab      	mov	fp, r5
 800d5ee:	784a      	ldrb	r2, [r1, #1]
 800d5f0:	1c4b      	adds	r3, r1, #1
 800d5f2:	9303      	str	r3, [sp, #12]
 800d5f4:	b342      	cbz	r2, 800d648 <__hexnan+0x88>
 800d5f6:	4610      	mov	r0, r2
 800d5f8:	9105      	str	r1, [sp, #20]
 800d5fa:	9204      	str	r2, [sp, #16]
 800d5fc:	f7ff fd76 	bl	800d0ec <__hexdig_fun>
 800d600:	2800      	cmp	r0, #0
 800d602:	d14f      	bne.n	800d6a4 <__hexnan+0xe4>
 800d604:	9a04      	ldr	r2, [sp, #16]
 800d606:	9905      	ldr	r1, [sp, #20]
 800d608:	2a20      	cmp	r2, #32
 800d60a:	d818      	bhi.n	800d63e <__hexnan+0x7e>
 800d60c:	9b02      	ldr	r3, [sp, #8]
 800d60e:	459b      	cmp	fp, r3
 800d610:	dd13      	ble.n	800d63a <__hexnan+0x7a>
 800d612:	454c      	cmp	r4, r9
 800d614:	d206      	bcs.n	800d624 <__hexnan+0x64>
 800d616:	2d07      	cmp	r5, #7
 800d618:	dc04      	bgt.n	800d624 <__hexnan+0x64>
 800d61a:	462a      	mov	r2, r5
 800d61c:	4649      	mov	r1, r9
 800d61e:	4620      	mov	r0, r4
 800d620:	f7ff ffa8 	bl	800d574 <L_shift>
 800d624:	4544      	cmp	r4, r8
 800d626:	d950      	bls.n	800d6ca <__hexnan+0x10a>
 800d628:	2300      	movs	r3, #0
 800d62a:	f1a4 0904 	sub.w	r9, r4, #4
 800d62e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d632:	f8cd b008 	str.w	fp, [sp, #8]
 800d636:	464c      	mov	r4, r9
 800d638:	461d      	mov	r5, r3
 800d63a:	9903      	ldr	r1, [sp, #12]
 800d63c:	e7d7      	b.n	800d5ee <__hexnan+0x2e>
 800d63e:	2a29      	cmp	r2, #41	; 0x29
 800d640:	d155      	bne.n	800d6ee <__hexnan+0x12e>
 800d642:	3102      	adds	r1, #2
 800d644:	f8ca 1000 	str.w	r1, [sl]
 800d648:	f1bb 0f00 	cmp.w	fp, #0
 800d64c:	d04f      	beq.n	800d6ee <__hexnan+0x12e>
 800d64e:	454c      	cmp	r4, r9
 800d650:	d206      	bcs.n	800d660 <__hexnan+0xa0>
 800d652:	2d07      	cmp	r5, #7
 800d654:	dc04      	bgt.n	800d660 <__hexnan+0xa0>
 800d656:	462a      	mov	r2, r5
 800d658:	4649      	mov	r1, r9
 800d65a:	4620      	mov	r0, r4
 800d65c:	f7ff ff8a 	bl	800d574 <L_shift>
 800d660:	4544      	cmp	r4, r8
 800d662:	d934      	bls.n	800d6ce <__hexnan+0x10e>
 800d664:	f1a8 0204 	sub.w	r2, r8, #4
 800d668:	4623      	mov	r3, r4
 800d66a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d66e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d672:	429f      	cmp	r7, r3
 800d674:	d2f9      	bcs.n	800d66a <__hexnan+0xaa>
 800d676:	1b3b      	subs	r3, r7, r4
 800d678:	f023 0303 	bic.w	r3, r3, #3
 800d67c:	3304      	adds	r3, #4
 800d67e:	3e03      	subs	r6, #3
 800d680:	3401      	adds	r4, #1
 800d682:	42a6      	cmp	r6, r4
 800d684:	bf38      	it	cc
 800d686:	2304      	movcc	r3, #4
 800d688:	4443      	add	r3, r8
 800d68a:	2200      	movs	r2, #0
 800d68c:	f843 2b04 	str.w	r2, [r3], #4
 800d690:	429f      	cmp	r7, r3
 800d692:	d2fb      	bcs.n	800d68c <__hexnan+0xcc>
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	b91b      	cbnz	r3, 800d6a0 <__hexnan+0xe0>
 800d698:	4547      	cmp	r7, r8
 800d69a:	d126      	bne.n	800d6ea <__hexnan+0x12a>
 800d69c:	2301      	movs	r3, #1
 800d69e:	603b      	str	r3, [r7, #0]
 800d6a0:	2005      	movs	r0, #5
 800d6a2:	e025      	b.n	800d6f0 <__hexnan+0x130>
 800d6a4:	3501      	adds	r5, #1
 800d6a6:	2d08      	cmp	r5, #8
 800d6a8:	f10b 0b01 	add.w	fp, fp, #1
 800d6ac:	dd06      	ble.n	800d6bc <__hexnan+0xfc>
 800d6ae:	4544      	cmp	r4, r8
 800d6b0:	d9c3      	bls.n	800d63a <__hexnan+0x7a>
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	f844 3c04 	str.w	r3, [r4, #-4]
 800d6b8:	2501      	movs	r5, #1
 800d6ba:	3c04      	subs	r4, #4
 800d6bc:	6822      	ldr	r2, [r4, #0]
 800d6be:	f000 000f 	and.w	r0, r0, #15
 800d6c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d6c6:	6020      	str	r0, [r4, #0]
 800d6c8:	e7b7      	b.n	800d63a <__hexnan+0x7a>
 800d6ca:	2508      	movs	r5, #8
 800d6cc:	e7b5      	b.n	800d63a <__hexnan+0x7a>
 800d6ce:	9b01      	ldr	r3, [sp, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d0df      	beq.n	800d694 <__hexnan+0xd4>
 800d6d4:	f1c3 0320 	rsb	r3, r3, #32
 800d6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d6dc:	40da      	lsrs	r2, r3
 800d6de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d6e2:	4013      	ands	r3, r2
 800d6e4:	f846 3c04 	str.w	r3, [r6, #-4]
 800d6e8:	e7d4      	b.n	800d694 <__hexnan+0xd4>
 800d6ea:	3f04      	subs	r7, #4
 800d6ec:	e7d2      	b.n	800d694 <__hexnan+0xd4>
 800d6ee:	2004      	movs	r0, #4
 800d6f0:	b007      	add	sp, #28
 800d6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6f6 <__ascii_mbtowc>:
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	b901      	cbnz	r1, 800d6fc <__ascii_mbtowc+0x6>
 800d6fa:	a901      	add	r1, sp, #4
 800d6fc:	b142      	cbz	r2, 800d710 <__ascii_mbtowc+0x1a>
 800d6fe:	b14b      	cbz	r3, 800d714 <__ascii_mbtowc+0x1e>
 800d700:	7813      	ldrb	r3, [r2, #0]
 800d702:	600b      	str	r3, [r1, #0]
 800d704:	7812      	ldrb	r2, [r2, #0]
 800d706:	1e10      	subs	r0, r2, #0
 800d708:	bf18      	it	ne
 800d70a:	2001      	movne	r0, #1
 800d70c:	b002      	add	sp, #8
 800d70e:	4770      	bx	lr
 800d710:	4610      	mov	r0, r2
 800d712:	e7fb      	b.n	800d70c <__ascii_mbtowc+0x16>
 800d714:	f06f 0001 	mvn.w	r0, #1
 800d718:	e7f8      	b.n	800d70c <__ascii_mbtowc+0x16>

0800d71a <_realloc_r>:
 800d71a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d71e:	4680      	mov	r8, r0
 800d720:	4614      	mov	r4, r2
 800d722:	460e      	mov	r6, r1
 800d724:	b921      	cbnz	r1, 800d730 <_realloc_r+0x16>
 800d726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d72a:	4611      	mov	r1, r2
 800d72c:	f7fd bc42 	b.w	800afb4 <_malloc_r>
 800d730:	b92a      	cbnz	r2, 800d73e <_realloc_r+0x24>
 800d732:	f7fd fbcb 	bl	800aecc <_free_r>
 800d736:	4625      	mov	r5, r4
 800d738:	4628      	mov	r0, r5
 800d73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d73e:	f000 f842 	bl	800d7c6 <_malloc_usable_size_r>
 800d742:	4284      	cmp	r4, r0
 800d744:	4607      	mov	r7, r0
 800d746:	d802      	bhi.n	800d74e <_realloc_r+0x34>
 800d748:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d74c:	d812      	bhi.n	800d774 <_realloc_r+0x5a>
 800d74e:	4621      	mov	r1, r4
 800d750:	4640      	mov	r0, r8
 800d752:	f7fd fc2f 	bl	800afb4 <_malloc_r>
 800d756:	4605      	mov	r5, r0
 800d758:	2800      	cmp	r0, #0
 800d75a:	d0ed      	beq.n	800d738 <_realloc_r+0x1e>
 800d75c:	42bc      	cmp	r4, r7
 800d75e:	4622      	mov	r2, r4
 800d760:	4631      	mov	r1, r6
 800d762:	bf28      	it	cs
 800d764:	463a      	movcs	r2, r7
 800d766:	f7fc fd21 	bl	800a1ac <memcpy>
 800d76a:	4631      	mov	r1, r6
 800d76c:	4640      	mov	r0, r8
 800d76e:	f7fd fbad 	bl	800aecc <_free_r>
 800d772:	e7e1      	b.n	800d738 <_realloc_r+0x1e>
 800d774:	4635      	mov	r5, r6
 800d776:	e7df      	b.n	800d738 <_realloc_r+0x1e>

0800d778 <__ascii_wctomb>:
 800d778:	b149      	cbz	r1, 800d78e <__ascii_wctomb+0x16>
 800d77a:	2aff      	cmp	r2, #255	; 0xff
 800d77c:	bf85      	ittet	hi
 800d77e:	238a      	movhi	r3, #138	; 0x8a
 800d780:	6003      	strhi	r3, [r0, #0]
 800d782:	700a      	strbls	r2, [r1, #0]
 800d784:	f04f 30ff 	movhi.w	r0, #4294967295
 800d788:	bf98      	it	ls
 800d78a:	2001      	movls	r0, #1
 800d78c:	4770      	bx	lr
 800d78e:	4608      	mov	r0, r1
 800d790:	4770      	bx	lr
	...

0800d794 <fiprintf>:
 800d794:	b40e      	push	{r1, r2, r3}
 800d796:	b503      	push	{r0, r1, lr}
 800d798:	4601      	mov	r1, r0
 800d79a:	ab03      	add	r3, sp, #12
 800d79c:	4805      	ldr	r0, [pc, #20]	; (800d7b4 <fiprintf+0x20>)
 800d79e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7a2:	6800      	ldr	r0, [r0, #0]
 800d7a4:	9301      	str	r3, [sp, #4]
 800d7a6:	f7ff f957 	bl	800ca58 <_vfiprintf_r>
 800d7aa:	b002      	add	sp, #8
 800d7ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7b0:	b003      	add	sp, #12
 800d7b2:	4770      	bx	lr
 800d7b4:	20000154 	.word	0x20000154

0800d7b8 <abort>:
 800d7b8:	b508      	push	{r3, lr}
 800d7ba:	2006      	movs	r0, #6
 800d7bc:	f000 f834 	bl	800d828 <raise>
 800d7c0:	2001      	movs	r0, #1
 800d7c2:	f7f4 fb3d 	bl	8001e40 <_exit>

0800d7c6 <_malloc_usable_size_r>:
 800d7c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7ca:	1f18      	subs	r0, r3, #4
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	bfbc      	itt	lt
 800d7d0:	580b      	ldrlt	r3, [r1, r0]
 800d7d2:	18c0      	addlt	r0, r0, r3
 800d7d4:	4770      	bx	lr

0800d7d6 <_raise_r>:
 800d7d6:	291f      	cmp	r1, #31
 800d7d8:	b538      	push	{r3, r4, r5, lr}
 800d7da:	4604      	mov	r4, r0
 800d7dc:	460d      	mov	r5, r1
 800d7de:	d904      	bls.n	800d7ea <_raise_r+0x14>
 800d7e0:	2316      	movs	r3, #22
 800d7e2:	6003      	str	r3, [r0, #0]
 800d7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e8:	bd38      	pop	{r3, r4, r5, pc}
 800d7ea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d7ec:	b112      	cbz	r2, 800d7f4 <_raise_r+0x1e>
 800d7ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7f2:	b94b      	cbnz	r3, 800d808 <_raise_r+0x32>
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	f000 f831 	bl	800d85c <_getpid_r>
 800d7fa:	462a      	mov	r2, r5
 800d7fc:	4601      	mov	r1, r0
 800d7fe:	4620      	mov	r0, r4
 800d800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d804:	f000 b818 	b.w	800d838 <_kill_r>
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d00a      	beq.n	800d822 <_raise_r+0x4c>
 800d80c:	1c59      	adds	r1, r3, #1
 800d80e:	d103      	bne.n	800d818 <_raise_r+0x42>
 800d810:	2316      	movs	r3, #22
 800d812:	6003      	str	r3, [r0, #0]
 800d814:	2001      	movs	r0, #1
 800d816:	e7e7      	b.n	800d7e8 <_raise_r+0x12>
 800d818:	2400      	movs	r4, #0
 800d81a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d81e:	4628      	mov	r0, r5
 800d820:	4798      	blx	r3
 800d822:	2000      	movs	r0, #0
 800d824:	e7e0      	b.n	800d7e8 <_raise_r+0x12>
	...

0800d828 <raise>:
 800d828:	4b02      	ldr	r3, [pc, #8]	; (800d834 <raise+0xc>)
 800d82a:	4601      	mov	r1, r0
 800d82c:	6818      	ldr	r0, [r3, #0]
 800d82e:	f7ff bfd2 	b.w	800d7d6 <_raise_r>
 800d832:	bf00      	nop
 800d834:	20000154 	.word	0x20000154

0800d838 <_kill_r>:
 800d838:	b538      	push	{r3, r4, r5, lr}
 800d83a:	4d07      	ldr	r5, [pc, #28]	; (800d858 <_kill_r+0x20>)
 800d83c:	2300      	movs	r3, #0
 800d83e:	4604      	mov	r4, r0
 800d840:	4608      	mov	r0, r1
 800d842:	4611      	mov	r1, r2
 800d844:	602b      	str	r3, [r5, #0]
 800d846:	f7f4 faeb 	bl	8001e20 <_kill>
 800d84a:	1c43      	adds	r3, r0, #1
 800d84c:	d102      	bne.n	800d854 <_kill_r+0x1c>
 800d84e:	682b      	ldr	r3, [r5, #0]
 800d850:	b103      	cbz	r3, 800d854 <_kill_r+0x1c>
 800d852:	6023      	str	r3, [r4, #0]
 800d854:	bd38      	pop	{r3, r4, r5, pc}
 800d856:	bf00      	nop
 800d858:	200023dc 	.word	0x200023dc

0800d85c <_getpid_r>:
 800d85c:	f7f4 bad8 	b.w	8001e10 <_getpid>

0800d860 <_init>:
 800d860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d862:	bf00      	nop
 800d864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d866:	bc08      	pop	{r3}
 800d868:	469e      	mov	lr, r3
 800d86a:	4770      	bx	lr

0800d86c <_fini>:
 800d86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86e:	bf00      	nop
 800d870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d872:	bc08      	pop	{r3}
 800d874:	469e      	mov	lr, r3
 800d876:	4770      	bx	lr


stm32_SPIflash_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ced0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800d070  0800d070  0001d070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d598  0800d598  000202c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d598  0800d598  0001d598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5a0  0800d5a0  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5a0  0800d5a0  0001d5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5a4  0800d5a4  0001d5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800d5a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e0  200002c4  0800d86c  000202c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023a4  0800d86c  000223a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010dfd  00000000  00000000  00020337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003458  00000000  00000000  00031134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00034590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af4  00000000  00000000  00035458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001993d  00000000  00000000  00035f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001370e  00000000  00000000  0004f889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b864  00000000  00000000  00062f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000514c  00000000  00000000  000ee7fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f3948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d058 	.word	0x0800d058

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800d058 	.word	0x0800d058

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <calculate_crc16>:
void process_packet(void);
void writeDataChunk(uint8_t *dat, uint16_t length);
void UpdateFirmware(void);

uint16_t calculate_crc16(uint8_t *data, uint16_t length)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 800100c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001010:	81fb      	strh	r3, [r7, #14]
    uint16_t poly = 0x2024;
 8001012:	f242 0324 	movw	r3, #8228	; 0x2024
 8001016:	813b      	strh	r3, [r7, #8]

    for (uint16_t i = 0; i < length; i++) {
 8001018:	2300      	movs	r3, #0
 800101a:	81bb      	strh	r3, [r7, #12]
 800101c:	e026      	b.n	800106c <calculate_crc16+0x6c>
        crc ^= (data[i] << 8);
 800101e:	89bb      	ldrh	r3, [r7, #12]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800102e:	4053      	eors	r3, r2
 8001030:	b21b      	sxth	r3, r3
 8001032:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8001034:	2300      	movs	r3, #0
 8001036:	72fb      	strb	r3, [r7, #11]
 8001038:	e012      	b.n	8001060 <calculate_crc16+0x60>
            if (crc & 0x8000) {
 800103a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800103e:	2b00      	cmp	r3, #0
 8001040:	da08      	bge.n	8001054 <calculate_crc16+0x54>
                crc = (crc << 1) ^ poly;
 8001042:	89fb      	ldrh	r3, [r7, #14]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	b21a      	sxth	r2, r3
 8001048:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800104c:	4053      	eors	r3, r2
 800104e:	b21b      	sxth	r3, r3
 8001050:	81fb      	strh	r3, [r7, #14]
 8001052:	e002      	b.n	800105a <calculate_crc16+0x5a>
            } else {
                crc <<= 1;
 8001054:	89fb      	ldrh	r3, [r7, #14]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	3301      	adds	r3, #1
 800105e:	72fb      	strb	r3, [r7, #11]
 8001060:	7afb      	ldrb	r3, [r7, #11]
 8001062:	2b07      	cmp	r3, #7
 8001064:	d9e9      	bls.n	800103a <calculate_crc16+0x3a>
    for (uint16_t i = 0; i < length; i++) {
 8001066:	89bb      	ldrh	r3, [r7, #12]
 8001068:	3301      	adds	r3, #1
 800106a:	81bb      	strh	r3, [r7, #12]
 800106c:	89ba      	ldrh	r2, [r7, #12]
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	429a      	cmp	r2, r3
 8001072:	d3d4      	bcc.n	800101e <calculate_crc16+0x1e>
            }
        }
    }
    return crc;
 8001074:	89fb      	ldrh	r3, [r7, #14]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <USB_VCP_ReceiveCallback>:


void USB_VCP_ReceiveCallback(uint8_t* Buf, uint32_t *Len)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < *Len; i++) {
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	e0c7      	b.n	8001224 <USB_VCP_ReceiveCallback+0x1a0>
        uint8_t byte = Buf[i];
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	72fb      	strb	r3, [r7, #11]

        switch (packet_state) {
 800109e:	4b67      	ldr	r3, [pc, #412]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	f200 80bb 	bhi.w	800121e <USB_VCP_ReceiveCallback+0x19a>
 80010a8:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <USB_VCP_ReceiveCallback+0x2c>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	080010cd 	.word	0x080010cd
 80010b4:	080010fd 	.word	0x080010fd
 80010b8:	0800111f 	.word	0x0800111f
 80010bc:	08001151 	.word	0x08001151
 80010c0:	0800118f 	.word	0x0800118f
 80010c4:	080011b7 	.word	0x080011b7
 80010c8:	080011e3 	.word	0x080011e3
            case WAIT_FOR_START:
                if (byte == PACKET_START_MARKER) {
 80010cc:	7afb      	ldrb	r3, [r7, #11]
 80010ce:	2baa      	cmp	r3, #170	; 0xaa
 80010d0:	f040 80a2 	bne.w	8001218 <USB_VCP_ReceiveCallback+0x194>
                    packet_state = READ_CMD;
 80010d4:	4b59      	ldr	r3, [pc, #356]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
                    packet_index = 0;
 80010da:	4b59      	ldr	r3, [pc, #356]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	801a      	strh	r2, [r3, #0]
                    payload_index = 0;
 80010e0:	4b58      	ldr	r3, [pc, #352]	; (8001244 <USB_VCP_ReceiveCallback+0x1c0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	801a      	strh	r2, [r3, #0]
                    packet[packet_index++] = byte;
 80010e6:	4b56      	ldr	r3, [pc, #344]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	b291      	uxth	r1, r2
 80010ee:	4a54      	ldr	r2, [pc, #336]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 80010f0:	8011      	strh	r1, [r2, #0]
 80010f2:	4619      	mov	r1, r3
 80010f4:	4a54      	ldr	r2, [pc, #336]	; (8001248 <USB_VCP_ReceiveCallback+0x1c4>)
 80010f6:	7afb      	ldrb	r3, [r7, #11]
 80010f8:	5453      	strb	r3, [r2, r1]
                }
                break;
 80010fa:	e08d      	b.n	8001218 <USB_VCP_ReceiveCallback+0x194>

            case READ_CMD:
                cmd = byte;
 80010fc:	4a53      	ldr	r2, [pc, #332]	; (800124c <USB_VCP_ReceiveCallback+0x1c8>)
 80010fe:	7afb      	ldrb	r3, [r7, #11]
 8001100:	7013      	strb	r3, [r2, #0]
                packet[packet_index++] = byte;
 8001102:	4b4f      	ldr	r3, [pc, #316]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	b291      	uxth	r1, r2
 800110a:	4a4d      	ldr	r2, [pc, #308]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 800110c:	8011      	strh	r1, [r2, #0]
 800110e:	4619      	mov	r1, r3
 8001110:	4a4d      	ldr	r2, [pc, #308]	; (8001248 <USB_VCP_ReceiveCallback+0x1c4>)
 8001112:	7afb      	ldrb	r3, [r7, #11]
 8001114:	5453      	strb	r3, [r2, r1]
                packet_state = READ_LEN;
 8001116:	4b49      	ldr	r3, [pc, #292]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 8001118:	2202      	movs	r2, #2
 800111a:	701a      	strb	r2, [r3, #0]
                break;
 800111c:	e07f      	b.n	800121e <USB_VCP_ReceiveCallback+0x19a>

            case READ_LEN:
                len = byte;
 800111e:	4a4c      	ldr	r2, [pc, #304]	; (8001250 <USB_VCP_ReceiveCallback+0x1cc>)
 8001120:	7afb      	ldrb	r3, [r7, #11]
 8001122:	7013      	strb	r3, [r2, #0]
                packet[packet_index++] = byte;
 8001124:	4b46      	ldr	r3, [pc, #280]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	b291      	uxth	r1, r2
 800112c:	4a44      	ldr	r2, [pc, #272]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 800112e:	8011      	strh	r1, [r2, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	4a45      	ldr	r2, [pc, #276]	; (8001248 <USB_VCP_ReceiveCallback+0x1c4>)
 8001134:	7afb      	ldrb	r3, [r7, #11]
 8001136:	5453      	strb	r3, [r2, r1]
                    packet_state = READ_PAYLOAD;
                } else {
                    packet_state = WAIT_FOR_START; // Invalid length, reset
                }
                */
                if(len == 0) packet_state = READ_CRC1;
 8001138:	4b45      	ldr	r3, [pc, #276]	; (8001250 <USB_VCP_ReceiveCallback+0x1cc>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d103      	bne.n	8001148 <USB_VCP_ReceiveCallback+0xc4>
 8001140:	4b3e      	ldr	r3, [pc, #248]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 8001142:	2204      	movs	r2, #4
 8001144:	701a      	strb	r2, [r3, #0]
                else 		 packet_state = READ_PAYLOAD;
                break;
 8001146:	e06a      	b.n	800121e <USB_VCP_ReceiveCallback+0x19a>
                else 		 packet_state = READ_PAYLOAD;
 8001148:	4b3c      	ldr	r3, [pc, #240]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 800114a:	2203      	movs	r2, #3
 800114c:	701a      	strb	r2, [r3, #0]
                break;
 800114e:	e066      	b.n	800121e <USB_VCP_ReceiveCallback+0x19a>

            case READ_PAYLOAD:
                payload[payload_index++] = byte;
 8001150:	4b3c      	ldr	r3, [pc, #240]	; (8001244 <USB_VCP_ReceiveCallback+0x1c0>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	b291      	uxth	r1, r2
 8001158:	4a3a      	ldr	r2, [pc, #232]	; (8001244 <USB_VCP_ReceiveCallback+0x1c0>)
 800115a:	8011      	strh	r1, [r2, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	4a3d      	ldr	r2, [pc, #244]	; (8001254 <USB_VCP_ReceiveCallback+0x1d0>)
 8001160:	7afb      	ldrb	r3, [r7, #11]
 8001162:	5453      	strb	r3, [r2, r1]
                packet[packet_index++] = byte;
 8001164:	4b36      	ldr	r3, [pc, #216]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	1c5a      	adds	r2, r3, #1
 800116a:	b291      	uxth	r1, r2
 800116c:	4a34      	ldr	r2, [pc, #208]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 800116e:	8011      	strh	r1, [r2, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	4a35      	ldr	r2, [pc, #212]	; (8001248 <USB_VCP_ReceiveCallback+0x1c4>)
 8001174:	7afb      	ldrb	r3, [r7, #11]
 8001176:	5453      	strb	r3, [r2, r1]
                if (payload_index == len) {
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <USB_VCP_ReceiveCallback+0x1cc>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b29a      	uxth	r2, r3
 800117e:	4b31      	ldr	r3, [pc, #196]	; (8001244 <USB_VCP_ReceiveCallback+0x1c0>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d14a      	bne.n	800121c <USB_VCP_ReceiveCallback+0x198>
                    packet_state = READ_CRC1;
 8001186:	4b2d      	ldr	r3, [pc, #180]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 8001188:	2204      	movs	r2, #4
 800118a:	701a      	strb	r2, [r3, #0]
                }
                break;
 800118c:	e046      	b.n	800121c <USB_VCP_ReceiveCallback+0x198>

            case READ_CRC1:
                received_crc = (byte << 8);
 800118e:	7afb      	ldrb	r3, [r7, #11]
 8001190:	b29b      	uxth	r3, r3
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b30      	ldr	r3, [pc, #192]	; (8001258 <USB_VCP_ReceiveCallback+0x1d4>)
 8001198:	801a      	strh	r2, [r3, #0]
                packet[packet_index++] = byte;
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	b291      	uxth	r1, r2
 80011a2:	4a27      	ldr	r2, [pc, #156]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 80011a4:	8011      	strh	r1, [r2, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4a27      	ldr	r2, [pc, #156]	; (8001248 <USB_VCP_ReceiveCallback+0x1c4>)
 80011aa:	7afb      	ldrb	r3, [r7, #11]
 80011ac:	5453      	strb	r3, [r2, r1]
                packet_state = READ_CRC2;
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 80011b0:	2205      	movs	r2, #5
 80011b2:	701a      	strb	r2, [r3, #0]
                break;
 80011b4:	e033      	b.n	800121e <USB_VCP_ReceiveCallback+0x19a>

            case READ_CRC2:
                received_crc |= byte;
 80011b6:	7afb      	ldrb	r3, [r7, #11]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4b27      	ldr	r3, [pc, #156]	; (8001258 <USB_VCP_ReceiveCallback+0x1d4>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	4313      	orrs	r3, r2
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b25      	ldr	r3, [pc, #148]	; (8001258 <USB_VCP_ReceiveCallback+0x1d4>)
 80011c4:	801a      	strh	r2, [r3, #0]
                packet[packet_index++] = byte;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	b291      	uxth	r1, r2
 80011ce:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 80011d0:	8011      	strh	r1, [r2, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <USB_VCP_ReceiveCallback+0x1c4>)
 80011d6:	7afb      	ldrb	r3, [r7, #11]
 80011d8:	5453      	strb	r3, [r2, r1]
                packet_state = WAIT_FOR_END;
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 80011dc:	2206      	movs	r2, #6
 80011de:	701a      	strb	r2, [r3, #0]
                break;
 80011e0:	e01d      	b.n	800121e <USB_VCP_ReceiveCallback+0x19a>

            case WAIT_FOR_END:
                if (byte == PACKET_END_MARKER) {
 80011e2:	7afb      	ldrb	r3, [r7, #11]
 80011e4:	2bbb      	cmp	r3, #187	; 0xbb
 80011e6:	d113      	bne.n	8001210 <USB_VCP_ReceiveCallback+0x18c>
                    packet[packet_index++] = byte;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	b291      	uxth	r1, r2
 80011f0:	4a13      	ldr	r2, [pc, #76]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 80011f2:	8011      	strh	r1, [r2, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	4a14      	ldr	r2, [pc, #80]	; (8001248 <USB_VCP_ReceiveCallback+0x1c4>)
 80011f8:	7afb      	ldrb	r3, [r7, #11]
 80011fa:	5453      	strb	r3, [r2, r1]

                    payload_len = payload_index;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <USB_VCP_ReceiveCallback+0x1c0>)
 80011fe:	881a      	ldrh	r2, [r3, #0]
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <USB_VCP_ReceiveCallback+0x1d8>)
 8001202:	801a      	strh	r2, [r3, #0]
                    packet_len = packet_index;
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 8001206:	881a      	ldrh	r2, [r3, #0]
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <USB_VCP_ReceiveCallback+0x1dc>)
 800120a:	801a      	strh	r2, [r3, #0]
                    process_packet();  // Validate and process the packet
 800120c:	f000 f856 	bl	80012bc <process_packet>
                }
                packet_state = WAIT_FOR_START;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
                break;
 8001216:	e002      	b.n	800121e <USB_VCP_ReceiveCallback+0x19a>
                break;
 8001218:	bf00      	nop
 800121a:	e000      	b.n	800121e <USB_VCP_ReceiveCallback+0x19a>
                break;
 800121c:	bf00      	nop
    for (uint32_t i = 0; i < *Len; i++) {
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3301      	adds	r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	429a      	cmp	r2, r3
 800122c:	f4ff af32 	bcc.w	8001094 <USB_VCP_ReceiveCallback+0x10>
        }
    }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200002e0 	.word	0x200002e0
 8001240:	200004de 	.word	0x200004de
 8001244:	200004e0 	.word	0x200004e0
 8001248:	200002e4 	.word	0x200002e4
 800124c:	200004e2 	.word	0x200004e2
 8001250:	200004e3 	.word	0x200004e3
 8001254:	200003e4 	.word	0x200003e4
 8001258:	200004e4 	.word	0x200004e4
 800125c:	200004f8 	.word	0x200004f8
 8001260:	200004fa 	.word	0x200004fa

08001264 <send_response_packet>:


static void send_response_packet(dfu_stat_t cmd, RESP_CODE response_code)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	460a      	mov	r2, r1
 800126e:	71fb      	strb	r3, [r7, #7]
 8001270:	4613      	mov	r3, r2
 8001272:	71bb      	strb	r3, [r7, #6]
	rep_packet_t resp;
	resp.start_byte = PACKET_START_MARKER;
 8001274:	23aa      	movs	r3, #170	; 0xaa
 8001276:	723b      	strb	r3, [r7, #8]
	resp.cmd = (uint8_t)cmd;
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	727b      	strb	r3, [r7, #9]
	resp.len = 0x01;
 800127c:	2301      	movs	r3, #1
 800127e:	72bb      	strb	r3, [r7, #10]
	resp.data = (uint8_t)response_code;
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	72fb      	strb	r3, [r7, #11]
	resp.crc = calculate_crc16((uint8_t *)&resp,resp.len + 2 );
 8001284:	7abb      	ldrb	r3, [r7, #10]
 8001286:	b29b      	uxth	r3, r3
 8001288:	3302      	adds	r3, #2
 800128a:	b29a      	uxth	r2, r3
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff feb4 	bl	8001000 <calculate_crc16>
 8001298:	4603      	mov	r3, r0
 800129a:	81bb      	strh	r3, [r7, #12]
	resp.end_byte = PACKET_END_MARKER;
 800129c:	23bb      	movs	r3, #187	; 0xbb
 800129e:	73bb      	strb	r3, [r7, #14]
	CDC_Transmit_FS((uint8_t *)&resp,resp.len + 6);
 80012a0:	7abb      	ldrb	r3, [r7, #10]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3306      	adds	r3, #6
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f006 fe16 	bl	8007ee0 <CDC_Transmit_FS>
}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <process_packet>:

void process_packet(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
    // Verify CRC
    uint16_t calculated_crc = calculate_crc16(&payload[0], payload_len);  // CMD + LEN + PAYLOAD
 80012c2:	4b69      	ldr	r3, [pc, #420]	; (8001468 <process_packet+0x1ac>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	4619      	mov	r1, r3
 80012c8:	4868      	ldr	r0, [pc, #416]	; (800146c <process_packet+0x1b0>)
 80012ca:	f7ff fe99 	bl	8001000 <calculate_crc16>
 80012ce:	4603      	mov	r3, r0
 80012d0:	827b      	strh	r3, [r7, #18]
    if (received_crc != calculated_crc) {
 80012d2:	4b67      	ldr	r3, [pc, #412]	; (8001470 <process_packet+0x1b4>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	8a7a      	ldrh	r2, [r7, #18]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d007      	beq.n	80012ec <process_packet+0x30>
    	printf("CRC check failed! Received: 0x%04X, Calculated: 0x%04X\n", received_crc, calculated_crc);
 80012dc:	4b64      	ldr	r3, [pc, #400]	; (8001470 <process_packet+0x1b4>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	8a7b      	ldrh	r3, [r7, #18]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4863      	ldr	r0, [pc, #396]	; (8001474 <process_packet+0x1b8>)
 80012e8:	f008 f972 	bl	80095d0 <iprintf>
    }
	// Packet is valid, process it
	printf("Packet received successfully!\n");
 80012ec:	4862      	ldr	r0, [pc, #392]	; (8001478 <process_packet+0x1bc>)
 80012ee:	f008 f9dd 	bl	80096ac <puts>
	printf("Command: 0x%02X\n", cmd);
 80012f2:	4b62      	ldr	r3, [pc, #392]	; (800147c <process_packet+0x1c0>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	4619      	mov	r1, r3
 80012f8:	4861      	ldr	r0, [pc, #388]	; (8001480 <process_packet+0x1c4>)
 80012fa:	f008 f969 	bl	80095d0 <iprintf>
	printf("Payload Length: %d\n", len);
 80012fe:	4b61      	ldr	r3, [pc, #388]	; (8001484 <process_packet+0x1c8>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	4860      	ldr	r0, [pc, #384]	; (8001488 <process_packet+0x1cc>)
 8001306:	f008 f963 	bl	80095d0 <iprintf>
	printf("Payload: ");
 800130a:	4860      	ldr	r0, [pc, #384]	; (800148c <process_packet+0x1d0>)
 800130c:	f008 f960 	bl	80095d0 <iprintf>
	for (int i = 0; i < len; i++) {
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	e00a      	b.n	800132c <process_packet+0x70>
		printf("0x%02X ", payload[i]);
 8001316:	4a55      	ldr	r2, [pc, #340]	; (800146c <process_packet+0x1b0>)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	4413      	add	r3, r2
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	4619      	mov	r1, r3
 8001320:	485b      	ldr	r0, [pc, #364]	; (8001490 <process_packet+0x1d4>)
 8001322:	f008 f955 	bl	80095d0 <iprintf>
	for (int i = 0; i < len; i++) {
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3301      	adds	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	4b55      	ldr	r3, [pc, #340]	; (8001484 <process_packet+0x1c8>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	4293      	cmp	r3, r2
 8001336:	dbee      	blt.n	8001316 <process_packet+0x5a>
	}
	printf("\n");
 8001338:	200a      	movs	r0, #10
 800133a:	f008 f95b 	bl	80095f4 <putchar>
	/* process packet here */
	switch(cmd)
 800133e:	4b4f      	ldr	r3, [pc, #316]	; (800147c <process_packet+0x1c0>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	2b06      	cmp	r3, #6
 8001346:	f200 8088 	bhi.w	800145a <process_packet+0x19e>
 800134a:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <process_packet+0x94>)
 800134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001350:	0800136d 	.word	0x0800136d
 8001354:	08001383 	.word	0x08001383
 8001358:	08001391 	.word	0x08001391
 800135c:	080013c3 	.word	0x080013c3
 8001360:	0800140d 	.word	0x0800140d
 8001364:	08001439 	.word	0x08001439
 8001368:	0800145b 	.word	0x0800145b
	{
		case DFU_START:
			printf("Start packet!\n");
 800136c:	4849      	ldr	r0, [pc, #292]	; (8001494 <process_packet+0x1d8>)
 800136e:	f008 f99d 	bl	80096ac <puts>
			send_response_packet(DFU_START,DFU_OK);
 8001372:	2100      	movs	r1, #0
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff ff75 	bl	8001264 <send_response_packet>
			dfu_stat = DFU_ERASE_MEM;
 800137a:	4b47      	ldr	r3, [pc, #284]	; (8001498 <process_packet+0x1dc>)
 800137c:	2202      	movs	r2, #2
 800137e:	701a      	strb	r2, [r3, #0]
			break;
 8001380:	e06e      	b.n	8001460 <process_packet+0x1a4>

		case DFU_ERASE_MEM:
			/* erase flash sectors */
			ef_ChipErase();
 8001382:	f000 f9d3 	bl	800172c <ef_ChipErase>
			send_response_packet(DFU_ERASE_MEM,DFU_OK);
 8001386:	2100      	movs	r1, #0
 8001388:	2002      	movs	r0, #2
 800138a:	f7ff ff6b 	bl	8001264 <send_response_packet>
			break;
 800138e:	e067      	b.n	8001460 <process_packet+0x1a4>
		case DFU_HEADER:

			/*header[1] cmd[1] len[1] total fw size[4B], fw crc[2B], fw ver[4B] crc[2] footer[1] */
			fw_info_t fw_info;
			memcpy((uint8_t *)&fw_info, &payload, sizeof(fw_info_t));
 8001390:	4a36      	ldr	r2, [pc, #216]	; (800146c <process_packet+0x1b0>)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	ca07      	ldmia	r2, {r0, r1, r2}
 8001396:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			received_fw_len =0;
 800139a:	4b40      	ldr	r3, [pc, #256]	; (800149c <process_packet+0x1e0>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
			total_fw_len = fw_info.total_fw_size;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a3f      	ldr	r2, [pc, #252]	; (80014a0 <process_packet+0x1e4>)
 80013a4:	6013      	str	r3, [r2, #0]
			fw_ver		 = fw_info.fw_ver;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4a3e      	ldr	r2, [pc, #248]	; (80014a4 <process_packet+0x1e8>)
 80013aa:	6013      	str	r3, [r2, #0]
			fw_crc		 = fw_info.fw_crc;
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4a3e      	ldr	r2, [pc, #248]	; (80014a8 <process_packet+0x1ec>)
 80013b0:	6013      	str	r3, [r2, #0]
			dfu_stat = DFU_DATA;
 80013b2:	4b39      	ldr	r3, [pc, #228]	; (8001498 <process_packet+0x1dc>)
 80013b4:	2204      	movs	r2, #4
 80013b6:	701a      	strb	r2, [r3, #0]
			send_response_packet(DFU_HEADER,DFU_OK);
 80013b8:	2100      	movs	r1, #0
 80013ba:	2003      	movs	r0, #3
 80013bc:	f7ff ff52 	bl	8001264 <send_response_packet>

			break;
 80013c0:	e04e      	b.n	8001460 <process_packet+0x1a4>
		case DFU_DATA:
			/* write payload in to memory */

			writeDataChunk(payload, payload_len);
 80013c2:	4b29      	ldr	r3, [pc, #164]	; (8001468 <process_packet+0x1ac>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	4619      	mov	r1, r3
 80013c8:	4828      	ldr	r0, [pc, #160]	; (800146c <process_packet+0x1b0>)
 80013ca:	f000 f86f 	bl	80014ac <writeDataChunk>
			received_fw_len += payload_len;
 80013ce:	4b26      	ldr	r3, [pc, #152]	; (8001468 <process_packet+0x1ac>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b31      	ldr	r3, [pc, #196]	; (800149c <process_packet+0x1e0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	4a30      	ldr	r2, [pc, #192]	; (800149c <process_packet+0x1e0>)
 80013dc:	6013      	str	r3, [r2, #0]
			send_response_packet(DFU_DATA,received_fw_len > total_fw_len ? DFU_ERROR : DFU_OK);
 80013de:	4b2f      	ldr	r3, [pc, #188]	; (800149c <process_packet+0x1e0>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4b2f      	ldr	r3, [pc, #188]	; (80014a0 <process_packet+0x1e4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	bf8c      	ite	hi
 80013ea:	2301      	movhi	r3, #1
 80013ec:	2300      	movls	r3, #0
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4619      	mov	r1, r3
 80013f2:	2004      	movs	r0, #4
 80013f4:	f7ff ff36 	bl	8001264 <send_response_packet>
			if(received_fw_len == total_fw_len)
 80013f8:	4b28      	ldr	r3, [pc, #160]	; (800149c <process_packet+0x1e0>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <process_packet+0x1e4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d12c      	bne.n	800145e <process_packet+0x1a2>
			{
				dfu_stat = DFU_END;
 8001404:	4b24      	ldr	r3, [pc, #144]	; (8001498 <process_packet+0x1dc>)
 8001406:	2205      	movs	r2, #5
 8001408:	701a      	strb	r2, [r3, #0]
			}
			break;
 800140a:	e028      	b.n	800145e <process_packet+0x1a2>

		case DFU_END:
			uint8_t crc_check_ok=0;
 800140c:	2300      	movs	r3, #0
 800140e:	743b      	strb	r3, [r7, #16]
			{
				/* perform a crc check here */

			}

			crc_check_ok=1; // FIXME
 8001410:	2301      	movs	r3, #1
 8001412:	743b      	strb	r3, [r7, #16]
			send_response_packet(DFU_END,received_fw_len == total_fw_len && crc_check_ok? DFU_OK:DFU_ERROR);
 8001414:	4b21      	ldr	r3, [pc, #132]	; (800149c <process_packet+0x1e0>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <process_packet+0x1e4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d102      	bne.n	8001426 <process_packet+0x16a>
 8001420:	7c3b      	ldrb	r3, [r7, #16]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <process_packet+0x16e>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <process_packet+0x170>
 800142a:	2300      	movs	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	4619      	mov	r1, r3
 8001430:	2005      	movs	r0, #5
 8001432:	f7ff ff17 	bl	8001264 <send_response_packet>
			break;
 8001436:	e013      	b.n	8001460 <process_packet+0x1a4>
		case DFU_UPDATE_FW:
			uint8_t checksumMatched=0;
 8001438:	2300      	movs	r3, #0
 800143a:	747b      	strb	r3, [r7, #17]
			/* copy firmware from flash memory to mcu mem */
			UpdateFirmware();
 800143c:	f000 f842 	bl	80014c4 <UpdateFirmware>
			checksumMatched = 1; // FIXME
 8001440:	2301      	movs	r3, #1
 8001442:	747b      	strb	r3, [r7, #17]
			/* perform checksum here */
			send_response_packet(DFU_UPDATE_FW,checksumMatched ? DFU_OK:DFU_ERROR);
 8001444:	7c7b      	ldrb	r3, [r7, #17]
 8001446:	2b00      	cmp	r3, #0
 8001448:	bf0c      	ite	eq
 800144a:	2301      	moveq	r3, #1
 800144c:	2300      	movne	r3, #0
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	2006      	movs	r0, #6
 8001454:	f7ff ff06 	bl	8001264 <send_response_packet>
			break;
 8001458:	e002      	b.n	8001460 <process_packet+0x1a4>
		case DFU_JUMP_TO_APP:
			break;

		default:
			break;
 800145a:	bf00      	nop
 800145c:	e000      	b.n	8001460 <process_packet+0x1a4>
			break;
 800145e:	bf00      	nop
	}
}
 8001460:	bf00      	nop
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200004f8 	.word	0x200004f8
 800146c:	200003e4 	.word	0x200003e4
 8001470:	200004e4 	.word	0x200004e4
 8001474:	0800d070 	.word	0x0800d070
 8001478:	0800d0a8 	.word	0x0800d0a8
 800147c:	200004e2 	.word	0x200004e2
 8001480:	0800d0c8 	.word	0x0800d0c8
 8001484:	200004e3 	.word	0x200004e3
 8001488:	0800d0dc 	.word	0x0800d0dc
 800148c:	0800d0f0 	.word	0x0800d0f0
 8001490:	0800d0fc 	.word	0x0800d0fc
 8001494:	0800d104 	.word	0x0800d104
 8001498:	200004e6 	.word	0x200004e6
 800149c:	200004ec 	.word	0x200004ec
 80014a0:	200004e8 	.word	0x200004e8
 80014a4:	200004f0 	.word	0x200004f0
 80014a8:	200004f4 	.word	0x200004f4

080014ac <writeDataChunk>:

void writeDataChunk(uint8_t *dat, uint16_t length)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
	//ef_WriteBuffer(dat, FW_ADDR_SPIFLASH + fw_index, length);
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <UpdateFirmware>:

void UpdateFirmware(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <ef_transfer>:
//    { 0x00, 0x00, 0x00, "None", "Empty", 0x01, 0x01FFFFF}
//};


static uint8_t ef_transfer(uint8_t tx)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af02      	add	r7, sp, #8
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
	uint8_t txdat [] = {tx,0x00};
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	733b      	strb	r3, [r7, #12]
 80014e2:	2300      	movs	r3, #0
 80014e4:	737b      	strb	r3, [r7, #13]
	HAL_SPI_TransmitReceive(&hspi1, &txdat[0], pRxData, 1, 500);
 80014e6:	f107 010c 	add.w	r1, r7, #12
 80014ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2301      	movs	r3, #1
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <ef_transfer+0x34>)
 80014f4:	4805      	ldr	r0, [pc, #20]	; (800150c <ef_transfer+0x38>)
 80014f6:	f002 fe9a 	bl	800422e <HAL_SPI_TransmitReceive>
	return pRxData[0];
 80014fa:	4b03      	ldr	r3, [pc, #12]	; (8001508 <ef_transfer+0x34>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000514 	.word	0x20000514
 800150c:	20000614 	.word	0x20000614

08001510 <ef_writeEnable>:

#define FLASH_CS(x) HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, x ? GPIO_PIN_SET: GPIO_PIN_RESET);

void ef_writeEnable(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
    FLASH_CS(0);
 8001514:	2200      	movs	r2, #0
 8001516:	2110      	movs	r1, #16
 8001518:	4806      	ldr	r0, [pc, #24]	; (8001534 <ef_writeEnable+0x24>)
 800151a:	f000 ff65 	bl	80023e8 <HAL_GPIO_WritePin>
    ef_transfer(0x06);
 800151e:	2006      	movs	r0, #6
 8001520:	f7ff ffd8 	bl	80014d4 <ef_transfer>
    FLASH_CS(1);
 8001524:	2201      	movs	r2, #1
 8001526:	2110      	movs	r1, #16
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <ef_writeEnable+0x24>)
 800152a:	f000 ff5d 	bl	80023e8 <HAL_GPIO_WritePin>
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40020000 	.word	0x40020000

08001538 <ef_status>:
    dev_type = ef_transfer(0x00);
    dev_id = ef_transfer(0x00);
    FLASH_CS(1);
}

uint8_t ef_status(void) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
    unsigned int flashStatus = 0x00;
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
    FLASH_CS(0);
 8001542:	2200      	movs	r2, #0
 8001544:	2110      	movs	r1, #16
 8001546:	480b      	ldr	r0, [pc, #44]	; (8001574 <ef_status+0x3c>)
 8001548:	f000 ff4e 	bl	80023e8 <HAL_GPIO_WritePin>
    ef_transfer(0x05);
 800154c:	2005      	movs	r0, #5
 800154e:	f7ff ffc1 	bl	80014d4 <ef_transfer>
    flashStatus = ef_transfer(0x00);
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff ffbe 	bl	80014d4 <ef_transfer>
 8001558:	4603      	mov	r3, r0
 800155a:	607b      	str	r3, [r7, #4]
    FLASH_CS(1);
 800155c:	2201      	movs	r2, #1
 800155e:	2110      	movs	r1, #16
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <ef_status+0x3c>)
 8001562:	f000 ff41 	bl	80023e8 <HAL_GPIO_WritePin>
    return flashStatus;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	b2db      	uxtb	r3, r3
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40020000 	.word	0x40020000

08001578 <ef_ClearBlockProtectSST1>:

void ef_ClearBlockProtectSST1(void) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
    uint8_t flashStatus1 = 0x00;
 800157e:	2300      	movs	r3, #0
 8001580:	71fb      	strb	r3, [r7, #7]
    FLASH_CS(0);
 8001582:	2200      	movs	r2, #0
 8001584:	2110      	movs	r1, #16
 8001586:	481b      	ldr	r0, [pc, #108]	; (80015f4 <ef_ClearBlockProtectSST1+0x7c>)
 8001588:	f000 ff2e 	bl	80023e8 <HAL_GPIO_WritePin>
    ef_transfer(0x05);
 800158c:	2005      	movs	r0, #5
 800158e:	f7ff ffa1 	bl	80014d4 <ef_transfer>
    flashStatus1 = ef_transfer(0x00);
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff ff9e 	bl	80014d4 <ef_transfer>
 8001598:	4603      	mov	r3, r0
 800159a:	71fb      	strb	r3, [r7, #7]
    FLASH_CS(1);
 800159c:	2201      	movs	r2, #1
 800159e:	2110      	movs	r1, #16
 80015a0:	4814      	ldr	r0, [pc, #80]	; (80015f4 <ef_ClearBlockProtectSST1+0x7c>)
 80015a2:	f000 ff21 	bl	80023e8 <HAL_GPIO_WritePin>

    //modify flashstatus to clear protect bits
    flashStatus1 &= 0xC3;
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 80015ac:	71fb      	strb	r3, [r7, #7]
    FLASH_CS(0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2110      	movs	r1, #16
 80015b2:	4810      	ldr	r0, [pc, #64]	; (80015f4 <ef_ClearBlockProtectSST1+0x7c>)
 80015b4:	f000 ff18 	bl	80023e8 <HAL_GPIO_WritePin>
    ef_transfer(0x50);
 80015b8:	2050      	movs	r0, #80	; 0x50
 80015ba:	f7ff ff8b 	bl	80014d4 <ef_transfer>
    FLASH_CS(1);
 80015be:	2201      	movs	r2, #1
 80015c0:	2110      	movs	r1, #16
 80015c2:	480c      	ldr	r0, [pc, #48]	; (80015f4 <ef_ClearBlockProtectSST1+0x7c>)
 80015c4:	f000 ff10 	bl	80023e8 <HAL_GPIO_WritePin>
    FLASH_CS(0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2110      	movs	r1, #16
 80015cc:	4809      	ldr	r0, [pc, #36]	; (80015f4 <ef_ClearBlockProtectSST1+0x7c>)
 80015ce:	f000 ff0b 	bl	80023e8 <HAL_GPIO_WritePin>
    ef_transfer(0x01);
 80015d2:	2001      	movs	r0, #1
 80015d4:	f7ff ff7e 	bl	80014d4 <ef_transfer>
    ef_transfer(flashStatus1);
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff7a 	bl	80014d4 <ef_transfer>
    FLASH_CS(0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2110      	movs	r1, #16
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <ef_ClearBlockProtectSST1+0x7c>)
 80015e6:	f000 feff 	bl	80023e8 <HAL_GPIO_WritePin>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40020000 	.word	0x40020000

080015f8 <ClearBlockProtect>:

void ClearBlockProtect(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
    unsigned char i = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	71fb      	strb	r3, [r7, #7]
    if (dev_type == 0x25) {
 8001602:	4b44      	ldr	r3, [pc, #272]	; (8001714 <ClearBlockProtect+0x11c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b25      	cmp	r3, #37	; 0x25
 8001608:	d102      	bne.n	8001610 <ClearBlockProtect+0x18>
        ef_ClearBlockProtectSST1();
 800160a:	f7ff ffb5 	bl	8001578 <ef_ClearBlockProtectSST1>
        return;
 800160e:	e07d      	b.n	800170c <ClearBlockProtect+0x114>
    }
    block_protection_10[0] = 0x00;
 8001610:	4b41      	ldr	r3, [pc, #260]	; (8001718 <ClearBlockProtect+0x120>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
    block_protection_10[1] = 0x00;
 8001616:	4b40      	ldr	r3, [pc, #256]	; (8001718 <ClearBlockProtect+0x120>)
 8001618:	2200      	movs	r2, #0
 800161a:	705a      	strb	r2, [r3, #1]
    block_protection_10[2] = 0x00;
 800161c:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <ClearBlockProtect+0x120>)
 800161e:	2200      	movs	r2, #0
 8001620:	709a      	strb	r2, [r3, #2]
    block_protection_10[3] = 0x00;
 8001622:	4b3d      	ldr	r3, [pc, #244]	; (8001718 <ClearBlockProtect+0x120>)
 8001624:	2200      	movs	r2, #0
 8001626:	70da      	strb	r2, [r3, #3]
    block_protection_10[4] = 0x00;
 8001628:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <ClearBlockProtect+0x120>)
 800162a:	2200      	movs	r2, #0
 800162c:	711a      	strb	r2, [r3, #4]
    block_protection_10[5] = 0x00;
 800162e:	4b3a      	ldr	r3, [pc, #232]	; (8001718 <ClearBlockProtect+0x120>)
 8001630:	2200      	movs	r2, #0
 8001632:	715a      	strb	r2, [r3, #5]
    block_protection_10[6] = 0x00;
 8001634:	4b38      	ldr	r3, [pc, #224]	; (8001718 <ClearBlockProtect+0x120>)
 8001636:	2200      	movs	r2, #0
 8001638:	719a      	strb	r2, [r3, #6]
    block_protection_10[7] = 0x00;
 800163a:	4b37      	ldr	r3, [pc, #220]	; (8001718 <ClearBlockProtect+0x120>)
 800163c:	2200      	movs	r2, #0
 800163e:	71da      	strb	r2, [r3, #7]
    block_protection_10[8] = 0x00;
 8001640:	4b35      	ldr	r3, [pc, #212]	; (8001718 <ClearBlockProtect+0x120>)
 8001642:	2200      	movs	r2, #0
 8001644:	721a      	strb	r2, [r3, #8]
    block_protection_10[9] = 0x00;
 8001646:	4b34      	ldr	r3, [pc, #208]	; (8001718 <ClearBlockProtect+0x120>)
 8001648:	2200      	movs	r2, #0
 800164a:	725a      	strb	r2, [r3, #9]
    block_protection_10[10] = 0x00;
 800164c:	4b32      	ldr	r3, [pc, #200]	; (8001718 <ClearBlockProtect+0x120>)
 800164e:	2200      	movs	r2, #0
 8001650:	729a      	strb	r2, [r3, #10]
    block_protection_10[11] = 0x00;
 8001652:	4b31      	ldr	r3, [pc, #196]	; (8001718 <ClearBlockProtect+0x120>)
 8001654:	2200      	movs	r2, #0
 8001656:	72da      	strb	r2, [r3, #11]
    block_protection_10[12] = 0x00;
 8001658:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <ClearBlockProtect+0x120>)
 800165a:	2200      	movs	r2, #0
 800165c:	731a      	strb	r2, [r3, #12]
    block_protection_10[13] = 0x00;
 800165e:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <ClearBlockProtect+0x120>)
 8001660:	2200      	movs	r2, #0
 8001662:	735a      	strb	r2, [r3, #13]
    block_protection_10[14] = 0x00;
 8001664:	4b2c      	ldr	r3, [pc, #176]	; (8001718 <ClearBlockProtect+0x120>)
 8001666:	2200      	movs	r2, #0
 8001668:	739a      	strb	r2, [r3, #14]
    block_protection_10[15] = 0x00;
 800166a:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <ClearBlockProtect+0x120>)
 800166c:	2200      	movs	r2, #0
 800166e:	73da      	strb	r2, [r3, #15]
    block_protection_10[16] = 0x00;
 8001670:	4b29      	ldr	r3, [pc, #164]	; (8001718 <ClearBlockProtect+0x120>)
 8001672:	2200      	movs	r2, #0
 8001674:	741a      	strb	r2, [r3, #16]
    block_protection_10[17] = 0x00;
 8001676:	4b28      	ldr	r3, [pc, #160]	; (8001718 <ClearBlockProtect+0x120>)
 8001678:	2200      	movs	r2, #0
 800167a:	745a      	strb	r2, [r3, #17]
    ef_writeEnable();
 800167c:	f7ff ff48 	bl	8001510 <ef_writeEnable>
    FLASH_CS(0);
 8001680:	2200      	movs	r2, #0
 8001682:	2110      	movs	r1, #16
 8001684:	4825      	ldr	r0, [pc, #148]	; (800171c <ClearBlockProtect+0x124>)
 8001686:	f000 feaf 	bl	80023e8 <HAL_GPIO_WritePin>
    ef_transfer(0x42);
 800168a:	2042      	movs	r0, #66	; 0x42
 800168c:	f7ff ff22 	bl	80014d4 <ef_transfer>
    for (i = 18; i > 0; i--) {ef_transfer(block_protection_10[i - 1]);}
 8001690:	2312      	movs	r3, #18
 8001692:	71fb      	strb	r3, [r7, #7]
 8001694:	e009      	b.n	80016aa <ClearBlockProtect+0xb2>
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	3b01      	subs	r3, #1
 800169a:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <ClearBlockProtect+0x120>)
 800169c:	5cd3      	ldrb	r3, [r2, r3]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ff18 	bl	80014d4 <ef_transfer>
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	71fb      	strb	r3, [r7, #7]
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f2      	bne.n	8001696 <ClearBlockProtect+0x9e>
    FLASH_CS(1);
 80016b0:	2201      	movs	r2, #1
 80016b2:	2110      	movs	r1, #16
 80016b4:	4819      	ldr	r0, [pc, #100]	; (800171c <ClearBlockProtect+0x124>)
 80016b6:	f000 fe97 	bl	80023e8 <HAL_GPIO_WritePin>

    //Florian's way for WINBOND
    if ((mfg_id == 0xEF) && (dev_type == 0x40) && (dev_id == 0x17)) {
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <ClearBlockProtect+0x128>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2bef      	cmp	r3, #239	; 0xef
 80016c0:	d124      	bne.n	800170c <ClearBlockProtect+0x114>
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <ClearBlockProtect+0x11c>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b40      	cmp	r3, #64	; 0x40
 80016c8:	d120      	bne.n	800170c <ClearBlockProtect+0x114>
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <ClearBlockProtect+0x12c>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b17      	cmp	r3, #23
 80016d0:	d11c      	bne.n	800170c <ClearBlockProtect+0x114>
        ef_writeEnable();
 80016d2:	f7ff ff1d 	bl	8001510 <ef_writeEnable>
        FLASH_CS(0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2110      	movs	r1, #16
 80016da:	4810      	ldr	r0, [pc, #64]	; (800171c <ClearBlockProtect+0x124>)
 80016dc:	f000 fe84 	bl	80023e8 <HAL_GPIO_WritePin>
        ef_transfer(0x01);
 80016e0:	2001      	movs	r0, #1
 80016e2:	f7ff fef7 	bl	80014d4 <ef_transfer>
        ef_transfer(0x00);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff fef4 	bl	80014d4 <ef_transfer>
        FLASH_CS(1);
 80016ec:	2201      	movs	r2, #1
 80016ee:	2110      	movs	r1, #16
 80016f0:	480a      	ldr	r0, [pc, #40]	; (800171c <ClearBlockProtect+0x124>)
 80016f2:	f000 fe79 	bl	80023e8 <HAL_GPIO_WritePin>
        while (ef_status() & busyMask);
 80016f6:	bf00      	nop
 80016f8:	f7ff ff1e 	bl	8001538 <ef_status>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <ClearBlockProtect+0x130>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4013      	ands	r3, r2
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f5      	bne.n	80016f8 <ClearBlockProtect+0x100>
    }
}
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200004fd 	.word	0x200004fd
 8001718:	20000500 	.word	0x20000500
 800171c:	40020000 	.word	0x40020000
 8001720:	200004fc 	.word	0x200004fc
 8001724:	200004fe 	.word	0x200004fe
 8001728:	20000512 	.word	0x20000512

0800172c <ef_ChipErase>:

void ef_ChipErase(void) {
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
    ClearBlockProtect();
 8001730:	f7ff ff62 	bl	80015f8 <ClearBlockProtect>
    ef_writeEnable();
 8001734:	f7ff feec 	bl	8001510 <ef_writeEnable>
    FLASH_CS(0);
 8001738:	2200      	movs	r2, #0
 800173a:	2110      	movs	r1, #16
 800173c:	4806      	ldr	r0, [pc, #24]	; (8001758 <ef_ChipErase+0x2c>)
 800173e:	f000 fe53 	bl	80023e8 <HAL_GPIO_WritePin>
    ef_transfer(0xC7);
 8001742:	20c7      	movs	r0, #199	; 0xc7
 8001744:	f7ff fec6 	bl	80014d4 <ef_transfer>
    FLASH_CS(1);
 8001748:	2201      	movs	r2, #1
 800174a:	2110      	movs	r1, #16
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <ef_ChipErase+0x2c>)
 800174e:	f000 fe4b 	bl	80023e8 <HAL_GPIO_WritePin>
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40020000 	.word	0x40020000

0800175c <__io_putchar>:
#endif /* __GNUC__ */
#define DBG_BUFF_LEN 64
char dbg_buff[DBG_BUFF_LEN];
uint8_t dbg_buff_idx;
PUTCHAR_PROTOTYPE
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	{
	  //CDC_Transmit_FS((uint8_t *)&dbg_buff[0], dbg_buff_idx);
	  dbg_buff_idx=0;
	}
	*/
	return ch;
 8001764:	687b      	ldr	r3, [r7, #4]
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001778:	f000 fb0a 	bl	8001d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800177c:	f000 f81c 	bl	80017b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001780:	f000 f8b8 	bl	80018f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001784:	f000 f880 	bl	8001888 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001788:	f006 fae8 	bl	8007d5c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //printf("I am Mayank Patel. How are you?\n");

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001792:	4808      	ldr	r0, [pc, #32]	; (80017b4 <main+0x40>)
 8001794:	f000 fe28 	bl	80023e8 <HAL_GPIO_WritePin>
	  HAL_Delay(35);
 8001798:	2023      	movs	r0, #35	; 0x23
 800179a:	f000 fb6b 	bl	8001e74 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a4:	4803      	ldr	r0, [pc, #12]	; (80017b4 <main+0x40>)
 80017a6:	f000 fe1f 	bl	80023e8 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 80017aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017ae:	f000 fb61 	bl	8001e74 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017b2:	e7eb      	b.n	800178c <main+0x18>
 80017b4:	40020800 	.word	0x40020800

080017b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b094      	sub	sp, #80	; 0x50
 80017bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017be:	f107 0320 	add.w	r3, r7, #32
 80017c2:	2230      	movs	r2, #48	; 0x30
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f008 f870 	bl	80098ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	4b27      	ldr	r3, [pc, #156]	; (8001880 <SystemClock_Config+0xc8>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	4a26      	ldr	r2, [pc, #152]	; (8001880 <SystemClock_Config+0xc8>)
 80017e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ea:	6413      	str	r3, [r2, #64]	; 0x40
 80017ec:	4b24      	ldr	r3, [pc, #144]	; (8001880 <SystemClock_Config+0xc8>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	4b21      	ldr	r3, [pc, #132]	; (8001884 <SystemClock_Config+0xcc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a20      	ldr	r2, [pc, #128]	; (8001884 <SystemClock_Config+0xcc>)
 8001802:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <SystemClock_Config+0xcc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001814:	2301      	movs	r3, #1
 8001816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800181e:	2302      	movs	r3, #2
 8001820:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001828:	2319      	movs	r3, #25
 800182a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800182c:	23c0      	movs	r3, #192	; 0xc0
 800182e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001830:	2306      	movs	r3, #6
 8001832:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001834:	2304      	movs	r3, #4
 8001836:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001838:	f107 0320 	add.w	r3, r7, #32
 800183c:	4618      	mov	r0, r3
 800183e:	f002 f83d 	bl	80038bc <HAL_RCC_OscConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001848:	f000 f8d6 	bl	80019f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800184c:	230f      	movs	r3, #15
 800184e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001850:	2302      	movs	r3, #2
 8001852:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	2101      	movs	r1, #1
 8001866:	4618      	mov	r0, r3
 8001868:	f002 faa0 	bl	8003dac <HAL_RCC_ClockConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001872:	f000 f8c1 	bl	80019f8 <Error_Handler>
  }
}
 8001876:	bf00      	nop
 8001878:	3750      	adds	r7, #80	; 0x50
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	40007000 	.word	0x40007000

08001888 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800188c:	4b17      	ldr	r3, [pc, #92]	; (80018ec <MX_SPI1_Init+0x64>)
 800188e:	4a18      	ldr	r2, [pc, #96]	; (80018f0 <MX_SPI1_Init+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <MX_SPI1_Init+0x64>)
 8001894:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001898:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MX_SPI1_Init+0x64>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_SPI1_Init+0x64>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_SPI1_Init+0x64>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_SPI1_Init+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_SPI1_Init+0x64>)
 80018b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_SPI1_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <MX_SPI1_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_SPI1_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <MX_SPI1_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_SPI1_Init+0x64>)
 80018d4:	220a      	movs	r2, #10
 80018d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_SPI1_Init+0x64>)
 80018da:	f002 fc1f 	bl	800411c <HAL_SPI_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018e4:	f000 f888 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000614 	.word	0x20000614
 80018f0:	40013000 	.word	0x40013000

080018f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	4b37      	ldr	r3, [pc, #220]	; (80019ec <MX_GPIO_Init+0xf8>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a36      	ldr	r2, [pc, #216]	; (80019ec <MX_GPIO_Init+0xf8>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b34      	ldr	r3, [pc, #208]	; (80019ec <MX_GPIO_Init+0xf8>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b30      	ldr	r3, [pc, #192]	; (80019ec <MX_GPIO_Init+0xf8>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a2f      	ldr	r2, [pc, #188]	; (80019ec <MX_GPIO_Init+0xf8>)
 8001930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <MX_GPIO_Init+0xf8>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	4b29      	ldr	r3, [pc, #164]	; (80019ec <MX_GPIO_Init+0xf8>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a28      	ldr	r2, [pc, #160]	; (80019ec <MX_GPIO_Init+0xf8>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b26      	ldr	r3, [pc, #152]	; (80019ec <MX_GPIO_Init+0xf8>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b22      	ldr	r3, [pc, #136]	; (80019ec <MX_GPIO_Init+0xf8>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a21      	ldr	r2, [pc, #132]	; (80019ec <MX_GPIO_Init+0xf8>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <MX_GPIO_Init+0xf8>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001980:	481b      	ldr	r0, [pc, #108]	; (80019f0 <MX_GPIO_Init+0xfc>)
 8001982:	f000 fd31 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	2110      	movs	r1, #16
 800198a:	481a      	ldr	r0, [pc, #104]	; (80019f4 <MX_GPIO_Init+0x100>)
 800198c:	f000 fd2c 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2301      	movs	r3, #1
 8001998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	4811      	ldr	r0, [pc, #68]	; (80019f0 <MX_GPIO_Init+0xfc>)
 80019aa:	f000 fb99 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80019ae:	2301      	movs	r3, #1
 80019b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4619      	mov	r1, r3
 80019c0:	480c      	ldr	r0, [pc, #48]	; (80019f4 <MX_GPIO_Init+0x100>)
 80019c2:	f000 fb8d 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80019c6:	2310      	movs	r3, #16
 80019c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4619      	mov	r1, r3
 80019dc:	4805      	ldr	r0, [pc, #20]	; (80019f4 <MX_GPIO_Init+0x100>)
 80019de:	f000 fb7f 	bl	80020e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019e2:	bf00      	nop
 80019e4:	3728      	adds	r7, #40	; 0x28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020800 	.word	0x40020800
 80019f4:	40020000 	.word	0x40020000

080019f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <Error_Handler+0x8>
	...

08001a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800

08001a54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a28      	ldr	r2, [pc, #160]	; (8001b14 <HAL_SPI_MspInit+0xc0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d149      	bne.n	8001b0a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <HAL_SPI_MspInit+0xc4>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	4a26      	ldr	r2, [pc, #152]	; (8001b18 <HAL_SPI_MspInit+0xc4>)
 8001a80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a84:	6453      	str	r3, [r2, #68]	; 0x44
 8001a86:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <HAL_SPI_MspInit+0xc4>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_SPI_MspInit+0xc4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a1f      	ldr	r2, [pc, #124]	; (8001b18 <HAL_SPI_MspInit+0xc4>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <HAL_SPI_MspInit+0xc4>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_SPI_MspInit+0xc4>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a18      	ldr	r2, [pc, #96]	; (8001b18 <HAL_SPI_MspInit+0xc4>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <HAL_SPI_MspInit+0xc4>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001aca:	23a0      	movs	r3, #160	; 0xa0
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ada:	2305      	movs	r3, #5
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480d      	ldr	r0, [pc, #52]	; (8001b1c <HAL_SPI_MspInit+0xc8>)
 8001ae6:	f000 fafb 	bl	80020e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aea:	2310      	movs	r3, #16
 8001aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001afa:	2305      	movs	r3, #5
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	4806      	ldr	r0, [pc, #24]	; (8001b20 <HAL_SPI_MspInit+0xcc>)
 8001b06:	f000 faeb 	bl	80020e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b0a:	bf00      	nop
 8001b0c:	3728      	adds	r7, #40	; 0x28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40013000 	.word	0x40013000
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40020400 	.word	0x40020400

08001b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b28:	e7fe      	b.n	8001b28 <NMI_Handler+0x4>

08001b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <HardFault_Handler+0x4>

08001b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <MemManage_Handler+0x4>

08001b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3a:	e7fe      	b.n	8001b3a <BusFault_Handler+0x4>

08001b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <UsageFault_Handler+0x4>

08001b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b70:	f000 f960 	bl	8001e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <OTG_FS_IRQHandler+0x10>)
 8001b7e:	f000 fd90 	bl	80026a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20001b54 	.word	0x20001b54

08001b8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return 1;
 8001b90:	2301      	movs	r3, #1
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_kill>:

int _kill(int pid, int sig)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ba6:	f007 fed3 	bl	8009950 <__errno>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2216      	movs	r2, #22
 8001bae:	601a      	str	r2, [r3, #0]
  return -1;
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_exit>:

void _exit (int status)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ffe7 	bl	8001b9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bce:	e7fe      	b.n	8001bce <_exit+0x12>

08001bd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	e00a      	b.n	8001bf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001be2:	f3af 8000 	nop.w
 8001be6:	4601      	mov	r1, r0
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	60ba      	str	r2, [r7, #8]
 8001bee:	b2ca      	uxtb	r2, r1
 8001bf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbf0      	blt.n	8001be2 <_read+0x12>
  }

  return len;
 8001c00:	687b      	ldr	r3, [r7, #4]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	e009      	b.n	8001c30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	60ba      	str	r2, [r7, #8]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fd99 	bl	800175c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	dbf1      	blt.n	8001c1c <_write+0x12>
  }
  return len;
 8001c38:	687b      	ldr	r3, [r7, #4]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <_close>:

int _close(int file)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <_isatty>:

int _isatty(int file)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <_sbrk+0x5c>)
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <_sbrk+0x60>)
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d102      	bne.n	8001cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <_sbrk+0x64>)
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <_sbrk+0x68>)
 8001ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d207      	bcs.n	8001cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cdc:	f007 fe38 	bl	8009950 <__errno>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cea:	e009      	b.n	8001d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <_sbrk+0x64>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <_sbrk+0x64>)
 8001cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20020000 	.word	0x20020000
 8001d0c:	00000400 	.word	0x00000400
 8001d10:	2000066c 	.word	0x2000066c
 8001d14:	200023a8 	.word	0x200023a8

08001d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <SystemInit+0x20>)
 8001d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <SystemInit+0x20>)
 8001d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d40:	f7ff ffea 	bl	8001d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d46:	490d      	ldr	r1, [pc, #52]	; (8001d7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d48:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d5c:	4c0a      	ldr	r4, [pc, #40]	; (8001d88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d6a:	f007 fdf7 	bl	800995c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d6e:	f7ff fd01 	bl	8001774 <main>
  bx  lr    
 8001d72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d7c:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001d80:	0800d5a8 	.word	0x0800d5a8
  ldr r2, =_sbss
 8001d84:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001d88:	200023a4 	.word	0x200023a4

08001d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC_IRQHandler>
	...

08001d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_Init+0x40>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <HAL_Init+0x40>)
 8001d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_Init+0x40>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <HAL_Init+0x40>)
 8001da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_Init+0x40>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <HAL_Init+0x40>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db8:	2003      	movs	r0, #3
 8001dba:	f000 f94f 	bl	800205c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dbe:	200f      	movs	r0, #15
 8001dc0:	f000 f808 	bl	8001dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc4:	f7ff fe1e 	bl	8001a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023c00 	.word	0x40023c00

08001dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_InitTick+0x54>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_InitTick+0x58>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 f967 	bl	80020c6 <HAL_SYSTICK_Config>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00e      	b.n	8001e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b0f      	cmp	r3, #15
 8001e06:	d80a      	bhi.n	8001e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f000 f92f 	bl	8002072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e14:	4a06      	ldr	r2, [pc, #24]	; (8001e30 <HAL_InitTick+0x5c>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e000      	b.n	8001e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000008 	.word	0x20000008
 8001e30:	20000004 	.word	0x20000004

08001e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_IncTick+0x20>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_IncTick+0x24>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_IncTick+0x24>)
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000008 	.word	0x20000008
 8001e58:	20000670 	.word	0x20000670

08001e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <HAL_GetTick+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000670 	.word	0x20000670

08001e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e7c:	f7ff ffee 	bl	8001e5c <HAL_GetTick>
 8001e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d005      	beq.n	8001e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_Delay+0x44>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e9a:	bf00      	nop
 8001e9c:	f7ff ffde 	bl	8001e5c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d8f7      	bhi.n	8001e9c <HAL_Delay+0x28>
  {
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000008 	.word	0x20000008

08001ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0b      	blt.n	8001f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4907      	ldr	r1, [pc, #28]	; (8001f58 <__NVIC_EnableIRQ+0x38>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2001      	movs	r0, #1
 8001f42:	fa00 f202 	lsl.w	r2, r0, r2
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	; (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
         );
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002028:	d301      	bcc.n	800202e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202a:	2301      	movs	r3, #1
 800202c:	e00f      	b.n	800204e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <SysTick_Config+0x40>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002036:	210f      	movs	r1, #15
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f7ff ff8e 	bl	8001f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <SysTick_Config+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SysTick_Config+0x40>)
 8002048:	2207      	movs	r2, #7
 800204a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff29 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002084:	f7ff ff3e 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 8002088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f7ff ff8e 	bl	8001fb0 <NVIC_EncodePriority>
 8002094:	4602      	mov	r2, r0
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff5d 	bl	8001f5c <__NVIC_SetPriority>
}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff31 	bl	8001f20 <__NVIC_EnableIRQ>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffa2 	bl	8002018 <SysTick_Config>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	e159      	b.n	80023b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	429a      	cmp	r2, r3
 8002116:	f040 8148 	bne.w	80023aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b01      	cmp	r3, #1
 8002124:	d005      	beq.n	8002132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212e:	2b02      	cmp	r3, #2
 8002130:	d130      	bne.n	8002194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2203      	movs	r2, #3
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002168:	2201      	movs	r2, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 0201 	and.w	r2, r3, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b03      	cmp	r3, #3
 800219e:	d017      	beq.n	80021d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2203      	movs	r2, #3
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d123      	bne.n	8002224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	08da      	lsrs	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3208      	adds	r2, #8
 80021e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	220f      	movs	r2, #15
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	08da      	lsrs	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3208      	adds	r2, #8
 800221e:	69b9      	ldr	r1, [r7, #24]
 8002220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0203 	and.w	r2, r3, #3
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80a2 	beq.w	80023aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	4b57      	ldr	r3, [pc, #348]	; (80023c8 <HAL_GPIO_Init+0x2e8>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	4a56      	ldr	r2, [pc, #344]	; (80023c8 <HAL_GPIO_Init+0x2e8>)
 8002270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002274:	6453      	str	r3, [r2, #68]	; 0x44
 8002276:	4b54      	ldr	r3, [pc, #336]	; (80023c8 <HAL_GPIO_Init+0x2e8>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002282:	4a52      	ldr	r2, [pc, #328]	; (80023cc <HAL_GPIO_Init+0x2ec>)
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3302      	adds	r3, #2
 800228a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	220f      	movs	r2, #15
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a49      	ldr	r2, [pc, #292]	; (80023d0 <HAL_GPIO_Init+0x2f0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d019      	beq.n	80022e2 <HAL_GPIO_Init+0x202>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a48      	ldr	r2, [pc, #288]	; (80023d4 <HAL_GPIO_Init+0x2f4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d013      	beq.n	80022de <HAL_GPIO_Init+0x1fe>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a47      	ldr	r2, [pc, #284]	; (80023d8 <HAL_GPIO_Init+0x2f8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00d      	beq.n	80022da <HAL_GPIO_Init+0x1fa>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a46      	ldr	r2, [pc, #280]	; (80023dc <HAL_GPIO_Init+0x2fc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d007      	beq.n	80022d6 <HAL_GPIO_Init+0x1f6>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a45      	ldr	r2, [pc, #276]	; (80023e0 <HAL_GPIO_Init+0x300>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d101      	bne.n	80022d2 <HAL_GPIO_Init+0x1f2>
 80022ce:	2304      	movs	r3, #4
 80022d0:	e008      	b.n	80022e4 <HAL_GPIO_Init+0x204>
 80022d2:	2307      	movs	r3, #7
 80022d4:	e006      	b.n	80022e4 <HAL_GPIO_Init+0x204>
 80022d6:	2303      	movs	r3, #3
 80022d8:	e004      	b.n	80022e4 <HAL_GPIO_Init+0x204>
 80022da:	2302      	movs	r3, #2
 80022dc:	e002      	b.n	80022e4 <HAL_GPIO_Init+0x204>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_GPIO_Init+0x204>
 80022e2:	2300      	movs	r3, #0
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	f002 0203 	and.w	r2, r2, #3
 80022ea:	0092      	lsls	r2, r2, #2
 80022ec:	4093      	lsls	r3, r2
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f4:	4935      	ldr	r1, [pc, #212]	; (80023cc <HAL_GPIO_Init+0x2ec>)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	089b      	lsrs	r3, r3, #2
 80022fa:	3302      	adds	r3, #2
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002302:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <HAL_GPIO_Init+0x304>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002326:	4a2f      	ldr	r2, [pc, #188]	; (80023e4 <HAL_GPIO_Init+0x304>)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800232c:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <HAL_GPIO_Init+0x304>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002350:	4a24      	ldr	r2, [pc, #144]	; (80023e4 <HAL_GPIO_Init+0x304>)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002356:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <HAL_GPIO_Init+0x304>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800237a:	4a1a      	ldr	r2, [pc, #104]	; (80023e4 <HAL_GPIO_Init+0x304>)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <HAL_GPIO_Init+0x304>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a4:	4a0f      	ldr	r2, [pc, #60]	; (80023e4 <HAL_GPIO_Init+0x304>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3301      	adds	r3, #1
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	2b0f      	cmp	r3, #15
 80023b4:	f67f aea2 	bls.w	80020fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3724      	adds	r7, #36	; 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40013800 	.word	0x40013800
 80023d0:	40020000 	.word	0x40020000
 80023d4:	40020400 	.word	0x40020400
 80023d8:	40020800 	.word	0x40020800
 80023dc:	40020c00 	.word	0x40020c00
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40013c00 	.word	0x40013c00

080023e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
 80023f4:	4613      	mov	r3, r2
 80023f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f8:	787b      	ldrb	r3, [r7, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002404:	e003      	b.n	800240e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	041a      	lsls	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	619a      	str	r2, [r3, #24]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af02      	add	r7, sp, #8
 8002420:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e101      	b.n	8002630 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f005 fe92 	bl	8008170 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2203      	movs	r2, #3
 8002450:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800245a:	d102      	bne.n	8002462 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f002 fa85 	bl	8004976 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	7c1a      	ldrb	r2, [r3, #16]
 8002474:	f88d 2000 	strb.w	r2, [sp]
 8002478:	3304      	adds	r3, #4
 800247a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800247c:	f002 f964 	bl	8004748 <USB_CoreInit>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2202      	movs	r2, #2
 800248a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e0ce      	b.n	8002630 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f002 fa7d 	bl	8004998 <USB_SetCurrentMode>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0bf      	b.n	8002630 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]
 80024b4:	e04a      	b.n	800254c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3315      	adds	r3, #21
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	3314      	adds	r3, #20
 80024da:	7bfa      	ldrb	r2, [r7, #15]
 80024dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	b298      	uxth	r0, r3
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	332e      	adds	r3, #46	; 0x2e
 80024f2:	4602      	mov	r2, r0
 80024f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	3318      	adds	r3, #24
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	331c      	adds	r3, #28
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800251e:	7bfa      	ldrb	r2, [r7, #15]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	3320      	adds	r3, #32
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	3324      	adds	r3, #36	; 0x24
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	3301      	adds	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	791b      	ldrb	r3, [r3, #4]
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	429a      	cmp	r2, r3
 8002554:	d3af      	bcc.n	80024b6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002556:	2300      	movs	r3, #0
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	e044      	b.n	80025e6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	f203 2355 	addw	r3, r3, #597	; 0x255
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	3301      	adds	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	791b      	ldrb	r3, [r3, #4]
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d3b5      	bcc.n	800255c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7c1a      	ldrb	r2, [r3, #16]
 80025f8:	f88d 2000 	strb.w	r2, [sp]
 80025fc:	3304      	adds	r3, #4
 80025fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002600:	f002 fa16 	bl	8004a30 <USB_DevInit>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2202      	movs	r2, #2
 800260e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e00c      	b.n	8002630 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f003 fa5a 	bl	8005ae2 <USB_DevDisconnect>

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_PCD_Start+0x1c>
 8002650:	2302      	movs	r3, #2
 8002652:	e022      	b.n	800269a <HAL_PCD_Start+0x62>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002664:	2b00      	cmp	r3, #0
 8002666:	d009      	beq.n	800267c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800266c:	2b01      	cmp	r3, #1
 800266e:	d105      	bne.n	800267c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002674:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f002 f967 	bl	8004954 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f003 fa08 	bl	8005aa0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026a2:	b590      	push	{r4, r7, lr}
 80026a4:	b08d      	sub	sp, #52	; 0x34
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 fac6 	bl	8005c4a <USB_GetMode>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f040 848c 	bne.w	8002fde <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 fa2a 	bl	8005b24 <USB_ReadInterrupts>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 8482 	beq.w	8002fdc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f003 fa17 	bl	8005b24 <USB_ReadInterrupts>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d107      	bne.n	8002710 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f002 0202 	and.w	r2, r2, #2
 800270e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f003 fa05 	bl	8005b24 <USB_ReadInterrupts>
 800271a:	4603      	mov	r3, r0
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b10      	cmp	r3, #16
 8002722:	d161      	bne.n	80027e8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0210 	bic.w	r2, r2, #16
 8002732:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	f003 020f 	and.w	r2, r3, #15
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	4413      	add	r3, r2
 8002750:	3304      	adds	r3, #4
 8002752:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	0c5b      	lsrs	r3, r3, #17
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	2b02      	cmp	r3, #2
 800275e:	d124      	bne.n	80027aa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d035      	beq.n	80027d8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800277a:	b29b      	uxth	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	6a38      	ldr	r0, [r7, #32]
 8002780:	f003 f83c 	bl	80057fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002790:	441a      	add	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027a2:	441a      	add	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	615a      	str	r2, [r3, #20]
 80027a8:	e016      	b.n	80027d8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	0c5b      	lsrs	r3, r3, #17
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	2b06      	cmp	r3, #6
 80027b4:	d110      	bne.n	80027d8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80027bc:	2208      	movs	r2, #8
 80027be:	4619      	mov	r1, r3
 80027c0:	6a38      	ldr	r0, [r7, #32]
 80027c2:	f003 f81b 	bl	80057fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027d2:	441a      	add	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699a      	ldr	r2, [r3, #24]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0210 	orr.w	r2, r2, #16
 80027e6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f003 f999 	bl	8005b24 <USB_ReadInterrupts>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027fc:	f040 80a7 	bne.w	800294e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f003 f99e 	bl	8005b4a <USB_ReadDevAllOutEpInterrupt>
 800280e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002810:	e099      	b.n	8002946 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 808e 	beq.w	800293a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f003 f9c2 	bl	8005bb2 <USB_ReadDevOutEPInterrupt>
 800282e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00c      	beq.n	8002854 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	4413      	add	r3, r2
 8002842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002846:	461a      	mov	r2, r3
 8002848:	2301      	movs	r3, #1
 800284a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800284c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fea2 	bl	8003598 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00c      	beq.n	8002878 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800286a:	461a      	mov	r2, r3
 800286c:	2308      	movs	r3, #8
 800286e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 ff78 	bl	8003768 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b00      	cmp	r3, #0
 8002880:	d008      	beq.n	8002894 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	4413      	add	r3, r2
 800288a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800288e:	461a      	mov	r2, r3
 8002890:	2310      	movs	r3, #16
 8002892:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d030      	beq.n	8002900 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	2b80      	cmp	r3, #128	; 0x80
 80028a8:	d109      	bne.n	80028be <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028bc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	3304      	adds	r3, #4
 80028d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	78db      	ldrb	r3, [r3, #3]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d108      	bne.n	80028ee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2200      	movs	r2, #0
 80028e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	4619      	mov	r1, r3
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f005 fd3d 	bl	8008368 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028fa:	461a      	mov	r2, r3
 80028fc:	2302      	movs	r3, #2
 80028fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	4413      	add	r3, r2
 8002912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002916:	461a      	mov	r2, r3
 8002918:	2320      	movs	r3, #32
 800291a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	4413      	add	r3, r2
 800292e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002932:	461a      	mov	r2, r3
 8002934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002938:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	3301      	adds	r3, #1
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	085b      	lsrs	r3, r3, #1
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	f47f af62 	bne.w	8002812 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f003 f8e6 	bl	8005b24 <USB_ReadInterrupts>
 8002958:	4603      	mov	r3, r0
 800295a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800295e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002962:	f040 80db 	bne.w	8002b1c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f003 f907 	bl	8005b7e <USB_ReadDevAllInEpInterrupt>
 8002970:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002976:	e0cd      	b.n	8002b14 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80c2 	beq.w	8002b08 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f003 f92d 	bl	8005bee <USB_ReadDevInEPInterrupt>
 8002994:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d057      	beq.n	8002a50 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	2201      	movs	r2, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69f9      	ldr	r1, [r7, #28]
 80029bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029c0:	4013      	ands	r3, r2
 80029c2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029d0:	461a      	mov	r2, r3
 80029d2:	2301      	movs	r3, #1
 80029d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	799b      	ldrb	r3, [r3, #6]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d132      	bne.n	8002a44 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	3320      	adds	r3, #32
 80029ee:	6819      	ldr	r1, [r3, #0]
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4403      	add	r3, r0
 80029fe:	331c      	adds	r3, #28
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4419      	add	r1, r3
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4403      	add	r3, r0
 8002a12:	3320      	adds	r3, #32
 8002a14:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d113      	bne.n	8002a44 <HAL_PCD_IRQHandler+0x3a2>
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	3324      	adds	r3, #36	; 0x24
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d108      	bne.n	8002a44 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2101      	movs	r1, #1
 8002a40:	f003 f934 	bl	8005cac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	4619      	mov	r1, r3
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f005 fc11 	bl	8008272 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a66:	461a      	mov	r2, r3
 8002a68:	2308      	movs	r3, #8
 8002a6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a82:	461a      	mov	r2, r3
 8002a84:	2310      	movs	r3, #16
 8002a86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d008      	beq.n	8002aa4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	2340      	movs	r3, #64	; 0x40
 8002aa2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d023      	beq.n	8002af6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002aae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ab0:	6a38      	ldr	r0, [r7, #32]
 8002ab2:	f002 f921 	bl	8004cf8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab8:	4613      	mov	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	3310      	adds	r3, #16
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	78db      	ldrb	r3, [r3, #3]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d108      	bne.n	8002ae4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	4619      	mov	r1, r3
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f005 fc54 	bl	800838c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002af0:	461a      	mov	r2, r3
 8002af2:	2302      	movs	r3, #2
 8002af4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fcbb 	bl	800347e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	085b      	lsrs	r3, r3, #1
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f47f af2e 	bne.w	8002978 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f002 ffff 	bl	8005b24 <USB_ReadInterrupts>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b30:	d122      	bne.n	8002b78 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d108      	bne.n	8002b62 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b58:	2100      	movs	r1, #0
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fea2 	bl	80038a4 <HAL_PCDEx_LPM_Callback>
 8002b60:	e002      	b.n	8002b68 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f005 fbf2 	bl	800834c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002b76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f002 ffd1 	bl	8005b24 <USB_ReadInterrupts>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b8c:	d112      	bne.n	8002bb4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d102      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f005 fbae 	bl	8008300 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002bb2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f002 ffb3 	bl	8005b24 <USB_ReadInterrupts>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc8:	f040 80b7 	bne.w	8002d3a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2110      	movs	r1, #16
 8002be6:	4618      	mov	r0, r3
 8002be8:	f002 f886 	bl	8004cf8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bec:	2300      	movs	r3, #0
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf0:	e046      	b.n	8002c80 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c04:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c16:	0151      	lsls	r1, r2, #5
 8002c18:	69fa      	ldr	r2, [r7, #28]
 8002c1a:	440a      	add	r2, r1
 8002c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c32:	461a      	mov	r2, r3
 8002c34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c38:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c4a:	0151      	lsls	r1, r2, #5
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	440a      	add	r2, r1
 8002c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c58:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c6a:	0151      	lsls	r1, r2, #5
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	440a      	add	r2, r1
 8002c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c78:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	791b      	ldrb	r3, [r3, #4]
 8002c84:	461a      	mov	r2, r3
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d3b2      	bcc.n	8002bf2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c9a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c9e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7bdb      	ldrb	r3, [r3, #15]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d016      	beq.n	8002cd6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cb8:	f043 030b 	orr.w	r3, r3, #11
 8002cbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cce:	f043 030b 	orr.w	r3, r3, #11
 8002cd2:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd4:	e015      	b.n	8002d02 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	69fa      	ldr	r2, [r7, #28]
 8002ce0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ce4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ce8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002cec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cfc:	f043 030b 	orr.w	r3, r3, #11
 8002d00:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d14:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d24:	461a      	mov	r2, r3
 8002d26:	f002 ffc1 	bl	8005cac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695a      	ldr	r2, [r3, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f002 fef0 	bl	8005b24 <USB_ReadInterrupts>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4e:	d123      	bne.n	8002d98 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f002 ff86 	bl	8005c66 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f002 f843 	bl	8004dea <USB_GetDevSpeed>
 8002d64:	4603      	mov	r3, r0
 8002d66:	461a      	mov	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681c      	ldr	r4, [r3, #0]
 8002d70:	f001 f9c8 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 8002d74:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f001 fd47 	bl	8004810 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f005 fa9d 	bl	80082c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d96:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f002 fec1 	bl	8005b24 <USB_ReadInterrupts>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d10a      	bne.n	8002dc2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f005 fa7a 	bl	80082a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695a      	ldr	r2, [r3, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f002 0208 	and.w	r2, r2, #8
 8002dc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f002 feac 	bl	8005b24 <USB_ReadInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd2:	2b80      	cmp	r3, #128	; 0x80
 8002dd4:	d123      	bne.n	8002e1e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002de2:	2301      	movs	r3, #1
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
 8002de6:	e014      	b.n	8002e12 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d105      	bne.n	8002e0c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	4619      	mov	r1, r3
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fb08 	bl	800341c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	3301      	adds	r3, #1
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	791b      	ldrb	r3, [r3, #4]
 8002e16:	461a      	mov	r2, r3
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d3e4      	bcc.n	8002de8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f002 fe7e 	bl	8005b24 <USB_ReadInterrupts>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e32:	d13c      	bne.n	8002eae <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e34:	2301      	movs	r3, #1
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
 8002e38:	e02b      	b.n	8002e92 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	3318      	adds	r3, #24
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d115      	bne.n	8002e8c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	da12      	bge.n	8002e8c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	3317      	adds	r3, #23
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fac8 	bl	800341c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	3301      	adds	r3, #1
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	791b      	ldrb	r3, [r3, #4]
 8002e96:	461a      	mov	r2, r3
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d3cd      	bcc.n	8002e3a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695a      	ldr	r2, [r3, #20]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002eac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f002 fe36 	bl	8005b24 <USB_ReadInterrupts>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ebe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ec2:	d156      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec8:	e045      	b.n	8002f56 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d12e      	bne.n	8002f50 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ef2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	da2b      	bge.n	8002f50 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002f04:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d121      	bne.n	8002f50 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002f1e:	2201      	movs	r2, #1
 8002f20:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10a      	bne.n	8002f50 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f4c:	6053      	str	r3, [r2, #4]
            break;
 8002f4e:	e008      	b.n	8002f62 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	3301      	adds	r3, #1
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	791b      	ldrb	r3, [r3, #4]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d3b3      	bcc.n	8002eca <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002f70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f002 fdd4 	bl	8005b24 <USB_ReadInterrupts>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f86:	d10a      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f005 fa11 	bl	80083b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f002 fdbe 	bl	8005b24 <USB_ReadInterrupts>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d115      	bne.n	8002fde <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f005 fa01 	bl	80083cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	e000      	b.n	8002fde <HAL_PCD_IRQHandler+0x93c>
      return;
 8002fdc:	bf00      	nop
    }
  }
}
 8002fde:	3734      	adds	r7, #52	; 0x34
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd90      	pop	{r4, r7, pc}

08002fe4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_PCD_SetAddress+0x1a>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e012      	b.n	8003024 <HAL_PCD_SetAddress+0x40>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f002 fd1d 	bl	8005a54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	4608      	mov	r0, r1
 8003036:	4611      	mov	r1, r2
 8003038:	461a      	mov	r2, r3
 800303a:	4603      	mov	r3, r0
 800303c:	70fb      	strb	r3, [r7, #3]
 800303e:	460b      	mov	r3, r1
 8003040:	803b      	strh	r3, [r7, #0]
 8003042:	4613      	mov	r3, r2
 8003044:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800304a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800304e:	2b00      	cmp	r3, #0
 8003050:	da0f      	bge.n	8003072 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	f003 020f 	and.w	r2, r3, #15
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	3310      	adds	r3, #16
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	3304      	adds	r3, #4
 8003068:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	705a      	strb	r2, [r3, #1]
 8003070:	e00f      	b.n	8003092 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	f003 020f 	and.w	r2, r3, #15
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	4413      	add	r3, r2
 8003088:	3304      	adds	r3, #4
 800308a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	b2da      	uxtb	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800309e:	883a      	ldrh	r2, [r7, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	78ba      	ldrb	r2, [r7, #2]
 80030a8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	785b      	ldrb	r3, [r3, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030bc:	78bb      	ldrb	r3, [r7, #2]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d102      	bne.n	80030c8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_PCD_EP_Open+0xaa>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e00e      	b.n	80030f4 <HAL_PCD_EP_Open+0xc8>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68f9      	ldr	r1, [r7, #12]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f001 fea5 	bl	8004e34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80030f2:	7afb      	ldrb	r3, [r7, #11]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800310c:	2b00      	cmp	r3, #0
 800310e:	da0f      	bge.n	8003130 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	f003 020f 	and.w	r2, r3, #15
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	3310      	adds	r3, #16
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4413      	add	r3, r2
 8003124:	3304      	adds	r3, #4
 8003126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	705a      	strb	r2, [r3, #1]
 800312e:	e00f      	b.n	8003150 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	f003 020f 	and.w	r2, r3, #15
 8003136:	4613      	mov	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	4413      	add	r3, r2
 8003146:	3304      	adds	r3, #4
 8003148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	b2da      	uxtb	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_PCD_EP_Close+0x6e>
 8003166:	2302      	movs	r3, #2
 8003168:	e00e      	b.n	8003188 <HAL_PCD_EP_Close+0x8c>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68f9      	ldr	r1, [r7, #12]
 8003178:	4618      	mov	r0, r3
 800317a:	f001 fee3 	bl	8004f44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	460b      	mov	r3, r1
 800319e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a0:	7afb      	ldrb	r3, [r7, #11]
 80031a2:	f003 020f 	and.w	r2, r3, #15
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4413      	add	r3, r2
 80031b6:	3304      	adds	r3, #4
 80031b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2200      	movs	r2, #0
 80031ca:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2200      	movs	r2, #0
 80031d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031d2:	7afb      	ldrb	r3, [r7, #11]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	799b      	ldrb	r3, [r3, #6]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d102      	bne.n	80031ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	799b      	ldrb	r3, [r3, #6]
 80031f4:	461a      	mov	r2, r3
 80031f6:	6979      	ldr	r1, [r7, #20]
 80031f8:	f001 ff80 	bl	80050fc <USB_EPStartXfer>

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	460b      	mov	r3, r1
 8003210:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	f003 020f 	and.w	r2, r3, #15
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003228:	681b      	ldr	r3, [r3, #0]
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b086      	sub	sp, #24
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
 8003242:	460b      	mov	r3, r1
 8003244:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003246:	7afb      	ldrb	r3, [r7, #11]
 8003248:	f003 020f 	and.w	r2, r3, #15
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	3310      	adds	r3, #16
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4413      	add	r3, r2
 800325a:	3304      	adds	r3, #4
 800325c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2200      	movs	r2, #0
 800326e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2201      	movs	r2, #1
 8003274:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003276:	7afb      	ldrb	r3, [r7, #11]
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	b2da      	uxtb	r2, r3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	799b      	ldrb	r3, [r3, #6]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d102      	bne.n	8003290 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	799b      	ldrb	r3, [r3, #6]
 8003298:	461a      	mov	r2, r3
 800329a:	6979      	ldr	r1, [r7, #20]
 800329c:	f001 ff2e 	bl	80050fc <USB_EPStartXfer>

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	460b      	mov	r3, r1
 80032b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	7912      	ldrb	r2, [r2, #4]
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d901      	bls.n	80032c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e04f      	b.n	8003368 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	da0f      	bge.n	80032f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	f003 020f 	and.w	r2, r3, #15
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	3310      	adds	r3, #16
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	4413      	add	r3, r2
 80032e4:	3304      	adds	r3, #4
 80032e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	705a      	strb	r2, [r3, #1]
 80032ee:	e00d      	b.n	800330c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032f0:	78fa      	ldrb	r2, [r7, #3]
 80032f2:	4613      	mov	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	3304      	adds	r3, #4
 8003304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	b2da      	uxtb	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_PCD_EP_SetStall+0x82>
 8003328:	2302      	movs	r3, #2
 800332a:	e01d      	b.n	8003368 <HAL_PCD_EP_SetStall+0xbe>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68f9      	ldr	r1, [r7, #12]
 800333a:	4618      	mov	r0, r3
 800333c:	f002 fab6 	bl	80058ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7999      	ldrb	r1, [r3, #6]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003358:	461a      	mov	r2, r3
 800335a:	f002 fca7 	bl	8005cac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	7912      	ldrb	r2, [r2, #4]
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e042      	b.n	8003414 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800338e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003392:	2b00      	cmp	r3, #0
 8003394:	da0f      	bge.n	80033b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	f003 020f 	and.w	r2, r3, #15
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	3310      	adds	r3, #16
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	3304      	adds	r3, #4
 80033ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	705a      	strb	r2, [r3, #1]
 80033b4:	e00f      	b.n	80033d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	f003 020f 	and.w	r2, r3, #15
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4413      	add	r3, r2
 80033cc:	3304      	adds	r3, #4
 80033ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_PCD_EP_ClrStall+0x86>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e00e      	b.n	8003414 <HAL_PCD_EP_ClrStall+0xa4>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68f9      	ldr	r1, [r7, #12]
 8003404:	4618      	mov	r0, r3
 8003406:	f002 fabf 	bl	8005988 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800342c:	2b00      	cmp	r3, #0
 800342e:	da0c      	bge.n	800344a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	f003 020f 	and.w	r2, r3, #15
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	3310      	adds	r3, #16
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4413      	add	r3, r2
 8003444:	3304      	adds	r3, #4
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	e00c      	b.n	8003464 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800344a:	78fb      	ldrb	r3, [r7, #3]
 800344c:	f003 020f 	and.w	r2, r3, #15
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	4413      	add	r3, r2
 8003460:	3304      	adds	r3, #4
 8003462:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68f9      	ldr	r1, [r7, #12]
 800346a:	4618      	mov	r0, r3
 800346c:	f002 f8de 	bl	800562c <USB_EPStopXfer>
 8003470:	4603      	mov	r3, r0
 8003472:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003474:	7afb      	ldrb	r3, [r7, #11]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b08a      	sub	sp, #40	; 0x28
 8003482:	af02      	add	r7, sp, #8
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	3310      	adds	r3, #16
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	3304      	adds	r3, #4
 80034a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d901      	bls.n	80034b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e06b      	b.n	800358e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d902      	bls.n	80034d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3303      	adds	r3, #3
 80034d6:	089b      	lsrs	r3, r3, #2
 80034d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034da:	e02a      	b.n	8003532 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d902      	bls.n	80034f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	3303      	adds	r3, #3
 80034fc:	089b      	lsrs	r3, r3, #2
 80034fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	68d9      	ldr	r1, [r3, #12]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	b2da      	uxtb	r2, r3
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	4603      	mov	r3, r0
 8003514:	6978      	ldr	r0, [r7, #20]
 8003516:	f002 f933 	bl	8005780 <USB_WritePacket>

    ep->xfer_buff  += len;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	441a      	add	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	441a      	add	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	429a      	cmp	r2, r3
 8003546:	d809      	bhi.n	800355c <PCD_WriteEmptyTxFifo+0xde>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003550:	429a      	cmp	r2, r3
 8003552:	d203      	bcs.n	800355c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1bf      	bne.n	80034dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	429a      	cmp	r2, r3
 8003566:	d811      	bhi.n	800358c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	2201      	movs	r2, #1
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800357c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	43db      	mvns	r3, r3
 8003582:	6939      	ldr	r1, [r7, #16]
 8003584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003588:	4013      	ands	r3, r2
 800358a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	333c      	adds	r3, #60	; 0x3c
 80035b0:	3304      	adds	r3, #4
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	799b      	ldrb	r3, [r3, #6]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d17b      	bne.n	80036c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d015      	beq.n	8003604 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	4a61      	ldr	r2, [pc, #388]	; (8003760 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	f240 80b9 	bls.w	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80b3 	beq.w	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fa:	461a      	mov	r2, r3
 80035fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003600:	6093      	str	r3, [r2, #8]
 8003602:	e0a7      	b.n	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800361a:	461a      	mov	r2, r3
 800361c:	2320      	movs	r3, #32
 800361e:	6093      	str	r3, [r2, #8]
 8003620:	e098      	b.n	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003628:	2b00      	cmp	r3, #0
 800362a:	f040 8093 	bne.w	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	4a4b      	ldr	r2, [pc, #300]	; (8003760 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d90f      	bls.n	8003656 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364c:	461a      	mov	r2, r3
 800364e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003652:	6093      	str	r3, [r2, #8]
 8003654:	e07e      	b.n	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	4413      	add	r3, r2
 8003668:	3304      	adds	r3, #4
 800366a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a1a      	ldr	r2, [r3, #32]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	0159      	lsls	r1, r3, #5
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	440b      	add	r3, r1
 8003678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003682:	1ad2      	subs	r2, r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d114      	bne.n	80036b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80036a0:	461a      	mov	r2, r3
 80036a2:	2101      	movs	r1, #1
 80036a4:	f002 fb02 	bl	8005cac <USB_EP0_OutStart>
 80036a8:	e006      	b.n	80036b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	441a      	add	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	4619      	mov	r1, r3
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f004 fdbc 	bl	800823c <HAL_PCD_DataOutStageCallback>
 80036c4:	e046      	b.n	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	4a26      	ldr	r2, [pc, #152]	; (8003764 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d124      	bne.n	8003718 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e4:	461a      	mov	r2, r3
 80036e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ea:	6093      	str	r3, [r2, #8]
 80036ec:	e032      	b.n	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003704:	461a      	mov	r2, r3
 8003706:	2320      	movs	r3, #32
 8003708:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	4619      	mov	r1, r3
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f004 fd93 	bl	800823c <HAL_PCD_DataOutStageCallback>
 8003716:	e01d      	b.n	8003754 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d114      	bne.n	8003748 <PCD_EP_OutXfrComplete_int+0x1b0>
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	4613      	mov	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d108      	bne.n	8003748 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003740:	461a      	mov	r2, r3
 8003742:	2100      	movs	r1, #0
 8003744:	f002 fab2 	bl	8005cac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f004 fd74 	bl	800823c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3720      	adds	r7, #32
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	4f54300a 	.word	0x4f54300a
 8003764:	4f54310a 	.word	0x4f54310a

08003768 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	333c      	adds	r3, #60	; 0x3c
 8003780:	3304      	adds	r3, #4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d90e      	bls.n	80037bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d009      	beq.n	80037bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b4:	461a      	mov	r2, r3
 80037b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f004 fd2b 	bl	8008218 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d90c      	bls.n	80037e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	799b      	ldrb	r3, [r3, #6]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d108      	bne.n	80037e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80037dc:	461a      	mov	r2, r3
 80037de:	2101      	movs	r1, #1
 80037e0:	f002 fa64 	bl	8005cac <USB_EP0_OutStart>
  }

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	4f54300a 	.word	0x4f54300a

080037f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	70fb      	strb	r3, [r7, #3]
 8003800:	4613      	mov	r3, r2
 8003802:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d107      	bne.n	8003822 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003812:	883b      	ldrh	r3, [r7, #0]
 8003814:	0419      	lsls	r1, r3, #16
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	430a      	orrs	r2, r1
 800381e:	629a      	str	r2, [r3, #40]	; 0x28
 8003820:	e028      	b.n	8003874 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	0c1b      	lsrs	r3, r3, #16
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	4413      	add	r3, r2
 800382e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003830:	2300      	movs	r3, #0
 8003832:	73fb      	strb	r3, [r7, #15]
 8003834:	e00d      	b.n	8003852 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	3340      	adds	r3, #64	; 0x40
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	0c1b      	lsrs	r3, r3, #16
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	4413      	add	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	3301      	adds	r3, #1
 8003850:	73fb      	strb	r3, [r7, #15]
 8003852:	7bfa      	ldrb	r2, [r7, #15]
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	3b01      	subs	r3, #1
 8003858:	429a      	cmp	r2, r3
 800385a:	d3ec      	bcc.n	8003836 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800385c:	883b      	ldrh	r3, [r7, #0]
 800385e:	0418      	lsls	r0, r3, #16
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6819      	ldr	r1, [r3, #0]
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	3b01      	subs	r3, #1
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	4302      	orrs	r2, r0
 800386c:	3340      	adds	r3, #64	; 0x40
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	460b      	mov	r3, r1
 800388c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e267      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d075      	beq.n	80039c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038da:	4b88      	ldr	r3, [pc, #544]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d00c      	beq.n	8003900 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e6:	4b85      	ldr	r3, [pc, #532]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d112      	bne.n	8003918 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f2:	4b82      	ldr	r3, [pc, #520]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038fe:	d10b      	bne.n	8003918 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003900:	4b7e      	ldr	r3, [pc, #504]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d05b      	beq.n	80039c4 <HAL_RCC_OscConfig+0x108>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d157      	bne.n	80039c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e242      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003920:	d106      	bne.n	8003930 <HAL_RCC_OscConfig+0x74>
 8003922:	4b76      	ldr	r3, [pc, #472]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a75      	ldr	r2, [pc, #468]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e01d      	b.n	800396c <HAL_RCC_OscConfig+0xb0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003938:	d10c      	bne.n	8003954 <HAL_RCC_OscConfig+0x98>
 800393a:	4b70      	ldr	r3, [pc, #448]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6f      	ldr	r2, [pc, #444]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	4b6d      	ldr	r3, [pc, #436]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a6c      	ldr	r2, [pc, #432]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 800394c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e00b      	b.n	800396c <HAL_RCC_OscConfig+0xb0>
 8003954:	4b69      	ldr	r3, [pc, #420]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a68      	ldr	r2, [pc, #416]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 800395a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	4b66      	ldr	r3, [pc, #408]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a65      	ldr	r2, [pc, #404]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800396a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d013      	beq.n	800399c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fe fa72 	bl	8001e5c <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800397c:	f7fe fa6e 	bl	8001e5c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	; 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e207      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398e:	4b5b      	ldr	r3, [pc, #364]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCC_OscConfig+0xc0>
 800399a:	e014      	b.n	80039c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fe fa5e 	bl	8001e5c <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a4:	f7fe fa5a 	bl	8001e5c <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	; 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e1f3      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b6:	4b51      	ldr	r3, [pc, #324]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0xe8>
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d063      	beq.n	8003a9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039d2:	4b4a      	ldr	r3, [pc, #296]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039de:	4b47      	ldr	r3, [pc, #284]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d11c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ea:	4b44      	ldr	r3, [pc, #272]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d116      	bne.n	8003a24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f6:	4b41      	ldr	r3, [pc, #260]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_RCC_OscConfig+0x152>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d001      	beq.n	8003a0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e1c7      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0e:	4b3b      	ldr	r3, [pc, #236]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4937      	ldr	r1, [pc, #220]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a22:	e03a      	b.n	8003a9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d020      	beq.n	8003a6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a2c:	4b34      	ldr	r3, [pc, #208]	; (8003b00 <HAL_RCC_OscConfig+0x244>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a32:	f7fe fa13 	bl	8001e5c <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a3a:	f7fe fa0f 	bl	8001e5c <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e1a8      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4c:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a58:	4b28      	ldr	r3, [pc, #160]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4925      	ldr	r1, [pc, #148]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	600b      	str	r3, [r1, #0]
 8003a6c:	e015      	b.n	8003a9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a6e:	4b24      	ldr	r3, [pc, #144]	; (8003b00 <HAL_RCC_OscConfig+0x244>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fe f9f2 	bl	8001e5c <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7c:	f7fe f9ee 	bl	8001e5c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e187      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8e:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d036      	beq.n	8003b14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d016      	beq.n	8003adc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aae:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <HAL_RCC_OscConfig+0x248>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab4:	f7fe f9d2 	bl	8001e5c <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003abc:	f7fe f9ce 	bl	8001e5c <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e167      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ace:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x200>
 8003ada:	e01b      	b.n	8003b14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003adc:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <HAL_RCC_OscConfig+0x248>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae2:	f7fe f9bb 	bl	8001e5c <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae8:	e00e      	b.n	8003b08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aea:	f7fe f9b7 	bl	8001e5c <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d907      	bls.n	8003b08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e150      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
 8003afc:	40023800 	.word	0x40023800
 8003b00:	42470000 	.word	0x42470000
 8003b04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b08:	4b88      	ldr	r3, [pc, #544]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1ea      	bne.n	8003aea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8097 	beq.w	8003c50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b26:	4b81      	ldr	r3, [pc, #516]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10f      	bne.n	8003b52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	4b7d      	ldr	r3, [pc, #500]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	4a7c      	ldr	r2, [pc, #496]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b40:	6413      	str	r3, [r2, #64]	; 0x40
 8003b42:	4b7a      	ldr	r3, [pc, #488]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b52:	4b77      	ldr	r3, [pc, #476]	; (8003d30 <HAL_RCC_OscConfig+0x474>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d118      	bne.n	8003b90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b5e:	4b74      	ldr	r3, [pc, #464]	; (8003d30 <HAL_RCC_OscConfig+0x474>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a73      	ldr	r2, [pc, #460]	; (8003d30 <HAL_RCC_OscConfig+0x474>)
 8003b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6a:	f7fe f977 	bl	8001e5c <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b72:	f7fe f973 	bl	8001e5c <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e10c      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b84:	4b6a      	ldr	r3, [pc, #424]	; (8003d30 <HAL_RCC_OscConfig+0x474>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d106      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x2ea>
 8003b98:	4b64      	ldr	r3, [pc, #400]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	4a63      	ldr	r2, [pc, #396]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba4:	e01c      	b.n	8003be0 <HAL_RCC_OscConfig+0x324>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b05      	cmp	r3, #5
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x30c>
 8003bae:	4b5f      	ldr	r3, [pc, #380]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	4a5e      	ldr	r2, [pc, #376]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bb4:	f043 0304 	orr.w	r3, r3, #4
 8003bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bba:	4b5c      	ldr	r3, [pc, #368]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	4a5b      	ldr	r2, [pc, #364]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCC_OscConfig+0x324>
 8003bc8:	4b58      	ldr	r3, [pc, #352]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	4a57      	ldr	r2, [pc, #348]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd4:	4b55      	ldr	r3, [pc, #340]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a54      	ldr	r2, [pc, #336]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bda:	f023 0304 	bic.w	r3, r3, #4
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d015      	beq.n	8003c14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be8:	f7fe f938 	bl	8001e5c <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bee:	e00a      	b.n	8003c06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf0:	f7fe f934 	bl	8001e5c <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e0cb      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c06:	4b49      	ldr	r3, [pc, #292]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0ee      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x334>
 8003c12:	e014      	b.n	8003c3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c14:	f7fe f922 	bl	8001e5c <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1a:	e00a      	b.n	8003c32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c1c:	f7fe f91e 	bl	8001e5c <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e0b5      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c32:	4b3e      	ldr	r3, [pc, #248]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1ee      	bne.n	8003c1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d105      	bne.n	8003c50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c44:	4b39      	ldr	r3, [pc, #228]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	4a38      	ldr	r2, [pc, #224]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80a1 	beq.w	8003d9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c5a:	4b34      	ldr	r3, [pc, #208]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d05c      	beq.n	8003d20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d141      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6e:	4b31      	ldr	r3, [pc, #196]	; (8003d34 <HAL_RCC_OscConfig+0x478>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fe f8f2 	bl	8001e5c <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fe f8ee 	bl	8001e5c <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e087      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8e:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69da      	ldr	r2, [r3, #28]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	019b      	lsls	r3, r3, #6
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	085b      	lsrs	r3, r3, #1
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	041b      	lsls	r3, r3, #16
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	061b      	lsls	r3, r3, #24
 8003cbe:	491b      	ldr	r1, [pc, #108]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <HAL_RCC_OscConfig+0x478>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cca:	f7fe f8c7 	bl	8001e5c <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7fe f8c3 	bl	8001e5c <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e05c      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x416>
 8003cf0:	e054      	b.n	8003d9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <HAL_RCC_OscConfig+0x478>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fe f8b0 	bl	8001e5c <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fe f8ac 	bl	8001e5c <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e045      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x444>
 8003d1e:	e03d      	b.n	8003d9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d107      	bne.n	8003d38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e038      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40007000 	.word	0x40007000
 8003d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d38:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <HAL_RCC_OscConfig+0x4ec>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d028      	beq.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d121      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d11a      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d68:	4013      	ands	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d111      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	3b01      	subs	r3, #1
 8003d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800

08003dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0cc      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc0:	4b68      	ldr	r3, [pc, #416]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d90c      	bls.n	8003de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dce:	4b65      	ldr	r3, [pc, #404]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b63      	ldr	r3, [pc, #396]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0b8      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d020      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e00:	4b59      	ldr	r3, [pc, #356]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a58      	ldr	r2, [pc, #352]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e18:	4b53      	ldr	r3, [pc, #332]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	4a52      	ldr	r2, [pc, #328]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e24:	4b50      	ldr	r3, [pc, #320]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	494d      	ldr	r1, [pc, #308]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d044      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d107      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	4b47      	ldr	r3, [pc, #284]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d119      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e07f      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d003      	beq.n	8003e6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d107      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6a:	4b3f      	ldr	r3, [pc, #252]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e06f      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7a:	4b3b      	ldr	r3, [pc, #236]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e067      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e8a:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f023 0203 	bic.w	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4934      	ldr	r1, [pc, #208]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e9c:	f7fd ffde 	bl	8001e5c <HAL_GetTick>
 8003ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea4:	f7fd ffda 	bl	8001e5c <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e04f      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 020c 	and.w	r2, r3, #12
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1eb      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ecc:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d20c      	bcs.n	8003ef4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee2:	4b20      	ldr	r3, [pc, #128]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e032      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f00:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4916      	ldr	r1, [pc, #88]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f1e:	4b12      	ldr	r3, [pc, #72]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	490e      	ldr	r1, [pc, #56]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f32:	f000 f821 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8003f36:	4602      	mov	r2, r0
 8003f38:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	490a      	ldr	r1, [pc, #40]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003f44:	5ccb      	ldrb	r3, [r1, r3]
 8003f46:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4a:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fd ff3e 	bl	8001dd4 <HAL_InitTick>

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40023c00 	.word	0x40023c00
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	0800d15c 	.word	0x0800d15c
 8003f70:	20000000 	.word	0x20000000
 8003f74:	20000004 	.word	0x20000004

08003f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f7c:	b090      	sub	sp, #64	; 0x40
 8003f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	637b      	str	r3, [r7, #52]	; 0x34
 8003f84:	2300      	movs	r3, #0
 8003f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f88:	2300      	movs	r3, #0
 8003f8a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f90:	4b59      	ldr	r3, [pc, #356]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 030c 	and.w	r3, r3, #12
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d00d      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	f200 80a1 	bhi.w	80040e4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_RCC_GetSysClockFreq+0x34>
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d003      	beq.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003faa:	e09b      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fac:	4b53      	ldr	r3, [pc, #332]	; (80040fc <HAL_RCC_GetSysClockFreq+0x184>)
 8003fae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003fb0:	e09b      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fb2:	4b53      	ldr	r3, [pc, #332]	; (8004100 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fb6:	e098      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb8:	4b4f      	ldr	r3, [pc, #316]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fc0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fc2:	4b4d      	ldr	r3, [pc, #308]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d028      	beq.n	8004020 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fce:	4b4a      	ldr	r3, [pc, #296]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	099b      	lsrs	r3, r3, #6
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	623b      	str	r3, [r7, #32]
 8003fd8:	627a      	str	r2, [r7, #36]	; 0x24
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4b47      	ldr	r3, [pc, #284]	; (8004100 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fe4:	fb03 f201 	mul.w	r2, r3, r1
 8003fe8:	2300      	movs	r3, #0
 8003fea:	fb00 f303 	mul.w	r3, r0, r3
 8003fee:	4413      	add	r3, r2
 8003ff0:	4a43      	ldr	r2, [pc, #268]	; (8004100 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ff2:	fba0 1202 	umull	r1, r2, r0, r2
 8003ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ff8:	460a      	mov	r2, r1
 8003ffa:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ffe:	4413      	add	r3, r2
 8004000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004004:	2200      	movs	r2, #0
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	61fa      	str	r2, [r7, #28]
 800400a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800400e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004012:	f7fc fe41 	bl	8000c98 <__aeabi_uldivmod>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4613      	mov	r3, r2
 800401c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800401e:	e053      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004020:	4b35      	ldr	r3, [pc, #212]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	099b      	lsrs	r3, r3, #6
 8004026:	2200      	movs	r2, #0
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	617a      	str	r2, [r7, #20]
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004032:	f04f 0b00 	mov.w	fp, #0
 8004036:	4652      	mov	r2, sl
 8004038:	465b      	mov	r3, fp
 800403a:	f04f 0000 	mov.w	r0, #0
 800403e:	f04f 0100 	mov.w	r1, #0
 8004042:	0159      	lsls	r1, r3, #5
 8004044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004048:	0150      	lsls	r0, r2, #5
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	ebb2 080a 	subs.w	r8, r2, sl
 8004052:	eb63 090b 	sbc.w	r9, r3, fp
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004062:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004066:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800406a:	ebb2 0408 	subs.w	r4, r2, r8
 800406e:	eb63 0509 	sbc.w	r5, r3, r9
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	00eb      	lsls	r3, r5, #3
 800407c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004080:	00e2      	lsls	r2, r4, #3
 8004082:	4614      	mov	r4, r2
 8004084:	461d      	mov	r5, r3
 8004086:	eb14 030a 	adds.w	r3, r4, sl
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	eb45 030b 	adc.w	r3, r5, fp
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800409e:	4629      	mov	r1, r5
 80040a0:	028b      	lsls	r3, r1, #10
 80040a2:	4621      	mov	r1, r4
 80040a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040a8:	4621      	mov	r1, r4
 80040aa:	028a      	lsls	r2, r1, #10
 80040ac:	4610      	mov	r0, r2
 80040ae:	4619      	mov	r1, r3
 80040b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b2:	2200      	movs	r2, #0
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	60fa      	str	r2, [r7, #12]
 80040b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040bc:	f7fc fdec 	bl	8000c98 <__aeabi_uldivmod>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4613      	mov	r3, r2
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	0c1b      	lsrs	r3, r3, #16
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	3301      	adds	r3, #1
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80040d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040e2:	e002      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_RCC_GetSysClockFreq+0x184>)
 80040e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3740      	adds	r7, #64	; 0x40
 80040f0:	46bd      	mov	sp, r7
 80040f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040f6:	bf00      	nop
 80040f8:	40023800 	.word	0x40023800
 80040fc:	00f42400 	.word	0x00f42400
 8004100:	017d7840 	.word	0x017d7840

08004104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <HAL_RCC_GetHCLKFreq+0x14>)
 800410a:	681b      	ldr	r3, [r3, #0]
}
 800410c:	4618      	mov	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000000 	.word	0x20000000

0800411c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e07b      	b.n	8004226 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	2b00      	cmp	r3, #0
 8004134:	d108      	bne.n	8004148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800413e:	d009      	beq.n	8004154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	61da      	str	r2, [r3, #28]
 8004146:	e005      	b.n	8004154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd fc70 	bl	8001a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800418a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d8:	ea42 0103 	orr.w	r1, r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	f003 0104 	and.w	r1, r3, #4
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	f003 0210 	and.w	r2, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004214:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b08c      	sub	sp, #48	; 0x30
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
 800423a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800423c:	2301      	movs	r3, #1
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_SPI_TransmitReceive+0x26>
 8004250:	2302      	movs	r3, #2
 8004252:	e198      	b.n	8004586 <HAL_SPI_TransmitReceive+0x358>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800425c:	f7fd fdfe 	bl	8001e5c <HAL_GetTick>
 8004260:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004272:	887b      	ldrh	r3, [r7, #2]
 8004274:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004276:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800427a:	2b01      	cmp	r3, #1
 800427c:	d00f      	beq.n	800429e <HAL_SPI_TransmitReceive+0x70>
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004284:	d107      	bne.n	8004296 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d103      	bne.n	8004296 <HAL_SPI_TransmitReceive+0x68>
 800428e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004292:	2b04      	cmp	r3, #4
 8004294:	d003      	beq.n	800429e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004296:	2302      	movs	r3, #2
 8004298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800429c:	e16d      	b.n	800457a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_SPI_TransmitReceive+0x82>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_SPI_TransmitReceive+0x82>
 80042aa:	887b      	ldrh	r3, [r7, #2]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d103      	bne.n	80042b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80042b6:	e160      	b.n	800457a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d003      	beq.n	80042cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2205      	movs	r2, #5
 80042c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	887a      	ldrh	r2, [r7, #2]
 80042dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	887a      	ldrh	r2, [r7, #2]
 80042e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	887a      	ldrh	r2, [r7, #2]
 80042ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	887a      	ldrh	r2, [r7, #2]
 80042f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430c:	2b40      	cmp	r3, #64	; 0x40
 800430e:	d007      	beq.n	8004320 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800431e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004328:	d17c      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_SPI_TransmitReceive+0x10a>
 8004332:	8b7b      	ldrh	r3, [r7, #26]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d16a      	bne.n	800440e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	881a      	ldrh	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004348:	1c9a      	adds	r2, r3, #2
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800435c:	e057      	b.n	800440e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b02      	cmp	r3, #2
 800436a:	d11b      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x176>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <HAL_SPI_TransmitReceive+0x176>
 8004376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d113      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	881a      	ldrh	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	1c9a      	adds	r2, r3, #2
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d119      	bne.n	80043e6 <HAL_SPI_TransmitReceive+0x1b8>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d014      	beq.n	80043e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c6:	b292      	uxth	r2, r2
 80043c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ce:	1c9a      	adds	r2, r3, #2
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043e2:	2301      	movs	r3, #1
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043e6:	f7fd fd39 	bl	8001e5c <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d80b      	bhi.n	800440e <HAL_SPI_TransmitReceive+0x1e0>
 80043f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d007      	beq.n	800440e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800440c:	e0b5      	b.n	800457a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1a2      	bne.n	800435e <HAL_SPI_TransmitReceive+0x130>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d19d      	bne.n	800435e <HAL_SPI_TransmitReceive+0x130>
 8004422:	e080      	b.n	8004526 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_SPI_TransmitReceive+0x204>
 800442c:	8b7b      	ldrh	r3, [r7, #26]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d16f      	bne.n	8004512 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	330c      	adds	r3, #12
 800443c:	7812      	ldrb	r2, [r2, #0]
 800443e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004458:	e05b      	b.n	8004512 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b02      	cmp	r3, #2
 8004466:	d11c      	bne.n	80044a2 <HAL_SPI_TransmitReceive+0x274>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d017      	beq.n	80044a2 <HAL_SPI_TransmitReceive+0x274>
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	2b01      	cmp	r3, #1
 8004476:	d114      	bne.n	80044a2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	330c      	adds	r3, #12
 8004482:	7812      	ldrb	r2, [r2, #0]
 8004484:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d119      	bne.n	80044e4 <HAL_SPI_TransmitReceive+0x2b6>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d014      	beq.n	80044e4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044e0:	2301      	movs	r3, #1
 80044e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044e4:	f7fd fcba 	bl	8001e5c <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d803      	bhi.n	80044fc <HAL_SPI_TransmitReceive+0x2ce>
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fa:	d102      	bne.n	8004502 <HAL_SPI_TransmitReceive+0x2d4>
 80044fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d107      	bne.n	8004512 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004510:	e033      	b.n	800457a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d19e      	bne.n	800445a <HAL_SPI_TransmitReceive+0x22c>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d199      	bne.n	800445a <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004528:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f8b8 	bl	80046a0 <SPI_EndRxTxTransaction>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d006      	beq.n	8004544 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004542:	e01a      	b.n	800457a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004570:	e003      	b.n	800457a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004582:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004586:	4618      	mov	r0, r3
 8004588:	3730      	adds	r7, #48	; 0x30
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	4613      	mov	r3, r2
 800459e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045a0:	f7fd fc5c 	bl	8001e5c <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	4413      	add	r3, r2
 80045ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045b0:	f7fd fc54 	bl	8001e5c <HAL_GetTick>
 80045b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045b6:	4b39      	ldr	r3, [pc, #228]	; (800469c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	015b      	lsls	r3, r3, #5
 80045bc:	0d1b      	lsrs	r3, r3, #20
 80045be:	69fa      	ldr	r2, [r7, #28]
 80045c0:	fb02 f303 	mul.w	r3, r2, r3
 80045c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045c6:	e054      	b.n	8004672 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ce:	d050      	beq.n	8004672 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045d0:	f7fd fc44 	bl	8001e5c <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d902      	bls.n	80045e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d13d      	bne.n	8004662 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045fe:	d111      	bne.n	8004624 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004608:	d004      	beq.n	8004614 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004612:	d107      	bne.n	8004624 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004622:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800462c:	d10f      	bne.n	800464e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800464c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e017      	b.n	8004692 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	3b01      	subs	r3, #1
 8004670:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4013      	ands	r3, r2
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	429a      	cmp	r2, r3
 8004680:	bf0c      	ite	eq
 8004682:	2301      	moveq	r3, #1
 8004684:	2300      	movne	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	429a      	cmp	r2, r3
 800468e:	d19b      	bne.n	80045c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000000 	.word	0x20000000

080046a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2201      	movs	r2, #1
 80046b4:	2102      	movs	r1, #2
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f7ff ff6a 	bl	8004590 <SPI_WaitFlagStateUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c6:	f043 0220 	orr.w	r2, r3, #32
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e032      	b.n	8004738 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046d2:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <SPI_EndRxTxTransaction+0xa0>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1b      	ldr	r2, [pc, #108]	; (8004744 <SPI_EndRxTxTransaction+0xa4>)
 80046d8:	fba2 2303 	umull	r2, r3, r2, r3
 80046dc:	0d5b      	lsrs	r3, r3, #21
 80046de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046e2:	fb02 f303 	mul.w	r3, r2, r3
 80046e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046f0:	d112      	bne.n	8004718 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2200      	movs	r2, #0
 80046fa:	2180      	movs	r1, #128	; 0x80
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f7ff ff47 	bl	8004590 <SPI_WaitFlagStateUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d016      	beq.n	8004736 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470c:	f043 0220 	orr.w	r2, r3, #32
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e00f      	b.n	8004738 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	3b01      	subs	r3, #1
 8004722:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472e:	2b80      	cmp	r3, #128	; 0x80
 8004730:	d0f2      	beq.n	8004718 <SPI_EndRxTxTransaction+0x78>
 8004732:	e000      	b.n	8004736 <SPI_EndRxTxTransaction+0x96>
        break;
 8004734:	bf00      	nop
  }

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	20000000 	.word	0x20000000
 8004744:	165e9f81 	.word	0x165e9f81

08004748 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004748:	b084      	sub	sp, #16
 800474a:	b580      	push	{r7, lr}
 800474c:	b084      	sub	sp, #16
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	f107 001c 	add.w	r0, r7, #28
 8004756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800475a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800475e:	2b01      	cmp	r3, #1
 8004760:	d123      	bne.n	80047aa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800478a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800478e:	2b01      	cmp	r3, #1
 8004790:	d105      	bne.n	800479e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f001 fae2 	bl	8005d68 <USB_CoreReset>
 80047a4:	4603      	mov	r3, r0
 80047a6:	73fb      	strb	r3, [r7, #15]
 80047a8:	e01b      	b.n	80047e2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f001 fad6 	bl	8005d68 <USB_CoreReset>
 80047bc:	4603      	mov	r3, r0
 80047be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	639a      	str	r2, [r3, #56]	; 0x38
 80047d4:	e005      	b.n	80047e2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047e2:	7fbb      	ldrb	r3, [r7, #30]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d10b      	bne.n	8004800 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f043 0206 	orr.w	r2, r3, #6
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f043 0220 	orr.w	r2, r3, #32
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004800:	7bfb      	ldrb	r3, [r7, #15]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800480c:	b004      	add	sp, #16
 800480e:	4770      	bx	lr

08004810 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	4613      	mov	r3, r2
 800481c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d165      	bne.n	80048f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4a41      	ldr	r2, [pc, #260]	; (800492c <USB_SetTurnaroundTime+0x11c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d906      	bls.n	800483a <USB_SetTurnaroundTime+0x2a>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4a40      	ldr	r2, [pc, #256]	; (8004930 <USB_SetTurnaroundTime+0x120>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d202      	bcs.n	800483a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004834:	230f      	movs	r3, #15
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	e062      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	4a3c      	ldr	r2, [pc, #240]	; (8004930 <USB_SetTurnaroundTime+0x120>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d306      	bcc.n	8004850 <USB_SetTurnaroundTime+0x40>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	4a3b      	ldr	r2, [pc, #236]	; (8004934 <USB_SetTurnaroundTime+0x124>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d202      	bcs.n	8004850 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800484a:	230e      	movs	r3, #14
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	e057      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4a38      	ldr	r2, [pc, #224]	; (8004934 <USB_SetTurnaroundTime+0x124>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d306      	bcc.n	8004866 <USB_SetTurnaroundTime+0x56>
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4a37      	ldr	r2, [pc, #220]	; (8004938 <USB_SetTurnaroundTime+0x128>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d202      	bcs.n	8004866 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004860:	230d      	movs	r3, #13
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	e04c      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4a33      	ldr	r2, [pc, #204]	; (8004938 <USB_SetTurnaroundTime+0x128>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d306      	bcc.n	800487c <USB_SetTurnaroundTime+0x6c>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4a32      	ldr	r2, [pc, #200]	; (800493c <USB_SetTurnaroundTime+0x12c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d802      	bhi.n	800487c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004876:	230c      	movs	r3, #12
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	e041      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4a2f      	ldr	r2, [pc, #188]	; (800493c <USB_SetTurnaroundTime+0x12c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d906      	bls.n	8004892 <USB_SetTurnaroundTime+0x82>
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4a2e      	ldr	r2, [pc, #184]	; (8004940 <USB_SetTurnaroundTime+0x130>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d802      	bhi.n	8004892 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800488c:	230b      	movs	r3, #11
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e036      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	4a2a      	ldr	r2, [pc, #168]	; (8004940 <USB_SetTurnaroundTime+0x130>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d906      	bls.n	80048a8 <USB_SetTurnaroundTime+0x98>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4a29      	ldr	r2, [pc, #164]	; (8004944 <USB_SetTurnaroundTime+0x134>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d802      	bhi.n	80048a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80048a2:	230a      	movs	r3, #10
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	e02b      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4a26      	ldr	r2, [pc, #152]	; (8004944 <USB_SetTurnaroundTime+0x134>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d906      	bls.n	80048be <USB_SetTurnaroundTime+0xae>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4a25      	ldr	r2, [pc, #148]	; (8004948 <USB_SetTurnaroundTime+0x138>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d202      	bcs.n	80048be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80048b8:	2309      	movs	r3, #9
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	e020      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4a21      	ldr	r2, [pc, #132]	; (8004948 <USB_SetTurnaroundTime+0x138>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d306      	bcc.n	80048d4 <USB_SetTurnaroundTime+0xc4>
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	4a20      	ldr	r2, [pc, #128]	; (800494c <USB_SetTurnaroundTime+0x13c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d802      	bhi.n	80048d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80048ce:	2308      	movs	r3, #8
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	e015      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4a1d      	ldr	r2, [pc, #116]	; (800494c <USB_SetTurnaroundTime+0x13c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d906      	bls.n	80048ea <USB_SetTurnaroundTime+0xda>
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4a1c      	ldr	r2, [pc, #112]	; (8004950 <USB_SetTurnaroundTime+0x140>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d202      	bcs.n	80048ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80048e4:	2307      	movs	r3, #7
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	e00a      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80048ea:	2306      	movs	r3, #6
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	e007      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80048f0:	79fb      	ldrb	r3, [r7, #7]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d102      	bne.n	80048fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80048f6:	2309      	movs	r3, #9
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	e001      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80048fc:	2309      	movs	r3, #9
 80048fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	029b      	lsls	r3, r3, #10
 8004914:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004918:	431a      	orrs	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	371c      	adds	r7, #28
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	00d8acbf 	.word	0x00d8acbf
 8004930:	00e4e1c0 	.word	0x00e4e1c0
 8004934:	00f42400 	.word	0x00f42400
 8004938:	01067380 	.word	0x01067380
 800493c:	011a499f 	.word	0x011a499f
 8004940:	01312cff 	.word	0x01312cff
 8004944:	014ca43f 	.word	0x014ca43f
 8004948:	016e3600 	.word	0x016e3600
 800494c:	01a6ab1f 	.word	0x01a6ab1f
 8004950:	01e84800 	.word	0x01e84800

08004954 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f043 0201 	orr.w	r2, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f023 0201 	bic.w	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d115      	bne.n	80049e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049c6:	200a      	movs	r0, #10
 80049c8:	f7fd fa54 	bl	8001e74 <HAL_Delay>
      ms += 10U;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	330a      	adds	r3, #10
 80049d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f001 f939 	bl	8005c4a <USB_GetMode>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d01e      	beq.n	8004a1c <USB_SetCurrentMode+0x84>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2bc7      	cmp	r3, #199	; 0xc7
 80049e2:	d9f0      	bls.n	80049c6 <USB_SetCurrentMode+0x2e>
 80049e4:	e01a      	b.n	8004a1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80049e6:	78fb      	ldrb	r3, [r7, #3]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d115      	bne.n	8004a18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049f8:	200a      	movs	r0, #10
 80049fa:	f7fd fa3b 	bl	8001e74 <HAL_Delay>
      ms += 10U;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	330a      	adds	r3, #10
 8004a02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f001 f920 	bl	8005c4a <USB_GetMode>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <USB_SetCurrentMode+0x84>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2bc7      	cmp	r3, #199	; 0xc7
 8004a14:	d9f0      	bls.n	80049f8 <USB_SetCurrentMode+0x60>
 8004a16:	e001      	b.n	8004a1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e005      	b.n	8004a28 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2bc8      	cmp	r3, #200	; 0xc8
 8004a20:	d101      	bne.n	8004a26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a30:	b084      	sub	sp, #16
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b086      	sub	sp, #24
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	e009      	b.n	8004a64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	3340      	adds	r3, #64	; 0x40
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	3301      	adds	r3, #1
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	2b0e      	cmp	r3, #14
 8004a68:	d9f2      	bls.n	8004a50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d11c      	bne.n	8004aac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a80:	f043 0302 	orr.w	r3, r3, #2
 8004a84:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38
 8004aaa:	e00b      	b.n	8004ac4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004aca:	461a      	mov	r2, r3
 8004acc:	2300      	movs	r3, #0
 8004ace:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ad0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d10d      	bne.n	8004af4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d104      	bne.n	8004aea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f968 	bl	8004db8 <USB_SetDevSpeed>
 8004ae8:	e008      	b.n	8004afc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004aea:	2101      	movs	r1, #1
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f963 	bl	8004db8 <USB_SetDevSpeed>
 8004af2:	e003      	b.n	8004afc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004af4:	2103      	movs	r1, #3
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f95e 	bl	8004db8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004afc:	2110      	movs	r1, #16
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f8fa 	bl	8004cf8 <USB_FlushTxFifo>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f924 	bl	8004d5c <USB_FlushRxFifo>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b24:	461a      	mov	r2, r3
 8004b26:	2300      	movs	r3, #0
 8004b28:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b30:	461a      	mov	r2, r3
 8004b32:	2300      	movs	r3, #0
 8004b34:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b42:	2300      	movs	r3, #0
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	e043      	b.n	8004bd0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b5e:	d118      	bne.n	8004b92 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b72:	461a      	mov	r2, r3
 8004b74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	e013      	b.n	8004ba4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	e008      	b.n	8004ba4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	613b      	str	r3, [r7, #16]
 8004bd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d3b5      	bcc.n	8004b48 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bdc:	2300      	movs	r3, #0
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	e043      	b.n	8004c6a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bf8:	d118      	bne.n	8004c2c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10a      	bne.n	8004c16 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	e013      	b.n	8004c3e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c22:	461a      	mov	r2, r3
 8004c24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	e008      	b.n	8004c3e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	3301      	adds	r3, #1
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c6e:	461a      	mov	r2, r3
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d3b5      	bcc.n	8004be2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c88:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c96:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d105      	bne.n	8004cac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f043 0210 	orr.w	r2, r3, #16
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699a      	ldr	r2, [r3, #24]
 8004cb0:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <USB_DevInit+0x2c4>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004cb8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f043 0208 	orr.w	r2, r3, #8
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ccc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d107      	bne.n	8004ce4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cdc:	f043 0304 	orr.w	r3, r3, #4
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cf0:	b004      	add	sp, #16
 8004cf2:	4770      	bx	lr
 8004cf4:	803c3800 	.word	0x803c3800

08004cf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d12:	d901      	bls.n	8004d18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e01b      	b.n	8004d50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	daf2      	bge.n	8004d06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	019b      	lsls	r3, r3, #6
 8004d28:	f043 0220 	orr.w	r2, r3, #32
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3301      	adds	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d3c:	d901      	bls.n	8004d42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e006      	b.n	8004d50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d0f0      	beq.n	8004d30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d74:	d901      	bls.n	8004d7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e018      	b.n	8004dac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	daf2      	bge.n	8004d68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2210      	movs	r2, #16
 8004d8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d98:	d901      	bls.n	8004d9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e006      	b.n	8004dac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0310 	and.w	r3, r3, #16
 8004da6:	2b10      	cmp	r3, #16
 8004da8:	d0f0      	beq.n	8004d8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	68f9      	ldr	r1, [r7, #12]
 8004dd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b087      	sub	sp, #28
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0306 	and.w	r3, r3, #6
 8004e02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d102      	bne.n	8004e10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	75fb      	strb	r3, [r7, #23]
 8004e0e:	e00a      	b.n	8004e26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d002      	beq.n	8004e1c <USB_GetDevSpeed+0x32>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b06      	cmp	r3, #6
 8004e1a:	d102      	bne.n	8004e22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	75fb      	strb	r3, [r7, #23]
 8004e20:	e001      	b.n	8004e26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e22:	230f      	movs	r3, #15
 8004e24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	785b      	ldrb	r3, [r3, #1]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d13a      	bne.n	8004ec6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e56:	69da      	ldr	r2, [r3, #28]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	2101      	movs	r1, #1
 8004e62:	fa01 f303 	lsl.w	r3, r1, r3
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	68f9      	ldr	r1, [r7, #12]
 8004e6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d155      	bne.n	8004f34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	791b      	ldrb	r3, [r3, #4]
 8004ea2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ea4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	059b      	lsls	r3, r3, #22
 8004eaa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004eac:	4313      	orrs	r3, r2
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	0151      	lsls	r1, r2, #5
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	440a      	add	r2, r1
 8004eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	e036      	b.n	8004f34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ecc:	69da      	ldr	r2, [r3, #28]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8004edc:	041b      	lsls	r3, r3, #16
 8004ede:	68f9      	ldr	r1, [r7, #12]
 8004ee0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d11a      	bne.n	8004f34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	791b      	ldrb	r3, [r3, #4]
 8004f18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f1a:	430b      	orrs	r3, r1
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
	...

08004f44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	785b      	ldrb	r3, [r3, #1]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d161      	bne.n	8005024 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f76:	d11f      	bne.n	8004fb8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	0151      	lsls	r1, r2, #5
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	2101      	movs	r1, #1
 8004fca:	fa01 f303 	lsl.w	r3, r1, r3
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	68f9      	ldr	r1, [r7, #12]
 8004fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fd8:	4013      	ands	r3, r2
 8004fda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe2:	69da      	ldr	r2, [r3, #28]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	2101      	movs	r1, #1
 8004fee:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	68f9      	ldr	r1, [r7, #12]
 8004ff8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	0159      	lsls	r1, r3, #5
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	440b      	add	r3, r1
 8005016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501a:	4619      	mov	r1, r3
 800501c:	4b35      	ldr	r3, [pc, #212]	; (80050f4 <USB_DeactivateEndpoint+0x1b0>)
 800501e:	4013      	ands	r3, r2
 8005020:	600b      	str	r3, [r1, #0]
 8005022:	e060      	b.n	80050e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800503a:	d11f      	bne.n	800507c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	0151      	lsls	r1, r2, #5
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	440a      	add	r2, r1
 8005052:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005056:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800505a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	0151      	lsls	r1, r2, #5
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	440a      	add	r2, r1
 8005072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005076:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800507a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005082:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	2101      	movs	r1, #1
 800508e:	fa01 f303 	lsl.w	r3, r1, r3
 8005092:	041b      	lsls	r3, r3, #16
 8005094:	43db      	mvns	r3, r3
 8005096:	68f9      	ldr	r1, [r7, #12]
 8005098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800509c:	4013      	ands	r3, r2
 800509e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	2101      	movs	r1, #1
 80050b2:	fa01 f303 	lsl.w	r3, r1, r3
 80050b6:	041b      	lsls	r3, r3, #16
 80050b8:	43db      	mvns	r3, r3
 80050ba:	68f9      	ldr	r1, [r7, #12]
 80050bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050c0:	4013      	ands	r3, r2
 80050c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	0159      	lsls	r1, r3, #5
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	440b      	add	r3, r1
 80050da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050de:	4619      	mov	r1, r3
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <USB_DeactivateEndpoint+0x1b4>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	ec337800 	.word	0xec337800
 80050f8:	eff37800 	.word	0xeff37800

080050fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08a      	sub	sp, #40	; 0x28
 8005100:	af02      	add	r7, sp, #8
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	4613      	mov	r3, r2
 8005108:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	2b01      	cmp	r3, #1
 800511a:	f040 817a 	bne.w	8005412 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d132      	bne.n	800518c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005140:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005144:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005148:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	0151      	lsls	r1, r2, #5
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	440a      	add	r2, r1
 8005160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005164:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005168:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	0151      	lsls	r1, r2, #5
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	440a      	add	r2, r1
 8005180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005184:	0cdb      	lsrs	r3, r3, #19
 8005186:	04db      	lsls	r3, r3, #19
 8005188:	6113      	str	r3, [r2, #16]
 800518a:	e092      	b.n	80052b2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	0151      	lsls	r1, r2, #5
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	440a      	add	r2, r1
 80051a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a6:	0cdb      	lsrs	r3, r3, #19
 80051a8:	04db      	lsls	r3, r3, #19
 80051aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	0151      	lsls	r1, r2, #5
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	440a      	add	r2, r1
 80051c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051ce:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d11a      	bne.n	800520c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d903      	bls.n	80051ea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	0151      	lsls	r1, r2, #5
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	440a      	add	r2, r1
 8005200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005204:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005208:	6113      	str	r3, [r2, #16]
 800520a:	e01b      	b.n	8005244 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005218:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	6919      	ldr	r1, [r3, #16]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	440b      	add	r3, r1
 8005224:	1e59      	subs	r1, r3, #1
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	fbb1 f3f3 	udiv	r3, r1, r3
 800522e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005230:	4ba2      	ldr	r3, [pc, #648]	; (80054bc <USB_EPStartXfer+0x3c0>)
 8005232:	400b      	ands	r3, r1
 8005234:	69b9      	ldr	r1, [r7, #24]
 8005236:	0148      	lsls	r0, r1, #5
 8005238:	69f9      	ldr	r1, [r7, #28]
 800523a:	4401      	add	r1, r0
 800523c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005240:	4313      	orrs	r3, r2
 8005242:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005250:	691a      	ldr	r2, [r3, #16]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800525a:	69b9      	ldr	r1, [r7, #24]
 800525c:	0148      	lsls	r0, r1, #5
 800525e:	69f9      	ldr	r1, [r7, #28]
 8005260:	4401      	add	r1, r0
 8005262:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005266:	4313      	orrs	r3, r2
 8005268:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	791b      	ldrb	r3, [r3, #4]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d11f      	bne.n	80052b2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	0151      	lsls	r1, r2, #5
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	440a      	add	r2, r1
 8005288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800528c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005290:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	0151      	lsls	r1, r2, #5
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	440a      	add	r2, r1
 80052a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d14b      	bne.n	8005350 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d009      	beq.n	80052d4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052cc:	461a      	mov	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	791b      	ldrb	r3, [r3, #4]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d128      	bne.n	800532e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d110      	bne.n	800530e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005306:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	e00f      	b.n	800532e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	440a      	add	r2, r1
 8005324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800532c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	0151      	lsls	r1, r2, #5
 8005340:	69fa      	ldr	r2, [r7, #28]
 8005342:	440a      	add	r2, r1
 8005344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005348:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e165      	b.n	800561c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	0151      	lsls	r1, r2, #5
 8005362:	69fa      	ldr	r2, [r7, #28]
 8005364:	440a      	add	r2, r1
 8005366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800536a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800536e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	791b      	ldrb	r3, [r3, #4]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d015      	beq.n	80053a4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 814d 	beq.w	800561c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	2101      	movs	r1, #1
 8005394:	fa01 f303 	lsl.w	r3, r1, r3
 8005398:	69f9      	ldr	r1, [r7, #28]
 800539a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800539e:	4313      	orrs	r3, r2
 80053a0:	634b      	str	r3, [r1, #52]	; 0x34
 80053a2:	e13b      	b.n	800561c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d110      	bne.n	80053d6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	0151      	lsls	r1, r2, #5
 80053c6:	69fa      	ldr	r2, [r7, #28]
 80053c8:	440a      	add	r2, r1
 80053ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	e00f      	b.n	80053f6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	0151      	lsls	r1, r2, #5
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	440a      	add	r2, r1
 80053ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	68d9      	ldr	r1, [r3, #12]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	781a      	ldrb	r2, [r3, #0]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	b298      	uxth	r0, r3
 8005404:	79fb      	ldrb	r3, [r7, #7]
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	4603      	mov	r3, r0
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f9b8 	bl	8005780 <USB_WritePacket>
 8005410:	e104      	b.n	800561c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	69fa      	ldr	r2, [r7, #28]
 8005426:	440a      	add	r2, r1
 8005428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800542c:	0cdb      	lsrs	r3, r3, #19
 800542e:	04db      	lsls	r3, r3, #19
 8005430:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	0151      	lsls	r1, r2, #5
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	440a      	add	r2, r1
 8005448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005450:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005454:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d131      	bne.n	80054c0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800548a:	69b9      	ldr	r1, [r7, #24]
 800548c:	0148      	lsls	r0, r1, #5
 800548e:	69f9      	ldr	r1, [r7, #28]
 8005490:	4401      	add	r1, r0
 8005492:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005496:	4313      	orrs	r3, r2
 8005498:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	0151      	lsls	r1, r2, #5
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	440a      	add	r2, r1
 80054b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054b8:	6113      	str	r3, [r2, #16]
 80054ba:	e061      	b.n	8005580 <USB_EPStartXfer+0x484>
 80054bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d123      	bne.n	8005510 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054de:	69b9      	ldr	r1, [r7, #24]
 80054e0:	0148      	lsls	r0, r1, #5
 80054e2:	69f9      	ldr	r1, [r7, #28]
 80054e4:	4401      	add	r1, r0
 80054e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054ea:	4313      	orrs	r3, r2
 80054ec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	0151      	lsls	r1, r2, #5
 8005500:	69fa      	ldr	r2, [r7, #28]
 8005502:	440a      	add	r2, r1
 8005504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005508:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800550c:	6113      	str	r3, [r2, #16]
 800550e:	e037      	b.n	8005580 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	4413      	add	r3, r2
 800551a:	1e5a      	subs	r2, r3, #1
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	fbb2 f3f3 	udiv	r3, r2, r3
 8005524:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	8afa      	ldrh	r2, [r7, #22]
 800552c:	fb03 f202 	mul.w	r2, r3, r2
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	8afb      	ldrh	r3, [r7, #22]
 8005544:	04d9      	lsls	r1, r3, #19
 8005546:	4b38      	ldr	r3, [pc, #224]	; (8005628 <USB_EPStartXfer+0x52c>)
 8005548:	400b      	ands	r3, r1
 800554a:	69b9      	ldr	r1, [r7, #24]
 800554c:	0148      	lsls	r0, r1, #5
 800554e:	69f9      	ldr	r1, [r7, #28]
 8005550:	4401      	add	r1, r0
 8005552:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005556:	4313      	orrs	r3, r2
 8005558:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005570:	69b9      	ldr	r1, [r7, #24]
 8005572:	0148      	lsls	r0, r1, #5
 8005574:	69f9      	ldr	r1, [r7, #28]
 8005576:	4401      	add	r1, r0
 8005578:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800557c:	4313      	orrs	r3, r2
 800557e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d10d      	bne.n	80055a2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d009      	beq.n	80055a2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	68d9      	ldr	r1, [r3, #12]
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559e:	460a      	mov	r2, r1
 80055a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	791b      	ldrb	r3, [r3, #4]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d128      	bne.n	80055fc <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d110      	bne.n	80055dc <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	0151      	lsls	r1, r2, #5
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	440a      	add	r2, r1
 80055d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	e00f      	b.n	80055fc <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	0151      	lsls	r1, r2, #5
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	440a      	add	r2, r1
 8005612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005616:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800561a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3720      	adds	r7, #32
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	1ff80000 	.word	0x1ff80000

0800562c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	785b      	ldrb	r3, [r3, #1]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d14a      	bne.n	80056e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800565e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005662:	f040 8086 	bne.w	8005772 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	7812      	ldrb	r2, [r2, #0]
 800567a:	0151      	lsls	r1, r2, #5
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	440a      	add	r2, r1
 8005680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005684:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005688:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	7812      	ldrb	r2, [r2, #0]
 800569e:	0151      	lsls	r1, r2, #5
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	440a      	add	r2, r1
 80056a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3301      	adds	r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d902      	bls.n	80056c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	75fb      	strb	r3, [r7, #23]
          break;
 80056c2:	e056      	b.n	8005772 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056dc:	d0e7      	beq.n	80056ae <USB_EPStopXfer+0x82>
 80056de:	e048      	b.n	8005772 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056f8:	d13b      	bne.n	8005772 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	440a      	add	r2, r1
 8005714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005718:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800571c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	7812      	ldrb	r2, [r2, #0]
 8005732:	0151      	lsls	r1, r2, #5
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	440a      	add	r2, r1
 8005738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005740:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3301      	adds	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f242 7210 	movw	r2, #10000	; 0x2710
 800574e:	4293      	cmp	r3, r2
 8005750:	d902      	bls.n	8005758 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	75fb      	strb	r3, [r7, #23]
          break;
 8005756:	e00c      	b.n	8005772 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800576c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005770:	d0e7      	beq.n	8005742 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005772:	7dfb      	ldrb	r3, [r7, #23]
}
 8005774:	4618      	mov	r0, r3
 8005776:	371c      	adds	r7, #28
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005780:	b480      	push	{r7}
 8005782:	b089      	sub	sp, #36	; 0x24
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	4611      	mov	r1, r2
 800578c:	461a      	mov	r2, r3
 800578e:	460b      	mov	r3, r1
 8005790:	71fb      	strb	r3, [r7, #7]
 8005792:	4613      	mov	r3, r2
 8005794:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800579e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d123      	bne.n	80057ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057a6:	88bb      	ldrh	r3, [r7, #4]
 80057a8:	3303      	adds	r3, #3
 80057aa:	089b      	lsrs	r3, r3, #2
 80057ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	61bb      	str	r3, [r7, #24]
 80057b2:	e018      	b.n	80057e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057b4:	79fb      	ldrb	r3, [r7, #7]
 80057b6:	031a      	lsls	r2, r3, #12
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c0:	461a      	mov	r2, r3
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	3301      	adds	r3, #1
 80057cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	3301      	adds	r3, #1
 80057d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	3301      	adds	r3, #1
 80057d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	3301      	adds	r3, #1
 80057de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	3301      	adds	r3, #1
 80057e4:	61bb      	str	r3, [r7, #24]
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d3e2      	bcc.n	80057b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3724      	adds	r7, #36	; 0x24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b08b      	sub	sp, #44	; 0x2c
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	4613      	mov	r3, r2
 8005808:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005812:	88fb      	ldrh	r3, [r7, #6]
 8005814:	089b      	lsrs	r3, r3, #2
 8005816:	b29b      	uxth	r3, r3
 8005818:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800581a:	88fb      	ldrh	r3, [r7, #6]
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005822:	2300      	movs	r3, #0
 8005824:	623b      	str	r3, [r7, #32]
 8005826:	e014      	b.n	8005852 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	601a      	str	r2, [r3, #0]
    pDest++;
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	3301      	adds	r3, #1
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	3301      	adds	r3, #1
 800583e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	3301      	adds	r3, #1
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	3301      	adds	r3, #1
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	3301      	adds	r3, #1
 8005850:	623b      	str	r3, [r7, #32]
 8005852:	6a3a      	ldr	r2, [r7, #32]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	429a      	cmp	r2, r3
 8005858:	d3e6      	bcc.n	8005828 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800585a:	8bfb      	ldrh	r3, [r7, #30]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d01e      	beq.n	800589e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800586a:	461a      	mov	r2, r3
 800586c:	f107 0310 	add.w	r3, r7, #16
 8005870:	6812      	ldr	r2, [r2, #0]
 8005872:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
 8005880:	b2da      	uxtb	r2, r3
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	701a      	strb	r2, [r3, #0]
      i++;
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	3301      	adds	r3, #1
 800588a:	623b      	str	r3, [r7, #32]
      pDest++;
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	3301      	adds	r3, #1
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005892:	8bfb      	ldrh	r3, [r7, #30]
 8005894:	3b01      	subs	r3, #1
 8005896:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005898:	8bfb      	ldrh	r3, [r7, #30]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1ea      	bne.n	8005874 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	372c      	adds	r7, #44	; 0x2c
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	785b      	ldrb	r3, [r3, #1]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d12c      	bne.n	8005922 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	db12      	blt.n	8005900 <USB_EPSetStall+0x54>
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00f      	beq.n	8005900 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	e02b      	b.n	800597a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	db12      	blt.n	800595a <USB_EPSetStall+0xae>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00f      	beq.n	800595a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005954:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005958:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	440a      	add	r2, r1
 8005970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005974:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005978:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	785b      	ldrb	r3, [r3, #1]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d128      	bne.n	80059f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	0151      	lsls	r1, r2, #5
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	440a      	add	r2, r1
 80059ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	791b      	ldrb	r3, [r3, #4]
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d003      	beq.n	80059d4 <USB_EPClearStall+0x4c>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	791b      	ldrb	r3, [r3, #4]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d138      	bne.n	8005a46 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	0151      	lsls	r1, r2, #5
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	440a      	add	r2, r1
 80059ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	e027      	b.n	8005a46 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a14:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	791b      	ldrb	r3, [r3, #4]
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d003      	beq.n	8005a26 <USB_EPClearStall+0x9e>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	791b      	ldrb	r3, [r3, #4]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d10f      	bne.n	8005a46 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	0151      	lsls	r1, r2, #5
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	440a      	add	r2, r1
 8005a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a44:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a76:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005a88:	68f9      	ldr	r1, [r7, #12]
 8005a8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005aba:	f023 0303 	bic.w	r3, r3, #3
 8005abe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ace:	f023 0302 	bic.w	r3, r3, #2
 8005ad2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005afc:	f023 0303 	bic.w	r3, r3, #3
 8005b00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b10:	f043 0302 	orr.w	r3, r3, #2
 8005b14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b085      	sub	sp, #20
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	0c1b      	lsrs	r3, r3, #16
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b085      	sub	sp, #20
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	b29b      	uxth	r3, r3
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005be0:	68bb      	ldr	r3, [r7, #8]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b087      	sub	sp, #28
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c10:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c1e:	01db      	lsls	r3, r3, #7
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	f003 0301 	and.w	r3, r3, #1
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c84:	f023 0307 	bic.w	r3, r3, #7
 8005c88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	333c      	adds	r3, #60	; 0x3c
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	4a26      	ldr	r2, [pc, #152]	; (8005d64 <USB_EP0_OutStart+0xb8>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d90a      	bls.n	8005ce6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ce0:	d101      	bne.n	8005ce6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e037      	b.n	8005d56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cec:	461a      	mov	r2, r3
 8005cee:	2300      	movs	r3, #0
 8005cf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d14:	f043 0318 	orr.w	r3, r3, #24
 8005d18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d28:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005d2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d2e:	7afb      	ldrb	r3, [r7, #11]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d10f      	bne.n	8005d54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d4e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005d52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	4f54300a 	.word	0x4f54300a

08005d68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3301      	adds	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d80:	d901      	bls.n	8005d86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e01b      	b.n	8005dbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	daf2      	bge.n	8005d74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f043 0201 	orr.w	r2, r3, #1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3301      	adds	r3, #1
 8005da2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005daa:	d901      	bls.n	8005db0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e006      	b.n	8005dbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d0f0      	beq.n	8005d9e <USB_CoreReset+0x36>

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
	...

08005dcc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005dd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ddc:	f002 fc8e 	bl	80086fc <USBD_static_malloc>
 8005de0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d109      	bne.n	8005dfc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	32b0      	adds	r2, #176	; 0xb0
 8005df2:	2100      	movs	r1, #0
 8005df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005df8:	2302      	movs	r3, #2
 8005dfa:	e0d4      	b.n	8005fa6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005dfc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005e00:	2100      	movs	r1, #0
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f003 fd52 	bl	80098ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	32b0      	adds	r2, #176	; 0xb0
 8005e12:	68f9      	ldr	r1, [r7, #12]
 8005e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	32b0      	adds	r2, #176	; 0xb0
 8005e22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	7c1b      	ldrb	r3, [r3, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d138      	bne.n	8005ea6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e34:	4b5e      	ldr	r3, [pc, #376]	; (8005fb0 <USBD_CDC_Init+0x1e4>)
 8005e36:	7819      	ldrb	r1, [r3, #0]
 8005e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f002 fb39 	bl	80084b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e44:	4b5a      	ldr	r3, [pc, #360]	; (8005fb0 <USBD_CDC_Init+0x1e4>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	f003 020f 	and.w	r2, r3, #15
 8005e4c:	6879      	ldr	r1, [r7, #4]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	440b      	add	r3, r1
 8005e58:	3324      	adds	r3, #36	; 0x24
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e5e:	4b55      	ldr	r3, [pc, #340]	; (8005fb4 <USBD_CDC_Init+0x1e8>)
 8005e60:	7819      	ldrb	r1, [r3, #0]
 8005e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e66:	2202      	movs	r2, #2
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f002 fb24 	bl	80084b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e6e:	4b51      	ldr	r3, [pc, #324]	; (8005fb4 <USBD_CDC_Init+0x1e8>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	f003 020f 	and.w	r2, r3, #15
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	440b      	add	r3, r1
 8005e82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e86:	2201      	movs	r2, #1
 8005e88:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e8a:	4b4b      	ldr	r3, [pc, #300]	; (8005fb8 <USBD_CDC_Init+0x1ec>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	f003 020f 	and.w	r2, r3, #15
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	4613      	mov	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	440b      	add	r3, r1
 8005e9e:	3326      	adds	r3, #38	; 0x26
 8005ea0:	2210      	movs	r2, #16
 8005ea2:	801a      	strh	r2, [r3, #0]
 8005ea4:	e035      	b.n	8005f12 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ea6:	4b42      	ldr	r3, [pc, #264]	; (8005fb0 <USBD_CDC_Init+0x1e4>)
 8005ea8:	7819      	ldrb	r1, [r3, #0]
 8005eaa:	2340      	movs	r3, #64	; 0x40
 8005eac:	2202      	movs	r2, #2
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f002 fb01 	bl	80084b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005eb4:	4b3e      	ldr	r3, [pc, #248]	; (8005fb0 <USBD_CDC_Init+0x1e4>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	f003 020f 	and.w	r2, r3, #15
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	440b      	add	r3, r1
 8005ec8:	3324      	adds	r3, #36	; 0x24
 8005eca:	2201      	movs	r2, #1
 8005ecc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005ece:	4b39      	ldr	r3, [pc, #228]	; (8005fb4 <USBD_CDC_Init+0x1e8>)
 8005ed0:	7819      	ldrb	r1, [r3, #0]
 8005ed2:	2340      	movs	r3, #64	; 0x40
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f002 faed 	bl	80084b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005edc:	4b35      	ldr	r3, [pc, #212]	; (8005fb4 <USBD_CDC_Init+0x1e8>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	f003 020f 	and.w	r2, r3, #15
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	440b      	add	r3, r1
 8005ef0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ef8:	4b2f      	ldr	r3, [pc, #188]	; (8005fb8 <USBD_CDC_Init+0x1ec>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	f003 020f 	and.w	r2, r3, #15
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	3326      	adds	r3, #38	; 0x26
 8005f0e:	2210      	movs	r2, #16
 8005f10:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f12:	4b29      	ldr	r3, [pc, #164]	; (8005fb8 <USBD_CDC_Init+0x1ec>)
 8005f14:	7819      	ldrb	r1, [r3, #0]
 8005f16:	2308      	movs	r3, #8
 8005f18:	2203      	movs	r2, #3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f002 facb 	bl	80084b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005f20:	4b25      	ldr	r3, [pc, #148]	; (8005fb8 <USBD_CDC_Init+0x1ec>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	f003 020f 	and.w	r2, r3, #15
 8005f28:	6879      	ldr	r1, [r7, #4]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	440b      	add	r3, r1
 8005f34:	3324      	adds	r3, #36	; 0x24
 8005f36:	2201      	movs	r2, #1
 8005f38:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	33b0      	adds	r3, #176	; 0xb0
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005f70:	2302      	movs	r3, #2
 8005f72:	e018      	b.n	8005fa6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	7c1b      	ldrb	r3, [r3, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10a      	bne.n	8005f92 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f7c:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <USBD_CDC_Init+0x1e8>)
 8005f7e:	7819      	ldrb	r1, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f002 fb82 	bl	8008694 <USBD_LL_PrepareReceive>
 8005f90:	e008      	b.n	8005fa4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f92:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <USBD_CDC_Init+0x1e8>)
 8005f94:	7819      	ldrb	r1, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f9c:	2340      	movs	r3, #64	; 0x40
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f002 fb78 	bl	8008694 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000093 	.word	0x20000093
 8005fb4:	20000094 	.word	0x20000094
 8005fb8:	20000095 	.word	0x20000095

08005fbc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005fc8:	4b3a      	ldr	r3, [pc, #232]	; (80060b4 <USBD_CDC_DeInit+0xf8>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f002 fa97 	bl	8008502 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005fd4:	4b37      	ldr	r3, [pc, #220]	; (80060b4 <USBD_CDC_DeInit+0xf8>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	f003 020f 	and.w	r2, r3, #15
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	3324      	adds	r3, #36	; 0x24
 8005fea:	2200      	movs	r2, #0
 8005fec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005fee:	4b32      	ldr	r3, [pc, #200]	; (80060b8 <USBD_CDC_DeInit+0xfc>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f002 fa84 	bl	8008502 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005ffa:	4b2f      	ldr	r3, [pc, #188]	; (80060b8 <USBD_CDC_DeInit+0xfc>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	f003 020f 	and.w	r2, r3, #15
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	440b      	add	r3, r1
 800600e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006012:	2200      	movs	r2, #0
 8006014:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006016:	4b29      	ldr	r3, [pc, #164]	; (80060bc <USBD_CDC_DeInit+0x100>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	4619      	mov	r1, r3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f002 fa70 	bl	8008502 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006022:	4b26      	ldr	r3, [pc, #152]	; (80060bc <USBD_CDC_DeInit+0x100>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	f003 020f 	and.w	r2, r3, #15
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	440b      	add	r3, r1
 8006036:	3324      	adds	r3, #36	; 0x24
 8006038:	2200      	movs	r2, #0
 800603a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800603c:	4b1f      	ldr	r3, [pc, #124]	; (80060bc <USBD_CDC_DeInit+0x100>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	f003 020f 	and.w	r2, r3, #15
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	4613      	mov	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	3326      	adds	r3, #38	; 0x26
 8006052:	2200      	movs	r2, #0
 8006054:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	32b0      	adds	r2, #176	; 0xb0
 8006060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01f      	beq.n	80060a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	33b0      	adds	r3, #176	; 0xb0
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	32b0      	adds	r2, #176	; 0xb0
 8006086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800608a:	4618      	mov	r0, r3
 800608c:	f002 fb44 	bl	8008718 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	32b0      	adds	r2, #176	; 0xb0
 800609a:	2100      	movs	r1, #0
 800609c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000093 	.word	0x20000093
 80060b8:	20000094 	.word	0x20000094
 80060bc:	20000095 	.word	0x20000095

080060c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	32b0      	adds	r2, #176	; 0xb0
 80060d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e0bf      	b.n	8006270 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d050      	beq.n	800619e <USBD_CDC_Setup+0xde>
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	f040 80af 	bne.w	8006260 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	88db      	ldrh	r3, [r3, #6]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d03a      	beq.n	8006180 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	b25b      	sxtb	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	da1b      	bge.n	800614c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	33b0      	adds	r3, #176	; 0xb0
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800612a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	88d2      	ldrh	r2, [r2, #6]
 8006130:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	88db      	ldrh	r3, [r3, #6]
 8006136:	2b07      	cmp	r3, #7
 8006138:	bf28      	it	cs
 800613a:	2307      	movcs	r3, #7
 800613c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	89fa      	ldrh	r2, [r7, #14]
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 fd89 	bl	8007c5c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800614a:	e090      	b.n	800626e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	785a      	ldrb	r2, [r3, #1]
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	88db      	ldrh	r3, [r3, #6]
 800615a:	2b3f      	cmp	r3, #63	; 0x3f
 800615c:	d803      	bhi.n	8006166 <USBD_CDC_Setup+0xa6>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	88db      	ldrh	r3, [r3, #6]
 8006162:	b2da      	uxtb	r2, r3
 8006164:	e000      	b.n	8006168 <USBD_CDC_Setup+0xa8>
 8006166:	2240      	movs	r2, #64	; 0x40
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800616e:	6939      	ldr	r1, [r7, #16]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006176:	461a      	mov	r2, r3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f001 fd9b 	bl	8007cb4 <USBD_CtlPrepareRx>
      break;
 800617e:	e076      	b.n	800626e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	33b0      	adds	r3, #176	; 0xb0
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	7850      	ldrb	r0, [r2, #1]
 8006196:	2200      	movs	r2, #0
 8006198:	6839      	ldr	r1, [r7, #0]
 800619a:	4798      	blx	r3
      break;
 800619c:	e067      	b.n	800626e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	785b      	ldrb	r3, [r3, #1]
 80061a2:	2b0b      	cmp	r3, #11
 80061a4:	d851      	bhi.n	800624a <USBD_CDC_Setup+0x18a>
 80061a6:	a201      	add	r2, pc, #4	; (adr r2, 80061ac <USBD_CDC_Setup+0xec>)
 80061a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ac:	080061dd 	.word	0x080061dd
 80061b0:	08006259 	.word	0x08006259
 80061b4:	0800624b 	.word	0x0800624b
 80061b8:	0800624b 	.word	0x0800624b
 80061bc:	0800624b 	.word	0x0800624b
 80061c0:	0800624b 	.word	0x0800624b
 80061c4:	0800624b 	.word	0x0800624b
 80061c8:	0800624b 	.word	0x0800624b
 80061cc:	0800624b 	.word	0x0800624b
 80061d0:	0800624b 	.word	0x0800624b
 80061d4:	08006207 	.word	0x08006207
 80061d8:	08006231 	.word	0x08006231
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d107      	bne.n	80061f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80061e8:	f107 030a 	add.w	r3, r7, #10
 80061ec:	2202      	movs	r2, #2
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f001 fd33 	bl	8007c5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061f6:	e032      	b.n	800625e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f001 fcbd 	bl	8007b7a <USBD_CtlError>
            ret = USBD_FAIL;
 8006200:	2303      	movs	r3, #3
 8006202:	75fb      	strb	r3, [r7, #23]
          break;
 8006204:	e02b      	b.n	800625e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b03      	cmp	r3, #3
 8006210:	d107      	bne.n	8006222 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006212:	f107 030d 	add.w	r3, r7, #13
 8006216:	2201      	movs	r2, #1
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f001 fd1e 	bl	8007c5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006220:	e01d      	b.n	800625e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f001 fca8 	bl	8007b7a <USBD_CtlError>
            ret = USBD_FAIL;
 800622a:	2303      	movs	r3, #3
 800622c:	75fb      	strb	r3, [r7, #23]
          break;
 800622e:	e016      	b.n	800625e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b03      	cmp	r3, #3
 800623a:	d00f      	beq.n	800625c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 fc9b 	bl	8007b7a <USBD_CtlError>
            ret = USBD_FAIL;
 8006244:	2303      	movs	r3, #3
 8006246:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006248:	e008      	b.n	800625c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 fc94 	bl	8007b7a <USBD_CtlError>
          ret = USBD_FAIL;
 8006252:	2303      	movs	r3, #3
 8006254:	75fb      	strb	r3, [r7, #23]
          break;
 8006256:	e002      	b.n	800625e <USBD_CDC_Setup+0x19e>
          break;
 8006258:	bf00      	nop
 800625a:	e008      	b.n	800626e <USBD_CDC_Setup+0x1ae>
          break;
 800625c:	bf00      	nop
      }
      break;
 800625e:	e006      	b.n	800626e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f001 fc89 	bl	8007b7a <USBD_CtlError>
      ret = USBD_FAIL;
 8006268:	2303      	movs	r3, #3
 800626a:	75fb      	strb	r3, [r7, #23]
      break;
 800626c:	bf00      	nop
  }

  return (uint8_t)ret;
 800626e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800628a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	32b0      	adds	r2, #176	; 0xb0
 8006296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800629e:	2303      	movs	r3, #3
 80062a0:	e065      	b.n	800636e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	32b0      	adds	r2, #176	; 0xb0
 80062ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	f003 020f 	and.w	r2, r3, #15
 80062b8:	6879      	ldr	r1, [r7, #4]
 80062ba:	4613      	mov	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	440b      	add	r3, r1
 80062c4:	3318      	adds	r3, #24
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d02f      	beq.n	800632c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	f003 020f 	and.w	r2, r3, #15
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	4613      	mov	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	3318      	adds	r3, #24
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	78fb      	ldrb	r3, [r7, #3]
 80062e4:	f003 010f 	and.w	r1, r3, #15
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	460b      	mov	r3, r1
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	440b      	add	r3, r1
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4403      	add	r3, r0
 80062f4:	331c      	adds	r3, #28
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80062fc:	fb01 f303 	mul.w	r3, r1, r3
 8006300:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006302:	2b00      	cmp	r3, #0
 8006304:	d112      	bne.n	800632c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006306:	78fb      	ldrb	r3, [r7, #3]
 8006308:	f003 020f 	and.w	r2, r3, #15
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	4613      	mov	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	440b      	add	r3, r1
 8006318:	3318      	adds	r3, #24
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800631e:	78f9      	ldrb	r1, [r7, #3]
 8006320:	2300      	movs	r3, #0
 8006322:	2200      	movs	r2, #0
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f002 f994 	bl	8008652 <USBD_LL_Transmit>
 800632a:	e01f      	b.n	800636c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2200      	movs	r2, #0
 8006330:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	33b0      	adds	r3, #176	; 0xb0
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d010      	beq.n	800636c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	33b0      	adds	r3, #176	; 0xb0
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006368:	78fa      	ldrb	r2, [r7, #3]
 800636a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	460b      	mov	r3, r1
 8006380:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	32b0      	adds	r2, #176	; 0xb0
 800638c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006390:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	32b0      	adds	r2, #176	; 0xb0
 800639c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e01a      	b.n	80063de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f002 f992 	bl	80086d6 <USBD_LL_GetRxDataSize>
 80063b2:	4602      	mov	r2, r0
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	33b0      	adds	r3, #176	; 0xb0
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80063d8:	4611      	mov	r1, r2
 80063da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b084      	sub	sp, #16
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	32b0      	adds	r2, #176	; 0xb0
 80063f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006404:	2303      	movs	r3, #3
 8006406:	e025      	b.n	8006454 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	33b0      	adds	r3, #176	; 0xb0
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01a      	beq.n	8006452 <USBD_CDC_EP0_RxReady+0x6c>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006422:	2bff      	cmp	r3, #255	; 0xff
 8006424:	d015      	beq.n	8006452 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	33b0      	adds	r3, #176	; 0xb0
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800643e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006446:	b292      	uxth	r2, r2
 8006448:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	22ff      	movs	r2, #255	; 0xff
 800644e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006464:	2182      	movs	r1, #130	; 0x82
 8006466:	4818      	ldr	r0, [pc, #96]	; (80064c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006468:	f000 fd4f 	bl	8006f0a <USBD_GetEpDesc>
 800646c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800646e:	2101      	movs	r1, #1
 8006470:	4815      	ldr	r0, [pc, #84]	; (80064c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006472:	f000 fd4a 	bl	8006f0a <USBD_GetEpDesc>
 8006476:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006478:	2181      	movs	r1, #129	; 0x81
 800647a:	4813      	ldr	r0, [pc, #76]	; (80064c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800647c:	f000 fd45 	bl	8006f0a <USBD_GetEpDesc>
 8006480:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2210      	movs	r2, #16
 800648c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d006      	beq.n	80064a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	2200      	movs	r2, #0
 8006498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800649c:	711a      	strb	r2, [r3, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d006      	beq.n	80064b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064b0:	711a      	strb	r2, [r3, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2243      	movs	r2, #67	; 0x43
 80064ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064bc:	4b02      	ldr	r3, [pc, #8]	; (80064c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20000050 	.word	0x20000050

080064cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064d4:	2182      	movs	r1, #130	; 0x82
 80064d6:	4818      	ldr	r0, [pc, #96]	; (8006538 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064d8:	f000 fd17 	bl	8006f0a <USBD_GetEpDesc>
 80064dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064de:	2101      	movs	r1, #1
 80064e0:	4815      	ldr	r0, [pc, #84]	; (8006538 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064e2:	f000 fd12 	bl	8006f0a <USBD_GetEpDesc>
 80064e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064e8:	2181      	movs	r1, #129	; 0x81
 80064ea:	4813      	ldr	r0, [pc, #76]	; (8006538 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064ec:	f000 fd0d 	bl	8006f0a <USBD_GetEpDesc>
 80064f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	2210      	movs	r2, #16
 80064fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d006      	beq.n	8006512 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	2200      	movs	r2, #0
 8006508:	711a      	strb	r2, [r3, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f042 0202 	orr.w	r2, r2, #2
 8006510:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d006      	beq.n	8006526 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	711a      	strb	r2, [r3, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f042 0202 	orr.w	r2, r2, #2
 8006524:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2243      	movs	r2, #67	; 0x43
 800652a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800652c:	4b02      	ldr	r3, [pc, #8]	; (8006538 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20000050 	.word	0x20000050

0800653c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006544:	2182      	movs	r1, #130	; 0x82
 8006546:	4818      	ldr	r0, [pc, #96]	; (80065a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006548:	f000 fcdf 	bl	8006f0a <USBD_GetEpDesc>
 800654c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800654e:	2101      	movs	r1, #1
 8006550:	4815      	ldr	r0, [pc, #84]	; (80065a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006552:	f000 fcda 	bl	8006f0a <USBD_GetEpDesc>
 8006556:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006558:	2181      	movs	r1, #129	; 0x81
 800655a:	4813      	ldr	r0, [pc, #76]	; (80065a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800655c:	f000 fcd5 	bl	8006f0a <USBD_GetEpDesc>
 8006560:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2210      	movs	r2, #16
 800656c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d006      	beq.n	8006582 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	2200      	movs	r2, #0
 8006578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800657c:	711a      	strb	r2, [r3, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d006      	beq.n	8006596 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006590:	711a      	strb	r2, [r3, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2243      	movs	r2, #67	; 0x43
 800659a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800659c:	4b02      	ldr	r3, [pc, #8]	; (80065a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20000050 	.word	0x20000050

080065ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	220a      	movs	r2, #10
 80065b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80065ba:	4b03      	ldr	r3, [pc, #12]	; (80065c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80065bc:	4618      	mov	r0, r3
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	2000000c 	.word	0x2000000c

080065cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80065dc:	2303      	movs	r3, #3
 80065de:	e009      	b.n	80065f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	33b0      	adds	r3, #176	; 0xb0
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	32b0      	adds	r2, #176	; 0xb0
 8006616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006622:	2303      	movs	r3, #3
 8006624:	e008      	b.n	8006638 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	371c      	adds	r7, #28
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	32b0      	adds	r2, #176	; 0xb0
 8006658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800665c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006664:	2303      	movs	r3, #3
 8006666:	e004      	b.n	8006672 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
	...

08006680 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	32b0      	adds	r2, #176	; 0xb0
 8006692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006696:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006698:	2301      	movs	r3, #1
 800669a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e025      	b.n	80066f2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d11f      	bne.n	80066f0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80066b8:	4b10      	ldr	r3, [pc, #64]	; (80066fc <USBD_CDC_TransmitPacket+0x7c>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	f003 020f 	and.w	r2, r3, #15
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4403      	add	r3, r0
 80066d2:	3318      	adds	r3, #24
 80066d4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80066d6:	4b09      	ldr	r3, [pc, #36]	; (80066fc <USBD_CDC_TransmitPacket+0x7c>)
 80066d8:	7819      	ldrb	r1, [r3, #0]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f001 ffb3 	bl	8008652 <USBD_LL_Transmit>

    ret = USBD_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20000093 	.word	0x20000093

08006700 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	32b0      	adds	r2, #176	; 0xb0
 8006712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006716:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	32b0      	adds	r2, #176	; 0xb0
 8006722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800672a:	2303      	movs	r3, #3
 800672c:	e018      	b.n	8006760 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	7c1b      	ldrb	r3, [r3, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10a      	bne.n	800674c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006736:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <USBD_CDC_ReceivePacket+0x68>)
 8006738:	7819      	ldrb	r1, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 ffa5 	bl	8008694 <USBD_LL_PrepareReceive>
 800674a:	e008      	b.n	800675e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800674c:	4b06      	ldr	r3, [pc, #24]	; (8006768 <USBD_CDC_ReceivePacket+0x68>)
 800674e:	7819      	ldrb	r1, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006756:	2340      	movs	r3, #64	; 0x40
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 ff9b 	bl	8008694 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	20000094 	.word	0x20000094

0800676c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	4613      	mov	r3, r2
 8006778:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006780:	2303      	movs	r3, #3
 8006782:	e01f      	b.n	80067c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	79fa      	ldrb	r2, [r7, #7]
 80067b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f001 fe15 	bl	80083e8 <USBD_LL_Init>
 80067be:	4603      	mov	r3, r0
 80067c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3718      	adds	r7, #24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e025      	b.n	8006830 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	32ae      	adds	r2, #174	; 0xae
 80067f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00f      	beq.n	8006820 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	32ae      	adds	r2, #174	; 0xae
 800680a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006810:	f107 020e 	add.w	r2, r7, #14
 8006814:	4610      	mov	r0, r2
 8006816:	4798      	blx	r3
 8006818:	4602      	mov	r2, r0
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f001 fe1d 	bl	8008480 <USBD_LL_Start>
 8006846:	4603      	mov	r3, r0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006858:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800685a:	4618      	mov	r0, r3
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	460b      	mov	r3, r1
 8006870:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687c:	2b00      	cmp	r3, #0
 800687e:	d009      	beq.n	8006894 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	78fa      	ldrb	r2, [r7, #3]
 800688a:	4611      	mov	r1, r2
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
 8006890:	4603      	mov	r3, r0
 8006892:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006894:	7bfb      	ldrb	r3, [r7, #15]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	78fa      	ldrb	r2, [r7, #3]
 80068b8:	4611      	mov	r1, r2
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	4798      	blx	r3
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80068c4:	2303      	movs	r3, #3
 80068c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 f90e 	bl	8007b06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80068f8:	461a      	mov	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006906:	f003 031f 	and.w	r3, r3, #31
 800690a:	2b02      	cmp	r3, #2
 800690c:	d01a      	beq.n	8006944 <USBD_LL_SetupStage+0x72>
 800690e:	2b02      	cmp	r3, #2
 8006910:	d822      	bhi.n	8006958 <USBD_LL_SetupStage+0x86>
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <USBD_LL_SetupStage+0x4a>
 8006916:	2b01      	cmp	r3, #1
 8006918:	d00a      	beq.n	8006930 <USBD_LL_SetupStage+0x5e>
 800691a:	e01d      	b.n	8006958 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fb65 	bl	8006ff4 <USBD_StdDevReq>
 800692a:	4603      	mov	r3, r0
 800692c:	73fb      	strb	r3, [r7, #15]
      break;
 800692e:	e020      	b.n	8006972 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fbcd 	bl	80070d8 <USBD_StdItfReq>
 800693e:	4603      	mov	r3, r0
 8006940:	73fb      	strb	r3, [r7, #15]
      break;
 8006942:	e016      	b.n	8006972 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fc2f 	bl	80071b0 <USBD_StdEPReq>
 8006952:	4603      	mov	r3, r0
 8006954:	73fb      	strb	r3, [r7, #15]
      break;
 8006956:	e00c      	b.n	8006972 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800695e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006962:	b2db      	uxtb	r3, r3
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 fdea 	bl	8008540 <USBD_LL_StallEP>
 800696c:	4603      	mov	r3, r0
 800696e:	73fb      	strb	r3, [r7, #15]
      break;
 8006970:	bf00      	nop
  }

  return ret;
 8006972:	7bfb      	ldrb	r3, [r7, #15]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	460b      	mov	r3, r1
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800698e:	7afb      	ldrb	r3, [r7, #11]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d16e      	bne.n	8006a72 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800699a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	f040 8098 	bne.w	8006ad8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d913      	bls.n	80069dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	689a      	ldr	r2, [r3, #8]
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	1ad2      	subs	r2, r2, r3
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	4293      	cmp	r3, r2
 80069cc:	bf28      	it	cs
 80069ce:	4613      	movcs	r3, r2
 80069d0:	461a      	mov	r2, r3
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f001 f98a 	bl	8007cee <USBD_CtlContinueRx>
 80069da:	e07d      	b.n	8006ad8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069e2:	f003 031f 	and.w	r3, r3, #31
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d014      	beq.n	8006a14 <USBD_LL_DataOutStage+0x98>
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d81d      	bhi.n	8006a2a <USBD_LL_DataOutStage+0xae>
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <USBD_LL_DataOutStage+0x7c>
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d003      	beq.n	80069fe <USBD_LL_DataOutStage+0x82>
 80069f6:	e018      	b.n	8006a2a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	75bb      	strb	r3, [r7, #22]
            break;
 80069fc:	e018      	b.n	8006a30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	4619      	mov	r1, r3
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 fa64 	bl	8006ed6 <USBD_CoreFindIF>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	75bb      	strb	r3, [r7, #22]
            break;
 8006a12:	e00d      	b.n	8006a30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 fa66 	bl	8006ef0 <USBD_CoreFindEP>
 8006a24:	4603      	mov	r3, r0
 8006a26:	75bb      	strb	r3, [r7, #22]
            break;
 8006a28:	e002      	b.n	8006a30 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	75bb      	strb	r3, [r7, #22]
            break;
 8006a2e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a30:	7dbb      	ldrb	r3, [r7, #22]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d119      	bne.n	8006a6a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d113      	bne.n	8006a6a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a42:	7dba      	ldrb	r2, [r7, #22]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	32ae      	adds	r2, #174	; 0xae
 8006a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00b      	beq.n	8006a6a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a52:	7dba      	ldrb	r2, [r7, #22]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a5a:	7dba      	ldrb	r2, [r7, #22]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	32ae      	adds	r2, #174	; 0xae
 8006a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f001 f950 	bl	8007d10 <USBD_CtlSendStatus>
 8006a70:	e032      	b.n	8006ad8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a72:	7afb      	ldrb	r3, [r7, #11]
 8006a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 fa37 	bl	8006ef0 <USBD_CoreFindEP>
 8006a82:	4603      	mov	r3, r0
 8006a84:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a86:	7dbb      	ldrb	r3, [r7, #22]
 8006a88:	2bff      	cmp	r3, #255	; 0xff
 8006a8a:	d025      	beq.n	8006ad8 <USBD_LL_DataOutStage+0x15c>
 8006a8c:	7dbb      	ldrb	r3, [r7, #22]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d122      	bne.n	8006ad8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d117      	bne.n	8006ace <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a9e:	7dba      	ldrb	r2, [r7, #22]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	32ae      	adds	r2, #174	; 0xae
 8006aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00f      	beq.n	8006ace <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006aae:	7dba      	ldrb	r2, [r7, #22]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006ab6:	7dba      	ldrb	r2, [r7, #22]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	32ae      	adds	r2, #174	; 0xae
 8006abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	7afa      	ldrb	r2, [r7, #11]
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	4798      	blx	r3
 8006aca:	4603      	mov	r3, r0
 8006acc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	e000      	b.n	8006ada <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b086      	sub	sp, #24
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	460b      	mov	r3, r1
 8006aec:	607a      	str	r2, [r7, #4]
 8006aee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006af0:	7afb      	ldrb	r3, [r7, #11]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d16f      	bne.n	8006bd6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	3314      	adds	r3, #20
 8006afa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d15a      	bne.n	8006bbc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	689a      	ldr	r2, [r3, #8]
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d914      	bls.n	8006b3c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	1ad2      	subs	r2, r2, r3
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	461a      	mov	r2, r3
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f001 f8b2 	bl	8007c92 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2200      	movs	r2, #0
 8006b32:	2100      	movs	r1, #0
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f001 fdad 	bl	8008694 <USBD_LL_PrepareReceive>
 8006b3a:	e03f      	b.n	8006bbc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d11c      	bne.n	8006b82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d316      	bcc.n	8006b82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d20f      	bcs.n	8006b82 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b62:	2200      	movs	r2, #0
 8006b64:	2100      	movs	r1, #0
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f001 f893 	bl	8007c92 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b74:	2300      	movs	r3, #0
 8006b76:	2200      	movs	r2, #0
 8006b78:	2100      	movs	r1, #0
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f001 fd8a 	bl	8008694 <USBD_LL_PrepareReceive>
 8006b80:	e01c      	b.n	8006bbc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d10f      	bne.n	8006bae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d009      	beq.n	8006bae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bae:	2180      	movs	r1, #128	; 0x80
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f001 fcc5 	bl	8008540 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f001 f8bd 	bl	8007d36 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d03a      	beq.n	8006c3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f7ff fe42 	bl	8006850 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006bd4:	e032      	b.n	8006c3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006bd6:	7afb      	ldrb	r3, [r7, #11]
 8006bd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	4619      	mov	r1, r3
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f985 	bl	8006ef0 <USBD_CoreFindEP>
 8006be6:	4603      	mov	r3, r0
 8006be8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bea:	7dfb      	ldrb	r3, [r7, #23]
 8006bec:	2bff      	cmp	r3, #255	; 0xff
 8006bee:	d025      	beq.n	8006c3c <USBD_LL_DataInStage+0x15a>
 8006bf0:	7dfb      	ldrb	r3, [r7, #23]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d122      	bne.n	8006c3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d11c      	bne.n	8006c3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006c02:	7dfa      	ldrb	r2, [r7, #23]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	32ae      	adds	r2, #174	; 0xae
 8006c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d014      	beq.n	8006c3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006c12:	7dfa      	ldrb	r2, [r7, #23]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006c1a:	7dfa      	ldrb	r2, [r7, #23]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	32ae      	adds	r2, #174	; 0xae
 8006c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	7afa      	ldrb	r2, [r7, #11]
 8006c28:	4611      	mov	r1, r2
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	4798      	blx	r3
 8006c2e:	4603      	mov	r3, r0
 8006c30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c32:	7dbb      	ldrb	r3, [r7, #22]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006c38:	7dbb      	ldrb	r3, [r7, #22]
 8006c3a:	e000      	b.n	8006c3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d014      	beq.n	8006cac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00e      	beq.n	8006cac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6852      	ldr	r2, [r2, #4]
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	4798      	blx	r3
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cac:	2340      	movs	r3, #64	; 0x40
 8006cae:	2200      	movs	r2, #0
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f001 fbff 	bl	80084b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2240      	movs	r2, #64	; 0x40
 8006cc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cc8:	2340      	movs	r3, #64	; 0x40
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2180      	movs	r1, #128	; 0x80
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 fbf1 	bl	80084b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2240      	movs	r2, #64	; 0x40
 8006cde:	621a      	str	r2, [r3, #32]

  return ret;
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	78fa      	ldrb	r2, [r7, #3]
 8006cfa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d006      	beq.n	8006d2c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2204      	movs	r2, #4
 8006d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	d106      	bne.n	8006d64 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d110      	bne.n	8006da8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00b      	beq.n	8006da8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d005      	beq.n	8006da8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da2:	69db      	ldr	r3, [r3, #28]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b082      	sub	sp, #8
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	460b      	mov	r3, r1
 8006dbc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	32ae      	adds	r2, #174	; 0xae
 8006dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e01c      	b.n	8006e0e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d115      	bne.n	8006e0c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	32ae      	adds	r2, #174	; 0xae
 8006dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00b      	beq.n	8006e0c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	32ae      	adds	r2, #174	; 0xae
 8006dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	78fa      	ldrb	r2, [r7, #3]
 8006e06:	4611      	mov	r1, r2
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	32ae      	adds	r2, #174	; 0xae
 8006e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e01c      	b.n	8006e72 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	d115      	bne.n	8006e70 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	32ae      	adds	r2, #174	; 0xae
 8006e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00b      	beq.n	8006e70 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	32ae      	adds	r2, #174	; 0xae
 8006e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e68:	78fa      	ldrb	r2, [r7, #3]
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00e      	beq.n	8006ecc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6852      	ldr	r2, [r2, #4]
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4798      	blx	r3
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	460b      	mov	r3, r1
 8006ee0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ee2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006efc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b086      	sub	sp, #24
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	885b      	ldrh	r3, [r3, #2]
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d920      	bls.n	8006f74 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006f3a:	e013      	b.n	8006f64 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006f3c:	f107 030a 	add.w	r3, r7, #10
 8006f40:	4619      	mov	r1, r3
 8006f42:	6978      	ldr	r0, [r7, #20]
 8006f44:	f000 f81b 	bl	8006f7e <USBD_GetNextDesc>
 8006f48:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	785b      	ldrb	r3, [r3, #1]
 8006f4e:	2b05      	cmp	r3, #5
 8006f50:	d108      	bne.n	8006f64 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	789b      	ldrb	r3, [r3, #2]
 8006f5a:	78fa      	ldrb	r2, [r7, #3]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d008      	beq.n	8006f72 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f60:	2300      	movs	r3, #0
 8006f62:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	885b      	ldrh	r3, [r3, #2]
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	897b      	ldrh	r3, [r7, #10]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d8e5      	bhi.n	8006f3c <USBD_GetEpDesc+0x32>
 8006f70:	e000      	b.n	8006f74 <USBD_GetEpDesc+0x6a>
          break;
 8006f72:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f74:	693b      	ldr	r3, [r7, #16]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b085      	sub	sp, #20
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	881a      	ldrh	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	4413      	add	r3, r2
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006faa:	68fb      	ldr	r3, [r7, #12]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006fd6:	8a3b      	ldrh	r3, [r7, #16]
 8006fd8:	021b      	lsls	r3, r3, #8
 8006fda:	b21a      	sxth	r2, r3
 8006fdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	b21b      	sxth	r3, r3
 8006fe4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006fe6:	89fb      	ldrh	r3, [r7, #14]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800700a:	2b40      	cmp	r3, #64	; 0x40
 800700c:	d005      	beq.n	800701a <USBD_StdDevReq+0x26>
 800700e:	2b40      	cmp	r3, #64	; 0x40
 8007010:	d857      	bhi.n	80070c2 <USBD_StdDevReq+0xce>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00f      	beq.n	8007036 <USBD_StdDevReq+0x42>
 8007016:	2b20      	cmp	r3, #32
 8007018:	d153      	bne.n	80070c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	32ae      	adds	r2, #174	; 0xae
 8007024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	4798      	blx	r3
 8007030:	4603      	mov	r3, r0
 8007032:	73fb      	strb	r3, [r7, #15]
      break;
 8007034:	e04a      	b.n	80070cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	785b      	ldrb	r3, [r3, #1]
 800703a:	2b09      	cmp	r3, #9
 800703c:	d83b      	bhi.n	80070b6 <USBD_StdDevReq+0xc2>
 800703e:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <USBD_StdDevReq+0x50>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	08007099 	.word	0x08007099
 8007048:	080070ad 	.word	0x080070ad
 800704c:	080070b7 	.word	0x080070b7
 8007050:	080070a3 	.word	0x080070a3
 8007054:	080070b7 	.word	0x080070b7
 8007058:	08007077 	.word	0x08007077
 800705c:	0800706d 	.word	0x0800706d
 8007060:	080070b7 	.word	0x080070b7
 8007064:	0800708f 	.word	0x0800708f
 8007068:	08007081 	.word	0x08007081
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fa3c 	bl	80074ec <USBD_GetDescriptor>
          break;
 8007074:	e024      	b.n	80070c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fba1 	bl	80077c0 <USBD_SetAddress>
          break;
 800707e:	e01f      	b.n	80070c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fbe0 	bl	8007848 <USBD_SetConfig>
 8007088:	4603      	mov	r3, r0
 800708a:	73fb      	strb	r3, [r7, #15]
          break;
 800708c:	e018      	b.n	80070c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fc83 	bl	800799c <USBD_GetConfig>
          break;
 8007096:	e013      	b.n	80070c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007098:	6839      	ldr	r1, [r7, #0]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fcb4 	bl	8007a08 <USBD_GetStatus>
          break;
 80070a0:	e00e      	b.n	80070c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fce3 	bl	8007a70 <USBD_SetFeature>
          break;
 80070aa:	e009      	b.n	80070c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fd07 	bl	8007ac2 <USBD_ClrFeature>
          break;
 80070b4:	e004      	b.n	80070c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fd5e 	bl	8007b7a <USBD_CtlError>
          break;
 80070be:	bf00      	nop
      }
      break;
 80070c0:	e004      	b.n	80070cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fd58 	bl	8007b7a <USBD_CtlError>
      break;
 80070ca:	bf00      	nop
  }

  return ret;
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop

080070d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070ee:	2b40      	cmp	r3, #64	; 0x40
 80070f0:	d005      	beq.n	80070fe <USBD_StdItfReq+0x26>
 80070f2:	2b40      	cmp	r3, #64	; 0x40
 80070f4:	d852      	bhi.n	800719c <USBD_StdItfReq+0xc4>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <USBD_StdItfReq+0x26>
 80070fa:	2b20      	cmp	r3, #32
 80070fc:	d14e      	bne.n	800719c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007104:	b2db      	uxtb	r3, r3
 8007106:	3b01      	subs	r3, #1
 8007108:	2b02      	cmp	r3, #2
 800710a:	d840      	bhi.n	800718e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	889b      	ldrh	r3, [r3, #4]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b01      	cmp	r3, #1
 8007114:	d836      	bhi.n	8007184 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	889b      	ldrh	r3, [r3, #4]
 800711a:	b2db      	uxtb	r3, r3
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff fed9 	bl	8006ed6 <USBD_CoreFindIF>
 8007124:	4603      	mov	r3, r0
 8007126:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	2bff      	cmp	r3, #255	; 0xff
 800712c:	d01d      	beq.n	800716a <USBD_StdItfReq+0x92>
 800712e:	7bbb      	ldrb	r3, [r7, #14]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d11a      	bne.n	800716a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007134:	7bba      	ldrb	r2, [r7, #14]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	32ae      	adds	r2, #174	; 0xae
 800713a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00f      	beq.n	8007164 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007144:	7bba      	ldrb	r2, [r7, #14]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800714c:	7bba      	ldrb	r2, [r7, #14]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	32ae      	adds	r2, #174	; 0xae
 8007152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	4798      	blx	r3
 800715e:	4603      	mov	r3, r0
 8007160:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007162:	e004      	b.n	800716e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007164:	2303      	movs	r3, #3
 8007166:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007168:	e001      	b.n	800716e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800716a:	2303      	movs	r3, #3
 800716c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	88db      	ldrh	r3, [r3, #6]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d110      	bne.n	8007198 <USBD_StdItfReq+0xc0>
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10d      	bne.n	8007198 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fdc7 	bl	8007d10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007182:	e009      	b.n	8007198 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fcf7 	bl	8007b7a <USBD_CtlError>
          break;
 800718c:	e004      	b.n	8007198 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fcf2 	bl	8007b7a <USBD_CtlError>
          break;
 8007196:	e000      	b.n	800719a <USBD_StdItfReq+0xc2>
          break;
 8007198:	bf00      	nop
      }
      break;
 800719a:	e004      	b.n	80071a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fceb 	bl	8007b7a <USBD_CtlError>
      break;
 80071a4:	bf00      	nop
  }

  return ret;
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	889b      	ldrh	r3, [r3, #4]
 80071c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071cc:	2b40      	cmp	r3, #64	; 0x40
 80071ce:	d007      	beq.n	80071e0 <USBD_StdEPReq+0x30>
 80071d0:	2b40      	cmp	r3, #64	; 0x40
 80071d2:	f200 817f 	bhi.w	80074d4 <USBD_StdEPReq+0x324>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d02a      	beq.n	8007230 <USBD_StdEPReq+0x80>
 80071da:	2b20      	cmp	r3, #32
 80071dc:	f040 817a 	bne.w	80074d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7ff fe83 	bl	8006ef0 <USBD_CoreFindEP>
 80071ea:	4603      	mov	r3, r0
 80071ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071ee:	7b7b      	ldrb	r3, [r7, #13]
 80071f0:	2bff      	cmp	r3, #255	; 0xff
 80071f2:	f000 8174 	beq.w	80074de <USBD_StdEPReq+0x32e>
 80071f6:	7b7b      	ldrb	r3, [r7, #13]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f040 8170 	bne.w	80074de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80071fe:	7b7a      	ldrb	r2, [r7, #13]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007206:	7b7a      	ldrb	r2, [r7, #13]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	32ae      	adds	r2, #174	; 0xae
 800720c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 8163 	beq.w	80074de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007218:	7b7a      	ldrb	r2, [r7, #13]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	32ae      	adds	r2, #174	; 0xae
 800721e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3
 800722a:	4603      	mov	r3, r0
 800722c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800722e:	e156      	b.n	80074de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	785b      	ldrb	r3, [r3, #1]
 8007234:	2b03      	cmp	r3, #3
 8007236:	d008      	beq.n	800724a <USBD_StdEPReq+0x9a>
 8007238:	2b03      	cmp	r3, #3
 800723a:	f300 8145 	bgt.w	80074c8 <USBD_StdEPReq+0x318>
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 809b 	beq.w	800737a <USBD_StdEPReq+0x1ca>
 8007244:	2b01      	cmp	r3, #1
 8007246:	d03c      	beq.n	80072c2 <USBD_StdEPReq+0x112>
 8007248:	e13e      	b.n	80074c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d002      	beq.n	800725c <USBD_StdEPReq+0xac>
 8007256:	2b03      	cmp	r3, #3
 8007258:	d016      	beq.n	8007288 <USBD_StdEPReq+0xd8>
 800725a:	e02c      	b.n	80072b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00d      	beq.n	800727e <USBD_StdEPReq+0xce>
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	2b80      	cmp	r3, #128	; 0x80
 8007266:	d00a      	beq.n	800727e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f001 f967 	bl	8008540 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007272:	2180      	movs	r1, #128	; 0x80
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 f963 	bl	8008540 <USBD_LL_StallEP>
 800727a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800727c:	e020      	b.n	80072c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fc7a 	bl	8007b7a <USBD_CtlError>
              break;
 8007286:	e01b      	b.n	80072c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	885b      	ldrh	r3, [r3, #2]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10e      	bne.n	80072ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00b      	beq.n	80072ae <USBD_StdEPReq+0xfe>
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2b80      	cmp	r3, #128	; 0x80
 800729a:	d008      	beq.n	80072ae <USBD_StdEPReq+0xfe>
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	88db      	ldrh	r3, [r3, #6]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d104      	bne.n	80072ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 f949 	bl	8008540 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fd2e 	bl	8007d10 <USBD_CtlSendStatus>

              break;
 80072b4:	e004      	b.n	80072c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fc5e 	bl	8007b7a <USBD_CtlError>
              break;
 80072be:	bf00      	nop
          }
          break;
 80072c0:	e107      	b.n	80074d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d002      	beq.n	80072d4 <USBD_StdEPReq+0x124>
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d016      	beq.n	8007300 <USBD_StdEPReq+0x150>
 80072d2:	e04b      	b.n	800736c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00d      	beq.n	80072f6 <USBD_StdEPReq+0x146>
 80072da:	7bbb      	ldrb	r3, [r7, #14]
 80072dc:	2b80      	cmp	r3, #128	; 0x80
 80072de:	d00a      	beq.n	80072f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	4619      	mov	r1, r3
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 f92b 	bl	8008540 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072ea:	2180      	movs	r1, #128	; 0x80
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f001 f927 	bl	8008540 <USBD_LL_StallEP>
 80072f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072f4:	e040      	b.n	8007378 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fc3e 	bl	8007b7a <USBD_CtlError>
              break;
 80072fe:	e03b      	b.n	8007378 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	885b      	ldrh	r3, [r3, #2]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d136      	bne.n	8007376 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007308:	7bbb      	ldrb	r3, [r7, #14]
 800730a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800730e:	2b00      	cmp	r3, #0
 8007310:	d004      	beq.n	800731c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 f931 	bl	800857e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fcf7 	bl	8007d10 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7ff fde2 	bl	8006ef0 <USBD_CoreFindEP>
 800732c:	4603      	mov	r3, r0
 800732e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007330:	7b7b      	ldrb	r3, [r7, #13]
 8007332:	2bff      	cmp	r3, #255	; 0xff
 8007334:	d01f      	beq.n	8007376 <USBD_StdEPReq+0x1c6>
 8007336:	7b7b      	ldrb	r3, [r7, #13]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d11c      	bne.n	8007376 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800733c:	7b7a      	ldrb	r2, [r7, #13]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007344:	7b7a      	ldrb	r2, [r7, #13]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	32ae      	adds	r2, #174	; 0xae
 800734a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d010      	beq.n	8007376 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007354:	7b7a      	ldrb	r2, [r7, #13]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	32ae      	adds	r2, #174	; 0xae
 800735a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	4798      	blx	r3
 8007366:	4603      	mov	r3, r0
 8007368:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800736a:	e004      	b.n	8007376 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fc03 	bl	8007b7a <USBD_CtlError>
              break;
 8007374:	e000      	b.n	8007378 <USBD_StdEPReq+0x1c8>
              break;
 8007376:	bf00      	nop
          }
          break;
 8007378:	e0ab      	b.n	80074d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b02      	cmp	r3, #2
 8007384:	d002      	beq.n	800738c <USBD_StdEPReq+0x1dc>
 8007386:	2b03      	cmp	r3, #3
 8007388:	d032      	beq.n	80073f0 <USBD_StdEPReq+0x240>
 800738a:	e097      	b.n	80074bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d007      	beq.n	80073a2 <USBD_StdEPReq+0x1f2>
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	2b80      	cmp	r3, #128	; 0x80
 8007396:	d004      	beq.n	80073a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fbed 	bl	8007b7a <USBD_CtlError>
                break;
 80073a0:	e091      	b.n	80074c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	da0b      	bge.n	80073c2 <USBD_StdEPReq+0x212>
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	3310      	adds	r3, #16
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	3304      	adds	r3, #4
 80073c0:	e00b      	b.n	80073da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073c2:	7bbb      	ldrb	r3, [r7, #14]
 80073c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073c8:	4613      	mov	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	4413      	add	r3, r2
 80073d8:	3304      	adds	r3, #4
 80073da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	2202      	movs	r2, #2
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fc37 	bl	8007c5c <USBD_CtlSendData>
              break;
 80073ee:	e06a      	b.n	80074c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	da11      	bge.n	800741c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	f003 020f 	and.w	r2, r3, #15
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	440b      	add	r3, r1
 800740a:	3324      	adds	r3, #36	; 0x24
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d117      	bne.n	8007442 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fbb0 	bl	8007b7a <USBD_CtlError>
                  break;
 800741a:	e054      	b.n	80074c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800741c:	7bbb      	ldrb	r3, [r7, #14]
 800741e:	f003 020f 	and.w	r2, r3, #15
 8007422:	6879      	ldr	r1, [r7, #4]
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	440b      	add	r3, r1
 800742e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d104      	bne.n	8007442 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fb9d 	bl	8007b7a <USBD_CtlError>
                  break;
 8007440:	e041      	b.n	80074c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007446:	2b00      	cmp	r3, #0
 8007448:	da0b      	bge.n	8007462 <USBD_StdEPReq+0x2b2>
 800744a:	7bbb      	ldrb	r3, [r7, #14]
 800744c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007450:	4613      	mov	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	3310      	adds	r3, #16
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	4413      	add	r3, r2
 800745e:	3304      	adds	r3, #4
 8007460:	e00b      	b.n	800747a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007462:	7bbb      	ldrb	r3, [r7, #14]
 8007464:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007468:	4613      	mov	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	4413      	add	r3, r2
 8007478:	3304      	adds	r3, #4
 800747a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800747c:	7bbb      	ldrb	r3, [r7, #14]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <USBD_StdEPReq+0x2d8>
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	2b80      	cmp	r3, #128	; 0x80
 8007486:	d103      	bne.n	8007490 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	e00e      	b.n	80074ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007490:	7bbb      	ldrb	r3, [r7, #14]
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f001 f891 	bl	80085bc <USBD_LL_IsStallEP>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d003      	beq.n	80074a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2201      	movs	r2, #1
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	e002      	b.n	80074ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2202      	movs	r2, #2
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fbd1 	bl	8007c5c <USBD_CtlSendData>
              break;
 80074ba:	e004      	b.n	80074c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fb5b 	bl	8007b7a <USBD_CtlError>
              break;
 80074c4:	bf00      	nop
          }
          break;
 80074c6:	e004      	b.n	80074d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fb55 	bl	8007b7a <USBD_CtlError>
          break;
 80074d0:	bf00      	nop
      }
      break;
 80074d2:	e005      	b.n	80074e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fb4f 	bl	8007b7a <USBD_CtlError>
      break;
 80074dc:	e000      	b.n	80074e0 <USBD_StdEPReq+0x330>
      break;
 80074de:	bf00      	nop
  }

  return ret;
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
	...

080074ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	885b      	ldrh	r3, [r3, #2]
 8007506:	0a1b      	lsrs	r3, r3, #8
 8007508:	b29b      	uxth	r3, r3
 800750a:	3b01      	subs	r3, #1
 800750c:	2b06      	cmp	r3, #6
 800750e:	f200 8128 	bhi.w	8007762 <USBD_GetDescriptor+0x276>
 8007512:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <USBD_GetDescriptor+0x2c>)
 8007514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007518:	08007535 	.word	0x08007535
 800751c:	0800754d 	.word	0x0800754d
 8007520:	0800758d 	.word	0x0800758d
 8007524:	08007763 	.word	0x08007763
 8007528:	08007763 	.word	0x08007763
 800752c:	08007703 	.word	0x08007703
 8007530:	0800772f 	.word	0x0800772f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	7c12      	ldrb	r2, [r2, #16]
 8007540:	f107 0108 	add.w	r1, r7, #8
 8007544:	4610      	mov	r0, r2
 8007546:	4798      	blx	r3
 8007548:	60f8      	str	r0, [r7, #12]
      break;
 800754a:	e112      	b.n	8007772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	7c1b      	ldrb	r3, [r3, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10d      	bne.n	8007570 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755c:	f107 0208 	add.w	r2, r7, #8
 8007560:	4610      	mov	r0, r2
 8007562:	4798      	blx	r3
 8007564:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3301      	adds	r3, #1
 800756a:	2202      	movs	r2, #2
 800756c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800756e:	e100      	b.n	8007772 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007578:	f107 0208 	add.w	r2, r7, #8
 800757c:	4610      	mov	r0, r2
 800757e:	4798      	blx	r3
 8007580:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	3301      	adds	r3, #1
 8007586:	2202      	movs	r2, #2
 8007588:	701a      	strb	r2, [r3, #0]
      break;
 800758a:	e0f2      	b.n	8007772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	885b      	ldrh	r3, [r3, #2]
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b05      	cmp	r3, #5
 8007594:	f200 80ac 	bhi.w	80076f0 <USBD_GetDescriptor+0x204>
 8007598:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <USBD_GetDescriptor+0xb4>)
 800759a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759e:	bf00      	nop
 80075a0:	080075b9 	.word	0x080075b9
 80075a4:	080075ed 	.word	0x080075ed
 80075a8:	08007621 	.word	0x08007621
 80075ac:	08007655 	.word	0x08007655
 80075b0:	08007689 	.word	0x08007689
 80075b4:	080076bd 	.word	0x080076bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00b      	beq.n	80075dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	7c12      	ldrb	r2, [r2, #16]
 80075d0:	f107 0108 	add.w	r1, r7, #8
 80075d4:	4610      	mov	r0, r2
 80075d6:	4798      	blx	r3
 80075d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075da:	e091      	b.n	8007700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 facb 	bl	8007b7a <USBD_CtlError>
            err++;
 80075e4:	7afb      	ldrb	r3, [r7, #11]
 80075e6:	3301      	adds	r3, #1
 80075e8:	72fb      	strb	r3, [r7, #11]
          break;
 80075ea:	e089      	b.n	8007700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00b      	beq.n	8007610 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	7c12      	ldrb	r2, [r2, #16]
 8007604:	f107 0108 	add.w	r1, r7, #8
 8007608:	4610      	mov	r0, r2
 800760a:	4798      	blx	r3
 800760c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800760e:	e077      	b.n	8007700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fab1 	bl	8007b7a <USBD_CtlError>
            err++;
 8007618:	7afb      	ldrb	r3, [r7, #11]
 800761a:	3301      	adds	r3, #1
 800761c:	72fb      	strb	r3, [r7, #11]
          break;
 800761e:	e06f      	b.n	8007700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00b      	beq.n	8007644 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	7c12      	ldrb	r2, [r2, #16]
 8007638:	f107 0108 	add.w	r1, r7, #8
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
 8007640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007642:	e05d      	b.n	8007700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fa97 	bl	8007b7a <USBD_CtlError>
            err++;
 800764c:	7afb      	ldrb	r3, [r7, #11]
 800764e:	3301      	adds	r3, #1
 8007650:	72fb      	strb	r3, [r7, #11]
          break;
 8007652:	e055      	b.n	8007700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00b      	beq.n	8007678 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	7c12      	ldrb	r2, [r2, #16]
 800766c:	f107 0108 	add.w	r1, r7, #8
 8007670:	4610      	mov	r0, r2
 8007672:	4798      	blx	r3
 8007674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007676:	e043      	b.n	8007700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fa7d 	bl	8007b7a <USBD_CtlError>
            err++;
 8007680:	7afb      	ldrb	r3, [r7, #11]
 8007682:	3301      	adds	r3, #1
 8007684:	72fb      	strb	r3, [r7, #11]
          break;
 8007686:	e03b      	b.n	8007700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00b      	beq.n	80076ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	7c12      	ldrb	r2, [r2, #16]
 80076a0:	f107 0108 	add.w	r1, r7, #8
 80076a4:	4610      	mov	r0, r2
 80076a6:	4798      	blx	r3
 80076a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076aa:	e029      	b.n	8007700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fa63 	bl	8007b7a <USBD_CtlError>
            err++;
 80076b4:	7afb      	ldrb	r3, [r7, #11]
 80076b6:	3301      	adds	r3, #1
 80076b8:	72fb      	strb	r3, [r7, #11]
          break;
 80076ba:	e021      	b.n	8007700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00b      	beq.n	80076e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	7c12      	ldrb	r2, [r2, #16]
 80076d4:	f107 0108 	add.w	r1, r7, #8
 80076d8:	4610      	mov	r0, r2
 80076da:	4798      	blx	r3
 80076dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076de:	e00f      	b.n	8007700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fa49 	bl	8007b7a <USBD_CtlError>
            err++;
 80076e8:	7afb      	ldrb	r3, [r7, #11]
 80076ea:	3301      	adds	r3, #1
 80076ec:	72fb      	strb	r3, [r7, #11]
          break;
 80076ee:	e007      	b.n	8007700 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fa41 	bl	8007b7a <USBD_CtlError>
          err++;
 80076f8:	7afb      	ldrb	r3, [r7, #11]
 80076fa:	3301      	adds	r3, #1
 80076fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80076fe:	bf00      	nop
      }
      break;
 8007700:	e037      	b.n	8007772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	7c1b      	ldrb	r3, [r3, #16]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d109      	bne.n	800771e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007712:	f107 0208 	add.w	r2, r7, #8
 8007716:	4610      	mov	r0, r2
 8007718:	4798      	blx	r3
 800771a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800771c:	e029      	b.n	8007772 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fa2a 	bl	8007b7a <USBD_CtlError>
        err++;
 8007726:	7afb      	ldrb	r3, [r7, #11]
 8007728:	3301      	adds	r3, #1
 800772a:	72fb      	strb	r3, [r7, #11]
      break;
 800772c:	e021      	b.n	8007772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	7c1b      	ldrb	r3, [r3, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10d      	bne.n	8007752 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	f107 0208 	add.w	r2, r7, #8
 8007742:	4610      	mov	r0, r2
 8007744:	4798      	blx	r3
 8007746:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3301      	adds	r3, #1
 800774c:	2207      	movs	r2, #7
 800774e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007750:	e00f      	b.n	8007772 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fa10 	bl	8007b7a <USBD_CtlError>
        err++;
 800775a:	7afb      	ldrb	r3, [r7, #11]
 800775c:	3301      	adds	r3, #1
 800775e:	72fb      	strb	r3, [r7, #11]
      break;
 8007760:	e007      	b.n	8007772 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fa08 	bl	8007b7a <USBD_CtlError>
      err++;
 800776a:	7afb      	ldrb	r3, [r7, #11]
 800776c:	3301      	adds	r3, #1
 800776e:	72fb      	strb	r3, [r7, #11]
      break;
 8007770:	bf00      	nop
  }

  if (err != 0U)
 8007772:	7afb      	ldrb	r3, [r7, #11]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d11e      	bne.n	80077b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	88db      	ldrh	r3, [r3, #6]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d016      	beq.n	80077ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007780:	893b      	ldrh	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00e      	beq.n	80077a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	88da      	ldrh	r2, [r3, #6]
 800778a:	893b      	ldrh	r3, [r7, #8]
 800778c:	4293      	cmp	r3, r2
 800778e:	bf28      	it	cs
 8007790:	4613      	movcs	r3, r2
 8007792:	b29b      	uxth	r3, r3
 8007794:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007796:	893b      	ldrh	r3, [r7, #8]
 8007798:	461a      	mov	r2, r3
 800779a:	68f9      	ldr	r1, [r7, #12]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fa5d 	bl	8007c5c <USBD_CtlSendData>
 80077a2:	e009      	b.n	80077b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f9e7 	bl	8007b7a <USBD_CtlError>
 80077ac:	e004      	b.n	80077b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 faae 	bl	8007d10 <USBD_CtlSendStatus>
 80077b4:	e000      	b.n	80077b8 <USBD_GetDescriptor+0x2cc>
    return;
 80077b6:	bf00      	nop
  }
}
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop

080077c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	889b      	ldrh	r3, [r3, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d131      	bne.n	8007836 <USBD_SetAddress+0x76>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	88db      	ldrh	r3, [r3, #6]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d12d      	bne.n	8007836 <USBD_SetAddress+0x76>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	885b      	ldrh	r3, [r3, #2]
 80077de:	2b7f      	cmp	r3, #127	; 0x7f
 80077e0:	d829      	bhi.n	8007836 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	885b      	ldrh	r3, [r3, #2]
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d104      	bne.n	8007804 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f9bc 	bl	8007b7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007802:	e01d      	b.n	8007840 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	7bfa      	ldrb	r2, [r7, #15]
 8007808:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800780c:	7bfb      	ldrb	r3, [r7, #15]
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 feff 	bl	8008614 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fa7a 	bl	8007d10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d004      	beq.n	800782c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2202      	movs	r2, #2
 8007826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800782a:	e009      	b.n	8007840 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007834:	e004      	b.n	8007840 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f99e 	bl	8007b7a <USBD_CtlError>
  }
}
 800783e:	bf00      	nop
 8007840:	bf00      	nop
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	885b      	ldrh	r3, [r3, #2]
 800785a:	b2da      	uxtb	r2, r3
 800785c:	4b4e      	ldr	r3, [pc, #312]	; (8007998 <USBD_SetConfig+0x150>)
 800785e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007860:	4b4d      	ldr	r3, [pc, #308]	; (8007998 <USBD_SetConfig+0x150>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d905      	bls.n	8007874 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f985 	bl	8007b7a <USBD_CtlError>
    return USBD_FAIL;
 8007870:	2303      	movs	r3, #3
 8007872:	e08c      	b.n	800798e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d002      	beq.n	8007886 <USBD_SetConfig+0x3e>
 8007880:	2b03      	cmp	r3, #3
 8007882:	d029      	beq.n	80078d8 <USBD_SetConfig+0x90>
 8007884:	e075      	b.n	8007972 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007886:	4b44      	ldr	r3, [pc, #272]	; (8007998 <USBD_SetConfig+0x150>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d020      	beq.n	80078d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800788e:	4b42      	ldr	r3, [pc, #264]	; (8007998 <USBD_SetConfig+0x150>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007898:	4b3f      	ldr	r3, [pc, #252]	; (8007998 <USBD_SetConfig+0x150>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7fe ffe1 	bl	8006866 <USBD_SetClassConfig>
 80078a4:	4603      	mov	r3, r0
 80078a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d008      	beq.n	80078c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f962 	bl	8007b7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2202      	movs	r2, #2
 80078ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078be:	e065      	b.n	800798c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fa25 	bl	8007d10 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2203      	movs	r2, #3
 80078ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078ce:	e05d      	b.n	800798c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fa1d 	bl	8007d10 <USBD_CtlSendStatus>
      break;
 80078d6:	e059      	b.n	800798c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80078d8:	4b2f      	ldr	r3, [pc, #188]	; (8007998 <USBD_SetConfig+0x150>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d112      	bne.n	8007906 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80078e8:	4b2b      	ldr	r3, [pc, #172]	; (8007998 <USBD_SetConfig+0x150>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	461a      	mov	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078f2:	4b29      	ldr	r3, [pc, #164]	; (8007998 <USBD_SetConfig+0x150>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7fe ffd0 	bl	800689e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fa06 	bl	8007d10 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007904:	e042      	b.n	800798c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007906:	4b24      	ldr	r3, [pc, #144]	; (8007998 <USBD_SetConfig+0x150>)
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	429a      	cmp	r2, r3
 8007912:	d02a      	beq.n	800796a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	b2db      	uxtb	r3, r3
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7fe ffbe 	bl	800689e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007922:	4b1d      	ldr	r3, [pc, #116]	; (8007998 <USBD_SetConfig+0x150>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800792c:	4b1a      	ldr	r3, [pc, #104]	; (8007998 <USBD_SetConfig+0x150>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fe ff97 	bl	8006866 <USBD_SetClassConfig>
 8007938:	4603      	mov	r3, r0
 800793a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00f      	beq.n	8007962 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f918 	bl	8007b7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	b2db      	uxtb	r3, r3
 8007950:	4619      	mov	r1, r3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7fe ffa3 	bl	800689e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007960:	e014      	b.n	800798c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f9d4 	bl	8007d10 <USBD_CtlSendStatus>
      break;
 8007968:	e010      	b.n	800798c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f9d0 	bl	8007d10 <USBD_CtlSendStatus>
      break;
 8007970:	e00c      	b.n	800798c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f900 	bl	8007b7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800797a:	4b07      	ldr	r3, [pc, #28]	; (8007998 <USBD_SetConfig+0x150>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7fe ff8c 	bl	800689e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007986:	2303      	movs	r3, #3
 8007988:	73fb      	strb	r3, [r7, #15]
      break;
 800798a:	bf00      	nop
  }

  return ret;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	20000674 	.word	0x20000674

0800799c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	88db      	ldrh	r3, [r3, #6]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d004      	beq.n	80079b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80079ae:	6839      	ldr	r1, [r7, #0]
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f8e2 	bl	8007b7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80079b6:	e023      	b.n	8007a00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	dc02      	bgt.n	80079ca <USBD_GetConfig+0x2e>
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	dc03      	bgt.n	80079d0 <USBD_GetConfig+0x34>
 80079c8:	e015      	b.n	80079f6 <USBD_GetConfig+0x5a>
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	d00b      	beq.n	80079e6 <USBD_GetConfig+0x4a>
 80079ce:	e012      	b.n	80079f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	3308      	adds	r3, #8
 80079da:	2201      	movs	r2, #1
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f93c 	bl	8007c5c <USBD_CtlSendData>
        break;
 80079e4:	e00c      	b.n	8007a00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	3304      	adds	r3, #4
 80079ea:	2201      	movs	r2, #1
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f934 	bl	8007c5c <USBD_CtlSendData>
        break;
 80079f4:	e004      	b.n	8007a00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f8be 	bl	8007b7a <USBD_CtlError>
        break;
 80079fe:	bf00      	nop
}
 8007a00:	bf00      	nop
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d81e      	bhi.n	8007a5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	88db      	ldrh	r3, [r3, #6]
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d004      	beq.n	8007a32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f8a5 	bl	8007b7a <USBD_CtlError>
        break;
 8007a30:	e01a      	b.n	8007a68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d005      	beq.n	8007a4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	f043 0202 	orr.w	r2, r3, #2
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	330c      	adds	r3, #12
 8007a52:	2202      	movs	r2, #2
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f900 	bl	8007c5c <USBD_CtlSendData>
      break;
 8007a5c:	e004      	b.n	8007a68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f88a 	bl	8007b7a <USBD_CtlError>
      break;
 8007a66:	bf00      	nop
  }
}
 8007a68:	bf00      	nop
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	885b      	ldrh	r3, [r3, #2]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d107      	bne.n	8007a92 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f940 	bl	8007d10 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a90:	e013      	b.n	8007aba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	885b      	ldrh	r3, [r3, #2]
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d10b      	bne.n	8007ab2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	889b      	ldrh	r3, [r3, #4]
 8007a9e:	0a1b      	lsrs	r3, r3, #8
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f930 	bl	8007d10 <USBD_CtlSendStatus>
}
 8007ab0:	e003      	b.n	8007aba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f860 	bl	8007b7a <USBD_CtlError>
}
 8007aba:	bf00      	nop
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b082      	sub	sp, #8
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d80b      	bhi.n	8007af2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	885b      	ldrh	r3, [r3, #2]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d10c      	bne.n	8007afc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f910 	bl	8007d10 <USBD_CtlSendStatus>
      }
      break;
 8007af0:	e004      	b.n	8007afc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f840 	bl	8007b7a <USBD_CtlError>
      break;
 8007afa:	e000      	b.n	8007afe <USBD_ClrFeature+0x3c>
      break;
 8007afc:	bf00      	nop
  }
}
 8007afe:	bf00      	nop
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b084      	sub	sp, #16
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	781a      	ldrb	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	781a      	ldrb	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f7ff fa41 	bl	8006fb8 <SWAPBYTE>
 8007b36:	4603      	mov	r3, r0
 8007b38:	461a      	mov	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3301      	adds	r3, #1
 8007b42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3301      	adds	r3, #1
 8007b48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f7ff fa34 	bl	8006fb8 <SWAPBYTE>
 8007b50:	4603      	mov	r3, r0
 8007b52:	461a      	mov	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3301      	adds	r3, #1
 8007b62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f7ff fa27 	bl	8006fb8 <SWAPBYTE>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	80da      	strh	r2, [r3, #6]
}
 8007b72:	bf00      	nop
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b082      	sub	sp, #8
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b84:	2180      	movs	r1, #128	; 0x80
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fcda 	bl	8008540 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fcd6 	bl	8008540 <USBD_LL_StallEP>
}
 8007b94:	bf00      	nop
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d036      	beq.n	8007c20 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007bb6:	6938      	ldr	r0, [r7, #16]
 8007bb8:	f000 f836 	bl	8007c28 <USBD_GetLen>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007bca:	7dfb      	ldrb	r3, [r7, #23]
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	4413      	add	r3, r2
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	7812      	ldrb	r2, [r2, #0]
 8007bd4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	4413      	add	r3, r2
 8007be2:	2203      	movs	r2, #3
 8007be4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007be6:	7dfb      	ldrb	r3, [r7, #23]
 8007be8:	3301      	adds	r3, #1
 8007bea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007bec:	e013      	b.n	8007c16 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	7812      	ldrb	r2, [r2, #0]
 8007bf8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	613b      	str	r3, [r7, #16]
    idx++;
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
 8007c02:	3301      	adds	r3, #1
 8007c04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
 8007c12:	3301      	adds	r3, #1
 8007c14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1e7      	bne.n	8007bee <USBD_GetString+0x52>
 8007c1e:	e000      	b.n	8007c22 <USBD_GetString+0x86>
    return;
 8007c20:	bf00      	nop
  }
}
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c38:	e005      	b.n	8007c46 <USBD_GetLen+0x1e>
  {
    len++;
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	3301      	adds	r3, #1
 8007c44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1f5      	bne.n	8007c3a <USBD_GetLen+0x12>
  }

  return len;
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	2100      	movs	r1, #0
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 fce5 	bl	8008652 <USBD_LL_Transmit>

  return USBD_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b084      	sub	sp, #16
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 fcd4 	bl	8008652 <USBD_LL_Transmit>

  return USBD_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2203      	movs	r2, #3
 8007cc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	2100      	movs	r1, #0
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 fcd8 	bl	8008694 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	2100      	movs	r1, #0
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 fcc7 	bl	8008694 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2204      	movs	r2, #4
 8007d1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d20:	2300      	movs	r3, #0
 8007d22:	2200      	movs	r2, #0
 8007d24:	2100      	movs	r1, #0
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fc93 	bl	8008652 <USBD_LL_Transmit>

  return USBD_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2205      	movs	r2, #5
 8007d42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d46:	2300      	movs	r3, #0
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fca1 	bl	8008694 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d60:	2200      	movs	r2, #0
 8007d62:	4912      	ldr	r1, [pc, #72]	; (8007dac <MX_USB_DEVICE_Init+0x50>)
 8007d64:	4812      	ldr	r0, [pc, #72]	; (8007db0 <MX_USB_DEVICE_Init+0x54>)
 8007d66:	f7fe fd01 	bl	800676c <USBD_Init>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d70:	f7f9 fe42 	bl	80019f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d74:	490f      	ldr	r1, [pc, #60]	; (8007db4 <MX_USB_DEVICE_Init+0x58>)
 8007d76:	480e      	ldr	r0, [pc, #56]	; (8007db0 <MX_USB_DEVICE_Init+0x54>)
 8007d78:	f7fe fd28 	bl	80067cc <USBD_RegisterClass>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d82:	f7f9 fe39 	bl	80019f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d86:	490c      	ldr	r1, [pc, #48]	; (8007db8 <MX_USB_DEVICE_Init+0x5c>)
 8007d88:	4809      	ldr	r0, [pc, #36]	; (8007db0 <MX_USB_DEVICE_Init+0x54>)
 8007d8a:	f7fe fc1f 	bl	80065cc <USBD_CDC_RegisterInterface>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d94:	f7f9 fe30 	bl	80019f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d98:	4805      	ldr	r0, [pc, #20]	; (8007db0 <MX_USB_DEVICE_Init+0x54>)
 8007d9a:	f7fe fd4d 	bl	8006838 <USBD_Start>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007da4:	f7f9 fe28 	bl	80019f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007da8:	bf00      	nop
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	200000ac 	.word	0x200000ac
 8007db0:	20000678 	.word	0x20000678
 8007db4:	20000018 	.word	0x20000018
 8007db8:	20000098 	.word	0x20000098

08007dbc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4905      	ldr	r1, [pc, #20]	; (8007dd8 <CDC_Init_FS+0x1c>)
 8007dc4:	4805      	ldr	r0, [pc, #20]	; (8007ddc <CDC_Init_FS+0x20>)
 8007dc6:	f7fe fc1b 	bl	8006600 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007dca:	4905      	ldr	r1, [pc, #20]	; (8007de0 <CDC_Init_FS+0x24>)
 8007dcc:	4803      	ldr	r0, [pc, #12]	; (8007ddc <CDC_Init_FS+0x20>)
 8007dce:	f7fe fc39 	bl	8006644 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007dd2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	20001154 	.word	0x20001154
 8007ddc:	20000678 	.word	0x20000678
 8007de0:	20000954 	.word	0x20000954

08007de4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007de4:	b480      	push	{r7}
 8007de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007de8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	6039      	str	r1, [r7, #0]
 8007dfe:	71fb      	strb	r3, [r7, #7]
 8007e00:	4613      	mov	r3, r2
 8007e02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e04:	79fb      	ldrb	r3, [r7, #7]
 8007e06:	2b23      	cmp	r3, #35	; 0x23
 8007e08:	d84a      	bhi.n	8007ea0 <CDC_Control_FS+0xac>
 8007e0a:	a201      	add	r2, pc, #4	; (adr r2, 8007e10 <CDC_Control_FS+0x1c>)
 8007e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e10:	08007ea1 	.word	0x08007ea1
 8007e14:	08007ea1 	.word	0x08007ea1
 8007e18:	08007ea1 	.word	0x08007ea1
 8007e1c:	08007ea1 	.word	0x08007ea1
 8007e20:	08007ea1 	.word	0x08007ea1
 8007e24:	08007ea1 	.word	0x08007ea1
 8007e28:	08007ea1 	.word	0x08007ea1
 8007e2c:	08007ea1 	.word	0x08007ea1
 8007e30:	08007ea1 	.word	0x08007ea1
 8007e34:	08007ea1 	.word	0x08007ea1
 8007e38:	08007ea1 	.word	0x08007ea1
 8007e3c:	08007ea1 	.word	0x08007ea1
 8007e40:	08007ea1 	.word	0x08007ea1
 8007e44:	08007ea1 	.word	0x08007ea1
 8007e48:	08007ea1 	.word	0x08007ea1
 8007e4c:	08007ea1 	.word	0x08007ea1
 8007e50:	08007ea1 	.word	0x08007ea1
 8007e54:	08007ea1 	.word	0x08007ea1
 8007e58:	08007ea1 	.word	0x08007ea1
 8007e5c:	08007ea1 	.word	0x08007ea1
 8007e60:	08007ea1 	.word	0x08007ea1
 8007e64:	08007ea1 	.word	0x08007ea1
 8007e68:	08007ea1 	.word	0x08007ea1
 8007e6c:	08007ea1 	.word	0x08007ea1
 8007e70:	08007ea1 	.word	0x08007ea1
 8007e74:	08007ea1 	.word	0x08007ea1
 8007e78:	08007ea1 	.word	0x08007ea1
 8007e7c:	08007ea1 	.word	0x08007ea1
 8007e80:	08007ea1 	.word	0x08007ea1
 8007e84:	08007ea1 	.word	0x08007ea1
 8007e88:	08007ea1 	.word	0x08007ea1
 8007e8c:	08007ea1 	.word	0x08007ea1
 8007e90:	08007ea1 	.word	0x08007ea1
 8007e94:	08007ea1 	.word	0x08007ea1
 8007e98:	08007ea1 	.word	0x08007ea1
 8007e9c:	08007ea1 	.word	0x08007ea1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007ea0:	bf00      	nop
  }

  return (USBD_OK);
 8007ea2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007eba:	6879      	ldr	r1, [r7, #4]
 8007ebc:	4807      	ldr	r0, [pc, #28]	; (8007edc <CDC_Receive_FS+0x2c>)
 8007ebe:	f7fe fbc1 	bl	8006644 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007ec2:	4806      	ldr	r0, [pc, #24]	; (8007edc <CDC_Receive_FS+0x2c>)
 8007ec4:	f7fe fc1c 	bl	8006700 <USBD_CDC_ReceivePacket>
  //CDC_Transmit_FS(Buf, *Len);
  USB_VCP_ReceiveCallback(Buf,Len);
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7f9 f8da 	bl	8001084 <USB_VCP_ReceiveCallback>
  return (USBD_OK);
 8007ed0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	20000678 	.word	0x20000678

08007ee0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007ef0:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <CDC_Transmit_FS+0x48>)
 8007ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ef6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e00b      	b.n	8007f1e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f06:	887b      	ldrh	r3, [r7, #2]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	4806      	ldr	r0, [pc, #24]	; (8007f28 <CDC_Transmit_FS+0x48>)
 8007f0e:	f7fe fb77 	bl	8006600 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f12:	4805      	ldr	r0, [pc, #20]	; (8007f28 <CDC_Transmit_FS+0x48>)
 8007f14:	f7fe fbb4 	bl	8006680 <USBD_CDC_TransmitPacket>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20000678 	.word	0x20000678

08007f2c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	4613      	mov	r3, r2
 8007f38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	75fb      	strb	r3, [r7, #23]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  /* USER CODE END 13 */
  return result;
 8007f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
	...

08007f50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4603      	mov	r3, r0
 8007f58:	6039      	str	r1, [r7, #0]
 8007f5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2212      	movs	r2, #18
 8007f60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f62:	4b03      	ldr	r3, [pc, #12]	; (8007f70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	200000c8 	.word	0x200000c8

08007f74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	6039      	str	r1, [r7, #0]
 8007f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2204      	movs	r2, #4
 8007f84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f86:	4b03      	ldr	r3, [pc, #12]	; (8007f94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	200000dc 	.word	0x200000dc

08007f98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	6039      	str	r1, [r7, #0]
 8007fa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fa4:	79fb      	ldrb	r3, [r7, #7]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d105      	bne.n	8007fb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	4907      	ldr	r1, [pc, #28]	; (8007fcc <USBD_FS_ProductStrDescriptor+0x34>)
 8007fae:	4808      	ldr	r0, [pc, #32]	; (8007fd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fb0:	f7ff fdf4 	bl	8007b9c <USBD_GetString>
 8007fb4:	e004      	b.n	8007fc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	4904      	ldr	r1, [pc, #16]	; (8007fcc <USBD_FS_ProductStrDescriptor+0x34>)
 8007fba:	4805      	ldr	r0, [pc, #20]	; (8007fd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fbc:	f7ff fdee 	bl	8007b9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fc0:	4b02      	ldr	r3, [pc, #8]	; (8007fcc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20001954 	.word	0x20001954
 8007fd0:	0800d114 	.word	0x0800d114

08007fd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	6039      	str	r1, [r7, #0]
 8007fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	4904      	ldr	r1, [pc, #16]	; (8007ff4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007fe4:	4804      	ldr	r0, [pc, #16]	; (8007ff8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007fe6:	f7ff fdd9 	bl	8007b9c <USBD_GetString>
  return USBD_StrDesc;
 8007fea:	4b02      	ldr	r3, [pc, #8]	; (8007ff4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	20001954 	.word	0x20001954
 8007ff8:	0800d12c 	.word	0x0800d12c

08007ffc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	4603      	mov	r3, r0
 8008004:	6039      	str	r1, [r7, #0]
 8008006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	221a      	movs	r2, #26
 800800c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800800e:	f000 f843 	bl	8008098 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008012:	4b02      	ldr	r3, [pc, #8]	; (800801c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	200000e0 	.word	0x200000e0

08008020 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	6039      	str	r1, [r7, #0]
 800802a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d105      	bne.n	800803e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	4907      	ldr	r1, [pc, #28]	; (8008054 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008036:	4808      	ldr	r0, [pc, #32]	; (8008058 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008038:	f7ff fdb0 	bl	8007b9c <USBD_GetString>
 800803c:	e004      	b.n	8008048 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	4904      	ldr	r1, [pc, #16]	; (8008054 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008042:	4805      	ldr	r0, [pc, #20]	; (8008058 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008044:	f7ff fdaa 	bl	8007b9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008048:	4b02      	ldr	r3, [pc, #8]	; (8008054 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800804a:	4618      	mov	r0, r3
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20001954 	.word	0x20001954
 8008058:	0800d140 	.word	0x0800d140

0800805c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	6039      	str	r1, [r7, #0]
 8008066:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008068:	79fb      	ldrb	r3, [r7, #7]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d105      	bne.n	800807a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	4907      	ldr	r1, [pc, #28]	; (8008090 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008072:	4808      	ldr	r0, [pc, #32]	; (8008094 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008074:	f7ff fd92 	bl	8007b9c <USBD_GetString>
 8008078:	e004      	b.n	8008084 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	4904      	ldr	r1, [pc, #16]	; (8008090 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800807e:	4805      	ldr	r0, [pc, #20]	; (8008094 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008080:	f7ff fd8c 	bl	8007b9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008084:	4b02      	ldr	r3, [pc, #8]	; (8008090 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008086:	4618      	mov	r0, r3
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	20001954 	.word	0x20001954
 8008094:	0800d14c 	.word	0x0800d14c

08008098 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800809e:	4b0f      	ldr	r3, [pc, #60]	; (80080dc <Get_SerialNum+0x44>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080a4:	4b0e      	ldr	r3, [pc, #56]	; (80080e0 <Get_SerialNum+0x48>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80080aa:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <Get_SerialNum+0x4c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4413      	add	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d009      	beq.n	80080d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80080be:	2208      	movs	r2, #8
 80080c0:	4909      	ldr	r1, [pc, #36]	; (80080e8 <Get_SerialNum+0x50>)
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 f814 	bl	80080f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80080c8:	2204      	movs	r2, #4
 80080ca:	4908      	ldr	r1, [pc, #32]	; (80080ec <Get_SerialNum+0x54>)
 80080cc:	68b8      	ldr	r0, [r7, #8]
 80080ce:	f000 f80f 	bl	80080f0 <IntToUnicode>
  }
}
 80080d2:	bf00      	nop
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	1fff7a10 	.word	0x1fff7a10
 80080e0:	1fff7a14 	.word	0x1fff7a14
 80080e4:	1fff7a18 	.word	0x1fff7a18
 80080e8:	200000e2 	.word	0x200000e2
 80080ec:	200000f2 	.word	0x200000f2

080080f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	4613      	mov	r3, r2
 80080fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80080fe:	2300      	movs	r3, #0
 8008100:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008102:	2300      	movs	r3, #0
 8008104:	75fb      	strb	r3, [r7, #23]
 8008106:	e027      	b.n	8008158 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	0f1b      	lsrs	r3, r3, #28
 800810c:	2b09      	cmp	r3, #9
 800810e:	d80b      	bhi.n	8008128 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	0f1b      	lsrs	r3, r3, #28
 8008114:	b2da      	uxtb	r2, r3
 8008116:	7dfb      	ldrb	r3, [r7, #23]
 8008118:	005b      	lsls	r3, r3, #1
 800811a:	4619      	mov	r1, r3
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	440b      	add	r3, r1
 8008120:	3230      	adds	r2, #48	; 0x30
 8008122:	b2d2      	uxtb	r2, r2
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	e00a      	b.n	800813e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	0f1b      	lsrs	r3, r3, #28
 800812c:	b2da      	uxtb	r2, r3
 800812e:	7dfb      	ldrb	r3, [r7, #23]
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	4619      	mov	r1, r3
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	440b      	add	r3, r1
 8008138:	3237      	adds	r2, #55	; 0x37
 800813a:	b2d2      	uxtb	r2, r2
 800813c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	011b      	lsls	r3, r3, #4
 8008142:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008144:	7dfb      	ldrb	r3, [r7, #23]
 8008146:	005b      	lsls	r3, r3, #1
 8008148:	3301      	adds	r3, #1
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	4413      	add	r3, r2
 800814e:	2200      	movs	r2, #0
 8008150:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008152:	7dfb      	ldrb	r3, [r7, #23]
 8008154:	3301      	adds	r3, #1
 8008156:	75fb      	strb	r3, [r7, #23]
 8008158:	7dfa      	ldrb	r2, [r7, #23]
 800815a:	79fb      	ldrb	r3, [r7, #7]
 800815c:	429a      	cmp	r2, r3
 800815e:	d3d3      	bcc.n	8008108 <IntToUnicode+0x18>
  }
}
 8008160:	bf00      	nop
 8008162:	bf00      	nop
 8008164:	371c      	adds	r7, #28
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
	...

08008170 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08a      	sub	sp, #40	; 0x28
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008178:	f107 0314 	add.w	r3, r7, #20
 800817c:	2200      	movs	r2, #0
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	605a      	str	r2, [r3, #4]
 8008182:	609a      	str	r2, [r3, #8]
 8008184:	60da      	str	r2, [r3, #12]
 8008186:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008190:	d13a      	bne.n	8008208 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008192:	2300      	movs	r3, #0
 8008194:	613b      	str	r3, [r7, #16]
 8008196:	4b1e      	ldr	r3, [pc, #120]	; (8008210 <HAL_PCD_MspInit+0xa0>)
 8008198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819a:	4a1d      	ldr	r2, [pc, #116]	; (8008210 <HAL_PCD_MspInit+0xa0>)
 800819c:	f043 0301 	orr.w	r3, r3, #1
 80081a0:	6313      	str	r3, [r2, #48]	; 0x30
 80081a2:	4b1b      	ldr	r3, [pc, #108]	; (8008210 <HAL_PCD_MspInit+0xa0>)
 80081a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a6:	f003 0301 	and.w	r3, r3, #1
 80081aa:	613b      	str	r3, [r7, #16]
 80081ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80081ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80081b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081b4:	2302      	movs	r3, #2
 80081b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081b8:	2300      	movs	r3, #0
 80081ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081bc:	2303      	movs	r3, #3
 80081be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80081c0:	230a      	movs	r3, #10
 80081c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081c4:	f107 0314 	add.w	r3, r7, #20
 80081c8:	4619      	mov	r1, r3
 80081ca:	4812      	ldr	r0, [pc, #72]	; (8008214 <HAL_PCD_MspInit+0xa4>)
 80081cc:	f7f9 ff88 	bl	80020e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80081d0:	4b0f      	ldr	r3, [pc, #60]	; (8008210 <HAL_PCD_MspInit+0xa0>)
 80081d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d4:	4a0e      	ldr	r2, [pc, #56]	; (8008210 <HAL_PCD_MspInit+0xa0>)
 80081d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081da:	6353      	str	r3, [r2, #52]	; 0x34
 80081dc:	2300      	movs	r3, #0
 80081de:	60fb      	str	r3, [r7, #12]
 80081e0:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <HAL_PCD_MspInit+0xa0>)
 80081e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e4:	4a0a      	ldr	r2, [pc, #40]	; (8008210 <HAL_PCD_MspInit+0xa0>)
 80081e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081ea:	6453      	str	r3, [r2, #68]	; 0x44
 80081ec:	4b08      	ldr	r3, [pc, #32]	; (8008210 <HAL_PCD_MspInit+0xa0>)
 80081ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081f4:	60fb      	str	r3, [r7, #12]
 80081f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80081f8:	2200      	movs	r2, #0
 80081fa:	2100      	movs	r1, #0
 80081fc:	2043      	movs	r0, #67	; 0x43
 80081fe:	f7f9 ff38 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008202:	2043      	movs	r0, #67	; 0x43
 8008204:	f7f9 ff51 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008208:	bf00      	nop
 800820a:	3728      	adds	r7, #40	; 0x28
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	40023800 	.word	0x40023800
 8008214:	40020000 	.word	0x40020000

08008218 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800822c:	4619      	mov	r1, r3
 800822e:	4610      	mov	r0, r2
 8008230:	f7fe fb4f 	bl	80068d2 <USBD_LL_SetupStage>
}
 8008234:	bf00      	nop
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	460b      	mov	r3, r1
 8008246:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800824e:	78fa      	ldrb	r2, [r7, #3]
 8008250:	6879      	ldr	r1, [r7, #4]
 8008252:	4613      	mov	r3, r2
 8008254:	00db      	lsls	r3, r3, #3
 8008256:	4413      	add	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	440b      	add	r3, r1
 800825c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	78fb      	ldrb	r3, [r7, #3]
 8008264:	4619      	mov	r1, r3
 8008266:	f7fe fb89 	bl	800697c <USBD_LL_DataOutStage>
}
 800826a:	bf00      	nop
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	460b      	mov	r3, r1
 800827c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8008284:	78fa      	ldrb	r2, [r7, #3]
 8008286:	6879      	ldr	r1, [r7, #4]
 8008288:	4613      	mov	r3, r2
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	4413      	add	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	440b      	add	r3, r1
 8008292:	3320      	adds	r3, #32
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	78fb      	ldrb	r3, [r7, #3]
 8008298:	4619      	mov	r1, r3
 800829a:	f7fe fc22 	bl	8006ae2 <USBD_LL_DataInStage>
}
 800829e:	bf00      	nop
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b082      	sub	sp, #8
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fe fd5c 	bl	8006d72 <USBD_LL_SOF>
}
 80082ba:	bf00      	nop
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082ca:	2301      	movs	r3, #1
 80082cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	79db      	ldrb	r3, [r3, #7]
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d001      	beq.n	80082da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80082d6:	f7f9 fb8f 	bl	80019f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80082e0:	7bfa      	ldrb	r2, [r7, #15]
 80082e2:	4611      	mov	r1, r2
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7fe fd00 	bl	8006cea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fe fca8 	bl	8006c46 <USBD_LL_Reset>
}
 80082f6:	bf00      	nop
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
	...

08008300 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800830e:	4618      	mov	r0, r3
 8008310:	f7fe fcfb 	bl	8006d0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	6812      	ldr	r2, [r2, #0]
 8008322:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008326:	f043 0301 	orr.w	r3, r3, #1
 800832a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	7adb      	ldrb	r3, [r3, #11]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d005      	beq.n	8008340 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008334:	4b04      	ldr	r3, [pc, #16]	; (8008348 <HAL_PCD_SuspendCallback+0x48>)
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	4a03      	ldr	r2, [pc, #12]	; (8008348 <HAL_PCD_SuspendCallback+0x48>)
 800833a:	f043 0306 	orr.w	r3, r3, #6
 800833e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008340:	bf00      	nop
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	e000ed00 	.word	0xe000ed00

0800834c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe fcf1 	bl	8006d42 <USBD_LL_Resume>
}
 8008360:	bf00      	nop
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	460b      	mov	r3, r1
 8008372:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800837a:	78fa      	ldrb	r2, [r7, #3]
 800837c:	4611      	mov	r1, r2
 800837e:	4618      	mov	r0, r3
 8008380:	f7fe fd49 	bl	8006e16 <USBD_LL_IsoOUTIncomplete>
}
 8008384:	bf00      	nop
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	460b      	mov	r3, r1
 8008396:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800839e:	78fa      	ldrb	r2, [r7, #3]
 80083a0:	4611      	mov	r1, r2
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fe fd05 	bl	8006db2 <USBD_LL_IsoINIncomplete>
}
 80083a8:	bf00      	nop
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe fd5b 	bl	8006e7a <USBD_LL_DevConnected>
}
 80083c4:	bf00      	nop
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe fd58 	bl	8006e90 <USBD_LL_DevDisconnected>
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d13c      	bne.n	8008472 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80083f8:	4a20      	ldr	r2, [pc, #128]	; (800847c <USBD_LL_Init+0x94>)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a1e      	ldr	r2, [pc, #120]	; (800847c <USBD_LL_Init+0x94>)
 8008404:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008408:	4b1c      	ldr	r3, [pc, #112]	; (800847c <USBD_LL_Init+0x94>)
 800840a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800840e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008410:	4b1a      	ldr	r3, [pc, #104]	; (800847c <USBD_LL_Init+0x94>)
 8008412:	2204      	movs	r2, #4
 8008414:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008416:	4b19      	ldr	r3, [pc, #100]	; (800847c <USBD_LL_Init+0x94>)
 8008418:	2202      	movs	r2, #2
 800841a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800841c:	4b17      	ldr	r3, [pc, #92]	; (800847c <USBD_LL_Init+0x94>)
 800841e:	2200      	movs	r2, #0
 8008420:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008422:	4b16      	ldr	r3, [pc, #88]	; (800847c <USBD_LL_Init+0x94>)
 8008424:	2202      	movs	r2, #2
 8008426:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008428:	4b14      	ldr	r3, [pc, #80]	; (800847c <USBD_LL_Init+0x94>)
 800842a:	2200      	movs	r2, #0
 800842c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800842e:	4b13      	ldr	r3, [pc, #76]	; (800847c <USBD_LL_Init+0x94>)
 8008430:	2200      	movs	r2, #0
 8008432:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008434:	4b11      	ldr	r3, [pc, #68]	; (800847c <USBD_LL_Init+0x94>)
 8008436:	2200      	movs	r2, #0
 8008438:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800843a:	4b10      	ldr	r3, [pc, #64]	; (800847c <USBD_LL_Init+0x94>)
 800843c:	2200      	movs	r2, #0
 800843e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008440:	4b0e      	ldr	r3, [pc, #56]	; (800847c <USBD_LL_Init+0x94>)
 8008442:	2200      	movs	r2, #0
 8008444:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008446:	480d      	ldr	r0, [pc, #52]	; (800847c <USBD_LL_Init+0x94>)
 8008448:	f7f9 ffe7 	bl	800241a <HAL_PCD_Init>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d001      	beq.n	8008456 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008452:	f7f9 fad1 	bl	80019f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008456:	2180      	movs	r1, #128	; 0x80
 8008458:	4808      	ldr	r0, [pc, #32]	; (800847c <USBD_LL_Init+0x94>)
 800845a:	f7fb fa12 	bl	8003882 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800845e:	2240      	movs	r2, #64	; 0x40
 8008460:	2100      	movs	r1, #0
 8008462:	4806      	ldr	r0, [pc, #24]	; (800847c <USBD_LL_Init+0x94>)
 8008464:	f7fb f9c6 	bl	80037f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008468:	2280      	movs	r2, #128	; 0x80
 800846a:	2101      	movs	r1, #1
 800846c:	4803      	ldr	r0, [pc, #12]	; (800847c <USBD_LL_Init+0x94>)
 800846e:	f7fb f9c1 	bl	80037f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	20001b54 	.word	0x20001b54

08008480 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008488:	2300      	movs	r3, #0
 800848a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008496:	4618      	mov	r0, r3
 8008498:	f7fa f8ce 	bl	8002638 <HAL_PCD_Start>
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 f942 	bl	800872c <USBD_Get_USB_Status>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	4608      	mov	r0, r1
 80084c0:	4611      	mov	r1, r2
 80084c2:	461a      	mov	r2, r3
 80084c4:	4603      	mov	r3, r0
 80084c6:	70fb      	strb	r3, [r7, #3]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70bb      	strb	r3, [r7, #2]
 80084cc:	4613      	mov	r3, r2
 80084ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80084de:	78bb      	ldrb	r3, [r7, #2]
 80084e0:	883a      	ldrh	r2, [r7, #0]
 80084e2:	78f9      	ldrb	r1, [r7, #3]
 80084e4:	f7fa fda2 	bl	800302c <HAL_PCD_EP_Open>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 f91c 	bl	800872c <USBD_Get_USB_Status>
 80084f4:	4603      	mov	r3, r0
 80084f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	460b      	mov	r3, r1
 800850c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800851c:	78fa      	ldrb	r2, [r7, #3]
 800851e:	4611      	mov	r1, r2
 8008520:	4618      	mov	r0, r3
 8008522:	f7fa fdeb 	bl	80030fc <HAL_PCD_EP_Close>
 8008526:	4603      	mov	r3, r0
 8008528:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800852a:	7bfb      	ldrb	r3, [r7, #15]
 800852c:	4618      	mov	r0, r3
 800852e:	f000 f8fd 	bl	800872c <USBD_Get_USB_Status>
 8008532:	4603      	mov	r3, r0
 8008534:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008536:	7bbb      	ldrb	r3, [r7, #14]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	460b      	mov	r3, r1
 800854a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800855a:	78fa      	ldrb	r2, [r7, #3]
 800855c:	4611      	mov	r1, r2
 800855e:	4618      	mov	r0, r3
 8008560:	f7fa fea3 	bl	80032aa <HAL_PCD_EP_SetStall>
 8008564:	4603      	mov	r3, r0
 8008566:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008568:	7bfb      	ldrb	r3, [r7, #15]
 800856a:	4618      	mov	r0, r3
 800856c:	f000 f8de 	bl	800872c <USBD_Get_USB_Status>
 8008570:	4603      	mov	r3, r0
 8008572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008574:	7bbb      	ldrb	r3, [r7, #14]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b084      	sub	sp, #16
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	460b      	mov	r3, r1
 8008588:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008598:	78fa      	ldrb	r2, [r7, #3]
 800859a:	4611      	mov	r1, r2
 800859c:	4618      	mov	r0, r3
 800859e:	f7fa fee7 	bl	8003370 <HAL_PCD_EP_ClrStall>
 80085a2:	4603      	mov	r3, r0
 80085a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 f8bf 	bl	800872c <USBD_Get_USB_Status>
 80085ae:	4603      	mov	r3, r0
 80085b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80085d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	da0b      	bge.n	80085f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085d8:	78fb      	ldrb	r3, [r7, #3]
 80085da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085de:	68f9      	ldr	r1, [r7, #12]
 80085e0:	4613      	mov	r3, r2
 80085e2:	00db      	lsls	r3, r3, #3
 80085e4:	4413      	add	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	440b      	add	r3, r1
 80085ea:	3316      	adds	r3, #22
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	e00b      	b.n	8008608 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085f6:	68f9      	ldr	r1, [r7, #12]
 80085f8:	4613      	mov	r3, r2
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	4413      	add	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	440b      	add	r3, r1
 8008602:	f203 2356 	addw	r3, r3, #598	; 0x256
 8008606:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008608:	4618      	mov	r0, r3
 800860a:	3714      	adds	r7, #20
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800862e:	78fa      	ldrb	r2, [r7, #3]
 8008630:	4611      	mov	r1, r2
 8008632:	4618      	mov	r0, r3
 8008634:	f7fa fcd6 	bl	8002fe4 <HAL_PCD_SetAddress>
 8008638:	4603      	mov	r3, r0
 800863a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800863c:	7bfb      	ldrb	r3, [r7, #15]
 800863e:	4618      	mov	r0, r3
 8008640:	f000 f874 	bl	800872c <USBD_Get_USB_Status>
 8008644:	4603      	mov	r3, r0
 8008646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008648:	7bbb      	ldrb	r3, [r7, #14]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b086      	sub	sp, #24
 8008656:	af00      	add	r7, sp, #0
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	607a      	str	r2, [r7, #4]
 800865c:	603b      	str	r3, [r7, #0]
 800865e:	460b      	mov	r3, r1
 8008660:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008670:	7af9      	ldrb	r1, [r7, #11]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	f7fa fdde 	bl	8003236 <HAL_PCD_EP_Transmit>
 800867a:	4603      	mov	r3, r0
 800867c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800867e:	7dfb      	ldrb	r3, [r7, #23]
 8008680:	4618      	mov	r0, r3
 8008682:	f000 f853 	bl	800872c <USBD_Get_USB_Status>
 8008686:	4603      	mov	r3, r0
 8008688:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800868a:	7dbb      	ldrb	r3, [r7, #22]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	607a      	str	r2, [r7, #4]
 800869e:	603b      	str	r3, [r7, #0]
 80086a0:	460b      	mov	r3, r1
 80086a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80086b2:	7af9      	ldrb	r1, [r7, #11]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	f7fa fd6a 	bl	8003190 <HAL_PCD_EP_Receive>
 80086bc:	4603      	mov	r3, r0
 80086be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 f832 	bl	800872c <USBD_Get_USB_Status>
 80086c8:	4603      	mov	r3, r0
 80086ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3718      	adds	r7, #24
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b082      	sub	sp, #8
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	460b      	mov	r3, r1
 80086e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086e8:	78fa      	ldrb	r2, [r7, #3]
 80086ea:	4611      	mov	r1, r2
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fa fd8a 	bl	8003206 <HAL_PCD_EP_GetRxCount>
 80086f2:	4603      	mov	r3, r0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008704:	4b03      	ldr	r3, [pc, #12]	; (8008714 <USBD_static_malloc+0x18>)
}
 8008706:	4618      	mov	r0, r3
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	20002038 	.word	0x20002038

08008718 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]

}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	4603      	mov	r3, r0
 8008734:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800873a:	79fb      	ldrb	r3, [r7, #7]
 800873c:	2b03      	cmp	r3, #3
 800873e:	d817      	bhi.n	8008770 <USBD_Get_USB_Status+0x44>
 8008740:	a201      	add	r2, pc, #4	; (adr r2, 8008748 <USBD_Get_USB_Status+0x1c>)
 8008742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008746:	bf00      	nop
 8008748:	08008759 	.word	0x08008759
 800874c:	0800875f 	.word	0x0800875f
 8008750:	08008765 	.word	0x08008765
 8008754:	0800876b 	.word	0x0800876b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	73fb      	strb	r3, [r7, #15]
    break;
 800875c:	e00b      	b.n	8008776 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800875e:	2303      	movs	r3, #3
 8008760:	73fb      	strb	r3, [r7, #15]
    break;
 8008762:	e008      	b.n	8008776 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008764:	2301      	movs	r3, #1
 8008766:	73fb      	strb	r3, [r7, #15]
    break;
 8008768:	e005      	b.n	8008776 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800876a:	2303      	movs	r3, #3
 800876c:	73fb      	strb	r3, [r7, #15]
    break;
 800876e:	e002      	b.n	8008776 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008770:	2303      	movs	r3, #3
 8008772:	73fb      	strb	r3, [r7, #15]
    break;
 8008774:	bf00      	nop
  }
  return usb_status;
 8008776:	7bfb      	ldrb	r3, [r7, #15]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <__cvt>:
 8008784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008788:	ec55 4b10 	vmov	r4, r5, d0
 800878c:	2d00      	cmp	r5, #0
 800878e:	460e      	mov	r6, r1
 8008790:	4619      	mov	r1, r3
 8008792:	462b      	mov	r3, r5
 8008794:	bfbb      	ittet	lt
 8008796:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800879a:	461d      	movlt	r5, r3
 800879c:	2300      	movge	r3, #0
 800879e:	232d      	movlt	r3, #45	; 0x2d
 80087a0:	700b      	strb	r3, [r1, #0]
 80087a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80087a8:	4691      	mov	r9, r2
 80087aa:	f023 0820 	bic.w	r8, r3, #32
 80087ae:	bfbc      	itt	lt
 80087b0:	4622      	movlt	r2, r4
 80087b2:	4614      	movlt	r4, r2
 80087b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087b8:	d005      	beq.n	80087c6 <__cvt+0x42>
 80087ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80087be:	d100      	bne.n	80087c2 <__cvt+0x3e>
 80087c0:	3601      	adds	r6, #1
 80087c2:	2102      	movs	r1, #2
 80087c4:	e000      	b.n	80087c8 <__cvt+0x44>
 80087c6:	2103      	movs	r1, #3
 80087c8:	ab03      	add	r3, sp, #12
 80087ca:	9301      	str	r3, [sp, #4]
 80087cc:	ab02      	add	r3, sp, #8
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	ec45 4b10 	vmov	d0, r4, r5
 80087d4:	4653      	mov	r3, sl
 80087d6:	4632      	mov	r2, r6
 80087d8:	f001 f982 	bl	8009ae0 <_dtoa_r>
 80087dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80087e0:	4607      	mov	r7, r0
 80087e2:	d102      	bne.n	80087ea <__cvt+0x66>
 80087e4:	f019 0f01 	tst.w	r9, #1
 80087e8:	d022      	beq.n	8008830 <__cvt+0xac>
 80087ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087ee:	eb07 0906 	add.w	r9, r7, r6
 80087f2:	d110      	bne.n	8008816 <__cvt+0x92>
 80087f4:	783b      	ldrb	r3, [r7, #0]
 80087f6:	2b30      	cmp	r3, #48	; 0x30
 80087f8:	d10a      	bne.n	8008810 <__cvt+0x8c>
 80087fa:	2200      	movs	r2, #0
 80087fc:	2300      	movs	r3, #0
 80087fe:	4620      	mov	r0, r4
 8008800:	4629      	mov	r1, r5
 8008802:	f7f8 f969 	bl	8000ad8 <__aeabi_dcmpeq>
 8008806:	b918      	cbnz	r0, 8008810 <__cvt+0x8c>
 8008808:	f1c6 0601 	rsb	r6, r6, #1
 800880c:	f8ca 6000 	str.w	r6, [sl]
 8008810:	f8da 3000 	ldr.w	r3, [sl]
 8008814:	4499      	add	r9, r3
 8008816:	2200      	movs	r2, #0
 8008818:	2300      	movs	r3, #0
 800881a:	4620      	mov	r0, r4
 800881c:	4629      	mov	r1, r5
 800881e:	f7f8 f95b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008822:	b108      	cbz	r0, 8008828 <__cvt+0xa4>
 8008824:	f8cd 900c 	str.w	r9, [sp, #12]
 8008828:	2230      	movs	r2, #48	; 0x30
 800882a:	9b03      	ldr	r3, [sp, #12]
 800882c:	454b      	cmp	r3, r9
 800882e:	d307      	bcc.n	8008840 <__cvt+0xbc>
 8008830:	9b03      	ldr	r3, [sp, #12]
 8008832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008834:	1bdb      	subs	r3, r3, r7
 8008836:	4638      	mov	r0, r7
 8008838:	6013      	str	r3, [r2, #0]
 800883a:	b004      	add	sp, #16
 800883c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008840:	1c59      	adds	r1, r3, #1
 8008842:	9103      	str	r1, [sp, #12]
 8008844:	701a      	strb	r2, [r3, #0]
 8008846:	e7f0      	b.n	800882a <__cvt+0xa6>

08008848 <__exponent>:
 8008848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800884a:	4603      	mov	r3, r0
 800884c:	2900      	cmp	r1, #0
 800884e:	bfb8      	it	lt
 8008850:	4249      	neglt	r1, r1
 8008852:	f803 2b02 	strb.w	r2, [r3], #2
 8008856:	bfb4      	ite	lt
 8008858:	222d      	movlt	r2, #45	; 0x2d
 800885a:	222b      	movge	r2, #43	; 0x2b
 800885c:	2909      	cmp	r1, #9
 800885e:	7042      	strb	r2, [r0, #1]
 8008860:	dd2a      	ble.n	80088b8 <__exponent+0x70>
 8008862:	f10d 0207 	add.w	r2, sp, #7
 8008866:	4617      	mov	r7, r2
 8008868:	260a      	movs	r6, #10
 800886a:	4694      	mov	ip, r2
 800886c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008870:	fb06 1415 	mls	r4, r6, r5, r1
 8008874:	3430      	adds	r4, #48	; 0x30
 8008876:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800887a:	460c      	mov	r4, r1
 800887c:	2c63      	cmp	r4, #99	; 0x63
 800887e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008882:	4629      	mov	r1, r5
 8008884:	dcf1      	bgt.n	800886a <__exponent+0x22>
 8008886:	3130      	adds	r1, #48	; 0x30
 8008888:	f1ac 0402 	sub.w	r4, ip, #2
 800888c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008890:	1c41      	adds	r1, r0, #1
 8008892:	4622      	mov	r2, r4
 8008894:	42ba      	cmp	r2, r7
 8008896:	d30a      	bcc.n	80088ae <__exponent+0x66>
 8008898:	f10d 0209 	add.w	r2, sp, #9
 800889c:	eba2 020c 	sub.w	r2, r2, ip
 80088a0:	42bc      	cmp	r4, r7
 80088a2:	bf88      	it	hi
 80088a4:	2200      	movhi	r2, #0
 80088a6:	4413      	add	r3, r2
 80088a8:	1a18      	subs	r0, r3, r0
 80088aa:	b003      	add	sp, #12
 80088ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ae:	f812 5b01 	ldrb.w	r5, [r2], #1
 80088b2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80088b6:	e7ed      	b.n	8008894 <__exponent+0x4c>
 80088b8:	2330      	movs	r3, #48	; 0x30
 80088ba:	3130      	adds	r1, #48	; 0x30
 80088bc:	7083      	strb	r3, [r0, #2]
 80088be:	70c1      	strb	r1, [r0, #3]
 80088c0:	1d03      	adds	r3, r0, #4
 80088c2:	e7f1      	b.n	80088a8 <__exponent+0x60>

080088c4 <_printf_float>:
 80088c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c8:	ed2d 8b02 	vpush	{d8}
 80088cc:	b08d      	sub	sp, #52	; 0x34
 80088ce:	460c      	mov	r4, r1
 80088d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80088d4:	4616      	mov	r6, r2
 80088d6:	461f      	mov	r7, r3
 80088d8:	4605      	mov	r5, r0
 80088da:	f000 ffef 	bl	80098bc <_localeconv_r>
 80088de:	f8d0 a000 	ldr.w	sl, [r0]
 80088e2:	4650      	mov	r0, sl
 80088e4:	f7f7 fccc 	bl	8000280 <strlen>
 80088e8:	2300      	movs	r3, #0
 80088ea:	930a      	str	r3, [sp, #40]	; 0x28
 80088ec:	6823      	ldr	r3, [r4, #0]
 80088ee:	9305      	str	r3, [sp, #20]
 80088f0:	f8d8 3000 	ldr.w	r3, [r8]
 80088f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80088f8:	3307      	adds	r3, #7
 80088fa:	f023 0307 	bic.w	r3, r3, #7
 80088fe:	f103 0208 	add.w	r2, r3, #8
 8008902:	f8c8 2000 	str.w	r2, [r8]
 8008906:	e9d3 8900 	ldrd	r8, r9, [r3]
 800890a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800890e:	9307      	str	r3, [sp, #28]
 8008910:	f8cd 8018 	str.w	r8, [sp, #24]
 8008914:	ee08 0a10 	vmov	s16, r0
 8008918:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800891c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008920:	4b9e      	ldr	r3, [pc, #632]	; (8008b9c <_printf_float+0x2d8>)
 8008922:	f04f 32ff 	mov.w	r2, #4294967295
 8008926:	f7f8 f909 	bl	8000b3c <__aeabi_dcmpun>
 800892a:	bb88      	cbnz	r0, 8008990 <_printf_float+0xcc>
 800892c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008930:	4b9a      	ldr	r3, [pc, #616]	; (8008b9c <_printf_float+0x2d8>)
 8008932:	f04f 32ff 	mov.w	r2, #4294967295
 8008936:	f7f8 f8e3 	bl	8000b00 <__aeabi_dcmple>
 800893a:	bb48      	cbnz	r0, 8008990 <_printf_float+0xcc>
 800893c:	2200      	movs	r2, #0
 800893e:	2300      	movs	r3, #0
 8008940:	4640      	mov	r0, r8
 8008942:	4649      	mov	r1, r9
 8008944:	f7f8 f8d2 	bl	8000aec <__aeabi_dcmplt>
 8008948:	b110      	cbz	r0, 8008950 <_printf_float+0x8c>
 800894a:	232d      	movs	r3, #45	; 0x2d
 800894c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008950:	4a93      	ldr	r2, [pc, #588]	; (8008ba0 <_printf_float+0x2dc>)
 8008952:	4b94      	ldr	r3, [pc, #592]	; (8008ba4 <_printf_float+0x2e0>)
 8008954:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008958:	bf94      	ite	ls
 800895a:	4690      	movls	r8, r2
 800895c:	4698      	movhi	r8, r3
 800895e:	2303      	movs	r3, #3
 8008960:	6123      	str	r3, [r4, #16]
 8008962:	9b05      	ldr	r3, [sp, #20]
 8008964:	f023 0304 	bic.w	r3, r3, #4
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	f04f 0900 	mov.w	r9, #0
 800896e:	9700      	str	r7, [sp, #0]
 8008970:	4633      	mov	r3, r6
 8008972:	aa0b      	add	r2, sp, #44	; 0x2c
 8008974:	4621      	mov	r1, r4
 8008976:	4628      	mov	r0, r5
 8008978:	f000 f9da 	bl	8008d30 <_printf_common>
 800897c:	3001      	adds	r0, #1
 800897e:	f040 8090 	bne.w	8008aa2 <_printf_float+0x1de>
 8008982:	f04f 30ff 	mov.w	r0, #4294967295
 8008986:	b00d      	add	sp, #52	; 0x34
 8008988:	ecbd 8b02 	vpop	{d8}
 800898c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008990:	4642      	mov	r2, r8
 8008992:	464b      	mov	r3, r9
 8008994:	4640      	mov	r0, r8
 8008996:	4649      	mov	r1, r9
 8008998:	f7f8 f8d0 	bl	8000b3c <__aeabi_dcmpun>
 800899c:	b140      	cbz	r0, 80089b0 <_printf_float+0xec>
 800899e:	464b      	mov	r3, r9
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	bfbc      	itt	lt
 80089a4:	232d      	movlt	r3, #45	; 0x2d
 80089a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80089aa:	4a7f      	ldr	r2, [pc, #508]	; (8008ba8 <_printf_float+0x2e4>)
 80089ac:	4b7f      	ldr	r3, [pc, #508]	; (8008bac <_printf_float+0x2e8>)
 80089ae:	e7d1      	b.n	8008954 <_printf_float+0x90>
 80089b0:	6863      	ldr	r3, [r4, #4]
 80089b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80089b6:	9206      	str	r2, [sp, #24]
 80089b8:	1c5a      	adds	r2, r3, #1
 80089ba:	d13f      	bne.n	8008a3c <_printf_float+0x178>
 80089bc:	2306      	movs	r3, #6
 80089be:	6063      	str	r3, [r4, #4]
 80089c0:	9b05      	ldr	r3, [sp, #20]
 80089c2:	6861      	ldr	r1, [r4, #4]
 80089c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80089c8:	2300      	movs	r3, #0
 80089ca:	9303      	str	r3, [sp, #12]
 80089cc:	ab0a      	add	r3, sp, #40	; 0x28
 80089ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80089d2:	ab09      	add	r3, sp, #36	; 0x24
 80089d4:	ec49 8b10 	vmov	d0, r8, r9
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	6022      	str	r2, [r4, #0]
 80089dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80089e0:	4628      	mov	r0, r5
 80089e2:	f7ff fecf 	bl	8008784 <__cvt>
 80089e6:	9b06      	ldr	r3, [sp, #24]
 80089e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089ea:	2b47      	cmp	r3, #71	; 0x47
 80089ec:	4680      	mov	r8, r0
 80089ee:	d108      	bne.n	8008a02 <_printf_float+0x13e>
 80089f0:	1cc8      	adds	r0, r1, #3
 80089f2:	db02      	blt.n	80089fa <_printf_float+0x136>
 80089f4:	6863      	ldr	r3, [r4, #4]
 80089f6:	4299      	cmp	r1, r3
 80089f8:	dd41      	ble.n	8008a7e <_printf_float+0x1ba>
 80089fa:	f1ab 0302 	sub.w	r3, fp, #2
 80089fe:	fa5f fb83 	uxtb.w	fp, r3
 8008a02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a06:	d820      	bhi.n	8008a4a <_printf_float+0x186>
 8008a08:	3901      	subs	r1, #1
 8008a0a:	465a      	mov	r2, fp
 8008a0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a10:	9109      	str	r1, [sp, #36]	; 0x24
 8008a12:	f7ff ff19 	bl	8008848 <__exponent>
 8008a16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a18:	1813      	adds	r3, r2, r0
 8008a1a:	2a01      	cmp	r2, #1
 8008a1c:	4681      	mov	r9, r0
 8008a1e:	6123      	str	r3, [r4, #16]
 8008a20:	dc02      	bgt.n	8008a28 <_printf_float+0x164>
 8008a22:	6822      	ldr	r2, [r4, #0]
 8008a24:	07d2      	lsls	r2, r2, #31
 8008a26:	d501      	bpl.n	8008a2c <_printf_float+0x168>
 8008a28:	3301      	adds	r3, #1
 8008a2a:	6123      	str	r3, [r4, #16]
 8008a2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d09c      	beq.n	800896e <_printf_float+0xaa>
 8008a34:	232d      	movs	r3, #45	; 0x2d
 8008a36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a3a:	e798      	b.n	800896e <_printf_float+0xaa>
 8008a3c:	9a06      	ldr	r2, [sp, #24]
 8008a3e:	2a47      	cmp	r2, #71	; 0x47
 8008a40:	d1be      	bne.n	80089c0 <_printf_float+0xfc>
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1bc      	bne.n	80089c0 <_printf_float+0xfc>
 8008a46:	2301      	movs	r3, #1
 8008a48:	e7b9      	b.n	80089be <_printf_float+0xfa>
 8008a4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008a4e:	d118      	bne.n	8008a82 <_printf_float+0x1be>
 8008a50:	2900      	cmp	r1, #0
 8008a52:	6863      	ldr	r3, [r4, #4]
 8008a54:	dd0b      	ble.n	8008a6e <_printf_float+0x1aa>
 8008a56:	6121      	str	r1, [r4, #16]
 8008a58:	b913      	cbnz	r3, 8008a60 <_printf_float+0x19c>
 8008a5a:	6822      	ldr	r2, [r4, #0]
 8008a5c:	07d0      	lsls	r0, r2, #31
 8008a5e:	d502      	bpl.n	8008a66 <_printf_float+0x1a2>
 8008a60:	3301      	adds	r3, #1
 8008a62:	440b      	add	r3, r1
 8008a64:	6123      	str	r3, [r4, #16]
 8008a66:	65a1      	str	r1, [r4, #88]	; 0x58
 8008a68:	f04f 0900 	mov.w	r9, #0
 8008a6c:	e7de      	b.n	8008a2c <_printf_float+0x168>
 8008a6e:	b913      	cbnz	r3, 8008a76 <_printf_float+0x1b2>
 8008a70:	6822      	ldr	r2, [r4, #0]
 8008a72:	07d2      	lsls	r2, r2, #31
 8008a74:	d501      	bpl.n	8008a7a <_printf_float+0x1b6>
 8008a76:	3302      	adds	r3, #2
 8008a78:	e7f4      	b.n	8008a64 <_printf_float+0x1a0>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e7f2      	b.n	8008a64 <_printf_float+0x1a0>
 8008a7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a84:	4299      	cmp	r1, r3
 8008a86:	db05      	blt.n	8008a94 <_printf_float+0x1d0>
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	6121      	str	r1, [r4, #16]
 8008a8c:	07d8      	lsls	r0, r3, #31
 8008a8e:	d5ea      	bpl.n	8008a66 <_printf_float+0x1a2>
 8008a90:	1c4b      	adds	r3, r1, #1
 8008a92:	e7e7      	b.n	8008a64 <_printf_float+0x1a0>
 8008a94:	2900      	cmp	r1, #0
 8008a96:	bfd4      	ite	le
 8008a98:	f1c1 0202 	rsble	r2, r1, #2
 8008a9c:	2201      	movgt	r2, #1
 8008a9e:	4413      	add	r3, r2
 8008aa0:	e7e0      	b.n	8008a64 <_printf_float+0x1a0>
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	055a      	lsls	r2, r3, #21
 8008aa6:	d407      	bmi.n	8008ab8 <_printf_float+0x1f4>
 8008aa8:	6923      	ldr	r3, [r4, #16]
 8008aaa:	4642      	mov	r2, r8
 8008aac:	4631      	mov	r1, r6
 8008aae:	4628      	mov	r0, r5
 8008ab0:	47b8      	blx	r7
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	d12c      	bne.n	8008b10 <_printf_float+0x24c>
 8008ab6:	e764      	b.n	8008982 <_printf_float+0xbe>
 8008ab8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008abc:	f240 80e0 	bls.w	8008c80 <_printf_float+0x3bc>
 8008ac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f7f8 f806 	bl	8000ad8 <__aeabi_dcmpeq>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d034      	beq.n	8008b3a <_printf_float+0x276>
 8008ad0:	4a37      	ldr	r2, [pc, #220]	; (8008bb0 <_printf_float+0x2ec>)
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b8      	blx	r7
 8008ada:	3001      	adds	r0, #1
 8008adc:	f43f af51 	beq.w	8008982 <_printf_float+0xbe>
 8008ae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	db02      	blt.n	8008aee <_printf_float+0x22a>
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	07d8      	lsls	r0, r3, #31
 8008aec:	d510      	bpl.n	8008b10 <_printf_float+0x24c>
 8008aee:	ee18 3a10 	vmov	r3, s16
 8008af2:	4652      	mov	r2, sl
 8008af4:	4631      	mov	r1, r6
 8008af6:	4628      	mov	r0, r5
 8008af8:	47b8      	blx	r7
 8008afa:	3001      	adds	r0, #1
 8008afc:	f43f af41 	beq.w	8008982 <_printf_float+0xbe>
 8008b00:	f04f 0800 	mov.w	r8, #0
 8008b04:	f104 091a 	add.w	r9, r4, #26
 8008b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	4543      	cmp	r3, r8
 8008b0e:	dc09      	bgt.n	8008b24 <_printf_float+0x260>
 8008b10:	6823      	ldr	r3, [r4, #0]
 8008b12:	079b      	lsls	r3, r3, #30
 8008b14:	f100 8107 	bmi.w	8008d26 <_printf_float+0x462>
 8008b18:	68e0      	ldr	r0, [r4, #12]
 8008b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b1c:	4298      	cmp	r0, r3
 8008b1e:	bfb8      	it	lt
 8008b20:	4618      	movlt	r0, r3
 8008b22:	e730      	b.n	8008986 <_printf_float+0xc2>
 8008b24:	2301      	movs	r3, #1
 8008b26:	464a      	mov	r2, r9
 8008b28:	4631      	mov	r1, r6
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	47b8      	blx	r7
 8008b2e:	3001      	adds	r0, #1
 8008b30:	f43f af27 	beq.w	8008982 <_printf_float+0xbe>
 8008b34:	f108 0801 	add.w	r8, r8, #1
 8008b38:	e7e6      	b.n	8008b08 <_printf_float+0x244>
 8008b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	dc39      	bgt.n	8008bb4 <_printf_float+0x2f0>
 8008b40:	4a1b      	ldr	r2, [pc, #108]	; (8008bb0 <_printf_float+0x2ec>)
 8008b42:	2301      	movs	r3, #1
 8008b44:	4631      	mov	r1, r6
 8008b46:	4628      	mov	r0, r5
 8008b48:	47b8      	blx	r7
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	f43f af19 	beq.w	8008982 <_printf_float+0xbe>
 8008b50:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008b54:	4313      	orrs	r3, r2
 8008b56:	d102      	bne.n	8008b5e <_printf_float+0x29a>
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	07d9      	lsls	r1, r3, #31
 8008b5c:	d5d8      	bpl.n	8008b10 <_printf_float+0x24c>
 8008b5e:	ee18 3a10 	vmov	r3, s16
 8008b62:	4652      	mov	r2, sl
 8008b64:	4631      	mov	r1, r6
 8008b66:	4628      	mov	r0, r5
 8008b68:	47b8      	blx	r7
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	f43f af09 	beq.w	8008982 <_printf_float+0xbe>
 8008b70:	f04f 0900 	mov.w	r9, #0
 8008b74:	f104 0a1a 	add.w	sl, r4, #26
 8008b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b7a:	425b      	negs	r3, r3
 8008b7c:	454b      	cmp	r3, r9
 8008b7e:	dc01      	bgt.n	8008b84 <_printf_float+0x2c0>
 8008b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b82:	e792      	b.n	8008aaa <_printf_float+0x1e6>
 8008b84:	2301      	movs	r3, #1
 8008b86:	4652      	mov	r2, sl
 8008b88:	4631      	mov	r1, r6
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	47b8      	blx	r7
 8008b8e:	3001      	adds	r0, #1
 8008b90:	f43f aef7 	beq.w	8008982 <_printf_float+0xbe>
 8008b94:	f109 0901 	add.w	r9, r9, #1
 8008b98:	e7ee      	b.n	8008b78 <_printf_float+0x2b4>
 8008b9a:	bf00      	nop
 8008b9c:	7fefffff 	.word	0x7fefffff
 8008ba0:	0800d16c 	.word	0x0800d16c
 8008ba4:	0800d170 	.word	0x0800d170
 8008ba8:	0800d174 	.word	0x0800d174
 8008bac:	0800d178 	.word	0x0800d178
 8008bb0:	0800d17c 	.word	0x0800d17c
 8008bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	bfa8      	it	ge
 8008bbc:	461a      	movge	r2, r3
 8008bbe:	2a00      	cmp	r2, #0
 8008bc0:	4691      	mov	r9, r2
 8008bc2:	dc37      	bgt.n	8008c34 <_printf_float+0x370>
 8008bc4:	f04f 0b00 	mov.w	fp, #0
 8008bc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bcc:	f104 021a 	add.w	r2, r4, #26
 8008bd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bd2:	9305      	str	r3, [sp, #20]
 8008bd4:	eba3 0309 	sub.w	r3, r3, r9
 8008bd8:	455b      	cmp	r3, fp
 8008bda:	dc33      	bgt.n	8008c44 <_printf_float+0x380>
 8008bdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008be0:	429a      	cmp	r2, r3
 8008be2:	db3b      	blt.n	8008c5c <_printf_float+0x398>
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	07da      	lsls	r2, r3, #31
 8008be8:	d438      	bmi.n	8008c5c <_printf_float+0x398>
 8008bea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008bee:	eba2 0903 	sub.w	r9, r2, r3
 8008bf2:	9b05      	ldr	r3, [sp, #20]
 8008bf4:	1ad2      	subs	r2, r2, r3
 8008bf6:	4591      	cmp	r9, r2
 8008bf8:	bfa8      	it	ge
 8008bfa:	4691      	movge	r9, r2
 8008bfc:	f1b9 0f00 	cmp.w	r9, #0
 8008c00:	dc35      	bgt.n	8008c6e <_printf_float+0x3aa>
 8008c02:	f04f 0800 	mov.w	r8, #0
 8008c06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c0a:	f104 0a1a 	add.w	sl, r4, #26
 8008c0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c12:	1a9b      	subs	r3, r3, r2
 8008c14:	eba3 0309 	sub.w	r3, r3, r9
 8008c18:	4543      	cmp	r3, r8
 8008c1a:	f77f af79 	ble.w	8008b10 <_printf_float+0x24c>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	4652      	mov	r2, sl
 8008c22:	4631      	mov	r1, r6
 8008c24:	4628      	mov	r0, r5
 8008c26:	47b8      	blx	r7
 8008c28:	3001      	adds	r0, #1
 8008c2a:	f43f aeaa 	beq.w	8008982 <_printf_float+0xbe>
 8008c2e:	f108 0801 	add.w	r8, r8, #1
 8008c32:	e7ec      	b.n	8008c0e <_printf_float+0x34a>
 8008c34:	4613      	mov	r3, r2
 8008c36:	4631      	mov	r1, r6
 8008c38:	4642      	mov	r2, r8
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	47b8      	blx	r7
 8008c3e:	3001      	adds	r0, #1
 8008c40:	d1c0      	bne.n	8008bc4 <_printf_float+0x300>
 8008c42:	e69e      	b.n	8008982 <_printf_float+0xbe>
 8008c44:	2301      	movs	r3, #1
 8008c46:	4631      	mov	r1, r6
 8008c48:	4628      	mov	r0, r5
 8008c4a:	9205      	str	r2, [sp, #20]
 8008c4c:	47b8      	blx	r7
 8008c4e:	3001      	adds	r0, #1
 8008c50:	f43f ae97 	beq.w	8008982 <_printf_float+0xbe>
 8008c54:	9a05      	ldr	r2, [sp, #20]
 8008c56:	f10b 0b01 	add.w	fp, fp, #1
 8008c5a:	e7b9      	b.n	8008bd0 <_printf_float+0x30c>
 8008c5c:	ee18 3a10 	vmov	r3, s16
 8008c60:	4652      	mov	r2, sl
 8008c62:	4631      	mov	r1, r6
 8008c64:	4628      	mov	r0, r5
 8008c66:	47b8      	blx	r7
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d1be      	bne.n	8008bea <_printf_float+0x326>
 8008c6c:	e689      	b.n	8008982 <_printf_float+0xbe>
 8008c6e:	9a05      	ldr	r2, [sp, #20]
 8008c70:	464b      	mov	r3, r9
 8008c72:	4442      	add	r2, r8
 8008c74:	4631      	mov	r1, r6
 8008c76:	4628      	mov	r0, r5
 8008c78:	47b8      	blx	r7
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	d1c1      	bne.n	8008c02 <_printf_float+0x33e>
 8008c7e:	e680      	b.n	8008982 <_printf_float+0xbe>
 8008c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c82:	2a01      	cmp	r2, #1
 8008c84:	dc01      	bgt.n	8008c8a <_printf_float+0x3c6>
 8008c86:	07db      	lsls	r3, r3, #31
 8008c88:	d53a      	bpl.n	8008d00 <_printf_float+0x43c>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	4642      	mov	r2, r8
 8008c8e:	4631      	mov	r1, r6
 8008c90:	4628      	mov	r0, r5
 8008c92:	47b8      	blx	r7
 8008c94:	3001      	adds	r0, #1
 8008c96:	f43f ae74 	beq.w	8008982 <_printf_float+0xbe>
 8008c9a:	ee18 3a10 	vmov	r3, s16
 8008c9e:	4652      	mov	r2, sl
 8008ca0:	4631      	mov	r1, r6
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	47b8      	blx	r7
 8008ca6:	3001      	adds	r0, #1
 8008ca8:	f43f ae6b 	beq.w	8008982 <_printf_float+0xbe>
 8008cac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008cb8:	f7f7 ff0e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cbc:	b9d8      	cbnz	r0, 8008cf6 <_printf_float+0x432>
 8008cbe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008cc2:	f108 0201 	add.w	r2, r8, #1
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	4628      	mov	r0, r5
 8008cca:	47b8      	blx	r7
 8008ccc:	3001      	adds	r0, #1
 8008cce:	d10e      	bne.n	8008cee <_printf_float+0x42a>
 8008cd0:	e657      	b.n	8008982 <_printf_float+0xbe>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	4652      	mov	r2, sl
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	4628      	mov	r0, r5
 8008cda:	47b8      	blx	r7
 8008cdc:	3001      	adds	r0, #1
 8008cde:	f43f ae50 	beq.w	8008982 <_printf_float+0xbe>
 8008ce2:	f108 0801 	add.w	r8, r8, #1
 8008ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	4543      	cmp	r3, r8
 8008cec:	dcf1      	bgt.n	8008cd2 <_printf_float+0x40e>
 8008cee:	464b      	mov	r3, r9
 8008cf0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008cf4:	e6da      	b.n	8008aac <_printf_float+0x1e8>
 8008cf6:	f04f 0800 	mov.w	r8, #0
 8008cfa:	f104 0a1a 	add.w	sl, r4, #26
 8008cfe:	e7f2      	b.n	8008ce6 <_printf_float+0x422>
 8008d00:	2301      	movs	r3, #1
 8008d02:	4642      	mov	r2, r8
 8008d04:	e7df      	b.n	8008cc6 <_printf_float+0x402>
 8008d06:	2301      	movs	r3, #1
 8008d08:	464a      	mov	r2, r9
 8008d0a:	4631      	mov	r1, r6
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	47b8      	blx	r7
 8008d10:	3001      	adds	r0, #1
 8008d12:	f43f ae36 	beq.w	8008982 <_printf_float+0xbe>
 8008d16:	f108 0801 	add.w	r8, r8, #1
 8008d1a:	68e3      	ldr	r3, [r4, #12]
 8008d1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d1e:	1a5b      	subs	r3, r3, r1
 8008d20:	4543      	cmp	r3, r8
 8008d22:	dcf0      	bgt.n	8008d06 <_printf_float+0x442>
 8008d24:	e6f8      	b.n	8008b18 <_printf_float+0x254>
 8008d26:	f04f 0800 	mov.w	r8, #0
 8008d2a:	f104 0919 	add.w	r9, r4, #25
 8008d2e:	e7f4      	b.n	8008d1a <_printf_float+0x456>

08008d30 <_printf_common>:
 8008d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d34:	4616      	mov	r6, r2
 8008d36:	4699      	mov	r9, r3
 8008d38:	688a      	ldr	r2, [r1, #8]
 8008d3a:	690b      	ldr	r3, [r1, #16]
 8008d3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d40:	4293      	cmp	r3, r2
 8008d42:	bfb8      	it	lt
 8008d44:	4613      	movlt	r3, r2
 8008d46:	6033      	str	r3, [r6, #0]
 8008d48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	460c      	mov	r4, r1
 8008d50:	b10a      	cbz	r2, 8008d56 <_printf_common+0x26>
 8008d52:	3301      	adds	r3, #1
 8008d54:	6033      	str	r3, [r6, #0]
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	0699      	lsls	r1, r3, #26
 8008d5a:	bf42      	ittt	mi
 8008d5c:	6833      	ldrmi	r3, [r6, #0]
 8008d5e:	3302      	addmi	r3, #2
 8008d60:	6033      	strmi	r3, [r6, #0]
 8008d62:	6825      	ldr	r5, [r4, #0]
 8008d64:	f015 0506 	ands.w	r5, r5, #6
 8008d68:	d106      	bne.n	8008d78 <_printf_common+0x48>
 8008d6a:	f104 0a19 	add.w	sl, r4, #25
 8008d6e:	68e3      	ldr	r3, [r4, #12]
 8008d70:	6832      	ldr	r2, [r6, #0]
 8008d72:	1a9b      	subs	r3, r3, r2
 8008d74:	42ab      	cmp	r3, r5
 8008d76:	dc26      	bgt.n	8008dc6 <_printf_common+0x96>
 8008d78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d7c:	1e13      	subs	r3, r2, #0
 8008d7e:	6822      	ldr	r2, [r4, #0]
 8008d80:	bf18      	it	ne
 8008d82:	2301      	movne	r3, #1
 8008d84:	0692      	lsls	r2, r2, #26
 8008d86:	d42b      	bmi.n	8008de0 <_printf_common+0xb0>
 8008d88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	4638      	mov	r0, r7
 8008d90:	47c0      	blx	r8
 8008d92:	3001      	adds	r0, #1
 8008d94:	d01e      	beq.n	8008dd4 <_printf_common+0xa4>
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	6922      	ldr	r2, [r4, #16]
 8008d9a:	f003 0306 	and.w	r3, r3, #6
 8008d9e:	2b04      	cmp	r3, #4
 8008da0:	bf02      	ittt	eq
 8008da2:	68e5      	ldreq	r5, [r4, #12]
 8008da4:	6833      	ldreq	r3, [r6, #0]
 8008da6:	1aed      	subeq	r5, r5, r3
 8008da8:	68a3      	ldr	r3, [r4, #8]
 8008daa:	bf0c      	ite	eq
 8008dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008db0:	2500      	movne	r5, #0
 8008db2:	4293      	cmp	r3, r2
 8008db4:	bfc4      	itt	gt
 8008db6:	1a9b      	subgt	r3, r3, r2
 8008db8:	18ed      	addgt	r5, r5, r3
 8008dba:	2600      	movs	r6, #0
 8008dbc:	341a      	adds	r4, #26
 8008dbe:	42b5      	cmp	r5, r6
 8008dc0:	d11a      	bne.n	8008df8 <_printf_common+0xc8>
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	e008      	b.n	8008dd8 <_printf_common+0xa8>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	4652      	mov	r2, sl
 8008dca:	4649      	mov	r1, r9
 8008dcc:	4638      	mov	r0, r7
 8008dce:	47c0      	blx	r8
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d103      	bne.n	8008ddc <_printf_common+0xac>
 8008dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ddc:	3501      	adds	r5, #1
 8008dde:	e7c6      	b.n	8008d6e <_printf_common+0x3e>
 8008de0:	18e1      	adds	r1, r4, r3
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	2030      	movs	r0, #48	; 0x30
 8008de6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dea:	4422      	add	r2, r4
 8008dec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008df0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008df4:	3302      	adds	r3, #2
 8008df6:	e7c7      	b.n	8008d88 <_printf_common+0x58>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	4622      	mov	r2, r4
 8008dfc:	4649      	mov	r1, r9
 8008dfe:	4638      	mov	r0, r7
 8008e00:	47c0      	blx	r8
 8008e02:	3001      	adds	r0, #1
 8008e04:	d0e6      	beq.n	8008dd4 <_printf_common+0xa4>
 8008e06:	3601      	adds	r6, #1
 8008e08:	e7d9      	b.n	8008dbe <_printf_common+0x8e>
	...

08008e0c <_printf_i>:
 8008e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e10:	7e0f      	ldrb	r7, [r1, #24]
 8008e12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e14:	2f78      	cmp	r7, #120	; 0x78
 8008e16:	4691      	mov	r9, r2
 8008e18:	4680      	mov	r8, r0
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	469a      	mov	sl, r3
 8008e1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e22:	d807      	bhi.n	8008e34 <_printf_i+0x28>
 8008e24:	2f62      	cmp	r7, #98	; 0x62
 8008e26:	d80a      	bhi.n	8008e3e <_printf_i+0x32>
 8008e28:	2f00      	cmp	r7, #0
 8008e2a:	f000 80d4 	beq.w	8008fd6 <_printf_i+0x1ca>
 8008e2e:	2f58      	cmp	r7, #88	; 0x58
 8008e30:	f000 80c0 	beq.w	8008fb4 <_printf_i+0x1a8>
 8008e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e3c:	e03a      	b.n	8008eb4 <_printf_i+0xa8>
 8008e3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e42:	2b15      	cmp	r3, #21
 8008e44:	d8f6      	bhi.n	8008e34 <_printf_i+0x28>
 8008e46:	a101      	add	r1, pc, #4	; (adr r1, 8008e4c <_printf_i+0x40>)
 8008e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e4c:	08008ea5 	.word	0x08008ea5
 8008e50:	08008eb9 	.word	0x08008eb9
 8008e54:	08008e35 	.word	0x08008e35
 8008e58:	08008e35 	.word	0x08008e35
 8008e5c:	08008e35 	.word	0x08008e35
 8008e60:	08008e35 	.word	0x08008e35
 8008e64:	08008eb9 	.word	0x08008eb9
 8008e68:	08008e35 	.word	0x08008e35
 8008e6c:	08008e35 	.word	0x08008e35
 8008e70:	08008e35 	.word	0x08008e35
 8008e74:	08008e35 	.word	0x08008e35
 8008e78:	08008fbd 	.word	0x08008fbd
 8008e7c:	08008ee5 	.word	0x08008ee5
 8008e80:	08008f77 	.word	0x08008f77
 8008e84:	08008e35 	.word	0x08008e35
 8008e88:	08008e35 	.word	0x08008e35
 8008e8c:	08008fdf 	.word	0x08008fdf
 8008e90:	08008e35 	.word	0x08008e35
 8008e94:	08008ee5 	.word	0x08008ee5
 8008e98:	08008e35 	.word	0x08008e35
 8008e9c:	08008e35 	.word	0x08008e35
 8008ea0:	08008f7f 	.word	0x08008f7f
 8008ea4:	682b      	ldr	r3, [r5, #0]
 8008ea6:	1d1a      	adds	r2, r3, #4
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	602a      	str	r2, [r5, #0]
 8008eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e09f      	b.n	8008ff8 <_printf_i+0x1ec>
 8008eb8:	6820      	ldr	r0, [r4, #0]
 8008eba:	682b      	ldr	r3, [r5, #0]
 8008ebc:	0607      	lsls	r7, r0, #24
 8008ebe:	f103 0104 	add.w	r1, r3, #4
 8008ec2:	6029      	str	r1, [r5, #0]
 8008ec4:	d501      	bpl.n	8008eca <_printf_i+0xbe>
 8008ec6:	681e      	ldr	r6, [r3, #0]
 8008ec8:	e003      	b.n	8008ed2 <_printf_i+0xc6>
 8008eca:	0646      	lsls	r6, r0, #25
 8008ecc:	d5fb      	bpl.n	8008ec6 <_printf_i+0xba>
 8008ece:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008ed2:	2e00      	cmp	r6, #0
 8008ed4:	da03      	bge.n	8008ede <_printf_i+0xd2>
 8008ed6:	232d      	movs	r3, #45	; 0x2d
 8008ed8:	4276      	negs	r6, r6
 8008eda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ede:	485a      	ldr	r0, [pc, #360]	; (8009048 <_printf_i+0x23c>)
 8008ee0:	230a      	movs	r3, #10
 8008ee2:	e012      	b.n	8008f0a <_printf_i+0xfe>
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	6820      	ldr	r0, [r4, #0]
 8008ee8:	1d19      	adds	r1, r3, #4
 8008eea:	6029      	str	r1, [r5, #0]
 8008eec:	0605      	lsls	r5, r0, #24
 8008eee:	d501      	bpl.n	8008ef4 <_printf_i+0xe8>
 8008ef0:	681e      	ldr	r6, [r3, #0]
 8008ef2:	e002      	b.n	8008efa <_printf_i+0xee>
 8008ef4:	0641      	lsls	r1, r0, #25
 8008ef6:	d5fb      	bpl.n	8008ef0 <_printf_i+0xe4>
 8008ef8:	881e      	ldrh	r6, [r3, #0]
 8008efa:	4853      	ldr	r0, [pc, #332]	; (8009048 <_printf_i+0x23c>)
 8008efc:	2f6f      	cmp	r7, #111	; 0x6f
 8008efe:	bf0c      	ite	eq
 8008f00:	2308      	moveq	r3, #8
 8008f02:	230a      	movne	r3, #10
 8008f04:	2100      	movs	r1, #0
 8008f06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f0a:	6865      	ldr	r5, [r4, #4]
 8008f0c:	60a5      	str	r5, [r4, #8]
 8008f0e:	2d00      	cmp	r5, #0
 8008f10:	bfa2      	ittt	ge
 8008f12:	6821      	ldrge	r1, [r4, #0]
 8008f14:	f021 0104 	bicge.w	r1, r1, #4
 8008f18:	6021      	strge	r1, [r4, #0]
 8008f1a:	b90e      	cbnz	r6, 8008f20 <_printf_i+0x114>
 8008f1c:	2d00      	cmp	r5, #0
 8008f1e:	d04b      	beq.n	8008fb8 <_printf_i+0x1ac>
 8008f20:	4615      	mov	r5, r2
 8008f22:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f26:	fb03 6711 	mls	r7, r3, r1, r6
 8008f2a:	5dc7      	ldrb	r7, [r0, r7]
 8008f2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f30:	4637      	mov	r7, r6
 8008f32:	42bb      	cmp	r3, r7
 8008f34:	460e      	mov	r6, r1
 8008f36:	d9f4      	bls.n	8008f22 <_printf_i+0x116>
 8008f38:	2b08      	cmp	r3, #8
 8008f3a:	d10b      	bne.n	8008f54 <_printf_i+0x148>
 8008f3c:	6823      	ldr	r3, [r4, #0]
 8008f3e:	07de      	lsls	r6, r3, #31
 8008f40:	d508      	bpl.n	8008f54 <_printf_i+0x148>
 8008f42:	6923      	ldr	r3, [r4, #16]
 8008f44:	6861      	ldr	r1, [r4, #4]
 8008f46:	4299      	cmp	r1, r3
 8008f48:	bfde      	ittt	le
 8008f4a:	2330      	movle	r3, #48	; 0x30
 8008f4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f54:	1b52      	subs	r2, r2, r5
 8008f56:	6122      	str	r2, [r4, #16]
 8008f58:	f8cd a000 	str.w	sl, [sp]
 8008f5c:	464b      	mov	r3, r9
 8008f5e:	aa03      	add	r2, sp, #12
 8008f60:	4621      	mov	r1, r4
 8008f62:	4640      	mov	r0, r8
 8008f64:	f7ff fee4 	bl	8008d30 <_printf_common>
 8008f68:	3001      	adds	r0, #1
 8008f6a:	d14a      	bne.n	8009002 <_printf_i+0x1f6>
 8008f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f70:	b004      	add	sp, #16
 8008f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	f043 0320 	orr.w	r3, r3, #32
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	4833      	ldr	r0, [pc, #204]	; (800904c <_printf_i+0x240>)
 8008f80:	2778      	movs	r7, #120	; 0x78
 8008f82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	6829      	ldr	r1, [r5, #0]
 8008f8a:	061f      	lsls	r7, r3, #24
 8008f8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f90:	d402      	bmi.n	8008f98 <_printf_i+0x18c>
 8008f92:	065f      	lsls	r7, r3, #25
 8008f94:	bf48      	it	mi
 8008f96:	b2b6      	uxthmi	r6, r6
 8008f98:	07df      	lsls	r7, r3, #31
 8008f9a:	bf48      	it	mi
 8008f9c:	f043 0320 	orrmi.w	r3, r3, #32
 8008fa0:	6029      	str	r1, [r5, #0]
 8008fa2:	bf48      	it	mi
 8008fa4:	6023      	strmi	r3, [r4, #0]
 8008fa6:	b91e      	cbnz	r6, 8008fb0 <_printf_i+0x1a4>
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	f023 0320 	bic.w	r3, r3, #32
 8008fae:	6023      	str	r3, [r4, #0]
 8008fb0:	2310      	movs	r3, #16
 8008fb2:	e7a7      	b.n	8008f04 <_printf_i+0xf8>
 8008fb4:	4824      	ldr	r0, [pc, #144]	; (8009048 <_printf_i+0x23c>)
 8008fb6:	e7e4      	b.n	8008f82 <_printf_i+0x176>
 8008fb8:	4615      	mov	r5, r2
 8008fba:	e7bd      	b.n	8008f38 <_printf_i+0x12c>
 8008fbc:	682b      	ldr	r3, [r5, #0]
 8008fbe:	6826      	ldr	r6, [r4, #0]
 8008fc0:	6961      	ldr	r1, [r4, #20]
 8008fc2:	1d18      	adds	r0, r3, #4
 8008fc4:	6028      	str	r0, [r5, #0]
 8008fc6:	0635      	lsls	r5, r6, #24
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	d501      	bpl.n	8008fd0 <_printf_i+0x1c4>
 8008fcc:	6019      	str	r1, [r3, #0]
 8008fce:	e002      	b.n	8008fd6 <_printf_i+0x1ca>
 8008fd0:	0670      	lsls	r0, r6, #25
 8008fd2:	d5fb      	bpl.n	8008fcc <_printf_i+0x1c0>
 8008fd4:	8019      	strh	r1, [r3, #0]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	6123      	str	r3, [r4, #16]
 8008fda:	4615      	mov	r5, r2
 8008fdc:	e7bc      	b.n	8008f58 <_printf_i+0x14c>
 8008fde:	682b      	ldr	r3, [r5, #0]
 8008fe0:	1d1a      	adds	r2, r3, #4
 8008fe2:	602a      	str	r2, [r5, #0]
 8008fe4:	681d      	ldr	r5, [r3, #0]
 8008fe6:	6862      	ldr	r2, [r4, #4]
 8008fe8:	2100      	movs	r1, #0
 8008fea:	4628      	mov	r0, r5
 8008fec:	f7f7 f8f8 	bl	80001e0 <memchr>
 8008ff0:	b108      	cbz	r0, 8008ff6 <_printf_i+0x1ea>
 8008ff2:	1b40      	subs	r0, r0, r5
 8008ff4:	6060      	str	r0, [r4, #4]
 8008ff6:	6863      	ldr	r3, [r4, #4]
 8008ff8:	6123      	str	r3, [r4, #16]
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009000:	e7aa      	b.n	8008f58 <_printf_i+0x14c>
 8009002:	6923      	ldr	r3, [r4, #16]
 8009004:	462a      	mov	r2, r5
 8009006:	4649      	mov	r1, r9
 8009008:	4640      	mov	r0, r8
 800900a:	47d0      	blx	sl
 800900c:	3001      	adds	r0, #1
 800900e:	d0ad      	beq.n	8008f6c <_printf_i+0x160>
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	079b      	lsls	r3, r3, #30
 8009014:	d413      	bmi.n	800903e <_printf_i+0x232>
 8009016:	68e0      	ldr	r0, [r4, #12]
 8009018:	9b03      	ldr	r3, [sp, #12]
 800901a:	4298      	cmp	r0, r3
 800901c:	bfb8      	it	lt
 800901e:	4618      	movlt	r0, r3
 8009020:	e7a6      	b.n	8008f70 <_printf_i+0x164>
 8009022:	2301      	movs	r3, #1
 8009024:	4632      	mov	r2, r6
 8009026:	4649      	mov	r1, r9
 8009028:	4640      	mov	r0, r8
 800902a:	47d0      	blx	sl
 800902c:	3001      	adds	r0, #1
 800902e:	d09d      	beq.n	8008f6c <_printf_i+0x160>
 8009030:	3501      	adds	r5, #1
 8009032:	68e3      	ldr	r3, [r4, #12]
 8009034:	9903      	ldr	r1, [sp, #12]
 8009036:	1a5b      	subs	r3, r3, r1
 8009038:	42ab      	cmp	r3, r5
 800903a:	dcf2      	bgt.n	8009022 <_printf_i+0x216>
 800903c:	e7eb      	b.n	8009016 <_printf_i+0x20a>
 800903e:	2500      	movs	r5, #0
 8009040:	f104 0619 	add.w	r6, r4, #25
 8009044:	e7f5      	b.n	8009032 <_printf_i+0x226>
 8009046:	bf00      	nop
 8009048:	0800d17e 	.word	0x0800d17e
 800904c:	0800d18f 	.word	0x0800d18f

08009050 <_scanf_float>:
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	b087      	sub	sp, #28
 8009056:	4617      	mov	r7, r2
 8009058:	9303      	str	r3, [sp, #12]
 800905a:	688b      	ldr	r3, [r1, #8]
 800905c:	1e5a      	subs	r2, r3, #1
 800905e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009062:	bf83      	ittte	hi
 8009064:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009068:	195b      	addhi	r3, r3, r5
 800906a:	9302      	strhi	r3, [sp, #8]
 800906c:	2300      	movls	r3, #0
 800906e:	bf86      	itte	hi
 8009070:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009074:	608b      	strhi	r3, [r1, #8]
 8009076:	9302      	strls	r3, [sp, #8]
 8009078:	680b      	ldr	r3, [r1, #0]
 800907a:	468b      	mov	fp, r1
 800907c:	2500      	movs	r5, #0
 800907e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009082:	f84b 3b1c 	str.w	r3, [fp], #28
 8009086:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800908a:	4680      	mov	r8, r0
 800908c:	460c      	mov	r4, r1
 800908e:	465e      	mov	r6, fp
 8009090:	46aa      	mov	sl, r5
 8009092:	46a9      	mov	r9, r5
 8009094:	9501      	str	r5, [sp, #4]
 8009096:	68a2      	ldr	r2, [r4, #8]
 8009098:	b152      	cbz	r2, 80090b0 <_scanf_float+0x60>
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	2b4e      	cmp	r3, #78	; 0x4e
 80090a0:	d864      	bhi.n	800916c <_scanf_float+0x11c>
 80090a2:	2b40      	cmp	r3, #64	; 0x40
 80090a4:	d83c      	bhi.n	8009120 <_scanf_float+0xd0>
 80090a6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80090aa:	b2c8      	uxtb	r0, r1
 80090ac:	280e      	cmp	r0, #14
 80090ae:	d93a      	bls.n	8009126 <_scanf_float+0xd6>
 80090b0:	f1b9 0f00 	cmp.w	r9, #0
 80090b4:	d003      	beq.n	80090be <_scanf_float+0x6e>
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090c2:	f1ba 0f01 	cmp.w	sl, #1
 80090c6:	f200 8113 	bhi.w	80092f0 <_scanf_float+0x2a0>
 80090ca:	455e      	cmp	r6, fp
 80090cc:	f200 8105 	bhi.w	80092da <_scanf_float+0x28a>
 80090d0:	2501      	movs	r5, #1
 80090d2:	4628      	mov	r0, r5
 80090d4:	b007      	add	sp, #28
 80090d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090da:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80090de:	2a0d      	cmp	r2, #13
 80090e0:	d8e6      	bhi.n	80090b0 <_scanf_float+0x60>
 80090e2:	a101      	add	r1, pc, #4	; (adr r1, 80090e8 <_scanf_float+0x98>)
 80090e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80090e8:	08009227 	.word	0x08009227
 80090ec:	080090b1 	.word	0x080090b1
 80090f0:	080090b1 	.word	0x080090b1
 80090f4:	080090b1 	.word	0x080090b1
 80090f8:	08009287 	.word	0x08009287
 80090fc:	0800925f 	.word	0x0800925f
 8009100:	080090b1 	.word	0x080090b1
 8009104:	080090b1 	.word	0x080090b1
 8009108:	08009235 	.word	0x08009235
 800910c:	080090b1 	.word	0x080090b1
 8009110:	080090b1 	.word	0x080090b1
 8009114:	080090b1 	.word	0x080090b1
 8009118:	080090b1 	.word	0x080090b1
 800911c:	080091ed 	.word	0x080091ed
 8009120:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009124:	e7db      	b.n	80090de <_scanf_float+0x8e>
 8009126:	290e      	cmp	r1, #14
 8009128:	d8c2      	bhi.n	80090b0 <_scanf_float+0x60>
 800912a:	a001      	add	r0, pc, #4	; (adr r0, 8009130 <_scanf_float+0xe0>)
 800912c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009130:	080091df 	.word	0x080091df
 8009134:	080090b1 	.word	0x080090b1
 8009138:	080091df 	.word	0x080091df
 800913c:	08009273 	.word	0x08009273
 8009140:	080090b1 	.word	0x080090b1
 8009144:	0800918d 	.word	0x0800918d
 8009148:	080091c9 	.word	0x080091c9
 800914c:	080091c9 	.word	0x080091c9
 8009150:	080091c9 	.word	0x080091c9
 8009154:	080091c9 	.word	0x080091c9
 8009158:	080091c9 	.word	0x080091c9
 800915c:	080091c9 	.word	0x080091c9
 8009160:	080091c9 	.word	0x080091c9
 8009164:	080091c9 	.word	0x080091c9
 8009168:	080091c9 	.word	0x080091c9
 800916c:	2b6e      	cmp	r3, #110	; 0x6e
 800916e:	d809      	bhi.n	8009184 <_scanf_float+0x134>
 8009170:	2b60      	cmp	r3, #96	; 0x60
 8009172:	d8b2      	bhi.n	80090da <_scanf_float+0x8a>
 8009174:	2b54      	cmp	r3, #84	; 0x54
 8009176:	d077      	beq.n	8009268 <_scanf_float+0x218>
 8009178:	2b59      	cmp	r3, #89	; 0x59
 800917a:	d199      	bne.n	80090b0 <_scanf_float+0x60>
 800917c:	2d07      	cmp	r5, #7
 800917e:	d197      	bne.n	80090b0 <_scanf_float+0x60>
 8009180:	2508      	movs	r5, #8
 8009182:	e029      	b.n	80091d8 <_scanf_float+0x188>
 8009184:	2b74      	cmp	r3, #116	; 0x74
 8009186:	d06f      	beq.n	8009268 <_scanf_float+0x218>
 8009188:	2b79      	cmp	r3, #121	; 0x79
 800918a:	e7f6      	b.n	800917a <_scanf_float+0x12a>
 800918c:	6821      	ldr	r1, [r4, #0]
 800918e:	05c8      	lsls	r0, r1, #23
 8009190:	d51a      	bpl.n	80091c8 <_scanf_float+0x178>
 8009192:	9b02      	ldr	r3, [sp, #8]
 8009194:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009198:	6021      	str	r1, [r4, #0]
 800919a:	f109 0901 	add.w	r9, r9, #1
 800919e:	b11b      	cbz	r3, 80091a8 <_scanf_float+0x158>
 80091a0:	3b01      	subs	r3, #1
 80091a2:	3201      	adds	r2, #1
 80091a4:	9302      	str	r3, [sp, #8]
 80091a6:	60a2      	str	r2, [r4, #8]
 80091a8:	68a3      	ldr	r3, [r4, #8]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	60a3      	str	r3, [r4, #8]
 80091ae:	6923      	ldr	r3, [r4, #16]
 80091b0:	3301      	adds	r3, #1
 80091b2:	6123      	str	r3, [r4, #16]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	607b      	str	r3, [r7, #4]
 80091bc:	f340 8084 	ble.w	80092c8 <_scanf_float+0x278>
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	3301      	adds	r3, #1
 80091c4:	603b      	str	r3, [r7, #0]
 80091c6:	e766      	b.n	8009096 <_scanf_float+0x46>
 80091c8:	eb1a 0f05 	cmn.w	sl, r5
 80091cc:	f47f af70 	bne.w	80090b0 <_scanf_float+0x60>
 80091d0:	6822      	ldr	r2, [r4, #0]
 80091d2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80091d6:	6022      	str	r2, [r4, #0]
 80091d8:	f806 3b01 	strb.w	r3, [r6], #1
 80091dc:	e7e4      	b.n	80091a8 <_scanf_float+0x158>
 80091de:	6822      	ldr	r2, [r4, #0]
 80091e0:	0610      	lsls	r0, r2, #24
 80091e2:	f57f af65 	bpl.w	80090b0 <_scanf_float+0x60>
 80091e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091ea:	e7f4      	b.n	80091d6 <_scanf_float+0x186>
 80091ec:	f1ba 0f00 	cmp.w	sl, #0
 80091f0:	d10e      	bne.n	8009210 <_scanf_float+0x1c0>
 80091f2:	f1b9 0f00 	cmp.w	r9, #0
 80091f6:	d10e      	bne.n	8009216 <_scanf_float+0x1c6>
 80091f8:	6822      	ldr	r2, [r4, #0]
 80091fa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80091fe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009202:	d108      	bne.n	8009216 <_scanf_float+0x1c6>
 8009204:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009208:	6022      	str	r2, [r4, #0]
 800920a:	f04f 0a01 	mov.w	sl, #1
 800920e:	e7e3      	b.n	80091d8 <_scanf_float+0x188>
 8009210:	f1ba 0f02 	cmp.w	sl, #2
 8009214:	d055      	beq.n	80092c2 <_scanf_float+0x272>
 8009216:	2d01      	cmp	r5, #1
 8009218:	d002      	beq.n	8009220 <_scanf_float+0x1d0>
 800921a:	2d04      	cmp	r5, #4
 800921c:	f47f af48 	bne.w	80090b0 <_scanf_float+0x60>
 8009220:	3501      	adds	r5, #1
 8009222:	b2ed      	uxtb	r5, r5
 8009224:	e7d8      	b.n	80091d8 <_scanf_float+0x188>
 8009226:	f1ba 0f01 	cmp.w	sl, #1
 800922a:	f47f af41 	bne.w	80090b0 <_scanf_float+0x60>
 800922e:	f04f 0a02 	mov.w	sl, #2
 8009232:	e7d1      	b.n	80091d8 <_scanf_float+0x188>
 8009234:	b97d      	cbnz	r5, 8009256 <_scanf_float+0x206>
 8009236:	f1b9 0f00 	cmp.w	r9, #0
 800923a:	f47f af3c 	bne.w	80090b6 <_scanf_float+0x66>
 800923e:	6822      	ldr	r2, [r4, #0]
 8009240:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009244:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009248:	f47f af39 	bne.w	80090be <_scanf_float+0x6e>
 800924c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009250:	6022      	str	r2, [r4, #0]
 8009252:	2501      	movs	r5, #1
 8009254:	e7c0      	b.n	80091d8 <_scanf_float+0x188>
 8009256:	2d03      	cmp	r5, #3
 8009258:	d0e2      	beq.n	8009220 <_scanf_float+0x1d0>
 800925a:	2d05      	cmp	r5, #5
 800925c:	e7de      	b.n	800921c <_scanf_float+0x1cc>
 800925e:	2d02      	cmp	r5, #2
 8009260:	f47f af26 	bne.w	80090b0 <_scanf_float+0x60>
 8009264:	2503      	movs	r5, #3
 8009266:	e7b7      	b.n	80091d8 <_scanf_float+0x188>
 8009268:	2d06      	cmp	r5, #6
 800926a:	f47f af21 	bne.w	80090b0 <_scanf_float+0x60>
 800926e:	2507      	movs	r5, #7
 8009270:	e7b2      	b.n	80091d8 <_scanf_float+0x188>
 8009272:	6822      	ldr	r2, [r4, #0]
 8009274:	0591      	lsls	r1, r2, #22
 8009276:	f57f af1b 	bpl.w	80090b0 <_scanf_float+0x60>
 800927a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800927e:	6022      	str	r2, [r4, #0]
 8009280:	f8cd 9004 	str.w	r9, [sp, #4]
 8009284:	e7a8      	b.n	80091d8 <_scanf_float+0x188>
 8009286:	6822      	ldr	r2, [r4, #0]
 8009288:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800928c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009290:	d006      	beq.n	80092a0 <_scanf_float+0x250>
 8009292:	0550      	lsls	r0, r2, #21
 8009294:	f57f af0c 	bpl.w	80090b0 <_scanf_float+0x60>
 8009298:	f1b9 0f00 	cmp.w	r9, #0
 800929c:	f43f af0f 	beq.w	80090be <_scanf_float+0x6e>
 80092a0:	0591      	lsls	r1, r2, #22
 80092a2:	bf58      	it	pl
 80092a4:	9901      	ldrpl	r1, [sp, #4]
 80092a6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80092aa:	bf58      	it	pl
 80092ac:	eba9 0101 	subpl.w	r1, r9, r1
 80092b0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80092b4:	bf58      	it	pl
 80092b6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80092ba:	6022      	str	r2, [r4, #0]
 80092bc:	f04f 0900 	mov.w	r9, #0
 80092c0:	e78a      	b.n	80091d8 <_scanf_float+0x188>
 80092c2:	f04f 0a03 	mov.w	sl, #3
 80092c6:	e787      	b.n	80091d8 <_scanf_float+0x188>
 80092c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80092cc:	4639      	mov	r1, r7
 80092ce:	4640      	mov	r0, r8
 80092d0:	4798      	blx	r3
 80092d2:	2800      	cmp	r0, #0
 80092d4:	f43f aedf 	beq.w	8009096 <_scanf_float+0x46>
 80092d8:	e6ea      	b.n	80090b0 <_scanf_float+0x60>
 80092da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80092e2:	463a      	mov	r2, r7
 80092e4:	4640      	mov	r0, r8
 80092e6:	4798      	blx	r3
 80092e8:	6923      	ldr	r3, [r4, #16]
 80092ea:	3b01      	subs	r3, #1
 80092ec:	6123      	str	r3, [r4, #16]
 80092ee:	e6ec      	b.n	80090ca <_scanf_float+0x7a>
 80092f0:	1e6b      	subs	r3, r5, #1
 80092f2:	2b06      	cmp	r3, #6
 80092f4:	d825      	bhi.n	8009342 <_scanf_float+0x2f2>
 80092f6:	2d02      	cmp	r5, #2
 80092f8:	d836      	bhi.n	8009368 <_scanf_float+0x318>
 80092fa:	455e      	cmp	r6, fp
 80092fc:	f67f aee8 	bls.w	80090d0 <_scanf_float+0x80>
 8009300:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009304:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009308:	463a      	mov	r2, r7
 800930a:	4640      	mov	r0, r8
 800930c:	4798      	blx	r3
 800930e:	6923      	ldr	r3, [r4, #16]
 8009310:	3b01      	subs	r3, #1
 8009312:	6123      	str	r3, [r4, #16]
 8009314:	e7f1      	b.n	80092fa <_scanf_float+0x2aa>
 8009316:	9802      	ldr	r0, [sp, #8]
 8009318:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800931c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009320:	9002      	str	r0, [sp, #8]
 8009322:	463a      	mov	r2, r7
 8009324:	4640      	mov	r0, r8
 8009326:	4798      	blx	r3
 8009328:	6923      	ldr	r3, [r4, #16]
 800932a:	3b01      	subs	r3, #1
 800932c:	6123      	str	r3, [r4, #16]
 800932e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009332:	fa5f fa8a 	uxtb.w	sl, sl
 8009336:	f1ba 0f02 	cmp.w	sl, #2
 800933a:	d1ec      	bne.n	8009316 <_scanf_float+0x2c6>
 800933c:	3d03      	subs	r5, #3
 800933e:	b2ed      	uxtb	r5, r5
 8009340:	1b76      	subs	r6, r6, r5
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	05da      	lsls	r2, r3, #23
 8009346:	d52f      	bpl.n	80093a8 <_scanf_float+0x358>
 8009348:	055b      	lsls	r3, r3, #21
 800934a:	d510      	bpl.n	800936e <_scanf_float+0x31e>
 800934c:	455e      	cmp	r6, fp
 800934e:	f67f aebf 	bls.w	80090d0 <_scanf_float+0x80>
 8009352:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009356:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800935a:	463a      	mov	r2, r7
 800935c:	4640      	mov	r0, r8
 800935e:	4798      	blx	r3
 8009360:	6923      	ldr	r3, [r4, #16]
 8009362:	3b01      	subs	r3, #1
 8009364:	6123      	str	r3, [r4, #16]
 8009366:	e7f1      	b.n	800934c <_scanf_float+0x2fc>
 8009368:	46aa      	mov	sl, r5
 800936a:	9602      	str	r6, [sp, #8]
 800936c:	e7df      	b.n	800932e <_scanf_float+0x2de>
 800936e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009372:	6923      	ldr	r3, [r4, #16]
 8009374:	2965      	cmp	r1, #101	; 0x65
 8009376:	f103 33ff 	add.w	r3, r3, #4294967295
 800937a:	f106 35ff 	add.w	r5, r6, #4294967295
 800937e:	6123      	str	r3, [r4, #16]
 8009380:	d00c      	beq.n	800939c <_scanf_float+0x34c>
 8009382:	2945      	cmp	r1, #69	; 0x45
 8009384:	d00a      	beq.n	800939c <_scanf_float+0x34c>
 8009386:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800938a:	463a      	mov	r2, r7
 800938c:	4640      	mov	r0, r8
 800938e:	4798      	blx	r3
 8009390:	6923      	ldr	r3, [r4, #16]
 8009392:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009396:	3b01      	subs	r3, #1
 8009398:	1eb5      	subs	r5, r6, #2
 800939a:	6123      	str	r3, [r4, #16]
 800939c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093a0:	463a      	mov	r2, r7
 80093a2:	4640      	mov	r0, r8
 80093a4:	4798      	blx	r3
 80093a6:	462e      	mov	r6, r5
 80093a8:	6825      	ldr	r5, [r4, #0]
 80093aa:	f015 0510 	ands.w	r5, r5, #16
 80093ae:	d158      	bne.n	8009462 <_scanf_float+0x412>
 80093b0:	7035      	strb	r5, [r6, #0]
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80093b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093bc:	d11c      	bne.n	80093f8 <_scanf_float+0x3a8>
 80093be:	9b01      	ldr	r3, [sp, #4]
 80093c0:	454b      	cmp	r3, r9
 80093c2:	eba3 0209 	sub.w	r2, r3, r9
 80093c6:	d124      	bne.n	8009412 <_scanf_float+0x3c2>
 80093c8:	2200      	movs	r2, #0
 80093ca:	4659      	mov	r1, fp
 80093cc:	4640      	mov	r0, r8
 80093ce:	f002 fd33 	bl	800be38 <_strtod_r>
 80093d2:	9b03      	ldr	r3, [sp, #12]
 80093d4:	6821      	ldr	r1, [r4, #0]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f011 0f02 	tst.w	r1, #2
 80093dc:	ec57 6b10 	vmov	r6, r7, d0
 80093e0:	f103 0204 	add.w	r2, r3, #4
 80093e4:	d020      	beq.n	8009428 <_scanf_float+0x3d8>
 80093e6:	9903      	ldr	r1, [sp, #12]
 80093e8:	600a      	str	r2, [r1, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	e9c3 6700 	strd	r6, r7, [r3]
 80093f0:	68e3      	ldr	r3, [r4, #12]
 80093f2:	3301      	adds	r3, #1
 80093f4:	60e3      	str	r3, [r4, #12]
 80093f6:	e66c      	b.n	80090d2 <_scanf_float+0x82>
 80093f8:	9b04      	ldr	r3, [sp, #16]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d0e4      	beq.n	80093c8 <_scanf_float+0x378>
 80093fe:	9905      	ldr	r1, [sp, #20]
 8009400:	230a      	movs	r3, #10
 8009402:	462a      	mov	r2, r5
 8009404:	3101      	adds	r1, #1
 8009406:	4640      	mov	r0, r8
 8009408:	f002 fd9e 	bl	800bf48 <_strtol_r>
 800940c:	9b04      	ldr	r3, [sp, #16]
 800940e:	9e05      	ldr	r6, [sp, #20]
 8009410:	1ac2      	subs	r2, r0, r3
 8009412:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009416:	429e      	cmp	r6, r3
 8009418:	bf28      	it	cs
 800941a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800941e:	4912      	ldr	r1, [pc, #72]	; (8009468 <_scanf_float+0x418>)
 8009420:	4630      	mov	r0, r6
 8009422:	f000 f94b 	bl	80096bc <siprintf>
 8009426:	e7cf      	b.n	80093c8 <_scanf_float+0x378>
 8009428:	f011 0f04 	tst.w	r1, #4
 800942c:	9903      	ldr	r1, [sp, #12]
 800942e:	600a      	str	r2, [r1, #0]
 8009430:	d1db      	bne.n	80093ea <_scanf_float+0x39a>
 8009432:	f8d3 8000 	ldr.w	r8, [r3]
 8009436:	ee10 2a10 	vmov	r2, s0
 800943a:	ee10 0a10 	vmov	r0, s0
 800943e:	463b      	mov	r3, r7
 8009440:	4639      	mov	r1, r7
 8009442:	f7f7 fb7b 	bl	8000b3c <__aeabi_dcmpun>
 8009446:	b128      	cbz	r0, 8009454 <_scanf_float+0x404>
 8009448:	4808      	ldr	r0, [pc, #32]	; (800946c <_scanf_float+0x41c>)
 800944a:	f000 fabb 	bl	80099c4 <nanf>
 800944e:	ed88 0a00 	vstr	s0, [r8]
 8009452:	e7cd      	b.n	80093f0 <_scanf_float+0x3a0>
 8009454:	4630      	mov	r0, r6
 8009456:	4639      	mov	r1, r7
 8009458:	f7f7 fbce 	bl	8000bf8 <__aeabi_d2f>
 800945c:	f8c8 0000 	str.w	r0, [r8]
 8009460:	e7c6      	b.n	80093f0 <_scanf_float+0x3a0>
 8009462:	2500      	movs	r5, #0
 8009464:	e635      	b.n	80090d2 <_scanf_float+0x82>
 8009466:	bf00      	nop
 8009468:	0800d1a0 	.word	0x0800d1a0
 800946c:	0800d535 	.word	0x0800d535

08009470 <std>:
 8009470:	2300      	movs	r3, #0
 8009472:	b510      	push	{r4, lr}
 8009474:	4604      	mov	r4, r0
 8009476:	e9c0 3300 	strd	r3, r3, [r0]
 800947a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800947e:	6083      	str	r3, [r0, #8]
 8009480:	8181      	strh	r1, [r0, #12]
 8009482:	6643      	str	r3, [r0, #100]	; 0x64
 8009484:	81c2      	strh	r2, [r0, #14]
 8009486:	6183      	str	r3, [r0, #24]
 8009488:	4619      	mov	r1, r3
 800948a:	2208      	movs	r2, #8
 800948c:	305c      	adds	r0, #92	; 0x5c
 800948e:	f000 fa0d 	bl	80098ac <memset>
 8009492:	4b05      	ldr	r3, [pc, #20]	; (80094a8 <std+0x38>)
 8009494:	6263      	str	r3, [r4, #36]	; 0x24
 8009496:	4b05      	ldr	r3, [pc, #20]	; (80094ac <std+0x3c>)
 8009498:	62a3      	str	r3, [r4, #40]	; 0x28
 800949a:	4b05      	ldr	r3, [pc, #20]	; (80094b0 <std+0x40>)
 800949c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800949e:	4b05      	ldr	r3, [pc, #20]	; (80094b4 <std+0x44>)
 80094a0:	6224      	str	r4, [r4, #32]
 80094a2:	6323      	str	r3, [r4, #48]	; 0x30
 80094a4:	bd10      	pop	{r4, pc}
 80094a6:	bf00      	nop
 80094a8:	080096fd 	.word	0x080096fd
 80094ac:	0800971f 	.word	0x0800971f
 80094b0:	08009757 	.word	0x08009757
 80094b4:	0800977b 	.word	0x0800977b

080094b8 <stdio_exit_handler>:
 80094b8:	4a02      	ldr	r2, [pc, #8]	; (80094c4 <stdio_exit_handler+0xc>)
 80094ba:	4903      	ldr	r1, [pc, #12]	; (80094c8 <stdio_exit_handler+0x10>)
 80094bc:	4803      	ldr	r0, [pc, #12]	; (80094cc <stdio_exit_handler+0x14>)
 80094be:	f000 b869 	b.w	8009594 <_fwalk_sglue>
 80094c2:	bf00      	nop
 80094c4:	200000fc 	.word	0x200000fc
 80094c8:	0800c591 	.word	0x0800c591
 80094cc:	20000108 	.word	0x20000108

080094d0 <cleanup_stdio>:
 80094d0:	6841      	ldr	r1, [r0, #4]
 80094d2:	4b0c      	ldr	r3, [pc, #48]	; (8009504 <cleanup_stdio+0x34>)
 80094d4:	4299      	cmp	r1, r3
 80094d6:	b510      	push	{r4, lr}
 80094d8:	4604      	mov	r4, r0
 80094da:	d001      	beq.n	80094e0 <cleanup_stdio+0x10>
 80094dc:	f003 f858 	bl	800c590 <_fflush_r>
 80094e0:	68a1      	ldr	r1, [r4, #8]
 80094e2:	4b09      	ldr	r3, [pc, #36]	; (8009508 <cleanup_stdio+0x38>)
 80094e4:	4299      	cmp	r1, r3
 80094e6:	d002      	beq.n	80094ee <cleanup_stdio+0x1e>
 80094e8:	4620      	mov	r0, r4
 80094ea:	f003 f851 	bl	800c590 <_fflush_r>
 80094ee:	68e1      	ldr	r1, [r4, #12]
 80094f0:	4b06      	ldr	r3, [pc, #24]	; (800950c <cleanup_stdio+0x3c>)
 80094f2:	4299      	cmp	r1, r3
 80094f4:	d004      	beq.n	8009500 <cleanup_stdio+0x30>
 80094f6:	4620      	mov	r0, r4
 80094f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094fc:	f003 b848 	b.w	800c590 <_fflush_r>
 8009500:	bd10      	pop	{r4, pc}
 8009502:	bf00      	nop
 8009504:	20002258 	.word	0x20002258
 8009508:	200022c0 	.word	0x200022c0
 800950c:	20002328 	.word	0x20002328

08009510 <global_stdio_init.part.0>:
 8009510:	b510      	push	{r4, lr}
 8009512:	4b0b      	ldr	r3, [pc, #44]	; (8009540 <global_stdio_init.part.0+0x30>)
 8009514:	4c0b      	ldr	r4, [pc, #44]	; (8009544 <global_stdio_init.part.0+0x34>)
 8009516:	4a0c      	ldr	r2, [pc, #48]	; (8009548 <global_stdio_init.part.0+0x38>)
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	4620      	mov	r0, r4
 800951c:	2200      	movs	r2, #0
 800951e:	2104      	movs	r1, #4
 8009520:	f7ff ffa6 	bl	8009470 <std>
 8009524:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009528:	2201      	movs	r2, #1
 800952a:	2109      	movs	r1, #9
 800952c:	f7ff ffa0 	bl	8009470 <std>
 8009530:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009534:	2202      	movs	r2, #2
 8009536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800953a:	2112      	movs	r1, #18
 800953c:	f7ff bf98 	b.w	8009470 <std>
 8009540:	20002390 	.word	0x20002390
 8009544:	20002258 	.word	0x20002258
 8009548:	080094b9 	.word	0x080094b9

0800954c <__sfp_lock_acquire>:
 800954c:	4801      	ldr	r0, [pc, #4]	; (8009554 <__sfp_lock_acquire+0x8>)
 800954e:	f000 ba29 	b.w	80099a4 <__retarget_lock_acquire_recursive>
 8009552:	bf00      	nop
 8009554:	20002399 	.word	0x20002399

08009558 <__sfp_lock_release>:
 8009558:	4801      	ldr	r0, [pc, #4]	; (8009560 <__sfp_lock_release+0x8>)
 800955a:	f000 ba24 	b.w	80099a6 <__retarget_lock_release_recursive>
 800955e:	bf00      	nop
 8009560:	20002399 	.word	0x20002399

08009564 <__sinit>:
 8009564:	b510      	push	{r4, lr}
 8009566:	4604      	mov	r4, r0
 8009568:	f7ff fff0 	bl	800954c <__sfp_lock_acquire>
 800956c:	6a23      	ldr	r3, [r4, #32]
 800956e:	b11b      	cbz	r3, 8009578 <__sinit+0x14>
 8009570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009574:	f7ff bff0 	b.w	8009558 <__sfp_lock_release>
 8009578:	4b04      	ldr	r3, [pc, #16]	; (800958c <__sinit+0x28>)
 800957a:	6223      	str	r3, [r4, #32]
 800957c:	4b04      	ldr	r3, [pc, #16]	; (8009590 <__sinit+0x2c>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1f5      	bne.n	8009570 <__sinit+0xc>
 8009584:	f7ff ffc4 	bl	8009510 <global_stdio_init.part.0>
 8009588:	e7f2      	b.n	8009570 <__sinit+0xc>
 800958a:	bf00      	nop
 800958c:	080094d1 	.word	0x080094d1
 8009590:	20002390 	.word	0x20002390

08009594 <_fwalk_sglue>:
 8009594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009598:	4607      	mov	r7, r0
 800959a:	4688      	mov	r8, r1
 800959c:	4614      	mov	r4, r2
 800959e:	2600      	movs	r6, #0
 80095a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095a4:	f1b9 0901 	subs.w	r9, r9, #1
 80095a8:	d505      	bpl.n	80095b6 <_fwalk_sglue+0x22>
 80095aa:	6824      	ldr	r4, [r4, #0]
 80095ac:	2c00      	cmp	r4, #0
 80095ae:	d1f7      	bne.n	80095a0 <_fwalk_sglue+0xc>
 80095b0:	4630      	mov	r0, r6
 80095b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095b6:	89ab      	ldrh	r3, [r5, #12]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d907      	bls.n	80095cc <_fwalk_sglue+0x38>
 80095bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095c0:	3301      	adds	r3, #1
 80095c2:	d003      	beq.n	80095cc <_fwalk_sglue+0x38>
 80095c4:	4629      	mov	r1, r5
 80095c6:	4638      	mov	r0, r7
 80095c8:	47c0      	blx	r8
 80095ca:	4306      	orrs	r6, r0
 80095cc:	3568      	adds	r5, #104	; 0x68
 80095ce:	e7e9      	b.n	80095a4 <_fwalk_sglue+0x10>

080095d0 <iprintf>:
 80095d0:	b40f      	push	{r0, r1, r2, r3}
 80095d2:	b507      	push	{r0, r1, r2, lr}
 80095d4:	4906      	ldr	r1, [pc, #24]	; (80095f0 <iprintf+0x20>)
 80095d6:	ab04      	add	r3, sp, #16
 80095d8:	6808      	ldr	r0, [r1, #0]
 80095da:	f853 2b04 	ldr.w	r2, [r3], #4
 80095de:	6881      	ldr	r1, [r0, #8]
 80095e0:	9301      	str	r3, [sp, #4]
 80095e2:	f002 fe35 	bl	800c250 <_vfiprintf_r>
 80095e6:	b003      	add	sp, #12
 80095e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80095ec:	b004      	add	sp, #16
 80095ee:	4770      	bx	lr
 80095f0:	20000154 	.word	0x20000154

080095f4 <putchar>:
 80095f4:	4b02      	ldr	r3, [pc, #8]	; (8009600 <putchar+0xc>)
 80095f6:	4601      	mov	r1, r0
 80095f8:	6818      	ldr	r0, [r3, #0]
 80095fa:	6882      	ldr	r2, [r0, #8]
 80095fc:	f003 b852 	b.w	800c6a4 <_putc_r>
 8009600:	20000154 	.word	0x20000154

08009604 <_puts_r>:
 8009604:	6a03      	ldr	r3, [r0, #32]
 8009606:	b570      	push	{r4, r5, r6, lr}
 8009608:	6884      	ldr	r4, [r0, #8]
 800960a:	4605      	mov	r5, r0
 800960c:	460e      	mov	r6, r1
 800960e:	b90b      	cbnz	r3, 8009614 <_puts_r+0x10>
 8009610:	f7ff ffa8 	bl	8009564 <__sinit>
 8009614:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009616:	07db      	lsls	r3, r3, #31
 8009618:	d405      	bmi.n	8009626 <_puts_r+0x22>
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	0598      	lsls	r0, r3, #22
 800961e:	d402      	bmi.n	8009626 <_puts_r+0x22>
 8009620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009622:	f000 f9bf 	bl	80099a4 <__retarget_lock_acquire_recursive>
 8009626:	89a3      	ldrh	r3, [r4, #12]
 8009628:	0719      	lsls	r1, r3, #28
 800962a:	d513      	bpl.n	8009654 <_puts_r+0x50>
 800962c:	6923      	ldr	r3, [r4, #16]
 800962e:	b18b      	cbz	r3, 8009654 <_puts_r+0x50>
 8009630:	3e01      	subs	r6, #1
 8009632:	68a3      	ldr	r3, [r4, #8]
 8009634:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009638:	3b01      	subs	r3, #1
 800963a:	60a3      	str	r3, [r4, #8]
 800963c:	b9e9      	cbnz	r1, 800967a <_puts_r+0x76>
 800963e:	2b00      	cmp	r3, #0
 8009640:	da2e      	bge.n	80096a0 <_puts_r+0x9c>
 8009642:	4622      	mov	r2, r4
 8009644:	210a      	movs	r1, #10
 8009646:	4628      	mov	r0, r5
 8009648:	f000 f89b 	bl	8009782 <__swbuf_r>
 800964c:	3001      	adds	r0, #1
 800964e:	d007      	beq.n	8009660 <_puts_r+0x5c>
 8009650:	250a      	movs	r5, #10
 8009652:	e007      	b.n	8009664 <_puts_r+0x60>
 8009654:	4621      	mov	r1, r4
 8009656:	4628      	mov	r0, r5
 8009658:	f000 f8d0 	bl	80097fc <__swsetup_r>
 800965c:	2800      	cmp	r0, #0
 800965e:	d0e7      	beq.n	8009630 <_puts_r+0x2c>
 8009660:	f04f 35ff 	mov.w	r5, #4294967295
 8009664:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009666:	07da      	lsls	r2, r3, #31
 8009668:	d405      	bmi.n	8009676 <_puts_r+0x72>
 800966a:	89a3      	ldrh	r3, [r4, #12]
 800966c:	059b      	lsls	r3, r3, #22
 800966e:	d402      	bmi.n	8009676 <_puts_r+0x72>
 8009670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009672:	f000 f998 	bl	80099a6 <__retarget_lock_release_recursive>
 8009676:	4628      	mov	r0, r5
 8009678:	bd70      	pop	{r4, r5, r6, pc}
 800967a:	2b00      	cmp	r3, #0
 800967c:	da04      	bge.n	8009688 <_puts_r+0x84>
 800967e:	69a2      	ldr	r2, [r4, #24]
 8009680:	429a      	cmp	r2, r3
 8009682:	dc06      	bgt.n	8009692 <_puts_r+0x8e>
 8009684:	290a      	cmp	r1, #10
 8009686:	d004      	beq.n	8009692 <_puts_r+0x8e>
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	1c5a      	adds	r2, r3, #1
 800968c:	6022      	str	r2, [r4, #0]
 800968e:	7019      	strb	r1, [r3, #0]
 8009690:	e7cf      	b.n	8009632 <_puts_r+0x2e>
 8009692:	4622      	mov	r2, r4
 8009694:	4628      	mov	r0, r5
 8009696:	f000 f874 	bl	8009782 <__swbuf_r>
 800969a:	3001      	adds	r0, #1
 800969c:	d1c9      	bne.n	8009632 <_puts_r+0x2e>
 800969e:	e7df      	b.n	8009660 <_puts_r+0x5c>
 80096a0:	6823      	ldr	r3, [r4, #0]
 80096a2:	250a      	movs	r5, #10
 80096a4:	1c5a      	adds	r2, r3, #1
 80096a6:	6022      	str	r2, [r4, #0]
 80096a8:	701d      	strb	r5, [r3, #0]
 80096aa:	e7db      	b.n	8009664 <_puts_r+0x60>

080096ac <puts>:
 80096ac:	4b02      	ldr	r3, [pc, #8]	; (80096b8 <puts+0xc>)
 80096ae:	4601      	mov	r1, r0
 80096b0:	6818      	ldr	r0, [r3, #0]
 80096b2:	f7ff bfa7 	b.w	8009604 <_puts_r>
 80096b6:	bf00      	nop
 80096b8:	20000154 	.word	0x20000154

080096bc <siprintf>:
 80096bc:	b40e      	push	{r1, r2, r3}
 80096be:	b500      	push	{lr}
 80096c0:	b09c      	sub	sp, #112	; 0x70
 80096c2:	ab1d      	add	r3, sp, #116	; 0x74
 80096c4:	9002      	str	r0, [sp, #8]
 80096c6:	9006      	str	r0, [sp, #24]
 80096c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096cc:	4809      	ldr	r0, [pc, #36]	; (80096f4 <siprintf+0x38>)
 80096ce:	9107      	str	r1, [sp, #28]
 80096d0:	9104      	str	r1, [sp, #16]
 80096d2:	4909      	ldr	r1, [pc, #36]	; (80096f8 <siprintf+0x3c>)
 80096d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d8:	9105      	str	r1, [sp, #20]
 80096da:	6800      	ldr	r0, [r0, #0]
 80096dc:	9301      	str	r3, [sp, #4]
 80096de:	a902      	add	r1, sp, #8
 80096e0:	f002 fc8e 	bl	800c000 <_svfiprintf_r>
 80096e4:	9b02      	ldr	r3, [sp, #8]
 80096e6:	2200      	movs	r2, #0
 80096e8:	701a      	strb	r2, [r3, #0]
 80096ea:	b01c      	add	sp, #112	; 0x70
 80096ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80096f0:	b003      	add	sp, #12
 80096f2:	4770      	bx	lr
 80096f4:	20000154 	.word	0x20000154
 80096f8:	ffff0208 	.word	0xffff0208

080096fc <__sread>:
 80096fc:	b510      	push	{r4, lr}
 80096fe:	460c      	mov	r4, r1
 8009700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009704:	f000 f900 	bl	8009908 <_read_r>
 8009708:	2800      	cmp	r0, #0
 800970a:	bfab      	itete	ge
 800970c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800970e:	89a3      	ldrhlt	r3, [r4, #12]
 8009710:	181b      	addge	r3, r3, r0
 8009712:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009716:	bfac      	ite	ge
 8009718:	6563      	strge	r3, [r4, #84]	; 0x54
 800971a:	81a3      	strhlt	r3, [r4, #12]
 800971c:	bd10      	pop	{r4, pc}

0800971e <__swrite>:
 800971e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009722:	461f      	mov	r7, r3
 8009724:	898b      	ldrh	r3, [r1, #12]
 8009726:	05db      	lsls	r3, r3, #23
 8009728:	4605      	mov	r5, r0
 800972a:	460c      	mov	r4, r1
 800972c:	4616      	mov	r6, r2
 800972e:	d505      	bpl.n	800973c <__swrite+0x1e>
 8009730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009734:	2302      	movs	r3, #2
 8009736:	2200      	movs	r2, #0
 8009738:	f000 f8d4 	bl	80098e4 <_lseek_r>
 800973c:	89a3      	ldrh	r3, [r4, #12]
 800973e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009742:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009746:	81a3      	strh	r3, [r4, #12]
 8009748:	4632      	mov	r2, r6
 800974a:	463b      	mov	r3, r7
 800974c:	4628      	mov	r0, r5
 800974e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009752:	f000 b8eb 	b.w	800992c <_write_r>

08009756 <__sseek>:
 8009756:	b510      	push	{r4, lr}
 8009758:	460c      	mov	r4, r1
 800975a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800975e:	f000 f8c1 	bl	80098e4 <_lseek_r>
 8009762:	1c43      	adds	r3, r0, #1
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	bf15      	itete	ne
 8009768:	6560      	strne	r0, [r4, #84]	; 0x54
 800976a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800976e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009772:	81a3      	strheq	r3, [r4, #12]
 8009774:	bf18      	it	ne
 8009776:	81a3      	strhne	r3, [r4, #12]
 8009778:	bd10      	pop	{r4, pc}

0800977a <__sclose>:
 800977a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800977e:	f000 b8a1 	b.w	80098c4 <_close_r>

08009782 <__swbuf_r>:
 8009782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009784:	460e      	mov	r6, r1
 8009786:	4614      	mov	r4, r2
 8009788:	4605      	mov	r5, r0
 800978a:	b118      	cbz	r0, 8009794 <__swbuf_r+0x12>
 800978c:	6a03      	ldr	r3, [r0, #32]
 800978e:	b90b      	cbnz	r3, 8009794 <__swbuf_r+0x12>
 8009790:	f7ff fee8 	bl	8009564 <__sinit>
 8009794:	69a3      	ldr	r3, [r4, #24]
 8009796:	60a3      	str	r3, [r4, #8]
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	071a      	lsls	r2, r3, #28
 800979c:	d525      	bpl.n	80097ea <__swbuf_r+0x68>
 800979e:	6923      	ldr	r3, [r4, #16]
 80097a0:	b31b      	cbz	r3, 80097ea <__swbuf_r+0x68>
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	6922      	ldr	r2, [r4, #16]
 80097a6:	1a98      	subs	r0, r3, r2
 80097a8:	6963      	ldr	r3, [r4, #20]
 80097aa:	b2f6      	uxtb	r6, r6
 80097ac:	4283      	cmp	r3, r0
 80097ae:	4637      	mov	r7, r6
 80097b0:	dc04      	bgt.n	80097bc <__swbuf_r+0x3a>
 80097b2:	4621      	mov	r1, r4
 80097b4:	4628      	mov	r0, r5
 80097b6:	f002 feeb 	bl	800c590 <_fflush_r>
 80097ba:	b9e0      	cbnz	r0, 80097f6 <__swbuf_r+0x74>
 80097bc:	68a3      	ldr	r3, [r4, #8]
 80097be:	3b01      	subs	r3, #1
 80097c0:	60a3      	str	r3, [r4, #8]
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	1c5a      	adds	r2, r3, #1
 80097c6:	6022      	str	r2, [r4, #0]
 80097c8:	701e      	strb	r6, [r3, #0]
 80097ca:	6962      	ldr	r2, [r4, #20]
 80097cc:	1c43      	adds	r3, r0, #1
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d004      	beq.n	80097dc <__swbuf_r+0x5a>
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	07db      	lsls	r3, r3, #31
 80097d6:	d506      	bpl.n	80097e6 <__swbuf_r+0x64>
 80097d8:	2e0a      	cmp	r6, #10
 80097da:	d104      	bne.n	80097e6 <__swbuf_r+0x64>
 80097dc:	4621      	mov	r1, r4
 80097de:	4628      	mov	r0, r5
 80097e0:	f002 fed6 	bl	800c590 <_fflush_r>
 80097e4:	b938      	cbnz	r0, 80097f6 <__swbuf_r+0x74>
 80097e6:	4638      	mov	r0, r7
 80097e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ea:	4621      	mov	r1, r4
 80097ec:	4628      	mov	r0, r5
 80097ee:	f000 f805 	bl	80097fc <__swsetup_r>
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d0d5      	beq.n	80097a2 <__swbuf_r+0x20>
 80097f6:	f04f 37ff 	mov.w	r7, #4294967295
 80097fa:	e7f4      	b.n	80097e6 <__swbuf_r+0x64>

080097fc <__swsetup_r>:
 80097fc:	b538      	push	{r3, r4, r5, lr}
 80097fe:	4b2a      	ldr	r3, [pc, #168]	; (80098a8 <__swsetup_r+0xac>)
 8009800:	4605      	mov	r5, r0
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	460c      	mov	r4, r1
 8009806:	b118      	cbz	r0, 8009810 <__swsetup_r+0x14>
 8009808:	6a03      	ldr	r3, [r0, #32]
 800980a:	b90b      	cbnz	r3, 8009810 <__swsetup_r+0x14>
 800980c:	f7ff feaa 	bl	8009564 <__sinit>
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009816:	0718      	lsls	r0, r3, #28
 8009818:	d422      	bmi.n	8009860 <__swsetup_r+0x64>
 800981a:	06d9      	lsls	r1, r3, #27
 800981c:	d407      	bmi.n	800982e <__swsetup_r+0x32>
 800981e:	2309      	movs	r3, #9
 8009820:	602b      	str	r3, [r5, #0]
 8009822:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009826:	81a3      	strh	r3, [r4, #12]
 8009828:	f04f 30ff 	mov.w	r0, #4294967295
 800982c:	e034      	b.n	8009898 <__swsetup_r+0x9c>
 800982e:	0758      	lsls	r0, r3, #29
 8009830:	d512      	bpl.n	8009858 <__swsetup_r+0x5c>
 8009832:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009834:	b141      	cbz	r1, 8009848 <__swsetup_r+0x4c>
 8009836:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800983a:	4299      	cmp	r1, r3
 800983c:	d002      	beq.n	8009844 <__swsetup_r+0x48>
 800983e:	4628      	mov	r0, r5
 8009840:	f000 ff40 	bl	800a6c4 <_free_r>
 8009844:	2300      	movs	r3, #0
 8009846:	6363      	str	r3, [r4, #52]	; 0x34
 8009848:	89a3      	ldrh	r3, [r4, #12]
 800984a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800984e:	81a3      	strh	r3, [r4, #12]
 8009850:	2300      	movs	r3, #0
 8009852:	6063      	str	r3, [r4, #4]
 8009854:	6923      	ldr	r3, [r4, #16]
 8009856:	6023      	str	r3, [r4, #0]
 8009858:	89a3      	ldrh	r3, [r4, #12]
 800985a:	f043 0308 	orr.w	r3, r3, #8
 800985e:	81a3      	strh	r3, [r4, #12]
 8009860:	6923      	ldr	r3, [r4, #16]
 8009862:	b94b      	cbnz	r3, 8009878 <__swsetup_r+0x7c>
 8009864:	89a3      	ldrh	r3, [r4, #12]
 8009866:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800986a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800986e:	d003      	beq.n	8009878 <__swsetup_r+0x7c>
 8009870:	4621      	mov	r1, r4
 8009872:	4628      	mov	r0, r5
 8009874:	f002 feda 	bl	800c62c <__smakebuf_r>
 8009878:	89a0      	ldrh	r0, [r4, #12]
 800987a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800987e:	f010 0301 	ands.w	r3, r0, #1
 8009882:	d00a      	beq.n	800989a <__swsetup_r+0x9e>
 8009884:	2300      	movs	r3, #0
 8009886:	60a3      	str	r3, [r4, #8]
 8009888:	6963      	ldr	r3, [r4, #20]
 800988a:	425b      	negs	r3, r3
 800988c:	61a3      	str	r3, [r4, #24]
 800988e:	6923      	ldr	r3, [r4, #16]
 8009890:	b943      	cbnz	r3, 80098a4 <__swsetup_r+0xa8>
 8009892:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009896:	d1c4      	bne.n	8009822 <__swsetup_r+0x26>
 8009898:	bd38      	pop	{r3, r4, r5, pc}
 800989a:	0781      	lsls	r1, r0, #30
 800989c:	bf58      	it	pl
 800989e:	6963      	ldrpl	r3, [r4, #20]
 80098a0:	60a3      	str	r3, [r4, #8]
 80098a2:	e7f4      	b.n	800988e <__swsetup_r+0x92>
 80098a4:	2000      	movs	r0, #0
 80098a6:	e7f7      	b.n	8009898 <__swsetup_r+0x9c>
 80098a8:	20000154 	.word	0x20000154

080098ac <memset>:
 80098ac:	4402      	add	r2, r0
 80098ae:	4603      	mov	r3, r0
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d100      	bne.n	80098b6 <memset+0xa>
 80098b4:	4770      	bx	lr
 80098b6:	f803 1b01 	strb.w	r1, [r3], #1
 80098ba:	e7f9      	b.n	80098b0 <memset+0x4>

080098bc <_localeconv_r>:
 80098bc:	4800      	ldr	r0, [pc, #0]	; (80098c0 <_localeconv_r+0x4>)
 80098be:	4770      	bx	lr
 80098c0:	20000248 	.word	0x20000248

080098c4 <_close_r>:
 80098c4:	b538      	push	{r3, r4, r5, lr}
 80098c6:	4d06      	ldr	r5, [pc, #24]	; (80098e0 <_close_r+0x1c>)
 80098c8:	2300      	movs	r3, #0
 80098ca:	4604      	mov	r4, r0
 80098cc:	4608      	mov	r0, r1
 80098ce:	602b      	str	r3, [r5, #0]
 80098d0:	f7f8 f9b7 	bl	8001c42 <_close>
 80098d4:	1c43      	adds	r3, r0, #1
 80098d6:	d102      	bne.n	80098de <_close_r+0x1a>
 80098d8:	682b      	ldr	r3, [r5, #0]
 80098da:	b103      	cbz	r3, 80098de <_close_r+0x1a>
 80098dc:	6023      	str	r3, [r4, #0]
 80098de:	bd38      	pop	{r3, r4, r5, pc}
 80098e0:	20002394 	.word	0x20002394

080098e4 <_lseek_r>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	4d07      	ldr	r5, [pc, #28]	; (8009904 <_lseek_r+0x20>)
 80098e8:	4604      	mov	r4, r0
 80098ea:	4608      	mov	r0, r1
 80098ec:	4611      	mov	r1, r2
 80098ee:	2200      	movs	r2, #0
 80098f0:	602a      	str	r2, [r5, #0]
 80098f2:	461a      	mov	r2, r3
 80098f4:	f7f8 f9cc 	bl	8001c90 <_lseek>
 80098f8:	1c43      	adds	r3, r0, #1
 80098fa:	d102      	bne.n	8009902 <_lseek_r+0x1e>
 80098fc:	682b      	ldr	r3, [r5, #0]
 80098fe:	b103      	cbz	r3, 8009902 <_lseek_r+0x1e>
 8009900:	6023      	str	r3, [r4, #0]
 8009902:	bd38      	pop	{r3, r4, r5, pc}
 8009904:	20002394 	.word	0x20002394

08009908 <_read_r>:
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	4d07      	ldr	r5, [pc, #28]	; (8009928 <_read_r+0x20>)
 800990c:	4604      	mov	r4, r0
 800990e:	4608      	mov	r0, r1
 8009910:	4611      	mov	r1, r2
 8009912:	2200      	movs	r2, #0
 8009914:	602a      	str	r2, [r5, #0]
 8009916:	461a      	mov	r2, r3
 8009918:	f7f8 f95a 	bl	8001bd0 <_read>
 800991c:	1c43      	adds	r3, r0, #1
 800991e:	d102      	bne.n	8009926 <_read_r+0x1e>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	b103      	cbz	r3, 8009926 <_read_r+0x1e>
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	bd38      	pop	{r3, r4, r5, pc}
 8009928:	20002394 	.word	0x20002394

0800992c <_write_r>:
 800992c:	b538      	push	{r3, r4, r5, lr}
 800992e:	4d07      	ldr	r5, [pc, #28]	; (800994c <_write_r+0x20>)
 8009930:	4604      	mov	r4, r0
 8009932:	4608      	mov	r0, r1
 8009934:	4611      	mov	r1, r2
 8009936:	2200      	movs	r2, #0
 8009938:	602a      	str	r2, [r5, #0]
 800993a:	461a      	mov	r2, r3
 800993c:	f7f8 f965 	bl	8001c0a <_write>
 8009940:	1c43      	adds	r3, r0, #1
 8009942:	d102      	bne.n	800994a <_write_r+0x1e>
 8009944:	682b      	ldr	r3, [r5, #0]
 8009946:	b103      	cbz	r3, 800994a <_write_r+0x1e>
 8009948:	6023      	str	r3, [r4, #0]
 800994a:	bd38      	pop	{r3, r4, r5, pc}
 800994c:	20002394 	.word	0x20002394

08009950 <__errno>:
 8009950:	4b01      	ldr	r3, [pc, #4]	; (8009958 <__errno+0x8>)
 8009952:	6818      	ldr	r0, [r3, #0]
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	20000154 	.word	0x20000154

0800995c <__libc_init_array>:
 800995c:	b570      	push	{r4, r5, r6, lr}
 800995e:	4d0d      	ldr	r5, [pc, #52]	; (8009994 <__libc_init_array+0x38>)
 8009960:	4c0d      	ldr	r4, [pc, #52]	; (8009998 <__libc_init_array+0x3c>)
 8009962:	1b64      	subs	r4, r4, r5
 8009964:	10a4      	asrs	r4, r4, #2
 8009966:	2600      	movs	r6, #0
 8009968:	42a6      	cmp	r6, r4
 800996a:	d109      	bne.n	8009980 <__libc_init_array+0x24>
 800996c:	4d0b      	ldr	r5, [pc, #44]	; (800999c <__libc_init_array+0x40>)
 800996e:	4c0c      	ldr	r4, [pc, #48]	; (80099a0 <__libc_init_array+0x44>)
 8009970:	f003 fb72 	bl	800d058 <_init>
 8009974:	1b64      	subs	r4, r4, r5
 8009976:	10a4      	asrs	r4, r4, #2
 8009978:	2600      	movs	r6, #0
 800997a:	42a6      	cmp	r6, r4
 800997c:	d105      	bne.n	800998a <__libc_init_array+0x2e>
 800997e:	bd70      	pop	{r4, r5, r6, pc}
 8009980:	f855 3b04 	ldr.w	r3, [r5], #4
 8009984:	4798      	blx	r3
 8009986:	3601      	adds	r6, #1
 8009988:	e7ee      	b.n	8009968 <__libc_init_array+0xc>
 800998a:	f855 3b04 	ldr.w	r3, [r5], #4
 800998e:	4798      	blx	r3
 8009990:	3601      	adds	r6, #1
 8009992:	e7f2      	b.n	800997a <__libc_init_array+0x1e>
 8009994:	0800d5a0 	.word	0x0800d5a0
 8009998:	0800d5a0 	.word	0x0800d5a0
 800999c:	0800d5a0 	.word	0x0800d5a0
 80099a0:	0800d5a4 	.word	0x0800d5a4

080099a4 <__retarget_lock_acquire_recursive>:
 80099a4:	4770      	bx	lr

080099a6 <__retarget_lock_release_recursive>:
 80099a6:	4770      	bx	lr

080099a8 <memcpy>:
 80099a8:	440a      	add	r2, r1
 80099aa:	4291      	cmp	r1, r2
 80099ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80099b0:	d100      	bne.n	80099b4 <memcpy+0xc>
 80099b2:	4770      	bx	lr
 80099b4:	b510      	push	{r4, lr}
 80099b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099be:	4291      	cmp	r1, r2
 80099c0:	d1f9      	bne.n	80099b6 <memcpy+0xe>
 80099c2:	bd10      	pop	{r4, pc}

080099c4 <nanf>:
 80099c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80099cc <nanf+0x8>
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	7fc00000 	.word	0x7fc00000

080099d0 <quorem>:
 80099d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d4:	6903      	ldr	r3, [r0, #16]
 80099d6:	690c      	ldr	r4, [r1, #16]
 80099d8:	42a3      	cmp	r3, r4
 80099da:	4607      	mov	r7, r0
 80099dc:	db7e      	blt.n	8009adc <quorem+0x10c>
 80099de:	3c01      	subs	r4, #1
 80099e0:	f101 0814 	add.w	r8, r1, #20
 80099e4:	f100 0514 	add.w	r5, r0, #20
 80099e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099ec:	9301      	str	r3, [sp, #4]
 80099ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80099f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099f6:	3301      	adds	r3, #1
 80099f8:	429a      	cmp	r2, r3
 80099fa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80099fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a02:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a06:	d331      	bcc.n	8009a6c <quorem+0x9c>
 8009a08:	f04f 0e00 	mov.w	lr, #0
 8009a0c:	4640      	mov	r0, r8
 8009a0e:	46ac      	mov	ip, r5
 8009a10:	46f2      	mov	sl, lr
 8009a12:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a16:	b293      	uxth	r3, r2
 8009a18:	fb06 e303 	mla	r3, r6, r3, lr
 8009a1c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a20:	0c1a      	lsrs	r2, r3, #16
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	ebaa 0303 	sub.w	r3, sl, r3
 8009a28:	f8dc a000 	ldr.w	sl, [ip]
 8009a2c:	fa13 f38a 	uxtah	r3, r3, sl
 8009a30:	fb06 220e 	mla	r2, r6, lr, r2
 8009a34:	9300      	str	r3, [sp, #0]
 8009a36:	9b00      	ldr	r3, [sp, #0]
 8009a38:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a3c:	b292      	uxth	r2, r2
 8009a3e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a46:	f8bd 3000 	ldrh.w	r3, [sp]
 8009a4a:	4581      	cmp	r9, r0
 8009a4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a50:	f84c 3b04 	str.w	r3, [ip], #4
 8009a54:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009a58:	d2db      	bcs.n	8009a12 <quorem+0x42>
 8009a5a:	f855 300b 	ldr.w	r3, [r5, fp]
 8009a5e:	b92b      	cbnz	r3, 8009a6c <quorem+0x9c>
 8009a60:	9b01      	ldr	r3, [sp, #4]
 8009a62:	3b04      	subs	r3, #4
 8009a64:	429d      	cmp	r5, r3
 8009a66:	461a      	mov	r2, r3
 8009a68:	d32c      	bcc.n	8009ac4 <quorem+0xf4>
 8009a6a:	613c      	str	r4, [r7, #16]
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	f001 f9ef 	bl	800ae50 <__mcmp>
 8009a72:	2800      	cmp	r0, #0
 8009a74:	db22      	blt.n	8009abc <quorem+0xec>
 8009a76:	3601      	adds	r6, #1
 8009a78:	4629      	mov	r1, r5
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009a80:	f8d1 c000 	ldr.w	ip, [r1]
 8009a84:	b293      	uxth	r3, r2
 8009a86:	1ac3      	subs	r3, r0, r3
 8009a88:	0c12      	lsrs	r2, r2, #16
 8009a8a:	fa13 f38c 	uxtah	r3, r3, ip
 8009a8e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009a92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a9c:	45c1      	cmp	r9, r8
 8009a9e:	f841 3b04 	str.w	r3, [r1], #4
 8009aa2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009aa6:	d2e9      	bcs.n	8009a7c <quorem+0xac>
 8009aa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009aac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ab0:	b922      	cbnz	r2, 8009abc <quorem+0xec>
 8009ab2:	3b04      	subs	r3, #4
 8009ab4:	429d      	cmp	r5, r3
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	d30a      	bcc.n	8009ad0 <quorem+0x100>
 8009aba:	613c      	str	r4, [r7, #16]
 8009abc:	4630      	mov	r0, r6
 8009abe:	b003      	add	sp, #12
 8009ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac4:	6812      	ldr	r2, [r2, #0]
 8009ac6:	3b04      	subs	r3, #4
 8009ac8:	2a00      	cmp	r2, #0
 8009aca:	d1ce      	bne.n	8009a6a <quorem+0x9a>
 8009acc:	3c01      	subs	r4, #1
 8009ace:	e7c9      	b.n	8009a64 <quorem+0x94>
 8009ad0:	6812      	ldr	r2, [r2, #0]
 8009ad2:	3b04      	subs	r3, #4
 8009ad4:	2a00      	cmp	r2, #0
 8009ad6:	d1f0      	bne.n	8009aba <quorem+0xea>
 8009ad8:	3c01      	subs	r4, #1
 8009ada:	e7eb      	b.n	8009ab4 <quorem+0xe4>
 8009adc:	2000      	movs	r0, #0
 8009ade:	e7ee      	b.n	8009abe <quorem+0xee>

08009ae0 <_dtoa_r>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	ed2d 8b04 	vpush	{d8-d9}
 8009ae8:	69c5      	ldr	r5, [r0, #28]
 8009aea:	b093      	sub	sp, #76	; 0x4c
 8009aec:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009af0:	ec57 6b10 	vmov	r6, r7, d0
 8009af4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009af8:	9107      	str	r1, [sp, #28]
 8009afa:	4604      	mov	r4, r0
 8009afc:	920a      	str	r2, [sp, #40]	; 0x28
 8009afe:	930d      	str	r3, [sp, #52]	; 0x34
 8009b00:	b975      	cbnz	r5, 8009b20 <_dtoa_r+0x40>
 8009b02:	2010      	movs	r0, #16
 8009b04:	f000 fe2a 	bl	800a75c <malloc>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	61e0      	str	r0, [r4, #28]
 8009b0c:	b920      	cbnz	r0, 8009b18 <_dtoa_r+0x38>
 8009b0e:	4bae      	ldr	r3, [pc, #696]	; (8009dc8 <_dtoa_r+0x2e8>)
 8009b10:	21ef      	movs	r1, #239	; 0xef
 8009b12:	48ae      	ldr	r0, [pc, #696]	; (8009dcc <_dtoa_r+0x2ec>)
 8009b14:	f002 fe60 	bl	800c7d8 <__assert_func>
 8009b18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b1c:	6005      	str	r5, [r0, #0]
 8009b1e:	60c5      	str	r5, [r0, #12]
 8009b20:	69e3      	ldr	r3, [r4, #28]
 8009b22:	6819      	ldr	r1, [r3, #0]
 8009b24:	b151      	cbz	r1, 8009b3c <_dtoa_r+0x5c>
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	604a      	str	r2, [r1, #4]
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4093      	lsls	r3, r2
 8009b2e:	608b      	str	r3, [r1, #8]
 8009b30:	4620      	mov	r0, r4
 8009b32:	f000 ff07 	bl	800a944 <_Bfree>
 8009b36:	69e3      	ldr	r3, [r4, #28]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	1e3b      	subs	r3, r7, #0
 8009b3e:	bfbb      	ittet	lt
 8009b40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b44:	9303      	strlt	r3, [sp, #12]
 8009b46:	2300      	movge	r3, #0
 8009b48:	2201      	movlt	r2, #1
 8009b4a:	bfac      	ite	ge
 8009b4c:	f8c8 3000 	strge.w	r3, [r8]
 8009b50:	f8c8 2000 	strlt.w	r2, [r8]
 8009b54:	4b9e      	ldr	r3, [pc, #632]	; (8009dd0 <_dtoa_r+0x2f0>)
 8009b56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009b5a:	ea33 0308 	bics.w	r3, r3, r8
 8009b5e:	d11b      	bne.n	8009b98 <_dtoa_r+0xb8>
 8009b60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b62:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009b6c:	4333      	orrs	r3, r6
 8009b6e:	f000 8593 	beq.w	800a698 <_dtoa_r+0xbb8>
 8009b72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b74:	b963      	cbnz	r3, 8009b90 <_dtoa_r+0xb0>
 8009b76:	4b97      	ldr	r3, [pc, #604]	; (8009dd4 <_dtoa_r+0x2f4>)
 8009b78:	e027      	b.n	8009bca <_dtoa_r+0xea>
 8009b7a:	4b97      	ldr	r3, [pc, #604]	; (8009dd8 <_dtoa_r+0x2f8>)
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	3308      	adds	r3, #8
 8009b80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009b82:	6013      	str	r3, [r2, #0]
 8009b84:	9800      	ldr	r0, [sp, #0]
 8009b86:	b013      	add	sp, #76	; 0x4c
 8009b88:	ecbd 8b04 	vpop	{d8-d9}
 8009b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b90:	4b90      	ldr	r3, [pc, #576]	; (8009dd4 <_dtoa_r+0x2f4>)
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	3303      	adds	r3, #3
 8009b96:	e7f3      	b.n	8009b80 <_dtoa_r+0xa0>
 8009b98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	ec51 0b17 	vmov	r0, r1, d7
 8009ba2:	eeb0 8a47 	vmov.f32	s16, s14
 8009ba6:	eef0 8a67 	vmov.f32	s17, s15
 8009baa:	2300      	movs	r3, #0
 8009bac:	f7f6 ff94 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bb0:	4681      	mov	r9, r0
 8009bb2:	b160      	cbz	r0, 8009bce <_dtoa_r+0xee>
 8009bb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	6013      	str	r3, [r2, #0]
 8009bba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 8568 	beq.w	800a692 <_dtoa_r+0xbb2>
 8009bc2:	4b86      	ldr	r3, [pc, #536]	; (8009ddc <_dtoa_r+0x2fc>)
 8009bc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009bc6:	6013      	str	r3, [r2, #0]
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	e7da      	b.n	8009b84 <_dtoa_r+0xa4>
 8009bce:	aa10      	add	r2, sp, #64	; 0x40
 8009bd0:	a911      	add	r1, sp, #68	; 0x44
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	eeb0 0a48 	vmov.f32	s0, s16
 8009bd8:	eef0 0a68 	vmov.f32	s1, s17
 8009bdc:	f001 fa4e 	bl	800b07c <__d2b>
 8009be0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009be4:	4682      	mov	sl, r0
 8009be6:	2d00      	cmp	r5, #0
 8009be8:	d07f      	beq.n	8009cea <_dtoa_r+0x20a>
 8009bea:	ee18 3a90 	vmov	r3, s17
 8009bee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bf2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009bf6:	ec51 0b18 	vmov	r0, r1, d8
 8009bfa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009bfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c02:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009c06:	4619      	mov	r1, r3
 8009c08:	2200      	movs	r2, #0
 8009c0a:	4b75      	ldr	r3, [pc, #468]	; (8009de0 <_dtoa_r+0x300>)
 8009c0c:	f7f6 fb44 	bl	8000298 <__aeabi_dsub>
 8009c10:	a367      	add	r3, pc, #412	; (adr r3, 8009db0 <_dtoa_r+0x2d0>)
 8009c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c16:	f7f6 fcf7 	bl	8000608 <__aeabi_dmul>
 8009c1a:	a367      	add	r3, pc, #412	; (adr r3, 8009db8 <_dtoa_r+0x2d8>)
 8009c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c20:	f7f6 fb3c 	bl	800029c <__adddf3>
 8009c24:	4606      	mov	r6, r0
 8009c26:	4628      	mov	r0, r5
 8009c28:	460f      	mov	r7, r1
 8009c2a:	f7f6 fc83 	bl	8000534 <__aeabi_i2d>
 8009c2e:	a364      	add	r3, pc, #400	; (adr r3, 8009dc0 <_dtoa_r+0x2e0>)
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	f7f6 fce8 	bl	8000608 <__aeabi_dmul>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	4639      	mov	r1, r7
 8009c40:	f7f6 fb2c 	bl	800029c <__adddf3>
 8009c44:	4606      	mov	r6, r0
 8009c46:	460f      	mov	r7, r1
 8009c48:	f7f6 ff8e 	bl	8000b68 <__aeabi_d2iz>
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	4683      	mov	fp, r0
 8009c50:	2300      	movs	r3, #0
 8009c52:	4630      	mov	r0, r6
 8009c54:	4639      	mov	r1, r7
 8009c56:	f7f6 ff49 	bl	8000aec <__aeabi_dcmplt>
 8009c5a:	b148      	cbz	r0, 8009c70 <_dtoa_r+0x190>
 8009c5c:	4658      	mov	r0, fp
 8009c5e:	f7f6 fc69 	bl	8000534 <__aeabi_i2d>
 8009c62:	4632      	mov	r2, r6
 8009c64:	463b      	mov	r3, r7
 8009c66:	f7f6 ff37 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c6a:	b908      	cbnz	r0, 8009c70 <_dtoa_r+0x190>
 8009c6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009c70:	f1bb 0f16 	cmp.w	fp, #22
 8009c74:	d857      	bhi.n	8009d26 <_dtoa_r+0x246>
 8009c76:	4b5b      	ldr	r3, [pc, #364]	; (8009de4 <_dtoa_r+0x304>)
 8009c78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c80:	ec51 0b18 	vmov	r0, r1, d8
 8009c84:	f7f6 ff32 	bl	8000aec <__aeabi_dcmplt>
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d04e      	beq.n	8009d2a <_dtoa_r+0x24a>
 8009c8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009c90:	2300      	movs	r3, #0
 8009c92:	930c      	str	r3, [sp, #48]	; 0x30
 8009c94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c96:	1b5b      	subs	r3, r3, r5
 8009c98:	1e5a      	subs	r2, r3, #1
 8009c9a:	bf45      	ittet	mi
 8009c9c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009ca0:	9305      	strmi	r3, [sp, #20]
 8009ca2:	2300      	movpl	r3, #0
 8009ca4:	2300      	movmi	r3, #0
 8009ca6:	9206      	str	r2, [sp, #24]
 8009ca8:	bf54      	ite	pl
 8009caa:	9305      	strpl	r3, [sp, #20]
 8009cac:	9306      	strmi	r3, [sp, #24]
 8009cae:	f1bb 0f00 	cmp.w	fp, #0
 8009cb2:	db3c      	blt.n	8009d2e <_dtoa_r+0x24e>
 8009cb4:	9b06      	ldr	r3, [sp, #24]
 8009cb6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009cba:	445b      	add	r3, fp
 8009cbc:	9306      	str	r3, [sp, #24]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	9308      	str	r3, [sp, #32]
 8009cc2:	9b07      	ldr	r3, [sp, #28]
 8009cc4:	2b09      	cmp	r3, #9
 8009cc6:	d868      	bhi.n	8009d9a <_dtoa_r+0x2ba>
 8009cc8:	2b05      	cmp	r3, #5
 8009cca:	bfc4      	itt	gt
 8009ccc:	3b04      	subgt	r3, #4
 8009cce:	9307      	strgt	r3, [sp, #28]
 8009cd0:	9b07      	ldr	r3, [sp, #28]
 8009cd2:	f1a3 0302 	sub.w	r3, r3, #2
 8009cd6:	bfcc      	ite	gt
 8009cd8:	2500      	movgt	r5, #0
 8009cda:	2501      	movle	r5, #1
 8009cdc:	2b03      	cmp	r3, #3
 8009cde:	f200 8085 	bhi.w	8009dec <_dtoa_r+0x30c>
 8009ce2:	e8df f003 	tbb	[pc, r3]
 8009ce6:	3b2e      	.short	0x3b2e
 8009ce8:	5839      	.short	0x5839
 8009cea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009cee:	441d      	add	r5, r3
 8009cf0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009cf4:	2b20      	cmp	r3, #32
 8009cf6:	bfc1      	itttt	gt
 8009cf8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009cfc:	fa08 f803 	lslgt.w	r8, r8, r3
 8009d00:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009d04:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009d08:	bfd6      	itet	le
 8009d0a:	f1c3 0320 	rsble	r3, r3, #32
 8009d0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009d12:	fa06 f003 	lslle.w	r0, r6, r3
 8009d16:	f7f6 fbfd 	bl	8000514 <__aeabi_ui2d>
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009d20:	3d01      	subs	r5, #1
 8009d22:	920e      	str	r2, [sp, #56]	; 0x38
 8009d24:	e76f      	b.n	8009c06 <_dtoa_r+0x126>
 8009d26:	2301      	movs	r3, #1
 8009d28:	e7b3      	b.n	8009c92 <_dtoa_r+0x1b2>
 8009d2a:	900c      	str	r0, [sp, #48]	; 0x30
 8009d2c:	e7b2      	b.n	8009c94 <_dtoa_r+0x1b4>
 8009d2e:	9b05      	ldr	r3, [sp, #20]
 8009d30:	eba3 030b 	sub.w	r3, r3, fp
 8009d34:	9305      	str	r3, [sp, #20]
 8009d36:	f1cb 0300 	rsb	r3, fp, #0
 8009d3a:	9308      	str	r3, [sp, #32]
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d40:	e7bf      	b.n	8009cc2 <_dtoa_r+0x1e2>
 8009d42:	2300      	movs	r3, #0
 8009d44:	9309      	str	r3, [sp, #36]	; 0x24
 8009d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	dc52      	bgt.n	8009df2 <_dtoa_r+0x312>
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	9301      	str	r3, [sp, #4]
 8009d50:	9304      	str	r3, [sp, #16]
 8009d52:	461a      	mov	r2, r3
 8009d54:	920a      	str	r2, [sp, #40]	; 0x28
 8009d56:	e00b      	b.n	8009d70 <_dtoa_r+0x290>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e7f3      	b.n	8009d44 <_dtoa_r+0x264>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d62:	445b      	add	r3, fp
 8009d64:	9301      	str	r3, [sp, #4]
 8009d66:	3301      	adds	r3, #1
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	9304      	str	r3, [sp, #16]
 8009d6c:	bfb8      	it	lt
 8009d6e:	2301      	movlt	r3, #1
 8009d70:	69e0      	ldr	r0, [r4, #28]
 8009d72:	2100      	movs	r1, #0
 8009d74:	2204      	movs	r2, #4
 8009d76:	f102 0614 	add.w	r6, r2, #20
 8009d7a:	429e      	cmp	r6, r3
 8009d7c:	d93d      	bls.n	8009dfa <_dtoa_r+0x31a>
 8009d7e:	6041      	str	r1, [r0, #4]
 8009d80:	4620      	mov	r0, r4
 8009d82:	f000 fd9f 	bl	800a8c4 <_Balloc>
 8009d86:	9000      	str	r0, [sp, #0]
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d139      	bne.n	8009e00 <_dtoa_r+0x320>
 8009d8c:	4b16      	ldr	r3, [pc, #88]	; (8009de8 <_dtoa_r+0x308>)
 8009d8e:	4602      	mov	r2, r0
 8009d90:	f240 11af 	movw	r1, #431	; 0x1af
 8009d94:	e6bd      	b.n	8009b12 <_dtoa_r+0x32>
 8009d96:	2301      	movs	r3, #1
 8009d98:	e7e1      	b.n	8009d5e <_dtoa_r+0x27e>
 8009d9a:	2501      	movs	r5, #1
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9307      	str	r3, [sp, #28]
 8009da0:	9509      	str	r5, [sp, #36]	; 0x24
 8009da2:	f04f 33ff 	mov.w	r3, #4294967295
 8009da6:	9301      	str	r3, [sp, #4]
 8009da8:	9304      	str	r3, [sp, #16]
 8009daa:	2200      	movs	r2, #0
 8009dac:	2312      	movs	r3, #18
 8009dae:	e7d1      	b.n	8009d54 <_dtoa_r+0x274>
 8009db0:	636f4361 	.word	0x636f4361
 8009db4:	3fd287a7 	.word	0x3fd287a7
 8009db8:	8b60c8b3 	.word	0x8b60c8b3
 8009dbc:	3fc68a28 	.word	0x3fc68a28
 8009dc0:	509f79fb 	.word	0x509f79fb
 8009dc4:	3fd34413 	.word	0x3fd34413
 8009dc8:	0800d1b2 	.word	0x0800d1b2
 8009dcc:	0800d1c9 	.word	0x0800d1c9
 8009dd0:	7ff00000 	.word	0x7ff00000
 8009dd4:	0800d1ae 	.word	0x0800d1ae
 8009dd8:	0800d1a5 	.word	0x0800d1a5
 8009ddc:	0800d17d 	.word	0x0800d17d
 8009de0:	3ff80000 	.word	0x3ff80000
 8009de4:	0800d2b8 	.word	0x0800d2b8
 8009de8:	0800d221 	.word	0x0800d221
 8009dec:	2301      	movs	r3, #1
 8009dee:	9309      	str	r3, [sp, #36]	; 0x24
 8009df0:	e7d7      	b.n	8009da2 <_dtoa_r+0x2c2>
 8009df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009df4:	9301      	str	r3, [sp, #4]
 8009df6:	9304      	str	r3, [sp, #16]
 8009df8:	e7ba      	b.n	8009d70 <_dtoa_r+0x290>
 8009dfa:	3101      	adds	r1, #1
 8009dfc:	0052      	lsls	r2, r2, #1
 8009dfe:	e7ba      	b.n	8009d76 <_dtoa_r+0x296>
 8009e00:	69e3      	ldr	r3, [r4, #28]
 8009e02:	9a00      	ldr	r2, [sp, #0]
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	9b04      	ldr	r3, [sp, #16]
 8009e08:	2b0e      	cmp	r3, #14
 8009e0a:	f200 80a8 	bhi.w	8009f5e <_dtoa_r+0x47e>
 8009e0e:	2d00      	cmp	r5, #0
 8009e10:	f000 80a5 	beq.w	8009f5e <_dtoa_r+0x47e>
 8009e14:	f1bb 0f00 	cmp.w	fp, #0
 8009e18:	dd38      	ble.n	8009e8c <_dtoa_r+0x3ac>
 8009e1a:	4bc0      	ldr	r3, [pc, #768]	; (800a11c <_dtoa_r+0x63c>)
 8009e1c:	f00b 020f 	and.w	r2, fp, #15
 8009e20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009e28:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009e2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009e30:	d019      	beq.n	8009e66 <_dtoa_r+0x386>
 8009e32:	4bbb      	ldr	r3, [pc, #748]	; (800a120 <_dtoa_r+0x640>)
 8009e34:	ec51 0b18 	vmov	r0, r1, d8
 8009e38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e3c:	f7f6 fd0e 	bl	800085c <__aeabi_ddiv>
 8009e40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e44:	f008 080f 	and.w	r8, r8, #15
 8009e48:	2503      	movs	r5, #3
 8009e4a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a120 <_dtoa_r+0x640>
 8009e4e:	f1b8 0f00 	cmp.w	r8, #0
 8009e52:	d10a      	bne.n	8009e6a <_dtoa_r+0x38a>
 8009e54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e58:	4632      	mov	r2, r6
 8009e5a:	463b      	mov	r3, r7
 8009e5c:	f7f6 fcfe 	bl	800085c <__aeabi_ddiv>
 8009e60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e64:	e02b      	b.n	8009ebe <_dtoa_r+0x3de>
 8009e66:	2502      	movs	r5, #2
 8009e68:	e7ef      	b.n	8009e4a <_dtoa_r+0x36a>
 8009e6a:	f018 0f01 	tst.w	r8, #1
 8009e6e:	d008      	beq.n	8009e82 <_dtoa_r+0x3a2>
 8009e70:	4630      	mov	r0, r6
 8009e72:	4639      	mov	r1, r7
 8009e74:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009e78:	f7f6 fbc6 	bl	8000608 <__aeabi_dmul>
 8009e7c:	3501      	adds	r5, #1
 8009e7e:	4606      	mov	r6, r0
 8009e80:	460f      	mov	r7, r1
 8009e82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009e86:	f109 0908 	add.w	r9, r9, #8
 8009e8a:	e7e0      	b.n	8009e4e <_dtoa_r+0x36e>
 8009e8c:	f000 809f 	beq.w	8009fce <_dtoa_r+0x4ee>
 8009e90:	f1cb 0600 	rsb	r6, fp, #0
 8009e94:	4ba1      	ldr	r3, [pc, #644]	; (800a11c <_dtoa_r+0x63c>)
 8009e96:	4fa2      	ldr	r7, [pc, #648]	; (800a120 <_dtoa_r+0x640>)
 8009e98:	f006 020f 	and.w	r2, r6, #15
 8009e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	ec51 0b18 	vmov	r0, r1, d8
 8009ea8:	f7f6 fbae 	bl	8000608 <__aeabi_dmul>
 8009eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009eb0:	1136      	asrs	r6, r6, #4
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	2502      	movs	r5, #2
 8009eb6:	2e00      	cmp	r6, #0
 8009eb8:	d17e      	bne.n	8009fb8 <_dtoa_r+0x4d8>
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1d0      	bne.n	8009e60 <_dtoa_r+0x380>
 8009ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ec0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f000 8084 	beq.w	8009fd2 <_dtoa_r+0x4f2>
 8009eca:	4b96      	ldr	r3, [pc, #600]	; (800a124 <_dtoa_r+0x644>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	4640      	mov	r0, r8
 8009ed0:	4649      	mov	r1, r9
 8009ed2:	f7f6 fe0b 	bl	8000aec <__aeabi_dcmplt>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d07b      	beq.n	8009fd2 <_dtoa_r+0x4f2>
 8009eda:	9b04      	ldr	r3, [sp, #16]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d078      	beq.n	8009fd2 <_dtoa_r+0x4f2>
 8009ee0:	9b01      	ldr	r3, [sp, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	dd39      	ble.n	8009f5a <_dtoa_r+0x47a>
 8009ee6:	4b90      	ldr	r3, [pc, #576]	; (800a128 <_dtoa_r+0x648>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	4640      	mov	r0, r8
 8009eec:	4649      	mov	r1, r9
 8009eee:	f7f6 fb8b 	bl	8000608 <__aeabi_dmul>
 8009ef2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ef6:	9e01      	ldr	r6, [sp, #4]
 8009ef8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009efc:	3501      	adds	r5, #1
 8009efe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009f02:	4628      	mov	r0, r5
 8009f04:	f7f6 fb16 	bl	8000534 <__aeabi_i2d>
 8009f08:	4642      	mov	r2, r8
 8009f0a:	464b      	mov	r3, r9
 8009f0c:	f7f6 fb7c 	bl	8000608 <__aeabi_dmul>
 8009f10:	4b86      	ldr	r3, [pc, #536]	; (800a12c <_dtoa_r+0x64c>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	f7f6 f9c2 	bl	800029c <__adddf3>
 8009f18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f20:	9303      	str	r3, [sp, #12]
 8009f22:	2e00      	cmp	r6, #0
 8009f24:	d158      	bne.n	8009fd8 <_dtoa_r+0x4f8>
 8009f26:	4b82      	ldr	r3, [pc, #520]	; (800a130 <_dtoa_r+0x650>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	4649      	mov	r1, r9
 8009f2e:	f7f6 f9b3 	bl	8000298 <__aeabi_dsub>
 8009f32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f36:	4680      	mov	r8, r0
 8009f38:	4689      	mov	r9, r1
 8009f3a:	f7f6 fdf5 	bl	8000b28 <__aeabi_dcmpgt>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	f040 8296 	bne.w	800a470 <_dtoa_r+0x990>
 8009f44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009f48:	4640      	mov	r0, r8
 8009f4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f4e:	4649      	mov	r1, r9
 8009f50:	f7f6 fdcc 	bl	8000aec <__aeabi_dcmplt>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	f040 8289 	bne.w	800a46c <_dtoa_r+0x98c>
 8009f5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009f5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f2c0 814e 	blt.w	800a202 <_dtoa_r+0x722>
 8009f66:	f1bb 0f0e 	cmp.w	fp, #14
 8009f6a:	f300 814a 	bgt.w	800a202 <_dtoa_r+0x722>
 8009f6e:	4b6b      	ldr	r3, [pc, #428]	; (800a11c <_dtoa_r+0x63c>)
 8009f70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009f74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f280 80dc 	bge.w	800a138 <_dtoa_r+0x658>
 8009f80:	9b04      	ldr	r3, [sp, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f300 80d8 	bgt.w	800a138 <_dtoa_r+0x658>
 8009f88:	f040 826f 	bne.w	800a46a <_dtoa_r+0x98a>
 8009f8c:	4b68      	ldr	r3, [pc, #416]	; (800a130 <_dtoa_r+0x650>)
 8009f8e:	2200      	movs	r2, #0
 8009f90:	4640      	mov	r0, r8
 8009f92:	4649      	mov	r1, r9
 8009f94:	f7f6 fb38 	bl	8000608 <__aeabi_dmul>
 8009f98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f9c:	f7f6 fdba 	bl	8000b14 <__aeabi_dcmpge>
 8009fa0:	9e04      	ldr	r6, [sp, #16]
 8009fa2:	4637      	mov	r7, r6
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	f040 8245 	bne.w	800a434 <_dtoa_r+0x954>
 8009faa:	9d00      	ldr	r5, [sp, #0]
 8009fac:	2331      	movs	r3, #49	; 0x31
 8009fae:	f805 3b01 	strb.w	r3, [r5], #1
 8009fb2:	f10b 0b01 	add.w	fp, fp, #1
 8009fb6:	e241      	b.n	800a43c <_dtoa_r+0x95c>
 8009fb8:	07f2      	lsls	r2, r6, #31
 8009fba:	d505      	bpl.n	8009fc8 <_dtoa_r+0x4e8>
 8009fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fc0:	f7f6 fb22 	bl	8000608 <__aeabi_dmul>
 8009fc4:	3501      	adds	r5, #1
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	1076      	asrs	r6, r6, #1
 8009fca:	3708      	adds	r7, #8
 8009fcc:	e773      	b.n	8009eb6 <_dtoa_r+0x3d6>
 8009fce:	2502      	movs	r5, #2
 8009fd0:	e775      	b.n	8009ebe <_dtoa_r+0x3de>
 8009fd2:	9e04      	ldr	r6, [sp, #16]
 8009fd4:	465f      	mov	r7, fp
 8009fd6:	e792      	b.n	8009efe <_dtoa_r+0x41e>
 8009fd8:	9900      	ldr	r1, [sp, #0]
 8009fda:	4b50      	ldr	r3, [pc, #320]	; (800a11c <_dtoa_r+0x63c>)
 8009fdc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009fe0:	4431      	add	r1, r6
 8009fe2:	9102      	str	r1, [sp, #8]
 8009fe4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fe6:	eeb0 9a47 	vmov.f32	s18, s14
 8009fea:	eef0 9a67 	vmov.f32	s19, s15
 8009fee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ff2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ff6:	2900      	cmp	r1, #0
 8009ff8:	d044      	beq.n	800a084 <_dtoa_r+0x5a4>
 8009ffa:	494e      	ldr	r1, [pc, #312]	; (800a134 <_dtoa_r+0x654>)
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	f7f6 fc2d 	bl	800085c <__aeabi_ddiv>
 800a002:	ec53 2b19 	vmov	r2, r3, d9
 800a006:	f7f6 f947 	bl	8000298 <__aeabi_dsub>
 800a00a:	9d00      	ldr	r5, [sp, #0]
 800a00c:	ec41 0b19 	vmov	d9, r0, r1
 800a010:	4649      	mov	r1, r9
 800a012:	4640      	mov	r0, r8
 800a014:	f7f6 fda8 	bl	8000b68 <__aeabi_d2iz>
 800a018:	4606      	mov	r6, r0
 800a01a:	f7f6 fa8b 	bl	8000534 <__aeabi_i2d>
 800a01e:	4602      	mov	r2, r0
 800a020:	460b      	mov	r3, r1
 800a022:	4640      	mov	r0, r8
 800a024:	4649      	mov	r1, r9
 800a026:	f7f6 f937 	bl	8000298 <__aeabi_dsub>
 800a02a:	3630      	adds	r6, #48	; 0x30
 800a02c:	f805 6b01 	strb.w	r6, [r5], #1
 800a030:	ec53 2b19 	vmov	r2, r3, d9
 800a034:	4680      	mov	r8, r0
 800a036:	4689      	mov	r9, r1
 800a038:	f7f6 fd58 	bl	8000aec <__aeabi_dcmplt>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d164      	bne.n	800a10a <_dtoa_r+0x62a>
 800a040:	4642      	mov	r2, r8
 800a042:	464b      	mov	r3, r9
 800a044:	4937      	ldr	r1, [pc, #220]	; (800a124 <_dtoa_r+0x644>)
 800a046:	2000      	movs	r0, #0
 800a048:	f7f6 f926 	bl	8000298 <__aeabi_dsub>
 800a04c:	ec53 2b19 	vmov	r2, r3, d9
 800a050:	f7f6 fd4c 	bl	8000aec <__aeabi_dcmplt>
 800a054:	2800      	cmp	r0, #0
 800a056:	f040 80b6 	bne.w	800a1c6 <_dtoa_r+0x6e6>
 800a05a:	9b02      	ldr	r3, [sp, #8]
 800a05c:	429d      	cmp	r5, r3
 800a05e:	f43f af7c 	beq.w	8009f5a <_dtoa_r+0x47a>
 800a062:	4b31      	ldr	r3, [pc, #196]	; (800a128 <_dtoa_r+0x648>)
 800a064:	ec51 0b19 	vmov	r0, r1, d9
 800a068:	2200      	movs	r2, #0
 800a06a:	f7f6 facd 	bl	8000608 <__aeabi_dmul>
 800a06e:	4b2e      	ldr	r3, [pc, #184]	; (800a128 <_dtoa_r+0x648>)
 800a070:	ec41 0b19 	vmov	d9, r0, r1
 800a074:	2200      	movs	r2, #0
 800a076:	4640      	mov	r0, r8
 800a078:	4649      	mov	r1, r9
 800a07a:	f7f6 fac5 	bl	8000608 <__aeabi_dmul>
 800a07e:	4680      	mov	r8, r0
 800a080:	4689      	mov	r9, r1
 800a082:	e7c5      	b.n	800a010 <_dtoa_r+0x530>
 800a084:	ec51 0b17 	vmov	r0, r1, d7
 800a088:	f7f6 fabe 	bl	8000608 <__aeabi_dmul>
 800a08c:	9b02      	ldr	r3, [sp, #8]
 800a08e:	9d00      	ldr	r5, [sp, #0]
 800a090:	930f      	str	r3, [sp, #60]	; 0x3c
 800a092:	ec41 0b19 	vmov	d9, r0, r1
 800a096:	4649      	mov	r1, r9
 800a098:	4640      	mov	r0, r8
 800a09a:	f7f6 fd65 	bl	8000b68 <__aeabi_d2iz>
 800a09e:	4606      	mov	r6, r0
 800a0a0:	f7f6 fa48 	bl	8000534 <__aeabi_i2d>
 800a0a4:	3630      	adds	r6, #48	; 0x30
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	4640      	mov	r0, r8
 800a0ac:	4649      	mov	r1, r9
 800a0ae:	f7f6 f8f3 	bl	8000298 <__aeabi_dsub>
 800a0b2:	f805 6b01 	strb.w	r6, [r5], #1
 800a0b6:	9b02      	ldr	r3, [sp, #8]
 800a0b8:	429d      	cmp	r5, r3
 800a0ba:	4680      	mov	r8, r0
 800a0bc:	4689      	mov	r9, r1
 800a0be:	f04f 0200 	mov.w	r2, #0
 800a0c2:	d124      	bne.n	800a10e <_dtoa_r+0x62e>
 800a0c4:	4b1b      	ldr	r3, [pc, #108]	; (800a134 <_dtoa_r+0x654>)
 800a0c6:	ec51 0b19 	vmov	r0, r1, d9
 800a0ca:	f7f6 f8e7 	bl	800029c <__adddf3>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	f7f6 fd27 	bl	8000b28 <__aeabi_dcmpgt>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d173      	bne.n	800a1c6 <_dtoa_r+0x6e6>
 800a0de:	ec53 2b19 	vmov	r2, r3, d9
 800a0e2:	4914      	ldr	r1, [pc, #80]	; (800a134 <_dtoa_r+0x654>)
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	f7f6 f8d7 	bl	8000298 <__aeabi_dsub>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	4640      	mov	r0, r8
 800a0f0:	4649      	mov	r1, r9
 800a0f2:	f7f6 fcfb 	bl	8000aec <__aeabi_dcmplt>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	f43f af2f 	beq.w	8009f5a <_dtoa_r+0x47a>
 800a0fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a0fe:	1e6b      	subs	r3, r5, #1
 800a100:	930f      	str	r3, [sp, #60]	; 0x3c
 800a102:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a106:	2b30      	cmp	r3, #48	; 0x30
 800a108:	d0f8      	beq.n	800a0fc <_dtoa_r+0x61c>
 800a10a:	46bb      	mov	fp, r7
 800a10c:	e04a      	b.n	800a1a4 <_dtoa_r+0x6c4>
 800a10e:	4b06      	ldr	r3, [pc, #24]	; (800a128 <_dtoa_r+0x648>)
 800a110:	f7f6 fa7a 	bl	8000608 <__aeabi_dmul>
 800a114:	4680      	mov	r8, r0
 800a116:	4689      	mov	r9, r1
 800a118:	e7bd      	b.n	800a096 <_dtoa_r+0x5b6>
 800a11a:	bf00      	nop
 800a11c:	0800d2b8 	.word	0x0800d2b8
 800a120:	0800d290 	.word	0x0800d290
 800a124:	3ff00000 	.word	0x3ff00000
 800a128:	40240000 	.word	0x40240000
 800a12c:	401c0000 	.word	0x401c0000
 800a130:	40140000 	.word	0x40140000
 800a134:	3fe00000 	.word	0x3fe00000
 800a138:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a13c:	9d00      	ldr	r5, [sp, #0]
 800a13e:	4642      	mov	r2, r8
 800a140:	464b      	mov	r3, r9
 800a142:	4630      	mov	r0, r6
 800a144:	4639      	mov	r1, r7
 800a146:	f7f6 fb89 	bl	800085c <__aeabi_ddiv>
 800a14a:	f7f6 fd0d 	bl	8000b68 <__aeabi_d2iz>
 800a14e:	9001      	str	r0, [sp, #4]
 800a150:	f7f6 f9f0 	bl	8000534 <__aeabi_i2d>
 800a154:	4642      	mov	r2, r8
 800a156:	464b      	mov	r3, r9
 800a158:	f7f6 fa56 	bl	8000608 <__aeabi_dmul>
 800a15c:	4602      	mov	r2, r0
 800a15e:	460b      	mov	r3, r1
 800a160:	4630      	mov	r0, r6
 800a162:	4639      	mov	r1, r7
 800a164:	f7f6 f898 	bl	8000298 <__aeabi_dsub>
 800a168:	9e01      	ldr	r6, [sp, #4]
 800a16a:	9f04      	ldr	r7, [sp, #16]
 800a16c:	3630      	adds	r6, #48	; 0x30
 800a16e:	f805 6b01 	strb.w	r6, [r5], #1
 800a172:	9e00      	ldr	r6, [sp, #0]
 800a174:	1bae      	subs	r6, r5, r6
 800a176:	42b7      	cmp	r7, r6
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	d134      	bne.n	800a1e8 <_dtoa_r+0x708>
 800a17e:	f7f6 f88d 	bl	800029c <__adddf3>
 800a182:	4642      	mov	r2, r8
 800a184:	464b      	mov	r3, r9
 800a186:	4606      	mov	r6, r0
 800a188:	460f      	mov	r7, r1
 800a18a:	f7f6 fccd 	bl	8000b28 <__aeabi_dcmpgt>
 800a18e:	b9c8      	cbnz	r0, 800a1c4 <_dtoa_r+0x6e4>
 800a190:	4642      	mov	r2, r8
 800a192:	464b      	mov	r3, r9
 800a194:	4630      	mov	r0, r6
 800a196:	4639      	mov	r1, r7
 800a198:	f7f6 fc9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a19c:	b110      	cbz	r0, 800a1a4 <_dtoa_r+0x6c4>
 800a19e:	9b01      	ldr	r3, [sp, #4]
 800a1a0:	07db      	lsls	r3, r3, #31
 800a1a2:	d40f      	bmi.n	800a1c4 <_dtoa_r+0x6e4>
 800a1a4:	4651      	mov	r1, sl
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f000 fbcc 	bl	800a944 <_Bfree>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1b0:	702b      	strb	r3, [r5, #0]
 800a1b2:	f10b 0301 	add.w	r3, fp, #1
 800a1b6:	6013      	str	r3, [r2, #0]
 800a1b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f43f ace2 	beq.w	8009b84 <_dtoa_r+0xa4>
 800a1c0:	601d      	str	r5, [r3, #0]
 800a1c2:	e4df      	b.n	8009b84 <_dtoa_r+0xa4>
 800a1c4:	465f      	mov	r7, fp
 800a1c6:	462b      	mov	r3, r5
 800a1c8:	461d      	mov	r5, r3
 800a1ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1ce:	2a39      	cmp	r2, #57	; 0x39
 800a1d0:	d106      	bne.n	800a1e0 <_dtoa_r+0x700>
 800a1d2:	9a00      	ldr	r2, [sp, #0]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d1f7      	bne.n	800a1c8 <_dtoa_r+0x6e8>
 800a1d8:	9900      	ldr	r1, [sp, #0]
 800a1da:	2230      	movs	r2, #48	; 0x30
 800a1dc:	3701      	adds	r7, #1
 800a1de:	700a      	strb	r2, [r1, #0]
 800a1e0:	781a      	ldrb	r2, [r3, #0]
 800a1e2:	3201      	adds	r2, #1
 800a1e4:	701a      	strb	r2, [r3, #0]
 800a1e6:	e790      	b.n	800a10a <_dtoa_r+0x62a>
 800a1e8:	4ba3      	ldr	r3, [pc, #652]	; (800a478 <_dtoa_r+0x998>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f7f6 fa0c 	bl	8000608 <__aeabi_dmul>
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	460f      	mov	r7, r1
 800a1f8:	f7f6 fc6e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d09e      	beq.n	800a13e <_dtoa_r+0x65e>
 800a200:	e7d0      	b.n	800a1a4 <_dtoa_r+0x6c4>
 800a202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a204:	2a00      	cmp	r2, #0
 800a206:	f000 80ca 	beq.w	800a39e <_dtoa_r+0x8be>
 800a20a:	9a07      	ldr	r2, [sp, #28]
 800a20c:	2a01      	cmp	r2, #1
 800a20e:	f300 80ad 	bgt.w	800a36c <_dtoa_r+0x88c>
 800a212:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a214:	2a00      	cmp	r2, #0
 800a216:	f000 80a5 	beq.w	800a364 <_dtoa_r+0x884>
 800a21a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a21e:	9e08      	ldr	r6, [sp, #32]
 800a220:	9d05      	ldr	r5, [sp, #20]
 800a222:	9a05      	ldr	r2, [sp, #20]
 800a224:	441a      	add	r2, r3
 800a226:	9205      	str	r2, [sp, #20]
 800a228:	9a06      	ldr	r2, [sp, #24]
 800a22a:	2101      	movs	r1, #1
 800a22c:	441a      	add	r2, r3
 800a22e:	4620      	mov	r0, r4
 800a230:	9206      	str	r2, [sp, #24]
 800a232:	f000 fc87 	bl	800ab44 <__i2b>
 800a236:	4607      	mov	r7, r0
 800a238:	b165      	cbz	r5, 800a254 <_dtoa_r+0x774>
 800a23a:	9b06      	ldr	r3, [sp, #24]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	dd09      	ble.n	800a254 <_dtoa_r+0x774>
 800a240:	42ab      	cmp	r3, r5
 800a242:	9a05      	ldr	r2, [sp, #20]
 800a244:	bfa8      	it	ge
 800a246:	462b      	movge	r3, r5
 800a248:	1ad2      	subs	r2, r2, r3
 800a24a:	9205      	str	r2, [sp, #20]
 800a24c:	9a06      	ldr	r2, [sp, #24]
 800a24e:	1aed      	subs	r5, r5, r3
 800a250:	1ad3      	subs	r3, r2, r3
 800a252:	9306      	str	r3, [sp, #24]
 800a254:	9b08      	ldr	r3, [sp, #32]
 800a256:	b1f3      	cbz	r3, 800a296 <_dtoa_r+0x7b6>
 800a258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f000 80a3 	beq.w	800a3a6 <_dtoa_r+0x8c6>
 800a260:	2e00      	cmp	r6, #0
 800a262:	dd10      	ble.n	800a286 <_dtoa_r+0x7a6>
 800a264:	4639      	mov	r1, r7
 800a266:	4632      	mov	r2, r6
 800a268:	4620      	mov	r0, r4
 800a26a:	f000 fd2b 	bl	800acc4 <__pow5mult>
 800a26e:	4652      	mov	r2, sl
 800a270:	4601      	mov	r1, r0
 800a272:	4607      	mov	r7, r0
 800a274:	4620      	mov	r0, r4
 800a276:	f000 fc7b 	bl	800ab70 <__multiply>
 800a27a:	4651      	mov	r1, sl
 800a27c:	4680      	mov	r8, r0
 800a27e:	4620      	mov	r0, r4
 800a280:	f000 fb60 	bl	800a944 <_Bfree>
 800a284:	46c2      	mov	sl, r8
 800a286:	9b08      	ldr	r3, [sp, #32]
 800a288:	1b9a      	subs	r2, r3, r6
 800a28a:	d004      	beq.n	800a296 <_dtoa_r+0x7b6>
 800a28c:	4651      	mov	r1, sl
 800a28e:	4620      	mov	r0, r4
 800a290:	f000 fd18 	bl	800acc4 <__pow5mult>
 800a294:	4682      	mov	sl, r0
 800a296:	2101      	movs	r1, #1
 800a298:	4620      	mov	r0, r4
 800a29a:	f000 fc53 	bl	800ab44 <__i2b>
 800a29e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	4606      	mov	r6, r0
 800a2a4:	f340 8081 	ble.w	800a3aa <_dtoa_r+0x8ca>
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	4601      	mov	r1, r0
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f000 fd09 	bl	800acc4 <__pow5mult>
 800a2b2:	9b07      	ldr	r3, [sp, #28]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	dd7a      	ble.n	800a3b0 <_dtoa_r+0x8d0>
 800a2ba:	f04f 0800 	mov.w	r8, #0
 800a2be:	6933      	ldr	r3, [r6, #16]
 800a2c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a2c4:	6918      	ldr	r0, [r3, #16]
 800a2c6:	f000 fbef 	bl	800aaa8 <__hi0bits>
 800a2ca:	f1c0 0020 	rsb	r0, r0, #32
 800a2ce:	9b06      	ldr	r3, [sp, #24]
 800a2d0:	4418      	add	r0, r3
 800a2d2:	f010 001f 	ands.w	r0, r0, #31
 800a2d6:	f000 8094 	beq.w	800a402 <_dtoa_r+0x922>
 800a2da:	f1c0 0320 	rsb	r3, r0, #32
 800a2de:	2b04      	cmp	r3, #4
 800a2e0:	f340 8085 	ble.w	800a3ee <_dtoa_r+0x90e>
 800a2e4:	9b05      	ldr	r3, [sp, #20]
 800a2e6:	f1c0 001c 	rsb	r0, r0, #28
 800a2ea:	4403      	add	r3, r0
 800a2ec:	9305      	str	r3, [sp, #20]
 800a2ee:	9b06      	ldr	r3, [sp, #24]
 800a2f0:	4403      	add	r3, r0
 800a2f2:	4405      	add	r5, r0
 800a2f4:	9306      	str	r3, [sp, #24]
 800a2f6:	9b05      	ldr	r3, [sp, #20]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	dd05      	ble.n	800a308 <_dtoa_r+0x828>
 800a2fc:	4651      	mov	r1, sl
 800a2fe:	461a      	mov	r2, r3
 800a300:	4620      	mov	r0, r4
 800a302:	f000 fd39 	bl	800ad78 <__lshift>
 800a306:	4682      	mov	sl, r0
 800a308:	9b06      	ldr	r3, [sp, #24]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	dd05      	ble.n	800a31a <_dtoa_r+0x83a>
 800a30e:	4631      	mov	r1, r6
 800a310:	461a      	mov	r2, r3
 800a312:	4620      	mov	r0, r4
 800a314:	f000 fd30 	bl	800ad78 <__lshift>
 800a318:	4606      	mov	r6, r0
 800a31a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d072      	beq.n	800a406 <_dtoa_r+0x926>
 800a320:	4631      	mov	r1, r6
 800a322:	4650      	mov	r0, sl
 800a324:	f000 fd94 	bl	800ae50 <__mcmp>
 800a328:	2800      	cmp	r0, #0
 800a32a:	da6c      	bge.n	800a406 <_dtoa_r+0x926>
 800a32c:	2300      	movs	r3, #0
 800a32e:	4651      	mov	r1, sl
 800a330:	220a      	movs	r2, #10
 800a332:	4620      	mov	r0, r4
 800a334:	f000 fb28 	bl	800a988 <__multadd>
 800a338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a33a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a33e:	4682      	mov	sl, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 81b0 	beq.w	800a6a6 <_dtoa_r+0xbc6>
 800a346:	2300      	movs	r3, #0
 800a348:	4639      	mov	r1, r7
 800a34a:	220a      	movs	r2, #10
 800a34c:	4620      	mov	r0, r4
 800a34e:	f000 fb1b 	bl	800a988 <__multadd>
 800a352:	9b01      	ldr	r3, [sp, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	4607      	mov	r7, r0
 800a358:	f300 8096 	bgt.w	800a488 <_dtoa_r+0x9a8>
 800a35c:	9b07      	ldr	r3, [sp, #28]
 800a35e:	2b02      	cmp	r3, #2
 800a360:	dc59      	bgt.n	800a416 <_dtoa_r+0x936>
 800a362:	e091      	b.n	800a488 <_dtoa_r+0x9a8>
 800a364:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a366:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a36a:	e758      	b.n	800a21e <_dtoa_r+0x73e>
 800a36c:	9b04      	ldr	r3, [sp, #16]
 800a36e:	1e5e      	subs	r6, r3, #1
 800a370:	9b08      	ldr	r3, [sp, #32]
 800a372:	42b3      	cmp	r3, r6
 800a374:	bfbf      	itttt	lt
 800a376:	9b08      	ldrlt	r3, [sp, #32]
 800a378:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a37a:	9608      	strlt	r6, [sp, #32]
 800a37c:	1af3      	sublt	r3, r6, r3
 800a37e:	bfb4      	ite	lt
 800a380:	18d2      	addlt	r2, r2, r3
 800a382:	1b9e      	subge	r6, r3, r6
 800a384:	9b04      	ldr	r3, [sp, #16]
 800a386:	bfbc      	itt	lt
 800a388:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a38a:	2600      	movlt	r6, #0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	bfb7      	itett	lt
 800a390:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a394:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a398:	1a9d      	sublt	r5, r3, r2
 800a39a:	2300      	movlt	r3, #0
 800a39c:	e741      	b.n	800a222 <_dtoa_r+0x742>
 800a39e:	9e08      	ldr	r6, [sp, #32]
 800a3a0:	9d05      	ldr	r5, [sp, #20]
 800a3a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a3a4:	e748      	b.n	800a238 <_dtoa_r+0x758>
 800a3a6:	9a08      	ldr	r2, [sp, #32]
 800a3a8:	e770      	b.n	800a28c <_dtoa_r+0x7ac>
 800a3aa:	9b07      	ldr	r3, [sp, #28]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	dc19      	bgt.n	800a3e4 <_dtoa_r+0x904>
 800a3b0:	9b02      	ldr	r3, [sp, #8]
 800a3b2:	b9bb      	cbnz	r3, 800a3e4 <_dtoa_r+0x904>
 800a3b4:	9b03      	ldr	r3, [sp, #12]
 800a3b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3ba:	b99b      	cbnz	r3, 800a3e4 <_dtoa_r+0x904>
 800a3bc:	9b03      	ldr	r3, [sp, #12]
 800a3be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3c2:	0d1b      	lsrs	r3, r3, #20
 800a3c4:	051b      	lsls	r3, r3, #20
 800a3c6:	b183      	cbz	r3, 800a3ea <_dtoa_r+0x90a>
 800a3c8:	9b05      	ldr	r3, [sp, #20]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	9305      	str	r3, [sp, #20]
 800a3ce:	9b06      	ldr	r3, [sp, #24]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	9306      	str	r3, [sp, #24]
 800a3d4:	f04f 0801 	mov.w	r8, #1
 800a3d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f47f af6f 	bne.w	800a2be <_dtoa_r+0x7de>
 800a3e0:	2001      	movs	r0, #1
 800a3e2:	e774      	b.n	800a2ce <_dtoa_r+0x7ee>
 800a3e4:	f04f 0800 	mov.w	r8, #0
 800a3e8:	e7f6      	b.n	800a3d8 <_dtoa_r+0x8f8>
 800a3ea:	4698      	mov	r8, r3
 800a3ec:	e7f4      	b.n	800a3d8 <_dtoa_r+0x8f8>
 800a3ee:	d082      	beq.n	800a2f6 <_dtoa_r+0x816>
 800a3f0:	9a05      	ldr	r2, [sp, #20]
 800a3f2:	331c      	adds	r3, #28
 800a3f4:	441a      	add	r2, r3
 800a3f6:	9205      	str	r2, [sp, #20]
 800a3f8:	9a06      	ldr	r2, [sp, #24]
 800a3fa:	441a      	add	r2, r3
 800a3fc:	441d      	add	r5, r3
 800a3fe:	9206      	str	r2, [sp, #24]
 800a400:	e779      	b.n	800a2f6 <_dtoa_r+0x816>
 800a402:	4603      	mov	r3, r0
 800a404:	e7f4      	b.n	800a3f0 <_dtoa_r+0x910>
 800a406:	9b04      	ldr	r3, [sp, #16]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	dc37      	bgt.n	800a47c <_dtoa_r+0x99c>
 800a40c:	9b07      	ldr	r3, [sp, #28]
 800a40e:	2b02      	cmp	r3, #2
 800a410:	dd34      	ble.n	800a47c <_dtoa_r+0x99c>
 800a412:	9b04      	ldr	r3, [sp, #16]
 800a414:	9301      	str	r3, [sp, #4]
 800a416:	9b01      	ldr	r3, [sp, #4]
 800a418:	b963      	cbnz	r3, 800a434 <_dtoa_r+0x954>
 800a41a:	4631      	mov	r1, r6
 800a41c:	2205      	movs	r2, #5
 800a41e:	4620      	mov	r0, r4
 800a420:	f000 fab2 	bl	800a988 <__multadd>
 800a424:	4601      	mov	r1, r0
 800a426:	4606      	mov	r6, r0
 800a428:	4650      	mov	r0, sl
 800a42a:	f000 fd11 	bl	800ae50 <__mcmp>
 800a42e:	2800      	cmp	r0, #0
 800a430:	f73f adbb 	bgt.w	8009faa <_dtoa_r+0x4ca>
 800a434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a436:	9d00      	ldr	r5, [sp, #0]
 800a438:	ea6f 0b03 	mvn.w	fp, r3
 800a43c:	f04f 0800 	mov.w	r8, #0
 800a440:	4631      	mov	r1, r6
 800a442:	4620      	mov	r0, r4
 800a444:	f000 fa7e 	bl	800a944 <_Bfree>
 800a448:	2f00      	cmp	r7, #0
 800a44a:	f43f aeab 	beq.w	800a1a4 <_dtoa_r+0x6c4>
 800a44e:	f1b8 0f00 	cmp.w	r8, #0
 800a452:	d005      	beq.n	800a460 <_dtoa_r+0x980>
 800a454:	45b8      	cmp	r8, r7
 800a456:	d003      	beq.n	800a460 <_dtoa_r+0x980>
 800a458:	4641      	mov	r1, r8
 800a45a:	4620      	mov	r0, r4
 800a45c:	f000 fa72 	bl	800a944 <_Bfree>
 800a460:	4639      	mov	r1, r7
 800a462:	4620      	mov	r0, r4
 800a464:	f000 fa6e 	bl	800a944 <_Bfree>
 800a468:	e69c      	b.n	800a1a4 <_dtoa_r+0x6c4>
 800a46a:	2600      	movs	r6, #0
 800a46c:	4637      	mov	r7, r6
 800a46e:	e7e1      	b.n	800a434 <_dtoa_r+0x954>
 800a470:	46bb      	mov	fp, r7
 800a472:	4637      	mov	r7, r6
 800a474:	e599      	b.n	8009faa <_dtoa_r+0x4ca>
 800a476:	bf00      	nop
 800a478:	40240000 	.word	0x40240000
 800a47c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 80c8 	beq.w	800a614 <_dtoa_r+0xb34>
 800a484:	9b04      	ldr	r3, [sp, #16]
 800a486:	9301      	str	r3, [sp, #4]
 800a488:	2d00      	cmp	r5, #0
 800a48a:	dd05      	ble.n	800a498 <_dtoa_r+0x9b8>
 800a48c:	4639      	mov	r1, r7
 800a48e:	462a      	mov	r2, r5
 800a490:	4620      	mov	r0, r4
 800a492:	f000 fc71 	bl	800ad78 <__lshift>
 800a496:	4607      	mov	r7, r0
 800a498:	f1b8 0f00 	cmp.w	r8, #0
 800a49c:	d05b      	beq.n	800a556 <_dtoa_r+0xa76>
 800a49e:	6879      	ldr	r1, [r7, #4]
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f000 fa0f 	bl	800a8c4 <_Balloc>
 800a4a6:	4605      	mov	r5, r0
 800a4a8:	b928      	cbnz	r0, 800a4b6 <_dtoa_r+0x9d6>
 800a4aa:	4b83      	ldr	r3, [pc, #524]	; (800a6b8 <_dtoa_r+0xbd8>)
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a4b2:	f7ff bb2e 	b.w	8009b12 <_dtoa_r+0x32>
 800a4b6:	693a      	ldr	r2, [r7, #16]
 800a4b8:	3202      	adds	r2, #2
 800a4ba:	0092      	lsls	r2, r2, #2
 800a4bc:	f107 010c 	add.w	r1, r7, #12
 800a4c0:	300c      	adds	r0, #12
 800a4c2:	f7ff fa71 	bl	80099a8 <memcpy>
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 fc54 	bl	800ad78 <__lshift>
 800a4d0:	9b00      	ldr	r3, [sp, #0]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	9304      	str	r3, [sp, #16]
 800a4d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4da:	4413      	add	r3, r2
 800a4dc:	9308      	str	r3, [sp, #32]
 800a4de:	9b02      	ldr	r3, [sp, #8]
 800a4e0:	f003 0301 	and.w	r3, r3, #1
 800a4e4:	46b8      	mov	r8, r7
 800a4e6:	9306      	str	r3, [sp, #24]
 800a4e8:	4607      	mov	r7, r0
 800a4ea:	9b04      	ldr	r3, [sp, #16]
 800a4ec:	4631      	mov	r1, r6
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	4650      	mov	r0, sl
 800a4f2:	9301      	str	r3, [sp, #4]
 800a4f4:	f7ff fa6c 	bl	80099d0 <quorem>
 800a4f8:	4641      	mov	r1, r8
 800a4fa:	9002      	str	r0, [sp, #8]
 800a4fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a500:	4650      	mov	r0, sl
 800a502:	f000 fca5 	bl	800ae50 <__mcmp>
 800a506:	463a      	mov	r2, r7
 800a508:	9005      	str	r0, [sp, #20]
 800a50a:	4631      	mov	r1, r6
 800a50c:	4620      	mov	r0, r4
 800a50e:	f000 fcbb 	bl	800ae88 <__mdiff>
 800a512:	68c2      	ldr	r2, [r0, #12]
 800a514:	4605      	mov	r5, r0
 800a516:	bb02      	cbnz	r2, 800a55a <_dtoa_r+0xa7a>
 800a518:	4601      	mov	r1, r0
 800a51a:	4650      	mov	r0, sl
 800a51c:	f000 fc98 	bl	800ae50 <__mcmp>
 800a520:	4602      	mov	r2, r0
 800a522:	4629      	mov	r1, r5
 800a524:	4620      	mov	r0, r4
 800a526:	9209      	str	r2, [sp, #36]	; 0x24
 800a528:	f000 fa0c 	bl	800a944 <_Bfree>
 800a52c:	9b07      	ldr	r3, [sp, #28]
 800a52e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a530:	9d04      	ldr	r5, [sp, #16]
 800a532:	ea43 0102 	orr.w	r1, r3, r2
 800a536:	9b06      	ldr	r3, [sp, #24]
 800a538:	4319      	orrs	r1, r3
 800a53a:	d110      	bne.n	800a55e <_dtoa_r+0xa7e>
 800a53c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a540:	d029      	beq.n	800a596 <_dtoa_r+0xab6>
 800a542:	9b05      	ldr	r3, [sp, #20]
 800a544:	2b00      	cmp	r3, #0
 800a546:	dd02      	ble.n	800a54e <_dtoa_r+0xa6e>
 800a548:	9b02      	ldr	r3, [sp, #8]
 800a54a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a54e:	9b01      	ldr	r3, [sp, #4]
 800a550:	f883 9000 	strb.w	r9, [r3]
 800a554:	e774      	b.n	800a440 <_dtoa_r+0x960>
 800a556:	4638      	mov	r0, r7
 800a558:	e7ba      	b.n	800a4d0 <_dtoa_r+0x9f0>
 800a55a:	2201      	movs	r2, #1
 800a55c:	e7e1      	b.n	800a522 <_dtoa_r+0xa42>
 800a55e:	9b05      	ldr	r3, [sp, #20]
 800a560:	2b00      	cmp	r3, #0
 800a562:	db04      	blt.n	800a56e <_dtoa_r+0xa8e>
 800a564:	9907      	ldr	r1, [sp, #28]
 800a566:	430b      	orrs	r3, r1
 800a568:	9906      	ldr	r1, [sp, #24]
 800a56a:	430b      	orrs	r3, r1
 800a56c:	d120      	bne.n	800a5b0 <_dtoa_r+0xad0>
 800a56e:	2a00      	cmp	r2, #0
 800a570:	dded      	ble.n	800a54e <_dtoa_r+0xa6e>
 800a572:	4651      	mov	r1, sl
 800a574:	2201      	movs	r2, #1
 800a576:	4620      	mov	r0, r4
 800a578:	f000 fbfe 	bl	800ad78 <__lshift>
 800a57c:	4631      	mov	r1, r6
 800a57e:	4682      	mov	sl, r0
 800a580:	f000 fc66 	bl	800ae50 <__mcmp>
 800a584:	2800      	cmp	r0, #0
 800a586:	dc03      	bgt.n	800a590 <_dtoa_r+0xab0>
 800a588:	d1e1      	bne.n	800a54e <_dtoa_r+0xa6e>
 800a58a:	f019 0f01 	tst.w	r9, #1
 800a58e:	d0de      	beq.n	800a54e <_dtoa_r+0xa6e>
 800a590:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a594:	d1d8      	bne.n	800a548 <_dtoa_r+0xa68>
 800a596:	9a01      	ldr	r2, [sp, #4]
 800a598:	2339      	movs	r3, #57	; 0x39
 800a59a:	7013      	strb	r3, [r2, #0]
 800a59c:	462b      	mov	r3, r5
 800a59e:	461d      	mov	r5, r3
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a5a6:	2a39      	cmp	r2, #57	; 0x39
 800a5a8:	d06c      	beq.n	800a684 <_dtoa_r+0xba4>
 800a5aa:	3201      	adds	r2, #1
 800a5ac:	701a      	strb	r2, [r3, #0]
 800a5ae:	e747      	b.n	800a440 <_dtoa_r+0x960>
 800a5b0:	2a00      	cmp	r2, #0
 800a5b2:	dd07      	ble.n	800a5c4 <_dtoa_r+0xae4>
 800a5b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a5b8:	d0ed      	beq.n	800a596 <_dtoa_r+0xab6>
 800a5ba:	9a01      	ldr	r2, [sp, #4]
 800a5bc:	f109 0301 	add.w	r3, r9, #1
 800a5c0:	7013      	strb	r3, [r2, #0]
 800a5c2:	e73d      	b.n	800a440 <_dtoa_r+0x960>
 800a5c4:	9b04      	ldr	r3, [sp, #16]
 800a5c6:	9a08      	ldr	r2, [sp, #32]
 800a5c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d043      	beq.n	800a658 <_dtoa_r+0xb78>
 800a5d0:	4651      	mov	r1, sl
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	220a      	movs	r2, #10
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f000 f9d6 	bl	800a988 <__multadd>
 800a5dc:	45b8      	cmp	r8, r7
 800a5de:	4682      	mov	sl, r0
 800a5e0:	f04f 0300 	mov.w	r3, #0
 800a5e4:	f04f 020a 	mov.w	r2, #10
 800a5e8:	4641      	mov	r1, r8
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	d107      	bne.n	800a5fe <_dtoa_r+0xb1e>
 800a5ee:	f000 f9cb 	bl	800a988 <__multadd>
 800a5f2:	4680      	mov	r8, r0
 800a5f4:	4607      	mov	r7, r0
 800a5f6:	9b04      	ldr	r3, [sp, #16]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	9304      	str	r3, [sp, #16]
 800a5fc:	e775      	b.n	800a4ea <_dtoa_r+0xa0a>
 800a5fe:	f000 f9c3 	bl	800a988 <__multadd>
 800a602:	4639      	mov	r1, r7
 800a604:	4680      	mov	r8, r0
 800a606:	2300      	movs	r3, #0
 800a608:	220a      	movs	r2, #10
 800a60a:	4620      	mov	r0, r4
 800a60c:	f000 f9bc 	bl	800a988 <__multadd>
 800a610:	4607      	mov	r7, r0
 800a612:	e7f0      	b.n	800a5f6 <_dtoa_r+0xb16>
 800a614:	9b04      	ldr	r3, [sp, #16]
 800a616:	9301      	str	r3, [sp, #4]
 800a618:	9d00      	ldr	r5, [sp, #0]
 800a61a:	4631      	mov	r1, r6
 800a61c:	4650      	mov	r0, sl
 800a61e:	f7ff f9d7 	bl	80099d0 <quorem>
 800a622:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a626:	9b00      	ldr	r3, [sp, #0]
 800a628:	f805 9b01 	strb.w	r9, [r5], #1
 800a62c:	1aea      	subs	r2, r5, r3
 800a62e:	9b01      	ldr	r3, [sp, #4]
 800a630:	4293      	cmp	r3, r2
 800a632:	dd07      	ble.n	800a644 <_dtoa_r+0xb64>
 800a634:	4651      	mov	r1, sl
 800a636:	2300      	movs	r3, #0
 800a638:	220a      	movs	r2, #10
 800a63a:	4620      	mov	r0, r4
 800a63c:	f000 f9a4 	bl	800a988 <__multadd>
 800a640:	4682      	mov	sl, r0
 800a642:	e7ea      	b.n	800a61a <_dtoa_r+0xb3a>
 800a644:	9b01      	ldr	r3, [sp, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	bfc8      	it	gt
 800a64a:	461d      	movgt	r5, r3
 800a64c:	9b00      	ldr	r3, [sp, #0]
 800a64e:	bfd8      	it	le
 800a650:	2501      	movle	r5, #1
 800a652:	441d      	add	r5, r3
 800a654:	f04f 0800 	mov.w	r8, #0
 800a658:	4651      	mov	r1, sl
 800a65a:	2201      	movs	r2, #1
 800a65c:	4620      	mov	r0, r4
 800a65e:	f000 fb8b 	bl	800ad78 <__lshift>
 800a662:	4631      	mov	r1, r6
 800a664:	4682      	mov	sl, r0
 800a666:	f000 fbf3 	bl	800ae50 <__mcmp>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	dc96      	bgt.n	800a59c <_dtoa_r+0xabc>
 800a66e:	d102      	bne.n	800a676 <_dtoa_r+0xb96>
 800a670:	f019 0f01 	tst.w	r9, #1
 800a674:	d192      	bne.n	800a59c <_dtoa_r+0xabc>
 800a676:	462b      	mov	r3, r5
 800a678:	461d      	mov	r5, r3
 800a67a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a67e:	2a30      	cmp	r2, #48	; 0x30
 800a680:	d0fa      	beq.n	800a678 <_dtoa_r+0xb98>
 800a682:	e6dd      	b.n	800a440 <_dtoa_r+0x960>
 800a684:	9a00      	ldr	r2, [sp, #0]
 800a686:	429a      	cmp	r2, r3
 800a688:	d189      	bne.n	800a59e <_dtoa_r+0xabe>
 800a68a:	f10b 0b01 	add.w	fp, fp, #1
 800a68e:	2331      	movs	r3, #49	; 0x31
 800a690:	e796      	b.n	800a5c0 <_dtoa_r+0xae0>
 800a692:	4b0a      	ldr	r3, [pc, #40]	; (800a6bc <_dtoa_r+0xbdc>)
 800a694:	f7ff ba99 	b.w	8009bca <_dtoa_r+0xea>
 800a698:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f47f aa6d 	bne.w	8009b7a <_dtoa_r+0x9a>
 800a6a0:	4b07      	ldr	r3, [pc, #28]	; (800a6c0 <_dtoa_r+0xbe0>)
 800a6a2:	f7ff ba92 	b.w	8009bca <_dtoa_r+0xea>
 800a6a6:	9b01      	ldr	r3, [sp, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	dcb5      	bgt.n	800a618 <_dtoa_r+0xb38>
 800a6ac:	9b07      	ldr	r3, [sp, #28]
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	f73f aeb1 	bgt.w	800a416 <_dtoa_r+0x936>
 800a6b4:	e7b0      	b.n	800a618 <_dtoa_r+0xb38>
 800a6b6:	bf00      	nop
 800a6b8:	0800d221 	.word	0x0800d221
 800a6bc:	0800d17c 	.word	0x0800d17c
 800a6c0:	0800d1a5 	.word	0x0800d1a5

0800a6c4 <_free_r>:
 800a6c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6c6:	2900      	cmp	r1, #0
 800a6c8:	d044      	beq.n	800a754 <_free_r+0x90>
 800a6ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6ce:	9001      	str	r0, [sp, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f1a1 0404 	sub.w	r4, r1, #4
 800a6d6:	bfb8      	it	lt
 800a6d8:	18e4      	addlt	r4, r4, r3
 800a6da:	f000 f8e7 	bl	800a8ac <__malloc_lock>
 800a6de:	4a1e      	ldr	r2, [pc, #120]	; (800a758 <_free_r+0x94>)
 800a6e0:	9801      	ldr	r0, [sp, #4]
 800a6e2:	6813      	ldr	r3, [r2, #0]
 800a6e4:	b933      	cbnz	r3, 800a6f4 <_free_r+0x30>
 800a6e6:	6063      	str	r3, [r4, #4]
 800a6e8:	6014      	str	r4, [r2, #0]
 800a6ea:	b003      	add	sp, #12
 800a6ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6f0:	f000 b8e2 	b.w	800a8b8 <__malloc_unlock>
 800a6f4:	42a3      	cmp	r3, r4
 800a6f6:	d908      	bls.n	800a70a <_free_r+0x46>
 800a6f8:	6825      	ldr	r5, [r4, #0]
 800a6fa:	1961      	adds	r1, r4, r5
 800a6fc:	428b      	cmp	r3, r1
 800a6fe:	bf01      	itttt	eq
 800a700:	6819      	ldreq	r1, [r3, #0]
 800a702:	685b      	ldreq	r3, [r3, #4]
 800a704:	1949      	addeq	r1, r1, r5
 800a706:	6021      	streq	r1, [r4, #0]
 800a708:	e7ed      	b.n	800a6e6 <_free_r+0x22>
 800a70a:	461a      	mov	r2, r3
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	b10b      	cbz	r3, 800a714 <_free_r+0x50>
 800a710:	42a3      	cmp	r3, r4
 800a712:	d9fa      	bls.n	800a70a <_free_r+0x46>
 800a714:	6811      	ldr	r1, [r2, #0]
 800a716:	1855      	adds	r5, r2, r1
 800a718:	42a5      	cmp	r5, r4
 800a71a:	d10b      	bne.n	800a734 <_free_r+0x70>
 800a71c:	6824      	ldr	r4, [r4, #0]
 800a71e:	4421      	add	r1, r4
 800a720:	1854      	adds	r4, r2, r1
 800a722:	42a3      	cmp	r3, r4
 800a724:	6011      	str	r1, [r2, #0]
 800a726:	d1e0      	bne.n	800a6ea <_free_r+0x26>
 800a728:	681c      	ldr	r4, [r3, #0]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	6053      	str	r3, [r2, #4]
 800a72e:	440c      	add	r4, r1
 800a730:	6014      	str	r4, [r2, #0]
 800a732:	e7da      	b.n	800a6ea <_free_r+0x26>
 800a734:	d902      	bls.n	800a73c <_free_r+0x78>
 800a736:	230c      	movs	r3, #12
 800a738:	6003      	str	r3, [r0, #0]
 800a73a:	e7d6      	b.n	800a6ea <_free_r+0x26>
 800a73c:	6825      	ldr	r5, [r4, #0]
 800a73e:	1961      	adds	r1, r4, r5
 800a740:	428b      	cmp	r3, r1
 800a742:	bf04      	itt	eq
 800a744:	6819      	ldreq	r1, [r3, #0]
 800a746:	685b      	ldreq	r3, [r3, #4]
 800a748:	6063      	str	r3, [r4, #4]
 800a74a:	bf04      	itt	eq
 800a74c:	1949      	addeq	r1, r1, r5
 800a74e:	6021      	streq	r1, [r4, #0]
 800a750:	6054      	str	r4, [r2, #4]
 800a752:	e7ca      	b.n	800a6ea <_free_r+0x26>
 800a754:	b003      	add	sp, #12
 800a756:	bd30      	pop	{r4, r5, pc}
 800a758:	2000239c 	.word	0x2000239c

0800a75c <malloc>:
 800a75c:	4b02      	ldr	r3, [pc, #8]	; (800a768 <malloc+0xc>)
 800a75e:	4601      	mov	r1, r0
 800a760:	6818      	ldr	r0, [r3, #0]
 800a762:	f000 b823 	b.w	800a7ac <_malloc_r>
 800a766:	bf00      	nop
 800a768:	20000154 	.word	0x20000154

0800a76c <sbrk_aligned>:
 800a76c:	b570      	push	{r4, r5, r6, lr}
 800a76e:	4e0e      	ldr	r6, [pc, #56]	; (800a7a8 <sbrk_aligned+0x3c>)
 800a770:	460c      	mov	r4, r1
 800a772:	6831      	ldr	r1, [r6, #0]
 800a774:	4605      	mov	r5, r0
 800a776:	b911      	cbnz	r1, 800a77e <sbrk_aligned+0x12>
 800a778:	f002 f816 	bl	800c7a8 <_sbrk_r>
 800a77c:	6030      	str	r0, [r6, #0]
 800a77e:	4621      	mov	r1, r4
 800a780:	4628      	mov	r0, r5
 800a782:	f002 f811 	bl	800c7a8 <_sbrk_r>
 800a786:	1c43      	adds	r3, r0, #1
 800a788:	d00a      	beq.n	800a7a0 <sbrk_aligned+0x34>
 800a78a:	1cc4      	adds	r4, r0, #3
 800a78c:	f024 0403 	bic.w	r4, r4, #3
 800a790:	42a0      	cmp	r0, r4
 800a792:	d007      	beq.n	800a7a4 <sbrk_aligned+0x38>
 800a794:	1a21      	subs	r1, r4, r0
 800a796:	4628      	mov	r0, r5
 800a798:	f002 f806 	bl	800c7a8 <_sbrk_r>
 800a79c:	3001      	adds	r0, #1
 800a79e:	d101      	bne.n	800a7a4 <sbrk_aligned+0x38>
 800a7a0:	f04f 34ff 	mov.w	r4, #4294967295
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	bd70      	pop	{r4, r5, r6, pc}
 800a7a8:	200023a0 	.word	0x200023a0

0800a7ac <_malloc_r>:
 800a7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7b0:	1ccd      	adds	r5, r1, #3
 800a7b2:	f025 0503 	bic.w	r5, r5, #3
 800a7b6:	3508      	adds	r5, #8
 800a7b8:	2d0c      	cmp	r5, #12
 800a7ba:	bf38      	it	cc
 800a7bc:	250c      	movcc	r5, #12
 800a7be:	2d00      	cmp	r5, #0
 800a7c0:	4607      	mov	r7, r0
 800a7c2:	db01      	blt.n	800a7c8 <_malloc_r+0x1c>
 800a7c4:	42a9      	cmp	r1, r5
 800a7c6:	d905      	bls.n	800a7d4 <_malloc_r+0x28>
 800a7c8:	230c      	movs	r3, #12
 800a7ca:	603b      	str	r3, [r7, #0]
 800a7cc:	2600      	movs	r6, #0
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a8a8 <_malloc_r+0xfc>
 800a7d8:	f000 f868 	bl	800a8ac <__malloc_lock>
 800a7dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a7e0:	461c      	mov	r4, r3
 800a7e2:	bb5c      	cbnz	r4, 800a83c <_malloc_r+0x90>
 800a7e4:	4629      	mov	r1, r5
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	f7ff ffc0 	bl	800a76c <sbrk_aligned>
 800a7ec:	1c43      	adds	r3, r0, #1
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	d155      	bne.n	800a89e <_malloc_r+0xf2>
 800a7f2:	f8d8 4000 	ldr.w	r4, [r8]
 800a7f6:	4626      	mov	r6, r4
 800a7f8:	2e00      	cmp	r6, #0
 800a7fa:	d145      	bne.n	800a888 <_malloc_r+0xdc>
 800a7fc:	2c00      	cmp	r4, #0
 800a7fe:	d048      	beq.n	800a892 <_malloc_r+0xe6>
 800a800:	6823      	ldr	r3, [r4, #0]
 800a802:	4631      	mov	r1, r6
 800a804:	4638      	mov	r0, r7
 800a806:	eb04 0903 	add.w	r9, r4, r3
 800a80a:	f001 ffcd 	bl	800c7a8 <_sbrk_r>
 800a80e:	4581      	cmp	r9, r0
 800a810:	d13f      	bne.n	800a892 <_malloc_r+0xe6>
 800a812:	6821      	ldr	r1, [r4, #0]
 800a814:	1a6d      	subs	r5, r5, r1
 800a816:	4629      	mov	r1, r5
 800a818:	4638      	mov	r0, r7
 800a81a:	f7ff ffa7 	bl	800a76c <sbrk_aligned>
 800a81e:	3001      	adds	r0, #1
 800a820:	d037      	beq.n	800a892 <_malloc_r+0xe6>
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	442b      	add	r3, r5
 800a826:	6023      	str	r3, [r4, #0]
 800a828:	f8d8 3000 	ldr.w	r3, [r8]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d038      	beq.n	800a8a2 <_malloc_r+0xf6>
 800a830:	685a      	ldr	r2, [r3, #4]
 800a832:	42a2      	cmp	r2, r4
 800a834:	d12b      	bne.n	800a88e <_malloc_r+0xe2>
 800a836:	2200      	movs	r2, #0
 800a838:	605a      	str	r2, [r3, #4]
 800a83a:	e00f      	b.n	800a85c <_malloc_r+0xb0>
 800a83c:	6822      	ldr	r2, [r4, #0]
 800a83e:	1b52      	subs	r2, r2, r5
 800a840:	d41f      	bmi.n	800a882 <_malloc_r+0xd6>
 800a842:	2a0b      	cmp	r2, #11
 800a844:	d917      	bls.n	800a876 <_malloc_r+0xca>
 800a846:	1961      	adds	r1, r4, r5
 800a848:	42a3      	cmp	r3, r4
 800a84a:	6025      	str	r5, [r4, #0]
 800a84c:	bf18      	it	ne
 800a84e:	6059      	strne	r1, [r3, #4]
 800a850:	6863      	ldr	r3, [r4, #4]
 800a852:	bf08      	it	eq
 800a854:	f8c8 1000 	streq.w	r1, [r8]
 800a858:	5162      	str	r2, [r4, r5]
 800a85a:	604b      	str	r3, [r1, #4]
 800a85c:	4638      	mov	r0, r7
 800a85e:	f104 060b 	add.w	r6, r4, #11
 800a862:	f000 f829 	bl	800a8b8 <__malloc_unlock>
 800a866:	f026 0607 	bic.w	r6, r6, #7
 800a86a:	1d23      	adds	r3, r4, #4
 800a86c:	1af2      	subs	r2, r6, r3
 800a86e:	d0ae      	beq.n	800a7ce <_malloc_r+0x22>
 800a870:	1b9b      	subs	r3, r3, r6
 800a872:	50a3      	str	r3, [r4, r2]
 800a874:	e7ab      	b.n	800a7ce <_malloc_r+0x22>
 800a876:	42a3      	cmp	r3, r4
 800a878:	6862      	ldr	r2, [r4, #4]
 800a87a:	d1dd      	bne.n	800a838 <_malloc_r+0x8c>
 800a87c:	f8c8 2000 	str.w	r2, [r8]
 800a880:	e7ec      	b.n	800a85c <_malloc_r+0xb0>
 800a882:	4623      	mov	r3, r4
 800a884:	6864      	ldr	r4, [r4, #4]
 800a886:	e7ac      	b.n	800a7e2 <_malloc_r+0x36>
 800a888:	4634      	mov	r4, r6
 800a88a:	6876      	ldr	r6, [r6, #4]
 800a88c:	e7b4      	b.n	800a7f8 <_malloc_r+0x4c>
 800a88e:	4613      	mov	r3, r2
 800a890:	e7cc      	b.n	800a82c <_malloc_r+0x80>
 800a892:	230c      	movs	r3, #12
 800a894:	603b      	str	r3, [r7, #0]
 800a896:	4638      	mov	r0, r7
 800a898:	f000 f80e 	bl	800a8b8 <__malloc_unlock>
 800a89c:	e797      	b.n	800a7ce <_malloc_r+0x22>
 800a89e:	6025      	str	r5, [r4, #0]
 800a8a0:	e7dc      	b.n	800a85c <_malloc_r+0xb0>
 800a8a2:	605b      	str	r3, [r3, #4]
 800a8a4:	deff      	udf	#255	; 0xff
 800a8a6:	bf00      	nop
 800a8a8:	2000239c 	.word	0x2000239c

0800a8ac <__malloc_lock>:
 800a8ac:	4801      	ldr	r0, [pc, #4]	; (800a8b4 <__malloc_lock+0x8>)
 800a8ae:	f7ff b879 	b.w	80099a4 <__retarget_lock_acquire_recursive>
 800a8b2:	bf00      	nop
 800a8b4:	20002398 	.word	0x20002398

0800a8b8 <__malloc_unlock>:
 800a8b8:	4801      	ldr	r0, [pc, #4]	; (800a8c0 <__malloc_unlock+0x8>)
 800a8ba:	f7ff b874 	b.w	80099a6 <__retarget_lock_release_recursive>
 800a8be:	bf00      	nop
 800a8c0:	20002398 	.word	0x20002398

0800a8c4 <_Balloc>:
 800a8c4:	b570      	push	{r4, r5, r6, lr}
 800a8c6:	69c6      	ldr	r6, [r0, #28]
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	460d      	mov	r5, r1
 800a8cc:	b976      	cbnz	r6, 800a8ec <_Balloc+0x28>
 800a8ce:	2010      	movs	r0, #16
 800a8d0:	f7ff ff44 	bl	800a75c <malloc>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	61e0      	str	r0, [r4, #28]
 800a8d8:	b920      	cbnz	r0, 800a8e4 <_Balloc+0x20>
 800a8da:	4b18      	ldr	r3, [pc, #96]	; (800a93c <_Balloc+0x78>)
 800a8dc:	4818      	ldr	r0, [pc, #96]	; (800a940 <_Balloc+0x7c>)
 800a8de:	216b      	movs	r1, #107	; 0x6b
 800a8e0:	f001 ff7a 	bl	800c7d8 <__assert_func>
 800a8e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8e8:	6006      	str	r6, [r0, #0]
 800a8ea:	60c6      	str	r6, [r0, #12]
 800a8ec:	69e6      	ldr	r6, [r4, #28]
 800a8ee:	68f3      	ldr	r3, [r6, #12]
 800a8f0:	b183      	cbz	r3, 800a914 <_Balloc+0x50>
 800a8f2:	69e3      	ldr	r3, [r4, #28]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a8fa:	b9b8      	cbnz	r0, 800a92c <_Balloc+0x68>
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	fa01 f605 	lsl.w	r6, r1, r5
 800a902:	1d72      	adds	r2, r6, #5
 800a904:	0092      	lsls	r2, r2, #2
 800a906:	4620      	mov	r0, r4
 800a908:	f001 ff84 	bl	800c814 <_calloc_r>
 800a90c:	b160      	cbz	r0, 800a928 <_Balloc+0x64>
 800a90e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a912:	e00e      	b.n	800a932 <_Balloc+0x6e>
 800a914:	2221      	movs	r2, #33	; 0x21
 800a916:	2104      	movs	r1, #4
 800a918:	4620      	mov	r0, r4
 800a91a:	f001 ff7b 	bl	800c814 <_calloc_r>
 800a91e:	69e3      	ldr	r3, [r4, #28]
 800a920:	60f0      	str	r0, [r6, #12]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1e4      	bne.n	800a8f2 <_Balloc+0x2e>
 800a928:	2000      	movs	r0, #0
 800a92a:	bd70      	pop	{r4, r5, r6, pc}
 800a92c:	6802      	ldr	r2, [r0, #0]
 800a92e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a932:	2300      	movs	r3, #0
 800a934:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a938:	e7f7      	b.n	800a92a <_Balloc+0x66>
 800a93a:	bf00      	nop
 800a93c:	0800d1b2 	.word	0x0800d1b2
 800a940:	0800d232 	.word	0x0800d232

0800a944 <_Bfree>:
 800a944:	b570      	push	{r4, r5, r6, lr}
 800a946:	69c6      	ldr	r6, [r0, #28]
 800a948:	4605      	mov	r5, r0
 800a94a:	460c      	mov	r4, r1
 800a94c:	b976      	cbnz	r6, 800a96c <_Bfree+0x28>
 800a94e:	2010      	movs	r0, #16
 800a950:	f7ff ff04 	bl	800a75c <malloc>
 800a954:	4602      	mov	r2, r0
 800a956:	61e8      	str	r0, [r5, #28]
 800a958:	b920      	cbnz	r0, 800a964 <_Bfree+0x20>
 800a95a:	4b09      	ldr	r3, [pc, #36]	; (800a980 <_Bfree+0x3c>)
 800a95c:	4809      	ldr	r0, [pc, #36]	; (800a984 <_Bfree+0x40>)
 800a95e:	218f      	movs	r1, #143	; 0x8f
 800a960:	f001 ff3a 	bl	800c7d8 <__assert_func>
 800a964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a968:	6006      	str	r6, [r0, #0]
 800a96a:	60c6      	str	r6, [r0, #12]
 800a96c:	b13c      	cbz	r4, 800a97e <_Bfree+0x3a>
 800a96e:	69eb      	ldr	r3, [r5, #28]
 800a970:	6862      	ldr	r2, [r4, #4]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a978:	6021      	str	r1, [r4, #0]
 800a97a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a97e:	bd70      	pop	{r4, r5, r6, pc}
 800a980:	0800d1b2 	.word	0x0800d1b2
 800a984:	0800d232 	.word	0x0800d232

0800a988 <__multadd>:
 800a988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a98c:	690d      	ldr	r5, [r1, #16]
 800a98e:	4607      	mov	r7, r0
 800a990:	460c      	mov	r4, r1
 800a992:	461e      	mov	r6, r3
 800a994:	f101 0c14 	add.w	ip, r1, #20
 800a998:	2000      	movs	r0, #0
 800a99a:	f8dc 3000 	ldr.w	r3, [ip]
 800a99e:	b299      	uxth	r1, r3
 800a9a0:	fb02 6101 	mla	r1, r2, r1, r6
 800a9a4:	0c1e      	lsrs	r6, r3, #16
 800a9a6:	0c0b      	lsrs	r3, r1, #16
 800a9a8:	fb02 3306 	mla	r3, r2, r6, r3
 800a9ac:	b289      	uxth	r1, r1
 800a9ae:	3001      	adds	r0, #1
 800a9b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a9b4:	4285      	cmp	r5, r0
 800a9b6:	f84c 1b04 	str.w	r1, [ip], #4
 800a9ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a9be:	dcec      	bgt.n	800a99a <__multadd+0x12>
 800a9c0:	b30e      	cbz	r6, 800aa06 <__multadd+0x7e>
 800a9c2:	68a3      	ldr	r3, [r4, #8]
 800a9c4:	42ab      	cmp	r3, r5
 800a9c6:	dc19      	bgt.n	800a9fc <__multadd+0x74>
 800a9c8:	6861      	ldr	r1, [r4, #4]
 800a9ca:	4638      	mov	r0, r7
 800a9cc:	3101      	adds	r1, #1
 800a9ce:	f7ff ff79 	bl	800a8c4 <_Balloc>
 800a9d2:	4680      	mov	r8, r0
 800a9d4:	b928      	cbnz	r0, 800a9e2 <__multadd+0x5a>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	4b0c      	ldr	r3, [pc, #48]	; (800aa0c <__multadd+0x84>)
 800a9da:	480d      	ldr	r0, [pc, #52]	; (800aa10 <__multadd+0x88>)
 800a9dc:	21ba      	movs	r1, #186	; 0xba
 800a9de:	f001 fefb 	bl	800c7d8 <__assert_func>
 800a9e2:	6922      	ldr	r2, [r4, #16]
 800a9e4:	3202      	adds	r2, #2
 800a9e6:	f104 010c 	add.w	r1, r4, #12
 800a9ea:	0092      	lsls	r2, r2, #2
 800a9ec:	300c      	adds	r0, #12
 800a9ee:	f7fe ffdb 	bl	80099a8 <memcpy>
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	4638      	mov	r0, r7
 800a9f6:	f7ff ffa5 	bl	800a944 <_Bfree>
 800a9fa:	4644      	mov	r4, r8
 800a9fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa00:	3501      	adds	r5, #1
 800aa02:	615e      	str	r6, [r3, #20]
 800aa04:	6125      	str	r5, [r4, #16]
 800aa06:	4620      	mov	r0, r4
 800aa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa0c:	0800d221 	.word	0x0800d221
 800aa10:	0800d232 	.word	0x0800d232

0800aa14 <__s2b>:
 800aa14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa18:	460c      	mov	r4, r1
 800aa1a:	4615      	mov	r5, r2
 800aa1c:	461f      	mov	r7, r3
 800aa1e:	2209      	movs	r2, #9
 800aa20:	3308      	adds	r3, #8
 800aa22:	4606      	mov	r6, r0
 800aa24:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa28:	2100      	movs	r1, #0
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	db09      	blt.n	800aa44 <__s2b+0x30>
 800aa30:	4630      	mov	r0, r6
 800aa32:	f7ff ff47 	bl	800a8c4 <_Balloc>
 800aa36:	b940      	cbnz	r0, 800aa4a <__s2b+0x36>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	4b19      	ldr	r3, [pc, #100]	; (800aaa0 <__s2b+0x8c>)
 800aa3c:	4819      	ldr	r0, [pc, #100]	; (800aaa4 <__s2b+0x90>)
 800aa3e:	21d3      	movs	r1, #211	; 0xd3
 800aa40:	f001 feca 	bl	800c7d8 <__assert_func>
 800aa44:	0052      	lsls	r2, r2, #1
 800aa46:	3101      	adds	r1, #1
 800aa48:	e7f0      	b.n	800aa2c <__s2b+0x18>
 800aa4a:	9b08      	ldr	r3, [sp, #32]
 800aa4c:	6143      	str	r3, [r0, #20]
 800aa4e:	2d09      	cmp	r5, #9
 800aa50:	f04f 0301 	mov.w	r3, #1
 800aa54:	6103      	str	r3, [r0, #16]
 800aa56:	dd16      	ble.n	800aa86 <__s2b+0x72>
 800aa58:	f104 0909 	add.w	r9, r4, #9
 800aa5c:	46c8      	mov	r8, r9
 800aa5e:	442c      	add	r4, r5
 800aa60:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aa64:	4601      	mov	r1, r0
 800aa66:	3b30      	subs	r3, #48	; 0x30
 800aa68:	220a      	movs	r2, #10
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7ff ff8c 	bl	800a988 <__multadd>
 800aa70:	45a0      	cmp	r8, r4
 800aa72:	d1f5      	bne.n	800aa60 <__s2b+0x4c>
 800aa74:	f1a5 0408 	sub.w	r4, r5, #8
 800aa78:	444c      	add	r4, r9
 800aa7a:	1b2d      	subs	r5, r5, r4
 800aa7c:	1963      	adds	r3, r4, r5
 800aa7e:	42bb      	cmp	r3, r7
 800aa80:	db04      	blt.n	800aa8c <__s2b+0x78>
 800aa82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa86:	340a      	adds	r4, #10
 800aa88:	2509      	movs	r5, #9
 800aa8a:	e7f6      	b.n	800aa7a <__s2b+0x66>
 800aa8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa90:	4601      	mov	r1, r0
 800aa92:	3b30      	subs	r3, #48	; 0x30
 800aa94:	220a      	movs	r2, #10
 800aa96:	4630      	mov	r0, r6
 800aa98:	f7ff ff76 	bl	800a988 <__multadd>
 800aa9c:	e7ee      	b.n	800aa7c <__s2b+0x68>
 800aa9e:	bf00      	nop
 800aaa0:	0800d221 	.word	0x0800d221
 800aaa4:	0800d232 	.word	0x0800d232

0800aaa8 <__hi0bits>:
 800aaa8:	0c03      	lsrs	r3, r0, #16
 800aaaa:	041b      	lsls	r3, r3, #16
 800aaac:	b9d3      	cbnz	r3, 800aae4 <__hi0bits+0x3c>
 800aaae:	0400      	lsls	r0, r0, #16
 800aab0:	2310      	movs	r3, #16
 800aab2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aab6:	bf04      	itt	eq
 800aab8:	0200      	lsleq	r0, r0, #8
 800aaba:	3308      	addeq	r3, #8
 800aabc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aac0:	bf04      	itt	eq
 800aac2:	0100      	lsleq	r0, r0, #4
 800aac4:	3304      	addeq	r3, #4
 800aac6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aaca:	bf04      	itt	eq
 800aacc:	0080      	lsleq	r0, r0, #2
 800aace:	3302      	addeq	r3, #2
 800aad0:	2800      	cmp	r0, #0
 800aad2:	db05      	blt.n	800aae0 <__hi0bits+0x38>
 800aad4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aad8:	f103 0301 	add.w	r3, r3, #1
 800aadc:	bf08      	it	eq
 800aade:	2320      	moveq	r3, #32
 800aae0:	4618      	mov	r0, r3
 800aae2:	4770      	bx	lr
 800aae4:	2300      	movs	r3, #0
 800aae6:	e7e4      	b.n	800aab2 <__hi0bits+0xa>

0800aae8 <__lo0bits>:
 800aae8:	6803      	ldr	r3, [r0, #0]
 800aaea:	f013 0207 	ands.w	r2, r3, #7
 800aaee:	d00c      	beq.n	800ab0a <__lo0bits+0x22>
 800aaf0:	07d9      	lsls	r1, r3, #31
 800aaf2:	d422      	bmi.n	800ab3a <__lo0bits+0x52>
 800aaf4:	079a      	lsls	r2, r3, #30
 800aaf6:	bf49      	itett	mi
 800aaf8:	085b      	lsrmi	r3, r3, #1
 800aafa:	089b      	lsrpl	r3, r3, #2
 800aafc:	6003      	strmi	r3, [r0, #0]
 800aafe:	2201      	movmi	r2, #1
 800ab00:	bf5c      	itt	pl
 800ab02:	6003      	strpl	r3, [r0, #0]
 800ab04:	2202      	movpl	r2, #2
 800ab06:	4610      	mov	r0, r2
 800ab08:	4770      	bx	lr
 800ab0a:	b299      	uxth	r1, r3
 800ab0c:	b909      	cbnz	r1, 800ab12 <__lo0bits+0x2a>
 800ab0e:	0c1b      	lsrs	r3, r3, #16
 800ab10:	2210      	movs	r2, #16
 800ab12:	b2d9      	uxtb	r1, r3
 800ab14:	b909      	cbnz	r1, 800ab1a <__lo0bits+0x32>
 800ab16:	3208      	adds	r2, #8
 800ab18:	0a1b      	lsrs	r3, r3, #8
 800ab1a:	0719      	lsls	r1, r3, #28
 800ab1c:	bf04      	itt	eq
 800ab1e:	091b      	lsreq	r3, r3, #4
 800ab20:	3204      	addeq	r2, #4
 800ab22:	0799      	lsls	r1, r3, #30
 800ab24:	bf04      	itt	eq
 800ab26:	089b      	lsreq	r3, r3, #2
 800ab28:	3202      	addeq	r2, #2
 800ab2a:	07d9      	lsls	r1, r3, #31
 800ab2c:	d403      	bmi.n	800ab36 <__lo0bits+0x4e>
 800ab2e:	085b      	lsrs	r3, r3, #1
 800ab30:	f102 0201 	add.w	r2, r2, #1
 800ab34:	d003      	beq.n	800ab3e <__lo0bits+0x56>
 800ab36:	6003      	str	r3, [r0, #0]
 800ab38:	e7e5      	b.n	800ab06 <__lo0bits+0x1e>
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	e7e3      	b.n	800ab06 <__lo0bits+0x1e>
 800ab3e:	2220      	movs	r2, #32
 800ab40:	e7e1      	b.n	800ab06 <__lo0bits+0x1e>
	...

0800ab44 <__i2b>:
 800ab44:	b510      	push	{r4, lr}
 800ab46:	460c      	mov	r4, r1
 800ab48:	2101      	movs	r1, #1
 800ab4a:	f7ff febb 	bl	800a8c4 <_Balloc>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	b928      	cbnz	r0, 800ab5e <__i2b+0x1a>
 800ab52:	4b05      	ldr	r3, [pc, #20]	; (800ab68 <__i2b+0x24>)
 800ab54:	4805      	ldr	r0, [pc, #20]	; (800ab6c <__i2b+0x28>)
 800ab56:	f240 1145 	movw	r1, #325	; 0x145
 800ab5a:	f001 fe3d 	bl	800c7d8 <__assert_func>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	6144      	str	r4, [r0, #20]
 800ab62:	6103      	str	r3, [r0, #16]
 800ab64:	bd10      	pop	{r4, pc}
 800ab66:	bf00      	nop
 800ab68:	0800d221 	.word	0x0800d221
 800ab6c:	0800d232 	.word	0x0800d232

0800ab70 <__multiply>:
 800ab70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab74:	4691      	mov	r9, r2
 800ab76:	690a      	ldr	r2, [r1, #16]
 800ab78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	bfb8      	it	lt
 800ab80:	460b      	movlt	r3, r1
 800ab82:	460c      	mov	r4, r1
 800ab84:	bfbc      	itt	lt
 800ab86:	464c      	movlt	r4, r9
 800ab88:	4699      	movlt	r9, r3
 800ab8a:	6927      	ldr	r7, [r4, #16]
 800ab8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ab90:	68a3      	ldr	r3, [r4, #8]
 800ab92:	6861      	ldr	r1, [r4, #4]
 800ab94:	eb07 060a 	add.w	r6, r7, sl
 800ab98:	42b3      	cmp	r3, r6
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	bfb8      	it	lt
 800ab9e:	3101      	addlt	r1, #1
 800aba0:	f7ff fe90 	bl	800a8c4 <_Balloc>
 800aba4:	b930      	cbnz	r0, 800abb4 <__multiply+0x44>
 800aba6:	4602      	mov	r2, r0
 800aba8:	4b44      	ldr	r3, [pc, #272]	; (800acbc <__multiply+0x14c>)
 800abaa:	4845      	ldr	r0, [pc, #276]	; (800acc0 <__multiply+0x150>)
 800abac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800abb0:	f001 fe12 	bl	800c7d8 <__assert_func>
 800abb4:	f100 0514 	add.w	r5, r0, #20
 800abb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800abbc:	462b      	mov	r3, r5
 800abbe:	2200      	movs	r2, #0
 800abc0:	4543      	cmp	r3, r8
 800abc2:	d321      	bcc.n	800ac08 <__multiply+0x98>
 800abc4:	f104 0314 	add.w	r3, r4, #20
 800abc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800abcc:	f109 0314 	add.w	r3, r9, #20
 800abd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800abd4:	9202      	str	r2, [sp, #8]
 800abd6:	1b3a      	subs	r2, r7, r4
 800abd8:	3a15      	subs	r2, #21
 800abda:	f022 0203 	bic.w	r2, r2, #3
 800abde:	3204      	adds	r2, #4
 800abe0:	f104 0115 	add.w	r1, r4, #21
 800abe4:	428f      	cmp	r7, r1
 800abe6:	bf38      	it	cc
 800abe8:	2204      	movcc	r2, #4
 800abea:	9201      	str	r2, [sp, #4]
 800abec:	9a02      	ldr	r2, [sp, #8]
 800abee:	9303      	str	r3, [sp, #12]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d80c      	bhi.n	800ac0e <__multiply+0x9e>
 800abf4:	2e00      	cmp	r6, #0
 800abf6:	dd03      	ble.n	800ac00 <__multiply+0x90>
 800abf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d05b      	beq.n	800acb8 <__multiply+0x148>
 800ac00:	6106      	str	r6, [r0, #16]
 800ac02:	b005      	add	sp, #20
 800ac04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac08:	f843 2b04 	str.w	r2, [r3], #4
 800ac0c:	e7d8      	b.n	800abc0 <__multiply+0x50>
 800ac0e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ac12:	f1ba 0f00 	cmp.w	sl, #0
 800ac16:	d024      	beq.n	800ac62 <__multiply+0xf2>
 800ac18:	f104 0e14 	add.w	lr, r4, #20
 800ac1c:	46a9      	mov	r9, r5
 800ac1e:	f04f 0c00 	mov.w	ip, #0
 800ac22:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ac26:	f8d9 1000 	ldr.w	r1, [r9]
 800ac2a:	fa1f fb82 	uxth.w	fp, r2
 800ac2e:	b289      	uxth	r1, r1
 800ac30:	fb0a 110b 	mla	r1, sl, fp, r1
 800ac34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ac38:	f8d9 2000 	ldr.w	r2, [r9]
 800ac3c:	4461      	add	r1, ip
 800ac3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac42:	fb0a c20b 	mla	r2, sl, fp, ip
 800ac46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ac4a:	b289      	uxth	r1, r1
 800ac4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac50:	4577      	cmp	r7, lr
 800ac52:	f849 1b04 	str.w	r1, [r9], #4
 800ac56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac5a:	d8e2      	bhi.n	800ac22 <__multiply+0xb2>
 800ac5c:	9a01      	ldr	r2, [sp, #4]
 800ac5e:	f845 c002 	str.w	ip, [r5, r2]
 800ac62:	9a03      	ldr	r2, [sp, #12]
 800ac64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ac68:	3304      	adds	r3, #4
 800ac6a:	f1b9 0f00 	cmp.w	r9, #0
 800ac6e:	d021      	beq.n	800acb4 <__multiply+0x144>
 800ac70:	6829      	ldr	r1, [r5, #0]
 800ac72:	f104 0c14 	add.w	ip, r4, #20
 800ac76:	46ae      	mov	lr, r5
 800ac78:	f04f 0a00 	mov.w	sl, #0
 800ac7c:	f8bc b000 	ldrh.w	fp, [ip]
 800ac80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ac84:	fb09 220b 	mla	r2, r9, fp, r2
 800ac88:	4452      	add	r2, sl
 800ac8a:	b289      	uxth	r1, r1
 800ac8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac90:	f84e 1b04 	str.w	r1, [lr], #4
 800ac94:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ac98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ac9c:	f8be 1000 	ldrh.w	r1, [lr]
 800aca0:	fb09 110a 	mla	r1, r9, sl, r1
 800aca4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800aca8:	4567      	cmp	r7, ip
 800acaa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800acae:	d8e5      	bhi.n	800ac7c <__multiply+0x10c>
 800acb0:	9a01      	ldr	r2, [sp, #4]
 800acb2:	50a9      	str	r1, [r5, r2]
 800acb4:	3504      	adds	r5, #4
 800acb6:	e799      	b.n	800abec <__multiply+0x7c>
 800acb8:	3e01      	subs	r6, #1
 800acba:	e79b      	b.n	800abf4 <__multiply+0x84>
 800acbc:	0800d221 	.word	0x0800d221
 800acc0:	0800d232 	.word	0x0800d232

0800acc4 <__pow5mult>:
 800acc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acc8:	4615      	mov	r5, r2
 800acca:	f012 0203 	ands.w	r2, r2, #3
 800acce:	4606      	mov	r6, r0
 800acd0:	460f      	mov	r7, r1
 800acd2:	d007      	beq.n	800ace4 <__pow5mult+0x20>
 800acd4:	4c25      	ldr	r4, [pc, #148]	; (800ad6c <__pow5mult+0xa8>)
 800acd6:	3a01      	subs	r2, #1
 800acd8:	2300      	movs	r3, #0
 800acda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acde:	f7ff fe53 	bl	800a988 <__multadd>
 800ace2:	4607      	mov	r7, r0
 800ace4:	10ad      	asrs	r5, r5, #2
 800ace6:	d03d      	beq.n	800ad64 <__pow5mult+0xa0>
 800ace8:	69f4      	ldr	r4, [r6, #28]
 800acea:	b97c      	cbnz	r4, 800ad0c <__pow5mult+0x48>
 800acec:	2010      	movs	r0, #16
 800acee:	f7ff fd35 	bl	800a75c <malloc>
 800acf2:	4602      	mov	r2, r0
 800acf4:	61f0      	str	r0, [r6, #28]
 800acf6:	b928      	cbnz	r0, 800ad04 <__pow5mult+0x40>
 800acf8:	4b1d      	ldr	r3, [pc, #116]	; (800ad70 <__pow5mult+0xac>)
 800acfa:	481e      	ldr	r0, [pc, #120]	; (800ad74 <__pow5mult+0xb0>)
 800acfc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ad00:	f001 fd6a 	bl	800c7d8 <__assert_func>
 800ad04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad08:	6004      	str	r4, [r0, #0]
 800ad0a:	60c4      	str	r4, [r0, #12]
 800ad0c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ad10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad14:	b94c      	cbnz	r4, 800ad2a <__pow5mult+0x66>
 800ad16:	f240 2171 	movw	r1, #625	; 0x271
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f7ff ff12 	bl	800ab44 <__i2b>
 800ad20:	2300      	movs	r3, #0
 800ad22:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad26:	4604      	mov	r4, r0
 800ad28:	6003      	str	r3, [r0, #0]
 800ad2a:	f04f 0900 	mov.w	r9, #0
 800ad2e:	07eb      	lsls	r3, r5, #31
 800ad30:	d50a      	bpl.n	800ad48 <__pow5mult+0x84>
 800ad32:	4639      	mov	r1, r7
 800ad34:	4622      	mov	r2, r4
 800ad36:	4630      	mov	r0, r6
 800ad38:	f7ff ff1a 	bl	800ab70 <__multiply>
 800ad3c:	4639      	mov	r1, r7
 800ad3e:	4680      	mov	r8, r0
 800ad40:	4630      	mov	r0, r6
 800ad42:	f7ff fdff 	bl	800a944 <_Bfree>
 800ad46:	4647      	mov	r7, r8
 800ad48:	106d      	asrs	r5, r5, #1
 800ad4a:	d00b      	beq.n	800ad64 <__pow5mult+0xa0>
 800ad4c:	6820      	ldr	r0, [r4, #0]
 800ad4e:	b938      	cbnz	r0, 800ad60 <__pow5mult+0x9c>
 800ad50:	4622      	mov	r2, r4
 800ad52:	4621      	mov	r1, r4
 800ad54:	4630      	mov	r0, r6
 800ad56:	f7ff ff0b 	bl	800ab70 <__multiply>
 800ad5a:	6020      	str	r0, [r4, #0]
 800ad5c:	f8c0 9000 	str.w	r9, [r0]
 800ad60:	4604      	mov	r4, r0
 800ad62:	e7e4      	b.n	800ad2e <__pow5mult+0x6a>
 800ad64:	4638      	mov	r0, r7
 800ad66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad6a:	bf00      	nop
 800ad6c:	0800d380 	.word	0x0800d380
 800ad70:	0800d1b2 	.word	0x0800d1b2
 800ad74:	0800d232 	.word	0x0800d232

0800ad78 <__lshift>:
 800ad78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad7c:	460c      	mov	r4, r1
 800ad7e:	6849      	ldr	r1, [r1, #4]
 800ad80:	6923      	ldr	r3, [r4, #16]
 800ad82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad86:	68a3      	ldr	r3, [r4, #8]
 800ad88:	4607      	mov	r7, r0
 800ad8a:	4691      	mov	r9, r2
 800ad8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad90:	f108 0601 	add.w	r6, r8, #1
 800ad94:	42b3      	cmp	r3, r6
 800ad96:	db0b      	blt.n	800adb0 <__lshift+0x38>
 800ad98:	4638      	mov	r0, r7
 800ad9a:	f7ff fd93 	bl	800a8c4 <_Balloc>
 800ad9e:	4605      	mov	r5, r0
 800ada0:	b948      	cbnz	r0, 800adb6 <__lshift+0x3e>
 800ada2:	4602      	mov	r2, r0
 800ada4:	4b28      	ldr	r3, [pc, #160]	; (800ae48 <__lshift+0xd0>)
 800ada6:	4829      	ldr	r0, [pc, #164]	; (800ae4c <__lshift+0xd4>)
 800ada8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800adac:	f001 fd14 	bl	800c7d8 <__assert_func>
 800adb0:	3101      	adds	r1, #1
 800adb2:	005b      	lsls	r3, r3, #1
 800adb4:	e7ee      	b.n	800ad94 <__lshift+0x1c>
 800adb6:	2300      	movs	r3, #0
 800adb8:	f100 0114 	add.w	r1, r0, #20
 800adbc:	f100 0210 	add.w	r2, r0, #16
 800adc0:	4618      	mov	r0, r3
 800adc2:	4553      	cmp	r3, sl
 800adc4:	db33      	blt.n	800ae2e <__lshift+0xb6>
 800adc6:	6920      	ldr	r0, [r4, #16]
 800adc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800adcc:	f104 0314 	add.w	r3, r4, #20
 800add0:	f019 091f 	ands.w	r9, r9, #31
 800add4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800add8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800addc:	d02b      	beq.n	800ae36 <__lshift+0xbe>
 800adde:	f1c9 0e20 	rsb	lr, r9, #32
 800ade2:	468a      	mov	sl, r1
 800ade4:	2200      	movs	r2, #0
 800ade6:	6818      	ldr	r0, [r3, #0]
 800ade8:	fa00 f009 	lsl.w	r0, r0, r9
 800adec:	4310      	orrs	r0, r2
 800adee:	f84a 0b04 	str.w	r0, [sl], #4
 800adf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800adf6:	459c      	cmp	ip, r3
 800adf8:	fa22 f20e 	lsr.w	r2, r2, lr
 800adfc:	d8f3      	bhi.n	800ade6 <__lshift+0x6e>
 800adfe:	ebac 0304 	sub.w	r3, ip, r4
 800ae02:	3b15      	subs	r3, #21
 800ae04:	f023 0303 	bic.w	r3, r3, #3
 800ae08:	3304      	adds	r3, #4
 800ae0a:	f104 0015 	add.w	r0, r4, #21
 800ae0e:	4584      	cmp	ip, r0
 800ae10:	bf38      	it	cc
 800ae12:	2304      	movcc	r3, #4
 800ae14:	50ca      	str	r2, [r1, r3]
 800ae16:	b10a      	cbz	r2, 800ae1c <__lshift+0xa4>
 800ae18:	f108 0602 	add.w	r6, r8, #2
 800ae1c:	3e01      	subs	r6, #1
 800ae1e:	4638      	mov	r0, r7
 800ae20:	612e      	str	r6, [r5, #16]
 800ae22:	4621      	mov	r1, r4
 800ae24:	f7ff fd8e 	bl	800a944 <_Bfree>
 800ae28:	4628      	mov	r0, r5
 800ae2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae2e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae32:	3301      	adds	r3, #1
 800ae34:	e7c5      	b.n	800adc2 <__lshift+0x4a>
 800ae36:	3904      	subs	r1, #4
 800ae38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae3c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae40:	459c      	cmp	ip, r3
 800ae42:	d8f9      	bhi.n	800ae38 <__lshift+0xc0>
 800ae44:	e7ea      	b.n	800ae1c <__lshift+0xa4>
 800ae46:	bf00      	nop
 800ae48:	0800d221 	.word	0x0800d221
 800ae4c:	0800d232 	.word	0x0800d232

0800ae50 <__mcmp>:
 800ae50:	b530      	push	{r4, r5, lr}
 800ae52:	6902      	ldr	r2, [r0, #16]
 800ae54:	690c      	ldr	r4, [r1, #16]
 800ae56:	1b12      	subs	r2, r2, r4
 800ae58:	d10e      	bne.n	800ae78 <__mcmp+0x28>
 800ae5a:	f100 0314 	add.w	r3, r0, #20
 800ae5e:	3114      	adds	r1, #20
 800ae60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ae64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ae68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ae6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ae70:	42a5      	cmp	r5, r4
 800ae72:	d003      	beq.n	800ae7c <__mcmp+0x2c>
 800ae74:	d305      	bcc.n	800ae82 <__mcmp+0x32>
 800ae76:	2201      	movs	r2, #1
 800ae78:	4610      	mov	r0, r2
 800ae7a:	bd30      	pop	{r4, r5, pc}
 800ae7c:	4283      	cmp	r3, r0
 800ae7e:	d3f3      	bcc.n	800ae68 <__mcmp+0x18>
 800ae80:	e7fa      	b.n	800ae78 <__mcmp+0x28>
 800ae82:	f04f 32ff 	mov.w	r2, #4294967295
 800ae86:	e7f7      	b.n	800ae78 <__mcmp+0x28>

0800ae88 <__mdiff>:
 800ae88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8c:	460c      	mov	r4, r1
 800ae8e:	4606      	mov	r6, r0
 800ae90:	4611      	mov	r1, r2
 800ae92:	4620      	mov	r0, r4
 800ae94:	4690      	mov	r8, r2
 800ae96:	f7ff ffdb 	bl	800ae50 <__mcmp>
 800ae9a:	1e05      	subs	r5, r0, #0
 800ae9c:	d110      	bne.n	800aec0 <__mdiff+0x38>
 800ae9e:	4629      	mov	r1, r5
 800aea0:	4630      	mov	r0, r6
 800aea2:	f7ff fd0f 	bl	800a8c4 <_Balloc>
 800aea6:	b930      	cbnz	r0, 800aeb6 <__mdiff+0x2e>
 800aea8:	4b3a      	ldr	r3, [pc, #232]	; (800af94 <__mdiff+0x10c>)
 800aeaa:	4602      	mov	r2, r0
 800aeac:	f240 2137 	movw	r1, #567	; 0x237
 800aeb0:	4839      	ldr	r0, [pc, #228]	; (800af98 <__mdiff+0x110>)
 800aeb2:	f001 fc91 	bl	800c7d8 <__assert_func>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec0:	bfa4      	itt	ge
 800aec2:	4643      	movge	r3, r8
 800aec4:	46a0      	movge	r8, r4
 800aec6:	4630      	mov	r0, r6
 800aec8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aecc:	bfa6      	itte	ge
 800aece:	461c      	movge	r4, r3
 800aed0:	2500      	movge	r5, #0
 800aed2:	2501      	movlt	r5, #1
 800aed4:	f7ff fcf6 	bl	800a8c4 <_Balloc>
 800aed8:	b920      	cbnz	r0, 800aee4 <__mdiff+0x5c>
 800aeda:	4b2e      	ldr	r3, [pc, #184]	; (800af94 <__mdiff+0x10c>)
 800aedc:	4602      	mov	r2, r0
 800aede:	f240 2145 	movw	r1, #581	; 0x245
 800aee2:	e7e5      	b.n	800aeb0 <__mdiff+0x28>
 800aee4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aee8:	6926      	ldr	r6, [r4, #16]
 800aeea:	60c5      	str	r5, [r0, #12]
 800aeec:	f104 0914 	add.w	r9, r4, #20
 800aef0:	f108 0514 	add.w	r5, r8, #20
 800aef4:	f100 0e14 	add.w	lr, r0, #20
 800aef8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aefc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800af00:	f108 0210 	add.w	r2, r8, #16
 800af04:	46f2      	mov	sl, lr
 800af06:	2100      	movs	r1, #0
 800af08:	f859 3b04 	ldr.w	r3, [r9], #4
 800af0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800af10:	fa11 f88b 	uxtah	r8, r1, fp
 800af14:	b299      	uxth	r1, r3
 800af16:	0c1b      	lsrs	r3, r3, #16
 800af18:	eba8 0801 	sub.w	r8, r8, r1
 800af1c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800af20:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800af24:	fa1f f888 	uxth.w	r8, r8
 800af28:	1419      	asrs	r1, r3, #16
 800af2a:	454e      	cmp	r6, r9
 800af2c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800af30:	f84a 3b04 	str.w	r3, [sl], #4
 800af34:	d8e8      	bhi.n	800af08 <__mdiff+0x80>
 800af36:	1b33      	subs	r3, r6, r4
 800af38:	3b15      	subs	r3, #21
 800af3a:	f023 0303 	bic.w	r3, r3, #3
 800af3e:	3304      	adds	r3, #4
 800af40:	3415      	adds	r4, #21
 800af42:	42a6      	cmp	r6, r4
 800af44:	bf38      	it	cc
 800af46:	2304      	movcc	r3, #4
 800af48:	441d      	add	r5, r3
 800af4a:	4473      	add	r3, lr
 800af4c:	469e      	mov	lr, r3
 800af4e:	462e      	mov	r6, r5
 800af50:	4566      	cmp	r6, ip
 800af52:	d30e      	bcc.n	800af72 <__mdiff+0xea>
 800af54:	f10c 0203 	add.w	r2, ip, #3
 800af58:	1b52      	subs	r2, r2, r5
 800af5a:	f022 0203 	bic.w	r2, r2, #3
 800af5e:	3d03      	subs	r5, #3
 800af60:	45ac      	cmp	ip, r5
 800af62:	bf38      	it	cc
 800af64:	2200      	movcc	r2, #0
 800af66:	4413      	add	r3, r2
 800af68:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800af6c:	b17a      	cbz	r2, 800af8e <__mdiff+0x106>
 800af6e:	6107      	str	r7, [r0, #16]
 800af70:	e7a4      	b.n	800aebc <__mdiff+0x34>
 800af72:	f856 8b04 	ldr.w	r8, [r6], #4
 800af76:	fa11 f288 	uxtah	r2, r1, r8
 800af7a:	1414      	asrs	r4, r2, #16
 800af7c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800af80:	b292      	uxth	r2, r2
 800af82:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800af86:	f84e 2b04 	str.w	r2, [lr], #4
 800af8a:	1421      	asrs	r1, r4, #16
 800af8c:	e7e0      	b.n	800af50 <__mdiff+0xc8>
 800af8e:	3f01      	subs	r7, #1
 800af90:	e7ea      	b.n	800af68 <__mdiff+0xe0>
 800af92:	bf00      	nop
 800af94:	0800d221 	.word	0x0800d221
 800af98:	0800d232 	.word	0x0800d232

0800af9c <__ulp>:
 800af9c:	b082      	sub	sp, #8
 800af9e:	ed8d 0b00 	vstr	d0, [sp]
 800afa2:	9a01      	ldr	r2, [sp, #4]
 800afa4:	4b0f      	ldr	r3, [pc, #60]	; (800afe4 <__ulp+0x48>)
 800afa6:	4013      	ands	r3, r2
 800afa8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800afac:	2b00      	cmp	r3, #0
 800afae:	dc08      	bgt.n	800afc2 <__ulp+0x26>
 800afb0:	425b      	negs	r3, r3
 800afb2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800afb6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800afba:	da04      	bge.n	800afc6 <__ulp+0x2a>
 800afbc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800afc0:	4113      	asrs	r3, r2
 800afc2:	2200      	movs	r2, #0
 800afc4:	e008      	b.n	800afd8 <__ulp+0x3c>
 800afc6:	f1a2 0314 	sub.w	r3, r2, #20
 800afca:	2b1e      	cmp	r3, #30
 800afcc:	bfda      	itte	le
 800afce:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800afd2:	40da      	lsrle	r2, r3
 800afd4:	2201      	movgt	r2, #1
 800afd6:	2300      	movs	r3, #0
 800afd8:	4619      	mov	r1, r3
 800afda:	4610      	mov	r0, r2
 800afdc:	ec41 0b10 	vmov	d0, r0, r1
 800afe0:	b002      	add	sp, #8
 800afe2:	4770      	bx	lr
 800afe4:	7ff00000 	.word	0x7ff00000

0800afe8 <__b2d>:
 800afe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afec:	6906      	ldr	r6, [r0, #16]
 800afee:	f100 0814 	add.w	r8, r0, #20
 800aff2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aff6:	1f37      	subs	r7, r6, #4
 800aff8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800affc:	4610      	mov	r0, r2
 800affe:	f7ff fd53 	bl	800aaa8 <__hi0bits>
 800b002:	f1c0 0320 	rsb	r3, r0, #32
 800b006:	280a      	cmp	r0, #10
 800b008:	600b      	str	r3, [r1, #0]
 800b00a:	491b      	ldr	r1, [pc, #108]	; (800b078 <__b2d+0x90>)
 800b00c:	dc15      	bgt.n	800b03a <__b2d+0x52>
 800b00e:	f1c0 0c0b 	rsb	ip, r0, #11
 800b012:	fa22 f30c 	lsr.w	r3, r2, ip
 800b016:	45b8      	cmp	r8, r7
 800b018:	ea43 0501 	orr.w	r5, r3, r1
 800b01c:	bf34      	ite	cc
 800b01e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b022:	2300      	movcs	r3, #0
 800b024:	3015      	adds	r0, #21
 800b026:	fa02 f000 	lsl.w	r0, r2, r0
 800b02a:	fa23 f30c 	lsr.w	r3, r3, ip
 800b02e:	4303      	orrs	r3, r0
 800b030:	461c      	mov	r4, r3
 800b032:	ec45 4b10 	vmov	d0, r4, r5
 800b036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b03a:	45b8      	cmp	r8, r7
 800b03c:	bf3a      	itte	cc
 800b03e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b042:	f1a6 0708 	subcc.w	r7, r6, #8
 800b046:	2300      	movcs	r3, #0
 800b048:	380b      	subs	r0, #11
 800b04a:	d012      	beq.n	800b072 <__b2d+0x8a>
 800b04c:	f1c0 0120 	rsb	r1, r0, #32
 800b050:	fa23 f401 	lsr.w	r4, r3, r1
 800b054:	4082      	lsls	r2, r0
 800b056:	4322      	orrs	r2, r4
 800b058:	4547      	cmp	r7, r8
 800b05a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b05e:	bf8c      	ite	hi
 800b060:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b064:	2200      	movls	r2, #0
 800b066:	4083      	lsls	r3, r0
 800b068:	40ca      	lsrs	r2, r1
 800b06a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b06e:	4313      	orrs	r3, r2
 800b070:	e7de      	b.n	800b030 <__b2d+0x48>
 800b072:	ea42 0501 	orr.w	r5, r2, r1
 800b076:	e7db      	b.n	800b030 <__b2d+0x48>
 800b078:	3ff00000 	.word	0x3ff00000

0800b07c <__d2b>:
 800b07c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b080:	460f      	mov	r7, r1
 800b082:	2101      	movs	r1, #1
 800b084:	ec59 8b10 	vmov	r8, r9, d0
 800b088:	4616      	mov	r6, r2
 800b08a:	f7ff fc1b 	bl	800a8c4 <_Balloc>
 800b08e:	4604      	mov	r4, r0
 800b090:	b930      	cbnz	r0, 800b0a0 <__d2b+0x24>
 800b092:	4602      	mov	r2, r0
 800b094:	4b24      	ldr	r3, [pc, #144]	; (800b128 <__d2b+0xac>)
 800b096:	4825      	ldr	r0, [pc, #148]	; (800b12c <__d2b+0xb0>)
 800b098:	f240 310f 	movw	r1, #783	; 0x30f
 800b09c:	f001 fb9c 	bl	800c7d8 <__assert_func>
 800b0a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b0a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0a8:	bb2d      	cbnz	r5, 800b0f6 <__d2b+0x7a>
 800b0aa:	9301      	str	r3, [sp, #4]
 800b0ac:	f1b8 0300 	subs.w	r3, r8, #0
 800b0b0:	d026      	beq.n	800b100 <__d2b+0x84>
 800b0b2:	4668      	mov	r0, sp
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	f7ff fd17 	bl	800aae8 <__lo0bits>
 800b0ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b0be:	b1e8      	cbz	r0, 800b0fc <__d2b+0x80>
 800b0c0:	f1c0 0320 	rsb	r3, r0, #32
 800b0c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c8:	430b      	orrs	r3, r1
 800b0ca:	40c2      	lsrs	r2, r0
 800b0cc:	6163      	str	r3, [r4, #20]
 800b0ce:	9201      	str	r2, [sp, #4]
 800b0d0:	9b01      	ldr	r3, [sp, #4]
 800b0d2:	61a3      	str	r3, [r4, #24]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	bf14      	ite	ne
 800b0d8:	2202      	movne	r2, #2
 800b0da:	2201      	moveq	r2, #1
 800b0dc:	6122      	str	r2, [r4, #16]
 800b0de:	b1bd      	cbz	r5, 800b110 <__d2b+0x94>
 800b0e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b0e4:	4405      	add	r5, r0
 800b0e6:	603d      	str	r5, [r7, #0]
 800b0e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b0ec:	6030      	str	r0, [r6, #0]
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	b003      	add	sp, #12
 800b0f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0fa:	e7d6      	b.n	800b0aa <__d2b+0x2e>
 800b0fc:	6161      	str	r1, [r4, #20]
 800b0fe:	e7e7      	b.n	800b0d0 <__d2b+0x54>
 800b100:	a801      	add	r0, sp, #4
 800b102:	f7ff fcf1 	bl	800aae8 <__lo0bits>
 800b106:	9b01      	ldr	r3, [sp, #4]
 800b108:	6163      	str	r3, [r4, #20]
 800b10a:	3020      	adds	r0, #32
 800b10c:	2201      	movs	r2, #1
 800b10e:	e7e5      	b.n	800b0dc <__d2b+0x60>
 800b110:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b114:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b118:	6038      	str	r0, [r7, #0]
 800b11a:	6918      	ldr	r0, [r3, #16]
 800b11c:	f7ff fcc4 	bl	800aaa8 <__hi0bits>
 800b120:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b124:	e7e2      	b.n	800b0ec <__d2b+0x70>
 800b126:	bf00      	nop
 800b128:	0800d221 	.word	0x0800d221
 800b12c:	0800d232 	.word	0x0800d232

0800b130 <__ratio>:
 800b130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b134:	4688      	mov	r8, r1
 800b136:	4669      	mov	r1, sp
 800b138:	4681      	mov	r9, r0
 800b13a:	f7ff ff55 	bl	800afe8 <__b2d>
 800b13e:	a901      	add	r1, sp, #4
 800b140:	4640      	mov	r0, r8
 800b142:	ec55 4b10 	vmov	r4, r5, d0
 800b146:	f7ff ff4f 	bl	800afe8 <__b2d>
 800b14a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b14e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b152:	eba3 0c02 	sub.w	ip, r3, r2
 800b156:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b15a:	1a9b      	subs	r3, r3, r2
 800b15c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b160:	ec51 0b10 	vmov	r0, r1, d0
 800b164:	2b00      	cmp	r3, #0
 800b166:	bfd6      	itet	le
 800b168:	460a      	movle	r2, r1
 800b16a:	462a      	movgt	r2, r5
 800b16c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b170:	468b      	mov	fp, r1
 800b172:	462f      	mov	r7, r5
 800b174:	bfd4      	ite	le
 800b176:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b17a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b17e:	4620      	mov	r0, r4
 800b180:	ee10 2a10 	vmov	r2, s0
 800b184:	465b      	mov	r3, fp
 800b186:	4639      	mov	r1, r7
 800b188:	f7f5 fb68 	bl	800085c <__aeabi_ddiv>
 800b18c:	ec41 0b10 	vmov	d0, r0, r1
 800b190:	b003      	add	sp, #12
 800b192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b196 <__copybits>:
 800b196:	3901      	subs	r1, #1
 800b198:	b570      	push	{r4, r5, r6, lr}
 800b19a:	1149      	asrs	r1, r1, #5
 800b19c:	6914      	ldr	r4, [r2, #16]
 800b19e:	3101      	adds	r1, #1
 800b1a0:	f102 0314 	add.w	r3, r2, #20
 800b1a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b1a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b1ac:	1f05      	subs	r5, r0, #4
 800b1ae:	42a3      	cmp	r3, r4
 800b1b0:	d30c      	bcc.n	800b1cc <__copybits+0x36>
 800b1b2:	1aa3      	subs	r3, r4, r2
 800b1b4:	3b11      	subs	r3, #17
 800b1b6:	f023 0303 	bic.w	r3, r3, #3
 800b1ba:	3211      	adds	r2, #17
 800b1bc:	42a2      	cmp	r2, r4
 800b1be:	bf88      	it	hi
 800b1c0:	2300      	movhi	r3, #0
 800b1c2:	4418      	add	r0, r3
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	4288      	cmp	r0, r1
 800b1c8:	d305      	bcc.n	800b1d6 <__copybits+0x40>
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}
 800b1cc:	f853 6b04 	ldr.w	r6, [r3], #4
 800b1d0:	f845 6f04 	str.w	r6, [r5, #4]!
 800b1d4:	e7eb      	b.n	800b1ae <__copybits+0x18>
 800b1d6:	f840 3b04 	str.w	r3, [r0], #4
 800b1da:	e7f4      	b.n	800b1c6 <__copybits+0x30>

0800b1dc <__any_on>:
 800b1dc:	f100 0214 	add.w	r2, r0, #20
 800b1e0:	6900      	ldr	r0, [r0, #16]
 800b1e2:	114b      	asrs	r3, r1, #5
 800b1e4:	4298      	cmp	r0, r3
 800b1e6:	b510      	push	{r4, lr}
 800b1e8:	db11      	blt.n	800b20e <__any_on+0x32>
 800b1ea:	dd0a      	ble.n	800b202 <__any_on+0x26>
 800b1ec:	f011 011f 	ands.w	r1, r1, #31
 800b1f0:	d007      	beq.n	800b202 <__any_on+0x26>
 800b1f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b1f6:	fa24 f001 	lsr.w	r0, r4, r1
 800b1fa:	fa00 f101 	lsl.w	r1, r0, r1
 800b1fe:	428c      	cmp	r4, r1
 800b200:	d10b      	bne.n	800b21a <__any_on+0x3e>
 800b202:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b206:	4293      	cmp	r3, r2
 800b208:	d803      	bhi.n	800b212 <__any_on+0x36>
 800b20a:	2000      	movs	r0, #0
 800b20c:	bd10      	pop	{r4, pc}
 800b20e:	4603      	mov	r3, r0
 800b210:	e7f7      	b.n	800b202 <__any_on+0x26>
 800b212:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b216:	2900      	cmp	r1, #0
 800b218:	d0f5      	beq.n	800b206 <__any_on+0x2a>
 800b21a:	2001      	movs	r0, #1
 800b21c:	e7f6      	b.n	800b20c <__any_on+0x30>

0800b21e <sulp>:
 800b21e:	b570      	push	{r4, r5, r6, lr}
 800b220:	4604      	mov	r4, r0
 800b222:	460d      	mov	r5, r1
 800b224:	ec45 4b10 	vmov	d0, r4, r5
 800b228:	4616      	mov	r6, r2
 800b22a:	f7ff feb7 	bl	800af9c <__ulp>
 800b22e:	ec51 0b10 	vmov	r0, r1, d0
 800b232:	b17e      	cbz	r6, 800b254 <sulp+0x36>
 800b234:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b238:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	dd09      	ble.n	800b254 <sulp+0x36>
 800b240:	051b      	lsls	r3, r3, #20
 800b242:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b246:	2400      	movs	r4, #0
 800b248:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b24c:	4622      	mov	r2, r4
 800b24e:	462b      	mov	r3, r5
 800b250:	f7f5 f9da 	bl	8000608 <__aeabi_dmul>
 800b254:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b258 <_strtod_l>:
 800b258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25c:	ed2d 8b02 	vpush	{d8}
 800b260:	b09b      	sub	sp, #108	; 0x6c
 800b262:	4604      	mov	r4, r0
 800b264:	9213      	str	r2, [sp, #76]	; 0x4c
 800b266:	2200      	movs	r2, #0
 800b268:	9216      	str	r2, [sp, #88]	; 0x58
 800b26a:	460d      	mov	r5, r1
 800b26c:	f04f 0800 	mov.w	r8, #0
 800b270:	f04f 0900 	mov.w	r9, #0
 800b274:	460a      	mov	r2, r1
 800b276:	9215      	str	r2, [sp, #84]	; 0x54
 800b278:	7811      	ldrb	r1, [r2, #0]
 800b27a:	292b      	cmp	r1, #43	; 0x2b
 800b27c:	d04c      	beq.n	800b318 <_strtod_l+0xc0>
 800b27e:	d83a      	bhi.n	800b2f6 <_strtod_l+0x9e>
 800b280:	290d      	cmp	r1, #13
 800b282:	d834      	bhi.n	800b2ee <_strtod_l+0x96>
 800b284:	2908      	cmp	r1, #8
 800b286:	d834      	bhi.n	800b2f2 <_strtod_l+0x9a>
 800b288:	2900      	cmp	r1, #0
 800b28a:	d03d      	beq.n	800b308 <_strtod_l+0xb0>
 800b28c:	2200      	movs	r2, #0
 800b28e:	920a      	str	r2, [sp, #40]	; 0x28
 800b290:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b292:	7832      	ldrb	r2, [r6, #0]
 800b294:	2a30      	cmp	r2, #48	; 0x30
 800b296:	f040 80b4 	bne.w	800b402 <_strtod_l+0x1aa>
 800b29a:	7872      	ldrb	r2, [r6, #1]
 800b29c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b2a0:	2a58      	cmp	r2, #88	; 0x58
 800b2a2:	d170      	bne.n	800b386 <_strtod_l+0x12e>
 800b2a4:	9302      	str	r3, [sp, #8]
 800b2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2a8:	9301      	str	r3, [sp, #4]
 800b2aa:	ab16      	add	r3, sp, #88	; 0x58
 800b2ac:	9300      	str	r3, [sp, #0]
 800b2ae:	4a8e      	ldr	r2, [pc, #568]	; (800b4e8 <_strtod_l+0x290>)
 800b2b0:	ab17      	add	r3, sp, #92	; 0x5c
 800b2b2:	a915      	add	r1, sp, #84	; 0x54
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f001 fb2b 	bl	800c910 <__gethex>
 800b2ba:	f010 070f 	ands.w	r7, r0, #15
 800b2be:	4605      	mov	r5, r0
 800b2c0:	d005      	beq.n	800b2ce <_strtod_l+0x76>
 800b2c2:	2f06      	cmp	r7, #6
 800b2c4:	d12a      	bne.n	800b31c <_strtod_l+0xc4>
 800b2c6:	3601      	adds	r6, #1
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	9615      	str	r6, [sp, #84]	; 0x54
 800b2cc:	930a      	str	r3, [sp, #40]	; 0x28
 800b2ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f040 857f 	bne.w	800bdd4 <_strtod_l+0xb7c>
 800b2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2d8:	b1db      	cbz	r3, 800b312 <_strtod_l+0xba>
 800b2da:	4642      	mov	r2, r8
 800b2dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b2e0:	ec43 2b10 	vmov	d0, r2, r3
 800b2e4:	b01b      	add	sp, #108	; 0x6c
 800b2e6:	ecbd 8b02 	vpop	{d8}
 800b2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ee:	2920      	cmp	r1, #32
 800b2f0:	d1cc      	bne.n	800b28c <_strtod_l+0x34>
 800b2f2:	3201      	adds	r2, #1
 800b2f4:	e7bf      	b.n	800b276 <_strtod_l+0x1e>
 800b2f6:	292d      	cmp	r1, #45	; 0x2d
 800b2f8:	d1c8      	bne.n	800b28c <_strtod_l+0x34>
 800b2fa:	2101      	movs	r1, #1
 800b2fc:	910a      	str	r1, [sp, #40]	; 0x28
 800b2fe:	1c51      	adds	r1, r2, #1
 800b300:	9115      	str	r1, [sp, #84]	; 0x54
 800b302:	7852      	ldrb	r2, [r2, #1]
 800b304:	2a00      	cmp	r2, #0
 800b306:	d1c3      	bne.n	800b290 <_strtod_l+0x38>
 800b308:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b30a:	9515      	str	r5, [sp, #84]	; 0x54
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f040 855f 	bne.w	800bdd0 <_strtod_l+0xb78>
 800b312:	4642      	mov	r2, r8
 800b314:	464b      	mov	r3, r9
 800b316:	e7e3      	b.n	800b2e0 <_strtod_l+0x88>
 800b318:	2100      	movs	r1, #0
 800b31a:	e7ef      	b.n	800b2fc <_strtod_l+0xa4>
 800b31c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b31e:	b13a      	cbz	r2, 800b330 <_strtod_l+0xd8>
 800b320:	2135      	movs	r1, #53	; 0x35
 800b322:	a818      	add	r0, sp, #96	; 0x60
 800b324:	f7ff ff37 	bl	800b196 <__copybits>
 800b328:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b32a:	4620      	mov	r0, r4
 800b32c:	f7ff fb0a 	bl	800a944 <_Bfree>
 800b330:	3f01      	subs	r7, #1
 800b332:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b334:	2f04      	cmp	r7, #4
 800b336:	d806      	bhi.n	800b346 <_strtod_l+0xee>
 800b338:	e8df f007 	tbb	[pc, r7]
 800b33c:	201d0314 	.word	0x201d0314
 800b340:	14          	.byte	0x14
 800b341:	00          	.byte	0x00
 800b342:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b346:	05e9      	lsls	r1, r5, #23
 800b348:	bf48      	it	mi
 800b34a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b34e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b352:	0d1b      	lsrs	r3, r3, #20
 800b354:	051b      	lsls	r3, r3, #20
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1b9      	bne.n	800b2ce <_strtod_l+0x76>
 800b35a:	f7fe faf9 	bl	8009950 <__errno>
 800b35e:	2322      	movs	r3, #34	; 0x22
 800b360:	6003      	str	r3, [r0, #0]
 800b362:	e7b4      	b.n	800b2ce <_strtod_l+0x76>
 800b364:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b368:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b36c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b370:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b374:	e7e7      	b.n	800b346 <_strtod_l+0xee>
 800b376:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b4f0 <_strtod_l+0x298>
 800b37a:	e7e4      	b.n	800b346 <_strtod_l+0xee>
 800b37c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b380:	f04f 38ff 	mov.w	r8, #4294967295
 800b384:	e7df      	b.n	800b346 <_strtod_l+0xee>
 800b386:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b388:	1c5a      	adds	r2, r3, #1
 800b38a:	9215      	str	r2, [sp, #84]	; 0x54
 800b38c:	785b      	ldrb	r3, [r3, #1]
 800b38e:	2b30      	cmp	r3, #48	; 0x30
 800b390:	d0f9      	beq.n	800b386 <_strtod_l+0x12e>
 800b392:	2b00      	cmp	r3, #0
 800b394:	d09b      	beq.n	800b2ce <_strtod_l+0x76>
 800b396:	2301      	movs	r3, #1
 800b398:	f04f 0a00 	mov.w	sl, #0
 800b39c:	9304      	str	r3, [sp, #16]
 800b39e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3a2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b3a6:	46d3      	mov	fp, sl
 800b3a8:	220a      	movs	r2, #10
 800b3aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b3ac:	7806      	ldrb	r6, [r0, #0]
 800b3ae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b3b2:	b2d9      	uxtb	r1, r3
 800b3b4:	2909      	cmp	r1, #9
 800b3b6:	d926      	bls.n	800b406 <_strtod_l+0x1ae>
 800b3b8:	494c      	ldr	r1, [pc, #304]	; (800b4ec <_strtod_l+0x294>)
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f001 f9c0 	bl	800c740 <strncmp>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d030      	beq.n	800b426 <_strtod_l+0x1ce>
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	4632      	mov	r2, r6
 800b3c8:	9005      	str	r0, [sp, #20]
 800b3ca:	465e      	mov	r6, fp
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2a65      	cmp	r2, #101	; 0x65
 800b3d0:	d001      	beq.n	800b3d6 <_strtod_l+0x17e>
 800b3d2:	2a45      	cmp	r2, #69	; 0x45
 800b3d4:	d113      	bne.n	800b3fe <_strtod_l+0x1a6>
 800b3d6:	b91e      	cbnz	r6, 800b3e0 <_strtod_l+0x188>
 800b3d8:	9a04      	ldr	r2, [sp, #16]
 800b3da:	4302      	orrs	r2, r0
 800b3dc:	d094      	beq.n	800b308 <_strtod_l+0xb0>
 800b3de:	2600      	movs	r6, #0
 800b3e0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b3e2:	1c6a      	adds	r2, r5, #1
 800b3e4:	9215      	str	r2, [sp, #84]	; 0x54
 800b3e6:	786a      	ldrb	r2, [r5, #1]
 800b3e8:	2a2b      	cmp	r2, #43	; 0x2b
 800b3ea:	d074      	beq.n	800b4d6 <_strtod_l+0x27e>
 800b3ec:	2a2d      	cmp	r2, #45	; 0x2d
 800b3ee:	d078      	beq.n	800b4e2 <_strtod_l+0x28a>
 800b3f0:	f04f 0c00 	mov.w	ip, #0
 800b3f4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b3f8:	2909      	cmp	r1, #9
 800b3fa:	d97f      	bls.n	800b4fc <_strtod_l+0x2a4>
 800b3fc:	9515      	str	r5, [sp, #84]	; 0x54
 800b3fe:	2700      	movs	r7, #0
 800b400:	e09e      	b.n	800b540 <_strtod_l+0x2e8>
 800b402:	2300      	movs	r3, #0
 800b404:	e7c8      	b.n	800b398 <_strtod_l+0x140>
 800b406:	f1bb 0f08 	cmp.w	fp, #8
 800b40a:	bfd8      	it	le
 800b40c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b40e:	f100 0001 	add.w	r0, r0, #1
 800b412:	bfda      	itte	le
 800b414:	fb02 3301 	mlale	r3, r2, r1, r3
 800b418:	9309      	strle	r3, [sp, #36]	; 0x24
 800b41a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b41e:	f10b 0b01 	add.w	fp, fp, #1
 800b422:	9015      	str	r0, [sp, #84]	; 0x54
 800b424:	e7c1      	b.n	800b3aa <_strtod_l+0x152>
 800b426:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b428:	1c5a      	adds	r2, r3, #1
 800b42a:	9215      	str	r2, [sp, #84]	; 0x54
 800b42c:	785a      	ldrb	r2, [r3, #1]
 800b42e:	f1bb 0f00 	cmp.w	fp, #0
 800b432:	d037      	beq.n	800b4a4 <_strtod_l+0x24c>
 800b434:	9005      	str	r0, [sp, #20]
 800b436:	465e      	mov	r6, fp
 800b438:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b43c:	2b09      	cmp	r3, #9
 800b43e:	d912      	bls.n	800b466 <_strtod_l+0x20e>
 800b440:	2301      	movs	r3, #1
 800b442:	e7c4      	b.n	800b3ce <_strtod_l+0x176>
 800b444:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b446:	1c5a      	adds	r2, r3, #1
 800b448:	9215      	str	r2, [sp, #84]	; 0x54
 800b44a:	785a      	ldrb	r2, [r3, #1]
 800b44c:	3001      	adds	r0, #1
 800b44e:	2a30      	cmp	r2, #48	; 0x30
 800b450:	d0f8      	beq.n	800b444 <_strtod_l+0x1ec>
 800b452:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b456:	2b08      	cmp	r3, #8
 800b458:	f200 84c1 	bhi.w	800bdde <_strtod_l+0xb86>
 800b45c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b45e:	9005      	str	r0, [sp, #20]
 800b460:	2000      	movs	r0, #0
 800b462:	930b      	str	r3, [sp, #44]	; 0x2c
 800b464:	4606      	mov	r6, r0
 800b466:	3a30      	subs	r2, #48	; 0x30
 800b468:	f100 0301 	add.w	r3, r0, #1
 800b46c:	d014      	beq.n	800b498 <_strtod_l+0x240>
 800b46e:	9905      	ldr	r1, [sp, #20]
 800b470:	4419      	add	r1, r3
 800b472:	9105      	str	r1, [sp, #20]
 800b474:	4633      	mov	r3, r6
 800b476:	eb00 0c06 	add.w	ip, r0, r6
 800b47a:	210a      	movs	r1, #10
 800b47c:	4563      	cmp	r3, ip
 800b47e:	d113      	bne.n	800b4a8 <_strtod_l+0x250>
 800b480:	1833      	adds	r3, r6, r0
 800b482:	2b08      	cmp	r3, #8
 800b484:	f106 0601 	add.w	r6, r6, #1
 800b488:	4406      	add	r6, r0
 800b48a:	dc1a      	bgt.n	800b4c2 <_strtod_l+0x26a>
 800b48c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b48e:	230a      	movs	r3, #10
 800b490:	fb03 2301 	mla	r3, r3, r1, r2
 800b494:	9309      	str	r3, [sp, #36]	; 0x24
 800b496:	2300      	movs	r3, #0
 800b498:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b49a:	1c51      	adds	r1, r2, #1
 800b49c:	9115      	str	r1, [sp, #84]	; 0x54
 800b49e:	7852      	ldrb	r2, [r2, #1]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	e7c9      	b.n	800b438 <_strtod_l+0x1e0>
 800b4a4:	4658      	mov	r0, fp
 800b4a6:	e7d2      	b.n	800b44e <_strtod_l+0x1f6>
 800b4a8:	2b08      	cmp	r3, #8
 800b4aa:	f103 0301 	add.w	r3, r3, #1
 800b4ae:	dc03      	bgt.n	800b4b8 <_strtod_l+0x260>
 800b4b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b4b2:	434f      	muls	r7, r1
 800b4b4:	9709      	str	r7, [sp, #36]	; 0x24
 800b4b6:	e7e1      	b.n	800b47c <_strtod_l+0x224>
 800b4b8:	2b10      	cmp	r3, #16
 800b4ba:	bfd8      	it	le
 800b4bc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b4c0:	e7dc      	b.n	800b47c <_strtod_l+0x224>
 800b4c2:	2e10      	cmp	r6, #16
 800b4c4:	bfdc      	itt	le
 800b4c6:	230a      	movle	r3, #10
 800b4c8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b4cc:	e7e3      	b.n	800b496 <_strtod_l+0x23e>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	9305      	str	r3, [sp, #20]
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e780      	b.n	800b3d8 <_strtod_l+0x180>
 800b4d6:	f04f 0c00 	mov.w	ip, #0
 800b4da:	1caa      	adds	r2, r5, #2
 800b4dc:	9215      	str	r2, [sp, #84]	; 0x54
 800b4de:	78aa      	ldrb	r2, [r5, #2]
 800b4e0:	e788      	b.n	800b3f4 <_strtod_l+0x19c>
 800b4e2:	f04f 0c01 	mov.w	ip, #1
 800b4e6:	e7f8      	b.n	800b4da <_strtod_l+0x282>
 800b4e8:	0800d390 	.word	0x0800d390
 800b4ec:	0800d38c 	.word	0x0800d38c
 800b4f0:	7ff00000 	.word	0x7ff00000
 800b4f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b4f6:	1c51      	adds	r1, r2, #1
 800b4f8:	9115      	str	r1, [sp, #84]	; 0x54
 800b4fa:	7852      	ldrb	r2, [r2, #1]
 800b4fc:	2a30      	cmp	r2, #48	; 0x30
 800b4fe:	d0f9      	beq.n	800b4f4 <_strtod_l+0x29c>
 800b500:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b504:	2908      	cmp	r1, #8
 800b506:	f63f af7a 	bhi.w	800b3fe <_strtod_l+0x1a6>
 800b50a:	3a30      	subs	r2, #48	; 0x30
 800b50c:	9208      	str	r2, [sp, #32]
 800b50e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b510:	920c      	str	r2, [sp, #48]	; 0x30
 800b512:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b514:	1c57      	adds	r7, r2, #1
 800b516:	9715      	str	r7, [sp, #84]	; 0x54
 800b518:	7852      	ldrb	r2, [r2, #1]
 800b51a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b51e:	f1be 0f09 	cmp.w	lr, #9
 800b522:	d938      	bls.n	800b596 <_strtod_l+0x33e>
 800b524:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b526:	1a7f      	subs	r7, r7, r1
 800b528:	2f08      	cmp	r7, #8
 800b52a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b52e:	dc03      	bgt.n	800b538 <_strtod_l+0x2e0>
 800b530:	9908      	ldr	r1, [sp, #32]
 800b532:	428f      	cmp	r7, r1
 800b534:	bfa8      	it	ge
 800b536:	460f      	movge	r7, r1
 800b538:	f1bc 0f00 	cmp.w	ip, #0
 800b53c:	d000      	beq.n	800b540 <_strtod_l+0x2e8>
 800b53e:	427f      	negs	r7, r7
 800b540:	2e00      	cmp	r6, #0
 800b542:	d14f      	bne.n	800b5e4 <_strtod_l+0x38c>
 800b544:	9904      	ldr	r1, [sp, #16]
 800b546:	4301      	orrs	r1, r0
 800b548:	f47f aec1 	bne.w	800b2ce <_strtod_l+0x76>
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	f47f aedb 	bne.w	800b308 <_strtod_l+0xb0>
 800b552:	2a69      	cmp	r2, #105	; 0x69
 800b554:	d029      	beq.n	800b5aa <_strtod_l+0x352>
 800b556:	dc26      	bgt.n	800b5a6 <_strtod_l+0x34e>
 800b558:	2a49      	cmp	r2, #73	; 0x49
 800b55a:	d026      	beq.n	800b5aa <_strtod_l+0x352>
 800b55c:	2a4e      	cmp	r2, #78	; 0x4e
 800b55e:	f47f aed3 	bne.w	800b308 <_strtod_l+0xb0>
 800b562:	499b      	ldr	r1, [pc, #620]	; (800b7d0 <_strtod_l+0x578>)
 800b564:	a815      	add	r0, sp, #84	; 0x54
 800b566:	f001 fc13 	bl	800cd90 <__match>
 800b56a:	2800      	cmp	r0, #0
 800b56c:	f43f aecc 	beq.w	800b308 <_strtod_l+0xb0>
 800b570:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	2b28      	cmp	r3, #40	; 0x28
 800b576:	d12f      	bne.n	800b5d8 <_strtod_l+0x380>
 800b578:	4996      	ldr	r1, [pc, #600]	; (800b7d4 <_strtod_l+0x57c>)
 800b57a:	aa18      	add	r2, sp, #96	; 0x60
 800b57c:	a815      	add	r0, sp, #84	; 0x54
 800b57e:	f001 fc1b 	bl	800cdb8 <__hexnan>
 800b582:	2805      	cmp	r0, #5
 800b584:	d128      	bne.n	800b5d8 <_strtod_l+0x380>
 800b586:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b588:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b58c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b590:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b594:	e69b      	b.n	800b2ce <_strtod_l+0x76>
 800b596:	9f08      	ldr	r7, [sp, #32]
 800b598:	210a      	movs	r1, #10
 800b59a:	fb01 2107 	mla	r1, r1, r7, r2
 800b59e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b5a2:	9208      	str	r2, [sp, #32]
 800b5a4:	e7b5      	b.n	800b512 <_strtod_l+0x2ba>
 800b5a6:	2a6e      	cmp	r2, #110	; 0x6e
 800b5a8:	e7d9      	b.n	800b55e <_strtod_l+0x306>
 800b5aa:	498b      	ldr	r1, [pc, #556]	; (800b7d8 <_strtod_l+0x580>)
 800b5ac:	a815      	add	r0, sp, #84	; 0x54
 800b5ae:	f001 fbef 	bl	800cd90 <__match>
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	f43f aea8 	beq.w	800b308 <_strtod_l+0xb0>
 800b5b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5ba:	4988      	ldr	r1, [pc, #544]	; (800b7dc <_strtod_l+0x584>)
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	a815      	add	r0, sp, #84	; 0x54
 800b5c0:	9315      	str	r3, [sp, #84]	; 0x54
 800b5c2:	f001 fbe5 	bl	800cd90 <__match>
 800b5c6:	b910      	cbnz	r0, 800b5ce <_strtod_l+0x376>
 800b5c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	9315      	str	r3, [sp, #84]	; 0x54
 800b5ce:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b7ec <_strtod_l+0x594>
 800b5d2:	f04f 0800 	mov.w	r8, #0
 800b5d6:	e67a      	b.n	800b2ce <_strtod_l+0x76>
 800b5d8:	4881      	ldr	r0, [pc, #516]	; (800b7e0 <_strtod_l+0x588>)
 800b5da:	f001 f8f5 	bl	800c7c8 <nan>
 800b5de:	ec59 8b10 	vmov	r8, r9, d0
 800b5e2:	e674      	b.n	800b2ce <_strtod_l+0x76>
 800b5e4:	9b05      	ldr	r3, [sp, #20]
 800b5e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5e8:	1afb      	subs	r3, r7, r3
 800b5ea:	f1bb 0f00 	cmp.w	fp, #0
 800b5ee:	bf08      	it	eq
 800b5f0:	46b3      	moveq	fp, r6
 800b5f2:	2e10      	cmp	r6, #16
 800b5f4:	9308      	str	r3, [sp, #32]
 800b5f6:	4635      	mov	r5, r6
 800b5f8:	bfa8      	it	ge
 800b5fa:	2510      	movge	r5, #16
 800b5fc:	f7f4 ff8a 	bl	8000514 <__aeabi_ui2d>
 800b600:	2e09      	cmp	r6, #9
 800b602:	4680      	mov	r8, r0
 800b604:	4689      	mov	r9, r1
 800b606:	dd13      	ble.n	800b630 <_strtod_l+0x3d8>
 800b608:	4b76      	ldr	r3, [pc, #472]	; (800b7e4 <_strtod_l+0x58c>)
 800b60a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b60e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b612:	f7f4 fff9 	bl	8000608 <__aeabi_dmul>
 800b616:	4680      	mov	r8, r0
 800b618:	4650      	mov	r0, sl
 800b61a:	4689      	mov	r9, r1
 800b61c:	f7f4 ff7a 	bl	8000514 <__aeabi_ui2d>
 800b620:	4602      	mov	r2, r0
 800b622:	460b      	mov	r3, r1
 800b624:	4640      	mov	r0, r8
 800b626:	4649      	mov	r1, r9
 800b628:	f7f4 fe38 	bl	800029c <__adddf3>
 800b62c:	4680      	mov	r8, r0
 800b62e:	4689      	mov	r9, r1
 800b630:	2e0f      	cmp	r6, #15
 800b632:	dc38      	bgt.n	800b6a6 <_strtod_l+0x44e>
 800b634:	9b08      	ldr	r3, [sp, #32]
 800b636:	2b00      	cmp	r3, #0
 800b638:	f43f ae49 	beq.w	800b2ce <_strtod_l+0x76>
 800b63c:	dd24      	ble.n	800b688 <_strtod_l+0x430>
 800b63e:	2b16      	cmp	r3, #22
 800b640:	dc0b      	bgt.n	800b65a <_strtod_l+0x402>
 800b642:	4968      	ldr	r1, [pc, #416]	; (800b7e4 <_strtod_l+0x58c>)
 800b644:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b64c:	4642      	mov	r2, r8
 800b64e:	464b      	mov	r3, r9
 800b650:	f7f4 ffda 	bl	8000608 <__aeabi_dmul>
 800b654:	4680      	mov	r8, r0
 800b656:	4689      	mov	r9, r1
 800b658:	e639      	b.n	800b2ce <_strtod_l+0x76>
 800b65a:	9a08      	ldr	r2, [sp, #32]
 800b65c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b660:	4293      	cmp	r3, r2
 800b662:	db20      	blt.n	800b6a6 <_strtod_l+0x44e>
 800b664:	4c5f      	ldr	r4, [pc, #380]	; (800b7e4 <_strtod_l+0x58c>)
 800b666:	f1c6 060f 	rsb	r6, r6, #15
 800b66a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b66e:	4642      	mov	r2, r8
 800b670:	464b      	mov	r3, r9
 800b672:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b676:	f7f4 ffc7 	bl	8000608 <__aeabi_dmul>
 800b67a:	9b08      	ldr	r3, [sp, #32]
 800b67c:	1b9e      	subs	r6, r3, r6
 800b67e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b682:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b686:	e7e3      	b.n	800b650 <_strtod_l+0x3f8>
 800b688:	9b08      	ldr	r3, [sp, #32]
 800b68a:	3316      	adds	r3, #22
 800b68c:	db0b      	blt.n	800b6a6 <_strtod_l+0x44e>
 800b68e:	9b05      	ldr	r3, [sp, #20]
 800b690:	1bdf      	subs	r7, r3, r7
 800b692:	4b54      	ldr	r3, [pc, #336]	; (800b7e4 <_strtod_l+0x58c>)
 800b694:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b69c:	4640      	mov	r0, r8
 800b69e:	4649      	mov	r1, r9
 800b6a0:	f7f5 f8dc 	bl	800085c <__aeabi_ddiv>
 800b6a4:	e7d6      	b.n	800b654 <_strtod_l+0x3fc>
 800b6a6:	9b08      	ldr	r3, [sp, #32]
 800b6a8:	1b75      	subs	r5, r6, r5
 800b6aa:	441d      	add	r5, r3
 800b6ac:	2d00      	cmp	r5, #0
 800b6ae:	dd70      	ble.n	800b792 <_strtod_l+0x53a>
 800b6b0:	f015 030f 	ands.w	r3, r5, #15
 800b6b4:	d00a      	beq.n	800b6cc <_strtod_l+0x474>
 800b6b6:	494b      	ldr	r1, [pc, #300]	; (800b7e4 <_strtod_l+0x58c>)
 800b6b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b6bc:	4642      	mov	r2, r8
 800b6be:	464b      	mov	r3, r9
 800b6c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6c4:	f7f4 ffa0 	bl	8000608 <__aeabi_dmul>
 800b6c8:	4680      	mov	r8, r0
 800b6ca:	4689      	mov	r9, r1
 800b6cc:	f035 050f 	bics.w	r5, r5, #15
 800b6d0:	d04d      	beq.n	800b76e <_strtod_l+0x516>
 800b6d2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b6d6:	dd22      	ble.n	800b71e <_strtod_l+0x4c6>
 800b6d8:	2500      	movs	r5, #0
 800b6da:	46ab      	mov	fp, r5
 800b6dc:	9509      	str	r5, [sp, #36]	; 0x24
 800b6de:	9505      	str	r5, [sp, #20]
 800b6e0:	2322      	movs	r3, #34	; 0x22
 800b6e2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b7ec <_strtod_l+0x594>
 800b6e6:	6023      	str	r3, [r4, #0]
 800b6e8:	f04f 0800 	mov.w	r8, #0
 800b6ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f43f aded 	beq.w	800b2ce <_strtod_l+0x76>
 800b6f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f7ff f924 	bl	800a944 <_Bfree>
 800b6fc:	9905      	ldr	r1, [sp, #20]
 800b6fe:	4620      	mov	r0, r4
 800b700:	f7ff f920 	bl	800a944 <_Bfree>
 800b704:	4659      	mov	r1, fp
 800b706:	4620      	mov	r0, r4
 800b708:	f7ff f91c 	bl	800a944 <_Bfree>
 800b70c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b70e:	4620      	mov	r0, r4
 800b710:	f7ff f918 	bl	800a944 <_Bfree>
 800b714:	4629      	mov	r1, r5
 800b716:	4620      	mov	r0, r4
 800b718:	f7ff f914 	bl	800a944 <_Bfree>
 800b71c:	e5d7      	b.n	800b2ce <_strtod_l+0x76>
 800b71e:	4b32      	ldr	r3, [pc, #200]	; (800b7e8 <_strtod_l+0x590>)
 800b720:	9304      	str	r3, [sp, #16]
 800b722:	2300      	movs	r3, #0
 800b724:	112d      	asrs	r5, r5, #4
 800b726:	4640      	mov	r0, r8
 800b728:	4649      	mov	r1, r9
 800b72a:	469a      	mov	sl, r3
 800b72c:	2d01      	cmp	r5, #1
 800b72e:	dc21      	bgt.n	800b774 <_strtod_l+0x51c>
 800b730:	b10b      	cbz	r3, 800b736 <_strtod_l+0x4de>
 800b732:	4680      	mov	r8, r0
 800b734:	4689      	mov	r9, r1
 800b736:	492c      	ldr	r1, [pc, #176]	; (800b7e8 <_strtod_l+0x590>)
 800b738:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b73c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b740:	4642      	mov	r2, r8
 800b742:	464b      	mov	r3, r9
 800b744:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b748:	f7f4 ff5e 	bl	8000608 <__aeabi_dmul>
 800b74c:	4b27      	ldr	r3, [pc, #156]	; (800b7ec <_strtod_l+0x594>)
 800b74e:	460a      	mov	r2, r1
 800b750:	400b      	ands	r3, r1
 800b752:	4927      	ldr	r1, [pc, #156]	; (800b7f0 <_strtod_l+0x598>)
 800b754:	428b      	cmp	r3, r1
 800b756:	4680      	mov	r8, r0
 800b758:	d8be      	bhi.n	800b6d8 <_strtod_l+0x480>
 800b75a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b75e:	428b      	cmp	r3, r1
 800b760:	bf86      	itte	hi
 800b762:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b7f4 <_strtod_l+0x59c>
 800b766:	f04f 38ff 	movhi.w	r8, #4294967295
 800b76a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b76e:	2300      	movs	r3, #0
 800b770:	9304      	str	r3, [sp, #16]
 800b772:	e07b      	b.n	800b86c <_strtod_l+0x614>
 800b774:	07ea      	lsls	r2, r5, #31
 800b776:	d505      	bpl.n	800b784 <_strtod_l+0x52c>
 800b778:	9b04      	ldr	r3, [sp, #16]
 800b77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77e:	f7f4 ff43 	bl	8000608 <__aeabi_dmul>
 800b782:	2301      	movs	r3, #1
 800b784:	9a04      	ldr	r2, [sp, #16]
 800b786:	3208      	adds	r2, #8
 800b788:	f10a 0a01 	add.w	sl, sl, #1
 800b78c:	106d      	asrs	r5, r5, #1
 800b78e:	9204      	str	r2, [sp, #16]
 800b790:	e7cc      	b.n	800b72c <_strtod_l+0x4d4>
 800b792:	d0ec      	beq.n	800b76e <_strtod_l+0x516>
 800b794:	426d      	negs	r5, r5
 800b796:	f015 020f 	ands.w	r2, r5, #15
 800b79a:	d00a      	beq.n	800b7b2 <_strtod_l+0x55a>
 800b79c:	4b11      	ldr	r3, [pc, #68]	; (800b7e4 <_strtod_l+0x58c>)
 800b79e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7a2:	4640      	mov	r0, r8
 800b7a4:	4649      	mov	r1, r9
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	f7f5 f857 	bl	800085c <__aeabi_ddiv>
 800b7ae:	4680      	mov	r8, r0
 800b7b0:	4689      	mov	r9, r1
 800b7b2:	112d      	asrs	r5, r5, #4
 800b7b4:	d0db      	beq.n	800b76e <_strtod_l+0x516>
 800b7b6:	2d1f      	cmp	r5, #31
 800b7b8:	dd1e      	ble.n	800b7f8 <_strtod_l+0x5a0>
 800b7ba:	2500      	movs	r5, #0
 800b7bc:	46ab      	mov	fp, r5
 800b7be:	9509      	str	r5, [sp, #36]	; 0x24
 800b7c0:	9505      	str	r5, [sp, #20]
 800b7c2:	2322      	movs	r3, #34	; 0x22
 800b7c4:	f04f 0800 	mov.w	r8, #0
 800b7c8:	f04f 0900 	mov.w	r9, #0
 800b7cc:	6023      	str	r3, [r4, #0]
 800b7ce:	e78d      	b.n	800b6ec <_strtod_l+0x494>
 800b7d0:	0800d179 	.word	0x0800d179
 800b7d4:	0800d3a4 	.word	0x0800d3a4
 800b7d8:	0800d171 	.word	0x0800d171
 800b7dc:	0800d1a8 	.word	0x0800d1a8
 800b7e0:	0800d535 	.word	0x0800d535
 800b7e4:	0800d2b8 	.word	0x0800d2b8
 800b7e8:	0800d290 	.word	0x0800d290
 800b7ec:	7ff00000 	.word	0x7ff00000
 800b7f0:	7ca00000 	.word	0x7ca00000
 800b7f4:	7fefffff 	.word	0x7fefffff
 800b7f8:	f015 0310 	ands.w	r3, r5, #16
 800b7fc:	bf18      	it	ne
 800b7fe:	236a      	movne	r3, #106	; 0x6a
 800b800:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800bba4 <_strtod_l+0x94c>
 800b804:	9304      	str	r3, [sp, #16]
 800b806:	4640      	mov	r0, r8
 800b808:	4649      	mov	r1, r9
 800b80a:	2300      	movs	r3, #0
 800b80c:	07ea      	lsls	r2, r5, #31
 800b80e:	d504      	bpl.n	800b81a <_strtod_l+0x5c2>
 800b810:	e9da 2300 	ldrd	r2, r3, [sl]
 800b814:	f7f4 fef8 	bl	8000608 <__aeabi_dmul>
 800b818:	2301      	movs	r3, #1
 800b81a:	106d      	asrs	r5, r5, #1
 800b81c:	f10a 0a08 	add.w	sl, sl, #8
 800b820:	d1f4      	bne.n	800b80c <_strtod_l+0x5b4>
 800b822:	b10b      	cbz	r3, 800b828 <_strtod_l+0x5d0>
 800b824:	4680      	mov	r8, r0
 800b826:	4689      	mov	r9, r1
 800b828:	9b04      	ldr	r3, [sp, #16]
 800b82a:	b1bb      	cbz	r3, 800b85c <_strtod_l+0x604>
 800b82c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b830:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b834:	2b00      	cmp	r3, #0
 800b836:	4649      	mov	r1, r9
 800b838:	dd10      	ble.n	800b85c <_strtod_l+0x604>
 800b83a:	2b1f      	cmp	r3, #31
 800b83c:	f340 811e 	ble.w	800ba7c <_strtod_l+0x824>
 800b840:	2b34      	cmp	r3, #52	; 0x34
 800b842:	bfde      	ittt	le
 800b844:	f04f 33ff 	movle.w	r3, #4294967295
 800b848:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b84c:	4093      	lslle	r3, r2
 800b84e:	f04f 0800 	mov.w	r8, #0
 800b852:	bfcc      	ite	gt
 800b854:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b858:	ea03 0901 	andle.w	r9, r3, r1
 800b85c:	2200      	movs	r2, #0
 800b85e:	2300      	movs	r3, #0
 800b860:	4640      	mov	r0, r8
 800b862:	4649      	mov	r1, r9
 800b864:	f7f5 f938 	bl	8000ad8 <__aeabi_dcmpeq>
 800b868:	2800      	cmp	r0, #0
 800b86a:	d1a6      	bne.n	800b7ba <_strtod_l+0x562>
 800b86c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b86e:	9300      	str	r3, [sp, #0]
 800b870:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b872:	4633      	mov	r3, r6
 800b874:	465a      	mov	r2, fp
 800b876:	4620      	mov	r0, r4
 800b878:	f7ff f8cc 	bl	800aa14 <__s2b>
 800b87c:	9009      	str	r0, [sp, #36]	; 0x24
 800b87e:	2800      	cmp	r0, #0
 800b880:	f43f af2a 	beq.w	800b6d8 <_strtod_l+0x480>
 800b884:	9a08      	ldr	r2, [sp, #32]
 800b886:	9b05      	ldr	r3, [sp, #20]
 800b888:	2a00      	cmp	r2, #0
 800b88a:	eba3 0307 	sub.w	r3, r3, r7
 800b88e:	bfa8      	it	ge
 800b890:	2300      	movge	r3, #0
 800b892:	930c      	str	r3, [sp, #48]	; 0x30
 800b894:	2500      	movs	r5, #0
 800b896:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b89a:	9312      	str	r3, [sp, #72]	; 0x48
 800b89c:	46ab      	mov	fp, r5
 800b89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	6859      	ldr	r1, [r3, #4]
 800b8a4:	f7ff f80e 	bl	800a8c4 <_Balloc>
 800b8a8:	9005      	str	r0, [sp, #20]
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	f43f af18 	beq.w	800b6e0 <_strtod_l+0x488>
 800b8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b2:	691a      	ldr	r2, [r3, #16]
 800b8b4:	3202      	adds	r2, #2
 800b8b6:	f103 010c 	add.w	r1, r3, #12
 800b8ba:	0092      	lsls	r2, r2, #2
 800b8bc:	300c      	adds	r0, #12
 800b8be:	f7fe f873 	bl	80099a8 <memcpy>
 800b8c2:	ec49 8b10 	vmov	d0, r8, r9
 800b8c6:	aa18      	add	r2, sp, #96	; 0x60
 800b8c8:	a917      	add	r1, sp, #92	; 0x5c
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f7ff fbd6 	bl	800b07c <__d2b>
 800b8d0:	ec49 8b18 	vmov	d8, r8, r9
 800b8d4:	9016      	str	r0, [sp, #88]	; 0x58
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	f43f af02 	beq.w	800b6e0 <_strtod_l+0x488>
 800b8dc:	2101      	movs	r1, #1
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f7ff f930 	bl	800ab44 <__i2b>
 800b8e4:	4683      	mov	fp, r0
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	f43f aefa 	beq.w	800b6e0 <_strtod_l+0x488>
 800b8ec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b8ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b8f0:	2e00      	cmp	r6, #0
 800b8f2:	bfab      	itete	ge
 800b8f4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b8f6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b8f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b8fa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b8fe:	bfac      	ite	ge
 800b900:	eb06 0a03 	addge.w	sl, r6, r3
 800b904:	1b9f      	sublt	r7, r3, r6
 800b906:	9b04      	ldr	r3, [sp, #16]
 800b908:	1af6      	subs	r6, r6, r3
 800b90a:	4416      	add	r6, r2
 800b90c:	4ba0      	ldr	r3, [pc, #640]	; (800bb90 <_strtod_l+0x938>)
 800b90e:	3e01      	subs	r6, #1
 800b910:	429e      	cmp	r6, r3
 800b912:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b916:	f280 80c4 	bge.w	800baa2 <_strtod_l+0x84a>
 800b91a:	1b9b      	subs	r3, r3, r6
 800b91c:	2b1f      	cmp	r3, #31
 800b91e:	eba2 0203 	sub.w	r2, r2, r3
 800b922:	f04f 0101 	mov.w	r1, #1
 800b926:	f300 80b0 	bgt.w	800ba8a <_strtod_l+0x832>
 800b92a:	fa01 f303 	lsl.w	r3, r1, r3
 800b92e:	930e      	str	r3, [sp, #56]	; 0x38
 800b930:	2300      	movs	r3, #0
 800b932:	930d      	str	r3, [sp, #52]	; 0x34
 800b934:	eb0a 0602 	add.w	r6, sl, r2
 800b938:	9b04      	ldr	r3, [sp, #16]
 800b93a:	45b2      	cmp	sl, r6
 800b93c:	4417      	add	r7, r2
 800b93e:	441f      	add	r7, r3
 800b940:	4653      	mov	r3, sl
 800b942:	bfa8      	it	ge
 800b944:	4633      	movge	r3, r6
 800b946:	42bb      	cmp	r3, r7
 800b948:	bfa8      	it	ge
 800b94a:	463b      	movge	r3, r7
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	bfc2      	ittt	gt
 800b950:	1af6      	subgt	r6, r6, r3
 800b952:	1aff      	subgt	r7, r7, r3
 800b954:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	dd17      	ble.n	800b98e <_strtod_l+0x736>
 800b95e:	4659      	mov	r1, fp
 800b960:	461a      	mov	r2, r3
 800b962:	4620      	mov	r0, r4
 800b964:	f7ff f9ae 	bl	800acc4 <__pow5mult>
 800b968:	4683      	mov	fp, r0
 800b96a:	2800      	cmp	r0, #0
 800b96c:	f43f aeb8 	beq.w	800b6e0 <_strtod_l+0x488>
 800b970:	4601      	mov	r1, r0
 800b972:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b974:	4620      	mov	r0, r4
 800b976:	f7ff f8fb 	bl	800ab70 <__multiply>
 800b97a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b97c:	2800      	cmp	r0, #0
 800b97e:	f43f aeaf 	beq.w	800b6e0 <_strtod_l+0x488>
 800b982:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b984:	4620      	mov	r0, r4
 800b986:	f7fe ffdd 	bl	800a944 <_Bfree>
 800b98a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b98c:	9316      	str	r3, [sp, #88]	; 0x58
 800b98e:	2e00      	cmp	r6, #0
 800b990:	f300 808c 	bgt.w	800baac <_strtod_l+0x854>
 800b994:	9b08      	ldr	r3, [sp, #32]
 800b996:	2b00      	cmp	r3, #0
 800b998:	dd08      	ble.n	800b9ac <_strtod_l+0x754>
 800b99a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b99c:	9905      	ldr	r1, [sp, #20]
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f7ff f990 	bl	800acc4 <__pow5mult>
 800b9a4:	9005      	str	r0, [sp, #20]
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	f43f ae9a 	beq.w	800b6e0 <_strtod_l+0x488>
 800b9ac:	2f00      	cmp	r7, #0
 800b9ae:	dd08      	ble.n	800b9c2 <_strtod_l+0x76a>
 800b9b0:	9905      	ldr	r1, [sp, #20]
 800b9b2:	463a      	mov	r2, r7
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f7ff f9df 	bl	800ad78 <__lshift>
 800b9ba:	9005      	str	r0, [sp, #20]
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	f43f ae8f 	beq.w	800b6e0 <_strtod_l+0x488>
 800b9c2:	f1ba 0f00 	cmp.w	sl, #0
 800b9c6:	dd08      	ble.n	800b9da <_strtod_l+0x782>
 800b9c8:	4659      	mov	r1, fp
 800b9ca:	4652      	mov	r2, sl
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f7ff f9d3 	bl	800ad78 <__lshift>
 800b9d2:	4683      	mov	fp, r0
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	f43f ae83 	beq.w	800b6e0 <_strtod_l+0x488>
 800b9da:	9a05      	ldr	r2, [sp, #20]
 800b9dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f7ff fa52 	bl	800ae88 <__mdiff>
 800b9e4:	4605      	mov	r5, r0
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	f43f ae7a 	beq.w	800b6e0 <_strtod_l+0x488>
 800b9ec:	68c3      	ldr	r3, [r0, #12]
 800b9ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	60c3      	str	r3, [r0, #12]
 800b9f4:	4659      	mov	r1, fp
 800b9f6:	f7ff fa2b 	bl	800ae50 <__mcmp>
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	da60      	bge.n	800bac0 <_strtod_l+0x868>
 800b9fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba00:	ea53 0308 	orrs.w	r3, r3, r8
 800ba04:	f040 8084 	bne.w	800bb10 <_strtod_l+0x8b8>
 800ba08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d17f      	bne.n	800bb10 <_strtod_l+0x8b8>
 800ba10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba14:	0d1b      	lsrs	r3, r3, #20
 800ba16:	051b      	lsls	r3, r3, #20
 800ba18:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ba1c:	d978      	bls.n	800bb10 <_strtod_l+0x8b8>
 800ba1e:	696b      	ldr	r3, [r5, #20]
 800ba20:	b913      	cbnz	r3, 800ba28 <_strtod_l+0x7d0>
 800ba22:	692b      	ldr	r3, [r5, #16]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	dd73      	ble.n	800bb10 <_strtod_l+0x8b8>
 800ba28:	4629      	mov	r1, r5
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f7ff f9a3 	bl	800ad78 <__lshift>
 800ba32:	4659      	mov	r1, fp
 800ba34:	4605      	mov	r5, r0
 800ba36:	f7ff fa0b 	bl	800ae50 <__mcmp>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	dd68      	ble.n	800bb10 <_strtod_l+0x8b8>
 800ba3e:	9904      	ldr	r1, [sp, #16]
 800ba40:	4a54      	ldr	r2, [pc, #336]	; (800bb94 <_strtod_l+0x93c>)
 800ba42:	464b      	mov	r3, r9
 800ba44:	2900      	cmp	r1, #0
 800ba46:	f000 8084 	beq.w	800bb52 <_strtod_l+0x8fa>
 800ba4a:	ea02 0109 	and.w	r1, r2, r9
 800ba4e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ba52:	dc7e      	bgt.n	800bb52 <_strtod_l+0x8fa>
 800ba54:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ba58:	f77f aeb3 	ble.w	800b7c2 <_strtod_l+0x56a>
 800ba5c:	4b4e      	ldr	r3, [pc, #312]	; (800bb98 <_strtod_l+0x940>)
 800ba5e:	4640      	mov	r0, r8
 800ba60:	4649      	mov	r1, r9
 800ba62:	2200      	movs	r2, #0
 800ba64:	f7f4 fdd0 	bl	8000608 <__aeabi_dmul>
 800ba68:	4b4a      	ldr	r3, [pc, #296]	; (800bb94 <_strtod_l+0x93c>)
 800ba6a:	400b      	ands	r3, r1
 800ba6c:	4680      	mov	r8, r0
 800ba6e:	4689      	mov	r9, r1
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f47f ae3f 	bne.w	800b6f4 <_strtod_l+0x49c>
 800ba76:	2322      	movs	r3, #34	; 0x22
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	e63b      	b.n	800b6f4 <_strtod_l+0x49c>
 800ba7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba80:	fa02 f303 	lsl.w	r3, r2, r3
 800ba84:	ea03 0808 	and.w	r8, r3, r8
 800ba88:	e6e8      	b.n	800b85c <_strtod_l+0x604>
 800ba8a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ba8e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ba92:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ba96:	36e2      	adds	r6, #226	; 0xe2
 800ba98:	fa01 f306 	lsl.w	r3, r1, r6
 800ba9c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800baa0:	e748      	b.n	800b934 <_strtod_l+0x6dc>
 800baa2:	2100      	movs	r1, #0
 800baa4:	2301      	movs	r3, #1
 800baa6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800baaa:	e743      	b.n	800b934 <_strtod_l+0x6dc>
 800baac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800baae:	4632      	mov	r2, r6
 800bab0:	4620      	mov	r0, r4
 800bab2:	f7ff f961 	bl	800ad78 <__lshift>
 800bab6:	9016      	str	r0, [sp, #88]	; 0x58
 800bab8:	2800      	cmp	r0, #0
 800baba:	f47f af6b 	bne.w	800b994 <_strtod_l+0x73c>
 800babe:	e60f      	b.n	800b6e0 <_strtod_l+0x488>
 800bac0:	46ca      	mov	sl, r9
 800bac2:	d171      	bne.n	800bba8 <_strtod_l+0x950>
 800bac4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bac6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800baca:	b352      	cbz	r2, 800bb22 <_strtod_l+0x8ca>
 800bacc:	4a33      	ldr	r2, [pc, #204]	; (800bb9c <_strtod_l+0x944>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d12a      	bne.n	800bb28 <_strtod_l+0x8d0>
 800bad2:	9b04      	ldr	r3, [sp, #16]
 800bad4:	4641      	mov	r1, r8
 800bad6:	b1fb      	cbz	r3, 800bb18 <_strtod_l+0x8c0>
 800bad8:	4b2e      	ldr	r3, [pc, #184]	; (800bb94 <_strtod_l+0x93c>)
 800bada:	ea09 0303 	and.w	r3, r9, r3
 800bade:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bae2:	f04f 32ff 	mov.w	r2, #4294967295
 800bae6:	d81a      	bhi.n	800bb1e <_strtod_l+0x8c6>
 800bae8:	0d1b      	lsrs	r3, r3, #20
 800baea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800baee:	fa02 f303 	lsl.w	r3, r2, r3
 800baf2:	4299      	cmp	r1, r3
 800baf4:	d118      	bne.n	800bb28 <_strtod_l+0x8d0>
 800baf6:	4b2a      	ldr	r3, [pc, #168]	; (800bba0 <_strtod_l+0x948>)
 800baf8:	459a      	cmp	sl, r3
 800bafa:	d102      	bne.n	800bb02 <_strtod_l+0x8aa>
 800bafc:	3101      	adds	r1, #1
 800bafe:	f43f adef 	beq.w	800b6e0 <_strtod_l+0x488>
 800bb02:	4b24      	ldr	r3, [pc, #144]	; (800bb94 <_strtod_l+0x93c>)
 800bb04:	ea0a 0303 	and.w	r3, sl, r3
 800bb08:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800bb0c:	f04f 0800 	mov.w	r8, #0
 800bb10:	9b04      	ldr	r3, [sp, #16]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d1a2      	bne.n	800ba5c <_strtod_l+0x804>
 800bb16:	e5ed      	b.n	800b6f4 <_strtod_l+0x49c>
 800bb18:	f04f 33ff 	mov.w	r3, #4294967295
 800bb1c:	e7e9      	b.n	800baf2 <_strtod_l+0x89a>
 800bb1e:	4613      	mov	r3, r2
 800bb20:	e7e7      	b.n	800baf2 <_strtod_l+0x89a>
 800bb22:	ea53 0308 	orrs.w	r3, r3, r8
 800bb26:	d08a      	beq.n	800ba3e <_strtod_l+0x7e6>
 800bb28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb2a:	b1e3      	cbz	r3, 800bb66 <_strtod_l+0x90e>
 800bb2c:	ea13 0f0a 	tst.w	r3, sl
 800bb30:	d0ee      	beq.n	800bb10 <_strtod_l+0x8b8>
 800bb32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb34:	9a04      	ldr	r2, [sp, #16]
 800bb36:	4640      	mov	r0, r8
 800bb38:	4649      	mov	r1, r9
 800bb3a:	b1c3      	cbz	r3, 800bb6e <_strtod_l+0x916>
 800bb3c:	f7ff fb6f 	bl	800b21e <sulp>
 800bb40:	4602      	mov	r2, r0
 800bb42:	460b      	mov	r3, r1
 800bb44:	ec51 0b18 	vmov	r0, r1, d8
 800bb48:	f7f4 fba8 	bl	800029c <__adddf3>
 800bb4c:	4680      	mov	r8, r0
 800bb4e:	4689      	mov	r9, r1
 800bb50:	e7de      	b.n	800bb10 <_strtod_l+0x8b8>
 800bb52:	4013      	ands	r3, r2
 800bb54:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bb58:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800bb5c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bb60:	f04f 38ff 	mov.w	r8, #4294967295
 800bb64:	e7d4      	b.n	800bb10 <_strtod_l+0x8b8>
 800bb66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb68:	ea13 0f08 	tst.w	r3, r8
 800bb6c:	e7e0      	b.n	800bb30 <_strtod_l+0x8d8>
 800bb6e:	f7ff fb56 	bl	800b21e <sulp>
 800bb72:	4602      	mov	r2, r0
 800bb74:	460b      	mov	r3, r1
 800bb76:	ec51 0b18 	vmov	r0, r1, d8
 800bb7a:	f7f4 fb8d 	bl	8000298 <__aeabi_dsub>
 800bb7e:	2200      	movs	r2, #0
 800bb80:	2300      	movs	r3, #0
 800bb82:	4680      	mov	r8, r0
 800bb84:	4689      	mov	r9, r1
 800bb86:	f7f4 ffa7 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d0c0      	beq.n	800bb10 <_strtod_l+0x8b8>
 800bb8e:	e618      	b.n	800b7c2 <_strtod_l+0x56a>
 800bb90:	fffffc02 	.word	0xfffffc02
 800bb94:	7ff00000 	.word	0x7ff00000
 800bb98:	39500000 	.word	0x39500000
 800bb9c:	000fffff 	.word	0x000fffff
 800bba0:	7fefffff 	.word	0x7fefffff
 800bba4:	0800d3b8 	.word	0x0800d3b8
 800bba8:	4659      	mov	r1, fp
 800bbaa:	4628      	mov	r0, r5
 800bbac:	f7ff fac0 	bl	800b130 <__ratio>
 800bbb0:	ec57 6b10 	vmov	r6, r7, d0
 800bbb4:	ee10 0a10 	vmov	r0, s0
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bbbe:	4639      	mov	r1, r7
 800bbc0:	f7f4 ff9e 	bl	8000b00 <__aeabi_dcmple>
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d071      	beq.n	800bcac <_strtod_l+0xa54>
 800bbc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d17c      	bne.n	800bcc8 <_strtod_l+0xa70>
 800bbce:	f1b8 0f00 	cmp.w	r8, #0
 800bbd2:	d15a      	bne.n	800bc8a <_strtod_l+0xa32>
 800bbd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d15d      	bne.n	800bc98 <_strtod_l+0xa40>
 800bbdc:	4b90      	ldr	r3, [pc, #576]	; (800be20 <_strtod_l+0xbc8>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	4639      	mov	r1, r7
 800bbe4:	f7f4 ff82 	bl	8000aec <__aeabi_dcmplt>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	d15c      	bne.n	800bca6 <_strtod_l+0xa4e>
 800bbec:	4630      	mov	r0, r6
 800bbee:	4639      	mov	r1, r7
 800bbf0:	4b8c      	ldr	r3, [pc, #560]	; (800be24 <_strtod_l+0xbcc>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f7f4 fd08 	bl	8000608 <__aeabi_dmul>
 800bbf8:	4606      	mov	r6, r0
 800bbfa:	460f      	mov	r7, r1
 800bbfc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bc00:	9606      	str	r6, [sp, #24]
 800bc02:	9307      	str	r3, [sp, #28]
 800bc04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bc0c:	4b86      	ldr	r3, [pc, #536]	; (800be28 <_strtod_l+0xbd0>)
 800bc0e:	ea0a 0303 	and.w	r3, sl, r3
 800bc12:	930d      	str	r3, [sp, #52]	; 0x34
 800bc14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc16:	4b85      	ldr	r3, [pc, #532]	; (800be2c <_strtod_l+0xbd4>)
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	f040 8090 	bne.w	800bd3e <_strtod_l+0xae6>
 800bc1e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800bc22:	ec49 8b10 	vmov	d0, r8, r9
 800bc26:	f7ff f9b9 	bl	800af9c <__ulp>
 800bc2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc2e:	ec51 0b10 	vmov	r0, r1, d0
 800bc32:	f7f4 fce9 	bl	8000608 <__aeabi_dmul>
 800bc36:	4642      	mov	r2, r8
 800bc38:	464b      	mov	r3, r9
 800bc3a:	f7f4 fb2f 	bl	800029c <__adddf3>
 800bc3e:	460b      	mov	r3, r1
 800bc40:	4979      	ldr	r1, [pc, #484]	; (800be28 <_strtod_l+0xbd0>)
 800bc42:	4a7b      	ldr	r2, [pc, #492]	; (800be30 <_strtod_l+0xbd8>)
 800bc44:	4019      	ands	r1, r3
 800bc46:	4291      	cmp	r1, r2
 800bc48:	4680      	mov	r8, r0
 800bc4a:	d944      	bls.n	800bcd6 <_strtod_l+0xa7e>
 800bc4c:	ee18 2a90 	vmov	r2, s17
 800bc50:	4b78      	ldr	r3, [pc, #480]	; (800be34 <_strtod_l+0xbdc>)
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d104      	bne.n	800bc60 <_strtod_l+0xa08>
 800bc56:	ee18 3a10 	vmov	r3, s16
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	f43f ad40 	beq.w	800b6e0 <_strtod_l+0x488>
 800bc60:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800be34 <_strtod_l+0xbdc>
 800bc64:	f04f 38ff 	mov.w	r8, #4294967295
 800bc68:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	f7fe fe6a 	bl	800a944 <_Bfree>
 800bc70:	9905      	ldr	r1, [sp, #20]
 800bc72:	4620      	mov	r0, r4
 800bc74:	f7fe fe66 	bl	800a944 <_Bfree>
 800bc78:	4659      	mov	r1, fp
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f7fe fe62 	bl	800a944 <_Bfree>
 800bc80:	4629      	mov	r1, r5
 800bc82:	4620      	mov	r0, r4
 800bc84:	f7fe fe5e 	bl	800a944 <_Bfree>
 800bc88:	e609      	b.n	800b89e <_strtod_l+0x646>
 800bc8a:	f1b8 0f01 	cmp.w	r8, #1
 800bc8e:	d103      	bne.n	800bc98 <_strtod_l+0xa40>
 800bc90:	f1b9 0f00 	cmp.w	r9, #0
 800bc94:	f43f ad95 	beq.w	800b7c2 <_strtod_l+0x56a>
 800bc98:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800bdf0 <_strtod_l+0xb98>
 800bc9c:	4f60      	ldr	r7, [pc, #384]	; (800be20 <_strtod_l+0xbc8>)
 800bc9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bca2:	2600      	movs	r6, #0
 800bca4:	e7ae      	b.n	800bc04 <_strtod_l+0x9ac>
 800bca6:	4f5f      	ldr	r7, [pc, #380]	; (800be24 <_strtod_l+0xbcc>)
 800bca8:	2600      	movs	r6, #0
 800bcaa:	e7a7      	b.n	800bbfc <_strtod_l+0x9a4>
 800bcac:	4b5d      	ldr	r3, [pc, #372]	; (800be24 <_strtod_l+0xbcc>)
 800bcae:	4630      	mov	r0, r6
 800bcb0:	4639      	mov	r1, r7
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f7f4 fca8 	bl	8000608 <__aeabi_dmul>
 800bcb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcba:	4606      	mov	r6, r0
 800bcbc:	460f      	mov	r7, r1
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d09c      	beq.n	800bbfc <_strtod_l+0x9a4>
 800bcc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bcc6:	e79d      	b.n	800bc04 <_strtod_l+0x9ac>
 800bcc8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800bdf8 <_strtod_l+0xba0>
 800bccc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bcd0:	ec57 6b17 	vmov	r6, r7, d7
 800bcd4:	e796      	b.n	800bc04 <_strtod_l+0x9ac>
 800bcd6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800bcda:	9b04      	ldr	r3, [sp, #16]
 800bcdc:	46ca      	mov	sl, r9
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1c2      	bne.n	800bc68 <_strtod_l+0xa10>
 800bce2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bce6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bce8:	0d1b      	lsrs	r3, r3, #20
 800bcea:	051b      	lsls	r3, r3, #20
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d1bb      	bne.n	800bc68 <_strtod_l+0xa10>
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	4639      	mov	r1, r7
 800bcf4:	f7f4 ffe8 	bl	8000cc8 <__aeabi_d2lz>
 800bcf8:	f7f4 fc58 	bl	80005ac <__aeabi_l2d>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	460b      	mov	r3, r1
 800bd00:	4630      	mov	r0, r6
 800bd02:	4639      	mov	r1, r7
 800bd04:	f7f4 fac8 	bl	8000298 <__aeabi_dsub>
 800bd08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd0e:	ea43 0308 	orr.w	r3, r3, r8
 800bd12:	4313      	orrs	r3, r2
 800bd14:	4606      	mov	r6, r0
 800bd16:	460f      	mov	r7, r1
 800bd18:	d054      	beq.n	800bdc4 <_strtod_l+0xb6c>
 800bd1a:	a339      	add	r3, pc, #228	; (adr r3, 800be00 <_strtod_l+0xba8>)
 800bd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd20:	f7f4 fee4 	bl	8000aec <__aeabi_dcmplt>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	f47f ace5 	bne.w	800b6f4 <_strtod_l+0x49c>
 800bd2a:	a337      	add	r3, pc, #220	; (adr r3, 800be08 <_strtod_l+0xbb0>)
 800bd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd30:	4630      	mov	r0, r6
 800bd32:	4639      	mov	r1, r7
 800bd34:	f7f4 fef8 	bl	8000b28 <__aeabi_dcmpgt>
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	d095      	beq.n	800bc68 <_strtod_l+0xa10>
 800bd3c:	e4da      	b.n	800b6f4 <_strtod_l+0x49c>
 800bd3e:	9b04      	ldr	r3, [sp, #16]
 800bd40:	b333      	cbz	r3, 800bd90 <_strtod_l+0xb38>
 800bd42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd44:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bd48:	d822      	bhi.n	800bd90 <_strtod_l+0xb38>
 800bd4a:	a331      	add	r3, pc, #196	; (adr r3, 800be10 <_strtod_l+0xbb8>)
 800bd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd50:	4630      	mov	r0, r6
 800bd52:	4639      	mov	r1, r7
 800bd54:	f7f4 fed4 	bl	8000b00 <__aeabi_dcmple>
 800bd58:	b1a0      	cbz	r0, 800bd84 <_strtod_l+0xb2c>
 800bd5a:	4639      	mov	r1, r7
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	f7f4 ff2b 	bl	8000bb8 <__aeabi_d2uiz>
 800bd62:	2801      	cmp	r0, #1
 800bd64:	bf38      	it	cc
 800bd66:	2001      	movcc	r0, #1
 800bd68:	f7f4 fbd4 	bl	8000514 <__aeabi_ui2d>
 800bd6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd6e:	4606      	mov	r6, r0
 800bd70:	460f      	mov	r7, r1
 800bd72:	bb23      	cbnz	r3, 800bdbe <_strtod_l+0xb66>
 800bd74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd78:	9010      	str	r0, [sp, #64]	; 0x40
 800bd7a:	9311      	str	r3, [sp, #68]	; 0x44
 800bd7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bd80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bd84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd88:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bd8c:	1a9b      	subs	r3, r3, r2
 800bd8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd90:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bd94:	eeb0 0a48 	vmov.f32	s0, s16
 800bd98:	eef0 0a68 	vmov.f32	s1, s17
 800bd9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bda0:	f7ff f8fc 	bl	800af9c <__ulp>
 800bda4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bda8:	ec53 2b10 	vmov	r2, r3, d0
 800bdac:	f7f4 fc2c 	bl	8000608 <__aeabi_dmul>
 800bdb0:	ec53 2b18 	vmov	r2, r3, d8
 800bdb4:	f7f4 fa72 	bl	800029c <__adddf3>
 800bdb8:	4680      	mov	r8, r0
 800bdba:	4689      	mov	r9, r1
 800bdbc:	e78d      	b.n	800bcda <_strtod_l+0xa82>
 800bdbe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800bdc2:	e7db      	b.n	800bd7c <_strtod_l+0xb24>
 800bdc4:	a314      	add	r3, pc, #80	; (adr r3, 800be18 <_strtod_l+0xbc0>)
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	f7f4 fe8f 	bl	8000aec <__aeabi_dcmplt>
 800bdce:	e7b3      	b.n	800bd38 <_strtod_l+0xae0>
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	930a      	str	r3, [sp, #40]	; 0x28
 800bdd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bdd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdd8:	6013      	str	r3, [r2, #0]
 800bdda:	f7ff ba7c 	b.w	800b2d6 <_strtod_l+0x7e>
 800bdde:	2a65      	cmp	r2, #101	; 0x65
 800bde0:	f43f ab75 	beq.w	800b4ce <_strtod_l+0x276>
 800bde4:	2a45      	cmp	r2, #69	; 0x45
 800bde6:	f43f ab72 	beq.w	800b4ce <_strtod_l+0x276>
 800bdea:	2301      	movs	r3, #1
 800bdec:	f7ff bbaa 	b.w	800b544 <_strtod_l+0x2ec>
 800bdf0:	00000000 	.word	0x00000000
 800bdf4:	bff00000 	.word	0xbff00000
 800bdf8:	00000000 	.word	0x00000000
 800bdfc:	3ff00000 	.word	0x3ff00000
 800be00:	94a03595 	.word	0x94a03595
 800be04:	3fdfffff 	.word	0x3fdfffff
 800be08:	35afe535 	.word	0x35afe535
 800be0c:	3fe00000 	.word	0x3fe00000
 800be10:	ffc00000 	.word	0xffc00000
 800be14:	41dfffff 	.word	0x41dfffff
 800be18:	94a03595 	.word	0x94a03595
 800be1c:	3fcfffff 	.word	0x3fcfffff
 800be20:	3ff00000 	.word	0x3ff00000
 800be24:	3fe00000 	.word	0x3fe00000
 800be28:	7ff00000 	.word	0x7ff00000
 800be2c:	7fe00000 	.word	0x7fe00000
 800be30:	7c9fffff 	.word	0x7c9fffff
 800be34:	7fefffff 	.word	0x7fefffff

0800be38 <_strtod_r>:
 800be38:	4b01      	ldr	r3, [pc, #4]	; (800be40 <_strtod_r+0x8>)
 800be3a:	f7ff ba0d 	b.w	800b258 <_strtod_l>
 800be3e:	bf00      	nop
 800be40:	20000158 	.word	0x20000158

0800be44 <_strtol_l.constprop.0>:
 800be44:	2b01      	cmp	r3, #1
 800be46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be4a:	d001      	beq.n	800be50 <_strtol_l.constprop.0+0xc>
 800be4c:	2b24      	cmp	r3, #36	; 0x24
 800be4e:	d906      	bls.n	800be5e <_strtol_l.constprop.0+0x1a>
 800be50:	f7fd fd7e 	bl	8009950 <__errno>
 800be54:	2316      	movs	r3, #22
 800be56:	6003      	str	r3, [r0, #0]
 800be58:	2000      	movs	r0, #0
 800be5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bf44 <_strtol_l.constprop.0+0x100>
 800be62:	460d      	mov	r5, r1
 800be64:	462e      	mov	r6, r5
 800be66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be6a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800be6e:	f017 0708 	ands.w	r7, r7, #8
 800be72:	d1f7      	bne.n	800be64 <_strtol_l.constprop.0+0x20>
 800be74:	2c2d      	cmp	r4, #45	; 0x2d
 800be76:	d132      	bne.n	800bede <_strtol_l.constprop.0+0x9a>
 800be78:	782c      	ldrb	r4, [r5, #0]
 800be7a:	2701      	movs	r7, #1
 800be7c:	1cb5      	adds	r5, r6, #2
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d05b      	beq.n	800bf3a <_strtol_l.constprop.0+0xf6>
 800be82:	2b10      	cmp	r3, #16
 800be84:	d109      	bne.n	800be9a <_strtol_l.constprop.0+0x56>
 800be86:	2c30      	cmp	r4, #48	; 0x30
 800be88:	d107      	bne.n	800be9a <_strtol_l.constprop.0+0x56>
 800be8a:	782c      	ldrb	r4, [r5, #0]
 800be8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800be90:	2c58      	cmp	r4, #88	; 0x58
 800be92:	d14d      	bne.n	800bf30 <_strtol_l.constprop.0+0xec>
 800be94:	786c      	ldrb	r4, [r5, #1]
 800be96:	2310      	movs	r3, #16
 800be98:	3502      	adds	r5, #2
 800be9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800be9e:	f108 38ff 	add.w	r8, r8, #4294967295
 800bea2:	f04f 0e00 	mov.w	lr, #0
 800bea6:	fbb8 f9f3 	udiv	r9, r8, r3
 800beaa:	4676      	mov	r6, lr
 800beac:	fb03 8a19 	mls	sl, r3, r9, r8
 800beb0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800beb4:	f1bc 0f09 	cmp.w	ip, #9
 800beb8:	d816      	bhi.n	800bee8 <_strtol_l.constprop.0+0xa4>
 800beba:	4664      	mov	r4, ip
 800bebc:	42a3      	cmp	r3, r4
 800bebe:	dd24      	ble.n	800bf0a <_strtol_l.constprop.0+0xc6>
 800bec0:	f1be 3fff 	cmp.w	lr, #4294967295
 800bec4:	d008      	beq.n	800bed8 <_strtol_l.constprop.0+0x94>
 800bec6:	45b1      	cmp	r9, r6
 800bec8:	d31c      	bcc.n	800bf04 <_strtol_l.constprop.0+0xc0>
 800beca:	d101      	bne.n	800bed0 <_strtol_l.constprop.0+0x8c>
 800becc:	45a2      	cmp	sl, r4
 800bece:	db19      	blt.n	800bf04 <_strtol_l.constprop.0+0xc0>
 800bed0:	fb06 4603 	mla	r6, r6, r3, r4
 800bed4:	f04f 0e01 	mov.w	lr, #1
 800bed8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bedc:	e7e8      	b.n	800beb0 <_strtol_l.constprop.0+0x6c>
 800bede:	2c2b      	cmp	r4, #43	; 0x2b
 800bee0:	bf04      	itt	eq
 800bee2:	782c      	ldrbeq	r4, [r5, #0]
 800bee4:	1cb5      	addeq	r5, r6, #2
 800bee6:	e7ca      	b.n	800be7e <_strtol_l.constprop.0+0x3a>
 800bee8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800beec:	f1bc 0f19 	cmp.w	ip, #25
 800bef0:	d801      	bhi.n	800bef6 <_strtol_l.constprop.0+0xb2>
 800bef2:	3c37      	subs	r4, #55	; 0x37
 800bef4:	e7e2      	b.n	800bebc <_strtol_l.constprop.0+0x78>
 800bef6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800befa:	f1bc 0f19 	cmp.w	ip, #25
 800befe:	d804      	bhi.n	800bf0a <_strtol_l.constprop.0+0xc6>
 800bf00:	3c57      	subs	r4, #87	; 0x57
 800bf02:	e7db      	b.n	800bebc <_strtol_l.constprop.0+0x78>
 800bf04:	f04f 3eff 	mov.w	lr, #4294967295
 800bf08:	e7e6      	b.n	800bed8 <_strtol_l.constprop.0+0x94>
 800bf0a:	f1be 3fff 	cmp.w	lr, #4294967295
 800bf0e:	d105      	bne.n	800bf1c <_strtol_l.constprop.0+0xd8>
 800bf10:	2322      	movs	r3, #34	; 0x22
 800bf12:	6003      	str	r3, [r0, #0]
 800bf14:	4646      	mov	r6, r8
 800bf16:	b942      	cbnz	r2, 800bf2a <_strtol_l.constprop.0+0xe6>
 800bf18:	4630      	mov	r0, r6
 800bf1a:	e79e      	b.n	800be5a <_strtol_l.constprop.0+0x16>
 800bf1c:	b107      	cbz	r7, 800bf20 <_strtol_l.constprop.0+0xdc>
 800bf1e:	4276      	negs	r6, r6
 800bf20:	2a00      	cmp	r2, #0
 800bf22:	d0f9      	beq.n	800bf18 <_strtol_l.constprop.0+0xd4>
 800bf24:	f1be 0f00 	cmp.w	lr, #0
 800bf28:	d000      	beq.n	800bf2c <_strtol_l.constprop.0+0xe8>
 800bf2a:	1e69      	subs	r1, r5, #1
 800bf2c:	6011      	str	r1, [r2, #0]
 800bf2e:	e7f3      	b.n	800bf18 <_strtol_l.constprop.0+0xd4>
 800bf30:	2430      	movs	r4, #48	; 0x30
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d1b1      	bne.n	800be9a <_strtol_l.constprop.0+0x56>
 800bf36:	2308      	movs	r3, #8
 800bf38:	e7af      	b.n	800be9a <_strtol_l.constprop.0+0x56>
 800bf3a:	2c30      	cmp	r4, #48	; 0x30
 800bf3c:	d0a5      	beq.n	800be8a <_strtol_l.constprop.0+0x46>
 800bf3e:	230a      	movs	r3, #10
 800bf40:	e7ab      	b.n	800be9a <_strtol_l.constprop.0+0x56>
 800bf42:	bf00      	nop
 800bf44:	0800d3e1 	.word	0x0800d3e1

0800bf48 <_strtol_r>:
 800bf48:	f7ff bf7c 	b.w	800be44 <_strtol_l.constprop.0>

0800bf4c <__ssputs_r>:
 800bf4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf50:	688e      	ldr	r6, [r1, #8]
 800bf52:	461f      	mov	r7, r3
 800bf54:	42be      	cmp	r6, r7
 800bf56:	680b      	ldr	r3, [r1, #0]
 800bf58:	4682      	mov	sl, r0
 800bf5a:	460c      	mov	r4, r1
 800bf5c:	4690      	mov	r8, r2
 800bf5e:	d82c      	bhi.n	800bfba <__ssputs_r+0x6e>
 800bf60:	898a      	ldrh	r2, [r1, #12]
 800bf62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf66:	d026      	beq.n	800bfb6 <__ssputs_r+0x6a>
 800bf68:	6965      	ldr	r5, [r4, #20]
 800bf6a:	6909      	ldr	r1, [r1, #16]
 800bf6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf70:	eba3 0901 	sub.w	r9, r3, r1
 800bf74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf78:	1c7b      	adds	r3, r7, #1
 800bf7a:	444b      	add	r3, r9
 800bf7c:	106d      	asrs	r5, r5, #1
 800bf7e:	429d      	cmp	r5, r3
 800bf80:	bf38      	it	cc
 800bf82:	461d      	movcc	r5, r3
 800bf84:	0553      	lsls	r3, r2, #21
 800bf86:	d527      	bpl.n	800bfd8 <__ssputs_r+0x8c>
 800bf88:	4629      	mov	r1, r5
 800bf8a:	f7fe fc0f 	bl	800a7ac <_malloc_r>
 800bf8e:	4606      	mov	r6, r0
 800bf90:	b360      	cbz	r0, 800bfec <__ssputs_r+0xa0>
 800bf92:	6921      	ldr	r1, [r4, #16]
 800bf94:	464a      	mov	r2, r9
 800bf96:	f7fd fd07 	bl	80099a8 <memcpy>
 800bf9a:	89a3      	ldrh	r3, [r4, #12]
 800bf9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bfa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfa4:	81a3      	strh	r3, [r4, #12]
 800bfa6:	6126      	str	r6, [r4, #16]
 800bfa8:	6165      	str	r5, [r4, #20]
 800bfaa:	444e      	add	r6, r9
 800bfac:	eba5 0509 	sub.w	r5, r5, r9
 800bfb0:	6026      	str	r6, [r4, #0]
 800bfb2:	60a5      	str	r5, [r4, #8]
 800bfb4:	463e      	mov	r6, r7
 800bfb6:	42be      	cmp	r6, r7
 800bfb8:	d900      	bls.n	800bfbc <__ssputs_r+0x70>
 800bfba:	463e      	mov	r6, r7
 800bfbc:	6820      	ldr	r0, [r4, #0]
 800bfbe:	4632      	mov	r2, r6
 800bfc0:	4641      	mov	r1, r8
 800bfc2:	f000 fba3 	bl	800c70c <memmove>
 800bfc6:	68a3      	ldr	r3, [r4, #8]
 800bfc8:	1b9b      	subs	r3, r3, r6
 800bfca:	60a3      	str	r3, [r4, #8]
 800bfcc:	6823      	ldr	r3, [r4, #0]
 800bfce:	4433      	add	r3, r6
 800bfd0:	6023      	str	r3, [r4, #0]
 800bfd2:	2000      	movs	r0, #0
 800bfd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfd8:	462a      	mov	r2, r5
 800bfda:	f000 ff9a 	bl	800cf12 <_realloc_r>
 800bfde:	4606      	mov	r6, r0
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	d1e0      	bne.n	800bfa6 <__ssputs_r+0x5a>
 800bfe4:	6921      	ldr	r1, [r4, #16]
 800bfe6:	4650      	mov	r0, sl
 800bfe8:	f7fe fb6c 	bl	800a6c4 <_free_r>
 800bfec:	230c      	movs	r3, #12
 800bfee:	f8ca 3000 	str.w	r3, [sl]
 800bff2:	89a3      	ldrh	r3, [r4, #12]
 800bff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bff8:	81a3      	strh	r3, [r4, #12]
 800bffa:	f04f 30ff 	mov.w	r0, #4294967295
 800bffe:	e7e9      	b.n	800bfd4 <__ssputs_r+0x88>

0800c000 <_svfiprintf_r>:
 800c000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c004:	4698      	mov	r8, r3
 800c006:	898b      	ldrh	r3, [r1, #12]
 800c008:	061b      	lsls	r3, r3, #24
 800c00a:	b09d      	sub	sp, #116	; 0x74
 800c00c:	4607      	mov	r7, r0
 800c00e:	460d      	mov	r5, r1
 800c010:	4614      	mov	r4, r2
 800c012:	d50e      	bpl.n	800c032 <_svfiprintf_r+0x32>
 800c014:	690b      	ldr	r3, [r1, #16]
 800c016:	b963      	cbnz	r3, 800c032 <_svfiprintf_r+0x32>
 800c018:	2140      	movs	r1, #64	; 0x40
 800c01a:	f7fe fbc7 	bl	800a7ac <_malloc_r>
 800c01e:	6028      	str	r0, [r5, #0]
 800c020:	6128      	str	r0, [r5, #16]
 800c022:	b920      	cbnz	r0, 800c02e <_svfiprintf_r+0x2e>
 800c024:	230c      	movs	r3, #12
 800c026:	603b      	str	r3, [r7, #0]
 800c028:	f04f 30ff 	mov.w	r0, #4294967295
 800c02c:	e0d0      	b.n	800c1d0 <_svfiprintf_r+0x1d0>
 800c02e:	2340      	movs	r3, #64	; 0x40
 800c030:	616b      	str	r3, [r5, #20]
 800c032:	2300      	movs	r3, #0
 800c034:	9309      	str	r3, [sp, #36]	; 0x24
 800c036:	2320      	movs	r3, #32
 800c038:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c03c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c040:	2330      	movs	r3, #48	; 0x30
 800c042:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c1e8 <_svfiprintf_r+0x1e8>
 800c046:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c04a:	f04f 0901 	mov.w	r9, #1
 800c04e:	4623      	mov	r3, r4
 800c050:	469a      	mov	sl, r3
 800c052:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c056:	b10a      	cbz	r2, 800c05c <_svfiprintf_r+0x5c>
 800c058:	2a25      	cmp	r2, #37	; 0x25
 800c05a:	d1f9      	bne.n	800c050 <_svfiprintf_r+0x50>
 800c05c:	ebba 0b04 	subs.w	fp, sl, r4
 800c060:	d00b      	beq.n	800c07a <_svfiprintf_r+0x7a>
 800c062:	465b      	mov	r3, fp
 800c064:	4622      	mov	r2, r4
 800c066:	4629      	mov	r1, r5
 800c068:	4638      	mov	r0, r7
 800c06a:	f7ff ff6f 	bl	800bf4c <__ssputs_r>
 800c06e:	3001      	adds	r0, #1
 800c070:	f000 80a9 	beq.w	800c1c6 <_svfiprintf_r+0x1c6>
 800c074:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c076:	445a      	add	r2, fp
 800c078:	9209      	str	r2, [sp, #36]	; 0x24
 800c07a:	f89a 3000 	ldrb.w	r3, [sl]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f000 80a1 	beq.w	800c1c6 <_svfiprintf_r+0x1c6>
 800c084:	2300      	movs	r3, #0
 800c086:	f04f 32ff 	mov.w	r2, #4294967295
 800c08a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c08e:	f10a 0a01 	add.w	sl, sl, #1
 800c092:	9304      	str	r3, [sp, #16]
 800c094:	9307      	str	r3, [sp, #28]
 800c096:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c09a:	931a      	str	r3, [sp, #104]	; 0x68
 800c09c:	4654      	mov	r4, sl
 800c09e:	2205      	movs	r2, #5
 800c0a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0a4:	4850      	ldr	r0, [pc, #320]	; (800c1e8 <_svfiprintf_r+0x1e8>)
 800c0a6:	f7f4 f89b 	bl	80001e0 <memchr>
 800c0aa:	9a04      	ldr	r2, [sp, #16]
 800c0ac:	b9d8      	cbnz	r0, 800c0e6 <_svfiprintf_r+0xe6>
 800c0ae:	06d0      	lsls	r0, r2, #27
 800c0b0:	bf44      	itt	mi
 800c0b2:	2320      	movmi	r3, #32
 800c0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0b8:	0711      	lsls	r1, r2, #28
 800c0ba:	bf44      	itt	mi
 800c0bc:	232b      	movmi	r3, #43	; 0x2b
 800c0be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c0c6:	2b2a      	cmp	r3, #42	; 0x2a
 800c0c8:	d015      	beq.n	800c0f6 <_svfiprintf_r+0xf6>
 800c0ca:	9a07      	ldr	r2, [sp, #28]
 800c0cc:	4654      	mov	r4, sl
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	f04f 0c0a 	mov.w	ip, #10
 800c0d4:	4621      	mov	r1, r4
 800c0d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0da:	3b30      	subs	r3, #48	; 0x30
 800c0dc:	2b09      	cmp	r3, #9
 800c0de:	d94d      	bls.n	800c17c <_svfiprintf_r+0x17c>
 800c0e0:	b1b0      	cbz	r0, 800c110 <_svfiprintf_r+0x110>
 800c0e2:	9207      	str	r2, [sp, #28]
 800c0e4:	e014      	b.n	800c110 <_svfiprintf_r+0x110>
 800c0e6:	eba0 0308 	sub.w	r3, r0, r8
 800c0ea:	fa09 f303 	lsl.w	r3, r9, r3
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	9304      	str	r3, [sp, #16]
 800c0f2:	46a2      	mov	sl, r4
 800c0f4:	e7d2      	b.n	800c09c <_svfiprintf_r+0x9c>
 800c0f6:	9b03      	ldr	r3, [sp, #12]
 800c0f8:	1d19      	adds	r1, r3, #4
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	9103      	str	r1, [sp, #12]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	bfbb      	ittet	lt
 800c102:	425b      	neglt	r3, r3
 800c104:	f042 0202 	orrlt.w	r2, r2, #2
 800c108:	9307      	strge	r3, [sp, #28]
 800c10a:	9307      	strlt	r3, [sp, #28]
 800c10c:	bfb8      	it	lt
 800c10e:	9204      	strlt	r2, [sp, #16]
 800c110:	7823      	ldrb	r3, [r4, #0]
 800c112:	2b2e      	cmp	r3, #46	; 0x2e
 800c114:	d10c      	bne.n	800c130 <_svfiprintf_r+0x130>
 800c116:	7863      	ldrb	r3, [r4, #1]
 800c118:	2b2a      	cmp	r3, #42	; 0x2a
 800c11a:	d134      	bne.n	800c186 <_svfiprintf_r+0x186>
 800c11c:	9b03      	ldr	r3, [sp, #12]
 800c11e:	1d1a      	adds	r2, r3, #4
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	9203      	str	r2, [sp, #12]
 800c124:	2b00      	cmp	r3, #0
 800c126:	bfb8      	it	lt
 800c128:	f04f 33ff 	movlt.w	r3, #4294967295
 800c12c:	3402      	adds	r4, #2
 800c12e:	9305      	str	r3, [sp, #20]
 800c130:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c1f8 <_svfiprintf_r+0x1f8>
 800c134:	7821      	ldrb	r1, [r4, #0]
 800c136:	2203      	movs	r2, #3
 800c138:	4650      	mov	r0, sl
 800c13a:	f7f4 f851 	bl	80001e0 <memchr>
 800c13e:	b138      	cbz	r0, 800c150 <_svfiprintf_r+0x150>
 800c140:	9b04      	ldr	r3, [sp, #16]
 800c142:	eba0 000a 	sub.w	r0, r0, sl
 800c146:	2240      	movs	r2, #64	; 0x40
 800c148:	4082      	lsls	r2, r0
 800c14a:	4313      	orrs	r3, r2
 800c14c:	3401      	adds	r4, #1
 800c14e:	9304      	str	r3, [sp, #16]
 800c150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c154:	4825      	ldr	r0, [pc, #148]	; (800c1ec <_svfiprintf_r+0x1ec>)
 800c156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c15a:	2206      	movs	r2, #6
 800c15c:	f7f4 f840 	bl	80001e0 <memchr>
 800c160:	2800      	cmp	r0, #0
 800c162:	d038      	beq.n	800c1d6 <_svfiprintf_r+0x1d6>
 800c164:	4b22      	ldr	r3, [pc, #136]	; (800c1f0 <_svfiprintf_r+0x1f0>)
 800c166:	bb1b      	cbnz	r3, 800c1b0 <_svfiprintf_r+0x1b0>
 800c168:	9b03      	ldr	r3, [sp, #12]
 800c16a:	3307      	adds	r3, #7
 800c16c:	f023 0307 	bic.w	r3, r3, #7
 800c170:	3308      	adds	r3, #8
 800c172:	9303      	str	r3, [sp, #12]
 800c174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c176:	4433      	add	r3, r6
 800c178:	9309      	str	r3, [sp, #36]	; 0x24
 800c17a:	e768      	b.n	800c04e <_svfiprintf_r+0x4e>
 800c17c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c180:	460c      	mov	r4, r1
 800c182:	2001      	movs	r0, #1
 800c184:	e7a6      	b.n	800c0d4 <_svfiprintf_r+0xd4>
 800c186:	2300      	movs	r3, #0
 800c188:	3401      	adds	r4, #1
 800c18a:	9305      	str	r3, [sp, #20]
 800c18c:	4619      	mov	r1, r3
 800c18e:	f04f 0c0a 	mov.w	ip, #10
 800c192:	4620      	mov	r0, r4
 800c194:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c198:	3a30      	subs	r2, #48	; 0x30
 800c19a:	2a09      	cmp	r2, #9
 800c19c:	d903      	bls.n	800c1a6 <_svfiprintf_r+0x1a6>
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d0c6      	beq.n	800c130 <_svfiprintf_r+0x130>
 800c1a2:	9105      	str	r1, [sp, #20]
 800c1a4:	e7c4      	b.n	800c130 <_svfiprintf_r+0x130>
 800c1a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e7f0      	b.n	800c192 <_svfiprintf_r+0x192>
 800c1b0:	ab03      	add	r3, sp, #12
 800c1b2:	9300      	str	r3, [sp, #0]
 800c1b4:	462a      	mov	r2, r5
 800c1b6:	4b0f      	ldr	r3, [pc, #60]	; (800c1f4 <_svfiprintf_r+0x1f4>)
 800c1b8:	a904      	add	r1, sp, #16
 800c1ba:	4638      	mov	r0, r7
 800c1bc:	f7fc fb82 	bl	80088c4 <_printf_float>
 800c1c0:	1c42      	adds	r2, r0, #1
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	d1d6      	bne.n	800c174 <_svfiprintf_r+0x174>
 800c1c6:	89ab      	ldrh	r3, [r5, #12]
 800c1c8:	065b      	lsls	r3, r3, #25
 800c1ca:	f53f af2d 	bmi.w	800c028 <_svfiprintf_r+0x28>
 800c1ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1d0:	b01d      	add	sp, #116	; 0x74
 800c1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d6:	ab03      	add	r3, sp, #12
 800c1d8:	9300      	str	r3, [sp, #0]
 800c1da:	462a      	mov	r2, r5
 800c1dc:	4b05      	ldr	r3, [pc, #20]	; (800c1f4 <_svfiprintf_r+0x1f4>)
 800c1de:	a904      	add	r1, sp, #16
 800c1e0:	4638      	mov	r0, r7
 800c1e2:	f7fc fe13 	bl	8008e0c <_printf_i>
 800c1e6:	e7eb      	b.n	800c1c0 <_svfiprintf_r+0x1c0>
 800c1e8:	0800d4e1 	.word	0x0800d4e1
 800c1ec:	0800d4eb 	.word	0x0800d4eb
 800c1f0:	080088c5 	.word	0x080088c5
 800c1f4:	0800bf4d 	.word	0x0800bf4d
 800c1f8:	0800d4e7 	.word	0x0800d4e7

0800c1fc <__sfputc_r>:
 800c1fc:	6893      	ldr	r3, [r2, #8]
 800c1fe:	3b01      	subs	r3, #1
 800c200:	2b00      	cmp	r3, #0
 800c202:	b410      	push	{r4}
 800c204:	6093      	str	r3, [r2, #8]
 800c206:	da08      	bge.n	800c21a <__sfputc_r+0x1e>
 800c208:	6994      	ldr	r4, [r2, #24]
 800c20a:	42a3      	cmp	r3, r4
 800c20c:	db01      	blt.n	800c212 <__sfputc_r+0x16>
 800c20e:	290a      	cmp	r1, #10
 800c210:	d103      	bne.n	800c21a <__sfputc_r+0x1e>
 800c212:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c216:	f7fd bab4 	b.w	8009782 <__swbuf_r>
 800c21a:	6813      	ldr	r3, [r2, #0]
 800c21c:	1c58      	adds	r0, r3, #1
 800c21e:	6010      	str	r0, [r2, #0]
 800c220:	7019      	strb	r1, [r3, #0]
 800c222:	4608      	mov	r0, r1
 800c224:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c228:	4770      	bx	lr

0800c22a <__sfputs_r>:
 800c22a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22c:	4606      	mov	r6, r0
 800c22e:	460f      	mov	r7, r1
 800c230:	4614      	mov	r4, r2
 800c232:	18d5      	adds	r5, r2, r3
 800c234:	42ac      	cmp	r4, r5
 800c236:	d101      	bne.n	800c23c <__sfputs_r+0x12>
 800c238:	2000      	movs	r0, #0
 800c23a:	e007      	b.n	800c24c <__sfputs_r+0x22>
 800c23c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c240:	463a      	mov	r2, r7
 800c242:	4630      	mov	r0, r6
 800c244:	f7ff ffda 	bl	800c1fc <__sfputc_r>
 800c248:	1c43      	adds	r3, r0, #1
 800c24a:	d1f3      	bne.n	800c234 <__sfputs_r+0xa>
 800c24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c250 <_vfiprintf_r>:
 800c250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c254:	460d      	mov	r5, r1
 800c256:	b09d      	sub	sp, #116	; 0x74
 800c258:	4614      	mov	r4, r2
 800c25a:	4698      	mov	r8, r3
 800c25c:	4606      	mov	r6, r0
 800c25e:	b118      	cbz	r0, 800c268 <_vfiprintf_r+0x18>
 800c260:	6a03      	ldr	r3, [r0, #32]
 800c262:	b90b      	cbnz	r3, 800c268 <_vfiprintf_r+0x18>
 800c264:	f7fd f97e 	bl	8009564 <__sinit>
 800c268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c26a:	07d9      	lsls	r1, r3, #31
 800c26c:	d405      	bmi.n	800c27a <_vfiprintf_r+0x2a>
 800c26e:	89ab      	ldrh	r3, [r5, #12]
 800c270:	059a      	lsls	r2, r3, #22
 800c272:	d402      	bmi.n	800c27a <_vfiprintf_r+0x2a>
 800c274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c276:	f7fd fb95 	bl	80099a4 <__retarget_lock_acquire_recursive>
 800c27a:	89ab      	ldrh	r3, [r5, #12]
 800c27c:	071b      	lsls	r3, r3, #28
 800c27e:	d501      	bpl.n	800c284 <_vfiprintf_r+0x34>
 800c280:	692b      	ldr	r3, [r5, #16]
 800c282:	b99b      	cbnz	r3, 800c2ac <_vfiprintf_r+0x5c>
 800c284:	4629      	mov	r1, r5
 800c286:	4630      	mov	r0, r6
 800c288:	f7fd fab8 	bl	80097fc <__swsetup_r>
 800c28c:	b170      	cbz	r0, 800c2ac <_vfiprintf_r+0x5c>
 800c28e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c290:	07dc      	lsls	r4, r3, #31
 800c292:	d504      	bpl.n	800c29e <_vfiprintf_r+0x4e>
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	b01d      	add	sp, #116	; 0x74
 800c29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c29e:	89ab      	ldrh	r3, [r5, #12]
 800c2a0:	0598      	lsls	r0, r3, #22
 800c2a2:	d4f7      	bmi.n	800c294 <_vfiprintf_r+0x44>
 800c2a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2a6:	f7fd fb7e 	bl	80099a6 <__retarget_lock_release_recursive>
 800c2aa:	e7f3      	b.n	800c294 <_vfiprintf_r+0x44>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c2b0:	2320      	movs	r3, #32
 800c2b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2ba:	2330      	movs	r3, #48	; 0x30
 800c2bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c470 <_vfiprintf_r+0x220>
 800c2c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2c4:	f04f 0901 	mov.w	r9, #1
 800c2c8:	4623      	mov	r3, r4
 800c2ca:	469a      	mov	sl, r3
 800c2cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2d0:	b10a      	cbz	r2, 800c2d6 <_vfiprintf_r+0x86>
 800c2d2:	2a25      	cmp	r2, #37	; 0x25
 800c2d4:	d1f9      	bne.n	800c2ca <_vfiprintf_r+0x7a>
 800c2d6:	ebba 0b04 	subs.w	fp, sl, r4
 800c2da:	d00b      	beq.n	800c2f4 <_vfiprintf_r+0xa4>
 800c2dc:	465b      	mov	r3, fp
 800c2de:	4622      	mov	r2, r4
 800c2e0:	4629      	mov	r1, r5
 800c2e2:	4630      	mov	r0, r6
 800c2e4:	f7ff ffa1 	bl	800c22a <__sfputs_r>
 800c2e8:	3001      	adds	r0, #1
 800c2ea:	f000 80a9 	beq.w	800c440 <_vfiprintf_r+0x1f0>
 800c2ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2f0:	445a      	add	r2, fp
 800c2f2:	9209      	str	r2, [sp, #36]	; 0x24
 800c2f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	f000 80a1 	beq.w	800c440 <_vfiprintf_r+0x1f0>
 800c2fe:	2300      	movs	r3, #0
 800c300:	f04f 32ff 	mov.w	r2, #4294967295
 800c304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c308:	f10a 0a01 	add.w	sl, sl, #1
 800c30c:	9304      	str	r3, [sp, #16]
 800c30e:	9307      	str	r3, [sp, #28]
 800c310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c314:	931a      	str	r3, [sp, #104]	; 0x68
 800c316:	4654      	mov	r4, sl
 800c318:	2205      	movs	r2, #5
 800c31a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c31e:	4854      	ldr	r0, [pc, #336]	; (800c470 <_vfiprintf_r+0x220>)
 800c320:	f7f3 ff5e 	bl	80001e0 <memchr>
 800c324:	9a04      	ldr	r2, [sp, #16]
 800c326:	b9d8      	cbnz	r0, 800c360 <_vfiprintf_r+0x110>
 800c328:	06d1      	lsls	r1, r2, #27
 800c32a:	bf44      	itt	mi
 800c32c:	2320      	movmi	r3, #32
 800c32e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c332:	0713      	lsls	r3, r2, #28
 800c334:	bf44      	itt	mi
 800c336:	232b      	movmi	r3, #43	; 0x2b
 800c338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c33c:	f89a 3000 	ldrb.w	r3, [sl]
 800c340:	2b2a      	cmp	r3, #42	; 0x2a
 800c342:	d015      	beq.n	800c370 <_vfiprintf_r+0x120>
 800c344:	9a07      	ldr	r2, [sp, #28]
 800c346:	4654      	mov	r4, sl
 800c348:	2000      	movs	r0, #0
 800c34a:	f04f 0c0a 	mov.w	ip, #10
 800c34e:	4621      	mov	r1, r4
 800c350:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c354:	3b30      	subs	r3, #48	; 0x30
 800c356:	2b09      	cmp	r3, #9
 800c358:	d94d      	bls.n	800c3f6 <_vfiprintf_r+0x1a6>
 800c35a:	b1b0      	cbz	r0, 800c38a <_vfiprintf_r+0x13a>
 800c35c:	9207      	str	r2, [sp, #28]
 800c35e:	e014      	b.n	800c38a <_vfiprintf_r+0x13a>
 800c360:	eba0 0308 	sub.w	r3, r0, r8
 800c364:	fa09 f303 	lsl.w	r3, r9, r3
 800c368:	4313      	orrs	r3, r2
 800c36a:	9304      	str	r3, [sp, #16]
 800c36c:	46a2      	mov	sl, r4
 800c36e:	e7d2      	b.n	800c316 <_vfiprintf_r+0xc6>
 800c370:	9b03      	ldr	r3, [sp, #12]
 800c372:	1d19      	adds	r1, r3, #4
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	9103      	str	r1, [sp, #12]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	bfbb      	ittet	lt
 800c37c:	425b      	neglt	r3, r3
 800c37e:	f042 0202 	orrlt.w	r2, r2, #2
 800c382:	9307      	strge	r3, [sp, #28]
 800c384:	9307      	strlt	r3, [sp, #28]
 800c386:	bfb8      	it	lt
 800c388:	9204      	strlt	r2, [sp, #16]
 800c38a:	7823      	ldrb	r3, [r4, #0]
 800c38c:	2b2e      	cmp	r3, #46	; 0x2e
 800c38e:	d10c      	bne.n	800c3aa <_vfiprintf_r+0x15a>
 800c390:	7863      	ldrb	r3, [r4, #1]
 800c392:	2b2a      	cmp	r3, #42	; 0x2a
 800c394:	d134      	bne.n	800c400 <_vfiprintf_r+0x1b0>
 800c396:	9b03      	ldr	r3, [sp, #12]
 800c398:	1d1a      	adds	r2, r3, #4
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	9203      	str	r2, [sp, #12]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	bfb8      	it	lt
 800c3a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3a6:	3402      	adds	r4, #2
 800c3a8:	9305      	str	r3, [sp, #20]
 800c3aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c480 <_vfiprintf_r+0x230>
 800c3ae:	7821      	ldrb	r1, [r4, #0]
 800c3b0:	2203      	movs	r2, #3
 800c3b2:	4650      	mov	r0, sl
 800c3b4:	f7f3 ff14 	bl	80001e0 <memchr>
 800c3b8:	b138      	cbz	r0, 800c3ca <_vfiprintf_r+0x17a>
 800c3ba:	9b04      	ldr	r3, [sp, #16]
 800c3bc:	eba0 000a 	sub.w	r0, r0, sl
 800c3c0:	2240      	movs	r2, #64	; 0x40
 800c3c2:	4082      	lsls	r2, r0
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	3401      	adds	r4, #1
 800c3c8:	9304      	str	r3, [sp, #16]
 800c3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3ce:	4829      	ldr	r0, [pc, #164]	; (800c474 <_vfiprintf_r+0x224>)
 800c3d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3d4:	2206      	movs	r2, #6
 800c3d6:	f7f3 ff03 	bl	80001e0 <memchr>
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	d03f      	beq.n	800c45e <_vfiprintf_r+0x20e>
 800c3de:	4b26      	ldr	r3, [pc, #152]	; (800c478 <_vfiprintf_r+0x228>)
 800c3e0:	bb1b      	cbnz	r3, 800c42a <_vfiprintf_r+0x1da>
 800c3e2:	9b03      	ldr	r3, [sp, #12]
 800c3e4:	3307      	adds	r3, #7
 800c3e6:	f023 0307 	bic.w	r3, r3, #7
 800c3ea:	3308      	adds	r3, #8
 800c3ec:	9303      	str	r3, [sp, #12]
 800c3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3f0:	443b      	add	r3, r7
 800c3f2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3f4:	e768      	b.n	800c2c8 <_vfiprintf_r+0x78>
 800c3f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3fa:	460c      	mov	r4, r1
 800c3fc:	2001      	movs	r0, #1
 800c3fe:	e7a6      	b.n	800c34e <_vfiprintf_r+0xfe>
 800c400:	2300      	movs	r3, #0
 800c402:	3401      	adds	r4, #1
 800c404:	9305      	str	r3, [sp, #20]
 800c406:	4619      	mov	r1, r3
 800c408:	f04f 0c0a 	mov.w	ip, #10
 800c40c:	4620      	mov	r0, r4
 800c40e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c412:	3a30      	subs	r2, #48	; 0x30
 800c414:	2a09      	cmp	r2, #9
 800c416:	d903      	bls.n	800c420 <_vfiprintf_r+0x1d0>
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d0c6      	beq.n	800c3aa <_vfiprintf_r+0x15a>
 800c41c:	9105      	str	r1, [sp, #20]
 800c41e:	e7c4      	b.n	800c3aa <_vfiprintf_r+0x15a>
 800c420:	fb0c 2101 	mla	r1, ip, r1, r2
 800c424:	4604      	mov	r4, r0
 800c426:	2301      	movs	r3, #1
 800c428:	e7f0      	b.n	800c40c <_vfiprintf_r+0x1bc>
 800c42a:	ab03      	add	r3, sp, #12
 800c42c:	9300      	str	r3, [sp, #0]
 800c42e:	462a      	mov	r2, r5
 800c430:	4b12      	ldr	r3, [pc, #72]	; (800c47c <_vfiprintf_r+0x22c>)
 800c432:	a904      	add	r1, sp, #16
 800c434:	4630      	mov	r0, r6
 800c436:	f7fc fa45 	bl	80088c4 <_printf_float>
 800c43a:	4607      	mov	r7, r0
 800c43c:	1c78      	adds	r0, r7, #1
 800c43e:	d1d6      	bne.n	800c3ee <_vfiprintf_r+0x19e>
 800c440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c442:	07d9      	lsls	r1, r3, #31
 800c444:	d405      	bmi.n	800c452 <_vfiprintf_r+0x202>
 800c446:	89ab      	ldrh	r3, [r5, #12]
 800c448:	059a      	lsls	r2, r3, #22
 800c44a:	d402      	bmi.n	800c452 <_vfiprintf_r+0x202>
 800c44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c44e:	f7fd faaa 	bl	80099a6 <__retarget_lock_release_recursive>
 800c452:	89ab      	ldrh	r3, [r5, #12]
 800c454:	065b      	lsls	r3, r3, #25
 800c456:	f53f af1d 	bmi.w	800c294 <_vfiprintf_r+0x44>
 800c45a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c45c:	e71c      	b.n	800c298 <_vfiprintf_r+0x48>
 800c45e:	ab03      	add	r3, sp, #12
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	462a      	mov	r2, r5
 800c464:	4b05      	ldr	r3, [pc, #20]	; (800c47c <_vfiprintf_r+0x22c>)
 800c466:	a904      	add	r1, sp, #16
 800c468:	4630      	mov	r0, r6
 800c46a:	f7fc fccf 	bl	8008e0c <_printf_i>
 800c46e:	e7e4      	b.n	800c43a <_vfiprintf_r+0x1ea>
 800c470:	0800d4e1 	.word	0x0800d4e1
 800c474:	0800d4eb 	.word	0x0800d4eb
 800c478:	080088c5 	.word	0x080088c5
 800c47c:	0800c22b 	.word	0x0800c22b
 800c480:	0800d4e7 	.word	0x0800d4e7

0800c484 <__sflush_r>:
 800c484:	898a      	ldrh	r2, [r1, #12]
 800c486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c48a:	4605      	mov	r5, r0
 800c48c:	0710      	lsls	r0, r2, #28
 800c48e:	460c      	mov	r4, r1
 800c490:	d458      	bmi.n	800c544 <__sflush_r+0xc0>
 800c492:	684b      	ldr	r3, [r1, #4]
 800c494:	2b00      	cmp	r3, #0
 800c496:	dc05      	bgt.n	800c4a4 <__sflush_r+0x20>
 800c498:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	dc02      	bgt.n	800c4a4 <__sflush_r+0x20>
 800c49e:	2000      	movs	r0, #0
 800c4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4a6:	2e00      	cmp	r6, #0
 800c4a8:	d0f9      	beq.n	800c49e <__sflush_r+0x1a>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c4b0:	682f      	ldr	r7, [r5, #0]
 800c4b2:	6a21      	ldr	r1, [r4, #32]
 800c4b4:	602b      	str	r3, [r5, #0]
 800c4b6:	d032      	beq.n	800c51e <__sflush_r+0x9a>
 800c4b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c4ba:	89a3      	ldrh	r3, [r4, #12]
 800c4bc:	075a      	lsls	r2, r3, #29
 800c4be:	d505      	bpl.n	800c4cc <__sflush_r+0x48>
 800c4c0:	6863      	ldr	r3, [r4, #4]
 800c4c2:	1ac0      	subs	r0, r0, r3
 800c4c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4c6:	b10b      	cbz	r3, 800c4cc <__sflush_r+0x48>
 800c4c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c4ca:	1ac0      	subs	r0, r0, r3
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4d2:	6a21      	ldr	r1, [r4, #32]
 800c4d4:	4628      	mov	r0, r5
 800c4d6:	47b0      	blx	r6
 800c4d8:	1c43      	adds	r3, r0, #1
 800c4da:	89a3      	ldrh	r3, [r4, #12]
 800c4dc:	d106      	bne.n	800c4ec <__sflush_r+0x68>
 800c4de:	6829      	ldr	r1, [r5, #0]
 800c4e0:	291d      	cmp	r1, #29
 800c4e2:	d82b      	bhi.n	800c53c <__sflush_r+0xb8>
 800c4e4:	4a29      	ldr	r2, [pc, #164]	; (800c58c <__sflush_r+0x108>)
 800c4e6:	410a      	asrs	r2, r1
 800c4e8:	07d6      	lsls	r6, r2, #31
 800c4ea:	d427      	bmi.n	800c53c <__sflush_r+0xb8>
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	6062      	str	r2, [r4, #4]
 800c4f0:	04d9      	lsls	r1, r3, #19
 800c4f2:	6922      	ldr	r2, [r4, #16]
 800c4f4:	6022      	str	r2, [r4, #0]
 800c4f6:	d504      	bpl.n	800c502 <__sflush_r+0x7e>
 800c4f8:	1c42      	adds	r2, r0, #1
 800c4fa:	d101      	bne.n	800c500 <__sflush_r+0x7c>
 800c4fc:	682b      	ldr	r3, [r5, #0]
 800c4fe:	b903      	cbnz	r3, 800c502 <__sflush_r+0x7e>
 800c500:	6560      	str	r0, [r4, #84]	; 0x54
 800c502:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c504:	602f      	str	r7, [r5, #0]
 800c506:	2900      	cmp	r1, #0
 800c508:	d0c9      	beq.n	800c49e <__sflush_r+0x1a>
 800c50a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c50e:	4299      	cmp	r1, r3
 800c510:	d002      	beq.n	800c518 <__sflush_r+0x94>
 800c512:	4628      	mov	r0, r5
 800c514:	f7fe f8d6 	bl	800a6c4 <_free_r>
 800c518:	2000      	movs	r0, #0
 800c51a:	6360      	str	r0, [r4, #52]	; 0x34
 800c51c:	e7c0      	b.n	800c4a0 <__sflush_r+0x1c>
 800c51e:	2301      	movs	r3, #1
 800c520:	4628      	mov	r0, r5
 800c522:	47b0      	blx	r6
 800c524:	1c41      	adds	r1, r0, #1
 800c526:	d1c8      	bne.n	800c4ba <__sflush_r+0x36>
 800c528:	682b      	ldr	r3, [r5, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d0c5      	beq.n	800c4ba <__sflush_r+0x36>
 800c52e:	2b1d      	cmp	r3, #29
 800c530:	d001      	beq.n	800c536 <__sflush_r+0xb2>
 800c532:	2b16      	cmp	r3, #22
 800c534:	d101      	bne.n	800c53a <__sflush_r+0xb6>
 800c536:	602f      	str	r7, [r5, #0]
 800c538:	e7b1      	b.n	800c49e <__sflush_r+0x1a>
 800c53a:	89a3      	ldrh	r3, [r4, #12]
 800c53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c540:	81a3      	strh	r3, [r4, #12]
 800c542:	e7ad      	b.n	800c4a0 <__sflush_r+0x1c>
 800c544:	690f      	ldr	r7, [r1, #16]
 800c546:	2f00      	cmp	r7, #0
 800c548:	d0a9      	beq.n	800c49e <__sflush_r+0x1a>
 800c54a:	0793      	lsls	r3, r2, #30
 800c54c:	680e      	ldr	r6, [r1, #0]
 800c54e:	bf08      	it	eq
 800c550:	694b      	ldreq	r3, [r1, #20]
 800c552:	600f      	str	r7, [r1, #0]
 800c554:	bf18      	it	ne
 800c556:	2300      	movne	r3, #0
 800c558:	eba6 0807 	sub.w	r8, r6, r7
 800c55c:	608b      	str	r3, [r1, #8]
 800c55e:	f1b8 0f00 	cmp.w	r8, #0
 800c562:	dd9c      	ble.n	800c49e <__sflush_r+0x1a>
 800c564:	6a21      	ldr	r1, [r4, #32]
 800c566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c568:	4643      	mov	r3, r8
 800c56a:	463a      	mov	r2, r7
 800c56c:	4628      	mov	r0, r5
 800c56e:	47b0      	blx	r6
 800c570:	2800      	cmp	r0, #0
 800c572:	dc06      	bgt.n	800c582 <__sflush_r+0xfe>
 800c574:	89a3      	ldrh	r3, [r4, #12]
 800c576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c57a:	81a3      	strh	r3, [r4, #12]
 800c57c:	f04f 30ff 	mov.w	r0, #4294967295
 800c580:	e78e      	b.n	800c4a0 <__sflush_r+0x1c>
 800c582:	4407      	add	r7, r0
 800c584:	eba8 0800 	sub.w	r8, r8, r0
 800c588:	e7e9      	b.n	800c55e <__sflush_r+0xda>
 800c58a:	bf00      	nop
 800c58c:	dfbffffe 	.word	0xdfbffffe

0800c590 <_fflush_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	690b      	ldr	r3, [r1, #16]
 800c594:	4605      	mov	r5, r0
 800c596:	460c      	mov	r4, r1
 800c598:	b913      	cbnz	r3, 800c5a0 <_fflush_r+0x10>
 800c59a:	2500      	movs	r5, #0
 800c59c:	4628      	mov	r0, r5
 800c59e:	bd38      	pop	{r3, r4, r5, pc}
 800c5a0:	b118      	cbz	r0, 800c5aa <_fflush_r+0x1a>
 800c5a2:	6a03      	ldr	r3, [r0, #32]
 800c5a4:	b90b      	cbnz	r3, 800c5aa <_fflush_r+0x1a>
 800c5a6:	f7fc ffdd 	bl	8009564 <__sinit>
 800c5aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d0f3      	beq.n	800c59a <_fflush_r+0xa>
 800c5b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c5b4:	07d0      	lsls	r0, r2, #31
 800c5b6:	d404      	bmi.n	800c5c2 <_fflush_r+0x32>
 800c5b8:	0599      	lsls	r1, r3, #22
 800c5ba:	d402      	bmi.n	800c5c2 <_fflush_r+0x32>
 800c5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5be:	f7fd f9f1 	bl	80099a4 <__retarget_lock_acquire_recursive>
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	4621      	mov	r1, r4
 800c5c6:	f7ff ff5d 	bl	800c484 <__sflush_r>
 800c5ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5cc:	07da      	lsls	r2, r3, #31
 800c5ce:	4605      	mov	r5, r0
 800c5d0:	d4e4      	bmi.n	800c59c <_fflush_r+0xc>
 800c5d2:	89a3      	ldrh	r3, [r4, #12]
 800c5d4:	059b      	lsls	r3, r3, #22
 800c5d6:	d4e1      	bmi.n	800c59c <_fflush_r+0xc>
 800c5d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5da:	f7fd f9e4 	bl	80099a6 <__retarget_lock_release_recursive>
 800c5de:	e7dd      	b.n	800c59c <_fflush_r+0xc>

0800c5e0 <__swhatbuf_r>:
 800c5e0:	b570      	push	{r4, r5, r6, lr}
 800c5e2:	460c      	mov	r4, r1
 800c5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5e8:	2900      	cmp	r1, #0
 800c5ea:	b096      	sub	sp, #88	; 0x58
 800c5ec:	4615      	mov	r5, r2
 800c5ee:	461e      	mov	r6, r3
 800c5f0:	da0d      	bge.n	800c60e <__swhatbuf_r+0x2e>
 800c5f2:	89a3      	ldrh	r3, [r4, #12]
 800c5f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c5f8:	f04f 0100 	mov.w	r1, #0
 800c5fc:	bf0c      	ite	eq
 800c5fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c602:	2340      	movne	r3, #64	; 0x40
 800c604:	2000      	movs	r0, #0
 800c606:	6031      	str	r1, [r6, #0]
 800c608:	602b      	str	r3, [r5, #0]
 800c60a:	b016      	add	sp, #88	; 0x58
 800c60c:	bd70      	pop	{r4, r5, r6, pc}
 800c60e:	466a      	mov	r2, sp
 800c610:	f000 f8a8 	bl	800c764 <_fstat_r>
 800c614:	2800      	cmp	r0, #0
 800c616:	dbec      	blt.n	800c5f2 <__swhatbuf_r+0x12>
 800c618:	9901      	ldr	r1, [sp, #4]
 800c61a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c61e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c622:	4259      	negs	r1, r3
 800c624:	4159      	adcs	r1, r3
 800c626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c62a:	e7eb      	b.n	800c604 <__swhatbuf_r+0x24>

0800c62c <__smakebuf_r>:
 800c62c:	898b      	ldrh	r3, [r1, #12]
 800c62e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c630:	079d      	lsls	r5, r3, #30
 800c632:	4606      	mov	r6, r0
 800c634:	460c      	mov	r4, r1
 800c636:	d507      	bpl.n	800c648 <__smakebuf_r+0x1c>
 800c638:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c63c:	6023      	str	r3, [r4, #0]
 800c63e:	6123      	str	r3, [r4, #16]
 800c640:	2301      	movs	r3, #1
 800c642:	6163      	str	r3, [r4, #20]
 800c644:	b002      	add	sp, #8
 800c646:	bd70      	pop	{r4, r5, r6, pc}
 800c648:	ab01      	add	r3, sp, #4
 800c64a:	466a      	mov	r2, sp
 800c64c:	f7ff ffc8 	bl	800c5e0 <__swhatbuf_r>
 800c650:	9900      	ldr	r1, [sp, #0]
 800c652:	4605      	mov	r5, r0
 800c654:	4630      	mov	r0, r6
 800c656:	f7fe f8a9 	bl	800a7ac <_malloc_r>
 800c65a:	b948      	cbnz	r0, 800c670 <__smakebuf_r+0x44>
 800c65c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c660:	059a      	lsls	r2, r3, #22
 800c662:	d4ef      	bmi.n	800c644 <__smakebuf_r+0x18>
 800c664:	f023 0303 	bic.w	r3, r3, #3
 800c668:	f043 0302 	orr.w	r3, r3, #2
 800c66c:	81a3      	strh	r3, [r4, #12]
 800c66e:	e7e3      	b.n	800c638 <__smakebuf_r+0xc>
 800c670:	89a3      	ldrh	r3, [r4, #12]
 800c672:	6020      	str	r0, [r4, #0]
 800c674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c678:	81a3      	strh	r3, [r4, #12]
 800c67a:	9b00      	ldr	r3, [sp, #0]
 800c67c:	6163      	str	r3, [r4, #20]
 800c67e:	9b01      	ldr	r3, [sp, #4]
 800c680:	6120      	str	r0, [r4, #16]
 800c682:	b15b      	cbz	r3, 800c69c <__smakebuf_r+0x70>
 800c684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c688:	4630      	mov	r0, r6
 800c68a:	f000 f87d 	bl	800c788 <_isatty_r>
 800c68e:	b128      	cbz	r0, 800c69c <__smakebuf_r+0x70>
 800c690:	89a3      	ldrh	r3, [r4, #12]
 800c692:	f023 0303 	bic.w	r3, r3, #3
 800c696:	f043 0301 	orr.w	r3, r3, #1
 800c69a:	81a3      	strh	r3, [r4, #12]
 800c69c:	89a3      	ldrh	r3, [r4, #12]
 800c69e:	431d      	orrs	r5, r3
 800c6a0:	81a5      	strh	r5, [r4, #12]
 800c6a2:	e7cf      	b.n	800c644 <__smakebuf_r+0x18>

0800c6a4 <_putc_r>:
 800c6a4:	b570      	push	{r4, r5, r6, lr}
 800c6a6:	460d      	mov	r5, r1
 800c6a8:	4614      	mov	r4, r2
 800c6aa:	4606      	mov	r6, r0
 800c6ac:	b118      	cbz	r0, 800c6b6 <_putc_r+0x12>
 800c6ae:	6a03      	ldr	r3, [r0, #32]
 800c6b0:	b90b      	cbnz	r3, 800c6b6 <_putc_r+0x12>
 800c6b2:	f7fc ff57 	bl	8009564 <__sinit>
 800c6b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6b8:	07d8      	lsls	r0, r3, #31
 800c6ba:	d405      	bmi.n	800c6c8 <_putc_r+0x24>
 800c6bc:	89a3      	ldrh	r3, [r4, #12]
 800c6be:	0599      	lsls	r1, r3, #22
 800c6c0:	d402      	bmi.n	800c6c8 <_putc_r+0x24>
 800c6c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6c4:	f7fd f96e 	bl	80099a4 <__retarget_lock_acquire_recursive>
 800c6c8:	68a3      	ldr	r3, [r4, #8]
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	60a3      	str	r3, [r4, #8]
 800c6d0:	da05      	bge.n	800c6de <_putc_r+0x3a>
 800c6d2:	69a2      	ldr	r2, [r4, #24]
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	db12      	blt.n	800c6fe <_putc_r+0x5a>
 800c6d8:	b2eb      	uxtb	r3, r5
 800c6da:	2b0a      	cmp	r3, #10
 800c6dc:	d00f      	beq.n	800c6fe <_putc_r+0x5a>
 800c6de:	6823      	ldr	r3, [r4, #0]
 800c6e0:	1c5a      	adds	r2, r3, #1
 800c6e2:	6022      	str	r2, [r4, #0]
 800c6e4:	701d      	strb	r5, [r3, #0]
 800c6e6:	b2ed      	uxtb	r5, r5
 800c6e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6ea:	07da      	lsls	r2, r3, #31
 800c6ec:	d405      	bmi.n	800c6fa <_putc_r+0x56>
 800c6ee:	89a3      	ldrh	r3, [r4, #12]
 800c6f0:	059b      	lsls	r3, r3, #22
 800c6f2:	d402      	bmi.n	800c6fa <_putc_r+0x56>
 800c6f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6f6:	f7fd f956 	bl	80099a6 <__retarget_lock_release_recursive>
 800c6fa:	4628      	mov	r0, r5
 800c6fc:	bd70      	pop	{r4, r5, r6, pc}
 800c6fe:	4629      	mov	r1, r5
 800c700:	4622      	mov	r2, r4
 800c702:	4630      	mov	r0, r6
 800c704:	f7fd f83d 	bl	8009782 <__swbuf_r>
 800c708:	4605      	mov	r5, r0
 800c70a:	e7ed      	b.n	800c6e8 <_putc_r+0x44>

0800c70c <memmove>:
 800c70c:	4288      	cmp	r0, r1
 800c70e:	b510      	push	{r4, lr}
 800c710:	eb01 0402 	add.w	r4, r1, r2
 800c714:	d902      	bls.n	800c71c <memmove+0x10>
 800c716:	4284      	cmp	r4, r0
 800c718:	4623      	mov	r3, r4
 800c71a:	d807      	bhi.n	800c72c <memmove+0x20>
 800c71c:	1e43      	subs	r3, r0, #1
 800c71e:	42a1      	cmp	r1, r4
 800c720:	d008      	beq.n	800c734 <memmove+0x28>
 800c722:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c72a:	e7f8      	b.n	800c71e <memmove+0x12>
 800c72c:	4402      	add	r2, r0
 800c72e:	4601      	mov	r1, r0
 800c730:	428a      	cmp	r2, r1
 800c732:	d100      	bne.n	800c736 <memmove+0x2a>
 800c734:	bd10      	pop	{r4, pc}
 800c736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c73a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c73e:	e7f7      	b.n	800c730 <memmove+0x24>

0800c740 <strncmp>:
 800c740:	b510      	push	{r4, lr}
 800c742:	b16a      	cbz	r2, 800c760 <strncmp+0x20>
 800c744:	3901      	subs	r1, #1
 800c746:	1884      	adds	r4, r0, r2
 800c748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c74c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c750:	429a      	cmp	r2, r3
 800c752:	d103      	bne.n	800c75c <strncmp+0x1c>
 800c754:	42a0      	cmp	r0, r4
 800c756:	d001      	beq.n	800c75c <strncmp+0x1c>
 800c758:	2a00      	cmp	r2, #0
 800c75a:	d1f5      	bne.n	800c748 <strncmp+0x8>
 800c75c:	1ad0      	subs	r0, r2, r3
 800c75e:	bd10      	pop	{r4, pc}
 800c760:	4610      	mov	r0, r2
 800c762:	e7fc      	b.n	800c75e <strncmp+0x1e>

0800c764 <_fstat_r>:
 800c764:	b538      	push	{r3, r4, r5, lr}
 800c766:	4d07      	ldr	r5, [pc, #28]	; (800c784 <_fstat_r+0x20>)
 800c768:	2300      	movs	r3, #0
 800c76a:	4604      	mov	r4, r0
 800c76c:	4608      	mov	r0, r1
 800c76e:	4611      	mov	r1, r2
 800c770:	602b      	str	r3, [r5, #0]
 800c772:	f7f5 fa72 	bl	8001c5a <_fstat>
 800c776:	1c43      	adds	r3, r0, #1
 800c778:	d102      	bne.n	800c780 <_fstat_r+0x1c>
 800c77a:	682b      	ldr	r3, [r5, #0]
 800c77c:	b103      	cbz	r3, 800c780 <_fstat_r+0x1c>
 800c77e:	6023      	str	r3, [r4, #0]
 800c780:	bd38      	pop	{r3, r4, r5, pc}
 800c782:	bf00      	nop
 800c784:	20002394 	.word	0x20002394

0800c788 <_isatty_r>:
 800c788:	b538      	push	{r3, r4, r5, lr}
 800c78a:	4d06      	ldr	r5, [pc, #24]	; (800c7a4 <_isatty_r+0x1c>)
 800c78c:	2300      	movs	r3, #0
 800c78e:	4604      	mov	r4, r0
 800c790:	4608      	mov	r0, r1
 800c792:	602b      	str	r3, [r5, #0]
 800c794:	f7f5 fa71 	bl	8001c7a <_isatty>
 800c798:	1c43      	adds	r3, r0, #1
 800c79a:	d102      	bne.n	800c7a2 <_isatty_r+0x1a>
 800c79c:	682b      	ldr	r3, [r5, #0]
 800c79e:	b103      	cbz	r3, 800c7a2 <_isatty_r+0x1a>
 800c7a0:	6023      	str	r3, [r4, #0]
 800c7a2:	bd38      	pop	{r3, r4, r5, pc}
 800c7a4:	20002394 	.word	0x20002394

0800c7a8 <_sbrk_r>:
 800c7a8:	b538      	push	{r3, r4, r5, lr}
 800c7aa:	4d06      	ldr	r5, [pc, #24]	; (800c7c4 <_sbrk_r+0x1c>)
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	4608      	mov	r0, r1
 800c7b2:	602b      	str	r3, [r5, #0]
 800c7b4:	f7f5 fa7a 	bl	8001cac <_sbrk>
 800c7b8:	1c43      	adds	r3, r0, #1
 800c7ba:	d102      	bne.n	800c7c2 <_sbrk_r+0x1a>
 800c7bc:	682b      	ldr	r3, [r5, #0]
 800c7be:	b103      	cbz	r3, 800c7c2 <_sbrk_r+0x1a>
 800c7c0:	6023      	str	r3, [r4, #0]
 800c7c2:	bd38      	pop	{r3, r4, r5, pc}
 800c7c4:	20002394 	.word	0x20002394

0800c7c8 <nan>:
 800c7c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c7d0 <nan+0x8>
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	00000000 	.word	0x00000000
 800c7d4:	7ff80000 	.word	0x7ff80000

0800c7d8 <__assert_func>:
 800c7d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7da:	4614      	mov	r4, r2
 800c7dc:	461a      	mov	r2, r3
 800c7de:	4b09      	ldr	r3, [pc, #36]	; (800c804 <__assert_func+0x2c>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4605      	mov	r5, r0
 800c7e4:	68d8      	ldr	r0, [r3, #12]
 800c7e6:	b14c      	cbz	r4, 800c7fc <__assert_func+0x24>
 800c7e8:	4b07      	ldr	r3, [pc, #28]	; (800c808 <__assert_func+0x30>)
 800c7ea:	9100      	str	r1, [sp, #0]
 800c7ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7f0:	4906      	ldr	r1, [pc, #24]	; (800c80c <__assert_func+0x34>)
 800c7f2:	462b      	mov	r3, r5
 800c7f4:	f000 fbca 	bl	800cf8c <fiprintf>
 800c7f8:	f000 fbda 	bl	800cfb0 <abort>
 800c7fc:	4b04      	ldr	r3, [pc, #16]	; (800c810 <__assert_func+0x38>)
 800c7fe:	461c      	mov	r4, r3
 800c800:	e7f3      	b.n	800c7ea <__assert_func+0x12>
 800c802:	bf00      	nop
 800c804:	20000154 	.word	0x20000154
 800c808:	0800d4fa 	.word	0x0800d4fa
 800c80c:	0800d507 	.word	0x0800d507
 800c810:	0800d535 	.word	0x0800d535

0800c814 <_calloc_r>:
 800c814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c816:	fba1 2402 	umull	r2, r4, r1, r2
 800c81a:	b94c      	cbnz	r4, 800c830 <_calloc_r+0x1c>
 800c81c:	4611      	mov	r1, r2
 800c81e:	9201      	str	r2, [sp, #4]
 800c820:	f7fd ffc4 	bl	800a7ac <_malloc_r>
 800c824:	9a01      	ldr	r2, [sp, #4]
 800c826:	4605      	mov	r5, r0
 800c828:	b930      	cbnz	r0, 800c838 <_calloc_r+0x24>
 800c82a:	4628      	mov	r0, r5
 800c82c:	b003      	add	sp, #12
 800c82e:	bd30      	pop	{r4, r5, pc}
 800c830:	220c      	movs	r2, #12
 800c832:	6002      	str	r2, [r0, #0]
 800c834:	2500      	movs	r5, #0
 800c836:	e7f8      	b.n	800c82a <_calloc_r+0x16>
 800c838:	4621      	mov	r1, r4
 800c83a:	f7fd f837 	bl	80098ac <memset>
 800c83e:	e7f4      	b.n	800c82a <_calloc_r+0x16>

0800c840 <rshift>:
 800c840:	6903      	ldr	r3, [r0, #16]
 800c842:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c846:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c84a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c84e:	f100 0414 	add.w	r4, r0, #20
 800c852:	dd45      	ble.n	800c8e0 <rshift+0xa0>
 800c854:	f011 011f 	ands.w	r1, r1, #31
 800c858:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c85c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c860:	d10c      	bne.n	800c87c <rshift+0x3c>
 800c862:	f100 0710 	add.w	r7, r0, #16
 800c866:	4629      	mov	r1, r5
 800c868:	42b1      	cmp	r1, r6
 800c86a:	d334      	bcc.n	800c8d6 <rshift+0x96>
 800c86c:	1a9b      	subs	r3, r3, r2
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	1eea      	subs	r2, r5, #3
 800c872:	4296      	cmp	r6, r2
 800c874:	bf38      	it	cc
 800c876:	2300      	movcc	r3, #0
 800c878:	4423      	add	r3, r4
 800c87a:	e015      	b.n	800c8a8 <rshift+0x68>
 800c87c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c880:	f1c1 0820 	rsb	r8, r1, #32
 800c884:	40cf      	lsrs	r7, r1
 800c886:	f105 0e04 	add.w	lr, r5, #4
 800c88a:	46a1      	mov	r9, r4
 800c88c:	4576      	cmp	r6, lr
 800c88e:	46f4      	mov	ip, lr
 800c890:	d815      	bhi.n	800c8be <rshift+0x7e>
 800c892:	1a9a      	subs	r2, r3, r2
 800c894:	0092      	lsls	r2, r2, #2
 800c896:	3a04      	subs	r2, #4
 800c898:	3501      	adds	r5, #1
 800c89a:	42ae      	cmp	r6, r5
 800c89c:	bf38      	it	cc
 800c89e:	2200      	movcc	r2, #0
 800c8a0:	18a3      	adds	r3, r4, r2
 800c8a2:	50a7      	str	r7, [r4, r2]
 800c8a4:	b107      	cbz	r7, 800c8a8 <rshift+0x68>
 800c8a6:	3304      	adds	r3, #4
 800c8a8:	1b1a      	subs	r2, r3, r4
 800c8aa:	42a3      	cmp	r3, r4
 800c8ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c8b0:	bf08      	it	eq
 800c8b2:	2300      	moveq	r3, #0
 800c8b4:	6102      	str	r2, [r0, #16]
 800c8b6:	bf08      	it	eq
 800c8b8:	6143      	streq	r3, [r0, #20]
 800c8ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8be:	f8dc c000 	ldr.w	ip, [ip]
 800c8c2:	fa0c fc08 	lsl.w	ip, ip, r8
 800c8c6:	ea4c 0707 	orr.w	r7, ip, r7
 800c8ca:	f849 7b04 	str.w	r7, [r9], #4
 800c8ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c8d2:	40cf      	lsrs	r7, r1
 800c8d4:	e7da      	b.n	800c88c <rshift+0x4c>
 800c8d6:	f851 cb04 	ldr.w	ip, [r1], #4
 800c8da:	f847 cf04 	str.w	ip, [r7, #4]!
 800c8de:	e7c3      	b.n	800c868 <rshift+0x28>
 800c8e0:	4623      	mov	r3, r4
 800c8e2:	e7e1      	b.n	800c8a8 <rshift+0x68>

0800c8e4 <__hexdig_fun>:
 800c8e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c8e8:	2b09      	cmp	r3, #9
 800c8ea:	d802      	bhi.n	800c8f2 <__hexdig_fun+0xe>
 800c8ec:	3820      	subs	r0, #32
 800c8ee:	b2c0      	uxtb	r0, r0
 800c8f0:	4770      	bx	lr
 800c8f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c8f6:	2b05      	cmp	r3, #5
 800c8f8:	d801      	bhi.n	800c8fe <__hexdig_fun+0x1a>
 800c8fa:	3847      	subs	r0, #71	; 0x47
 800c8fc:	e7f7      	b.n	800c8ee <__hexdig_fun+0xa>
 800c8fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c902:	2b05      	cmp	r3, #5
 800c904:	d801      	bhi.n	800c90a <__hexdig_fun+0x26>
 800c906:	3827      	subs	r0, #39	; 0x27
 800c908:	e7f1      	b.n	800c8ee <__hexdig_fun+0xa>
 800c90a:	2000      	movs	r0, #0
 800c90c:	4770      	bx	lr
	...

0800c910 <__gethex>:
 800c910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c914:	4617      	mov	r7, r2
 800c916:	680a      	ldr	r2, [r1, #0]
 800c918:	b085      	sub	sp, #20
 800c91a:	f102 0b02 	add.w	fp, r2, #2
 800c91e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c922:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c926:	4681      	mov	r9, r0
 800c928:	468a      	mov	sl, r1
 800c92a:	9302      	str	r3, [sp, #8]
 800c92c:	32fe      	adds	r2, #254	; 0xfe
 800c92e:	eb02 030b 	add.w	r3, r2, fp
 800c932:	46d8      	mov	r8, fp
 800c934:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c938:	9301      	str	r3, [sp, #4]
 800c93a:	2830      	cmp	r0, #48	; 0x30
 800c93c:	d0f7      	beq.n	800c92e <__gethex+0x1e>
 800c93e:	f7ff ffd1 	bl	800c8e4 <__hexdig_fun>
 800c942:	4604      	mov	r4, r0
 800c944:	2800      	cmp	r0, #0
 800c946:	d138      	bne.n	800c9ba <__gethex+0xaa>
 800c948:	49a7      	ldr	r1, [pc, #668]	; (800cbe8 <__gethex+0x2d8>)
 800c94a:	2201      	movs	r2, #1
 800c94c:	4640      	mov	r0, r8
 800c94e:	f7ff fef7 	bl	800c740 <strncmp>
 800c952:	4606      	mov	r6, r0
 800c954:	2800      	cmp	r0, #0
 800c956:	d169      	bne.n	800ca2c <__gethex+0x11c>
 800c958:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c95c:	465d      	mov	r5, fp
 800c95e:	f7ff ffc1 	bl	800c8e4 <__hexdig_fun>
 800c962:	2800      	cmp	r0, #0
 800c964:	d064      	beq.n	800ca30 <__gethex+0x120>
 800c966:	465a      	mov	r2, fp
 800c968:	7810      	ldrb	r0, [r2, #0]
 800c96a:	2830      	cmp	r0, #48	; 0x30
 800c96c:	4690      	mov	r8, r2
 800c96e:	f102 0201 	add.w	r2, r2, #1
 800c972:	d0f9      	beq.n	800c968 <__gethex+0x58>
 800c974:	f7ff ffb6 	bl	800c8e4 <__hexdig_fun>
 800c978:	2301      	movs	r3, #1
 800c97a:	fab0 f480 	clz	r4, r0
 800c97e:	0964      	lsrs	r4, r4, #5
 800c980:	465e      	mov	r6, fp
 800c982:	9301      	str	r3, [sp, #4]
 800c984:	4642      	mov	r2, r8
 800c986:	4615      	mov	r5, r2
 800c988:	3201      	adds	r2, #1
 800c98a:	7828      	ldrb	r0, [r5, #0]
 800c98c:	f7ff ffaa 	bl	800c8e4 <__hexdig_fun>
 800c990:	2800      	cmp	r0, #0
 800c992:	d1f8      	bne.n	800c986 <__gethex+0x76>
 800c994:	4994      	ldr	r1, [pc, #592]	; (800cbe8 <__gethex+0x2d8>)
 800c996:	2201      	movs	r2, #1
 800c998:	4628      	mov	r0, r5
 800c99a:	f7ff fed1 	bl	800c740 <strncmp>
 800c99e:	b978      	cbnz	r0, 800c9c0 <__gethex+0xb0>
 800c9a0:	b946      	cbnz	r6, 800c9b4 <__gethex+0xa4>
 800c9a2:	1c6e      	adds	r6, r5, #1
 800c9a4:	4632      	mov	r2, r6
 800c9a6:	4615      	mov	r5, r2
 800c9a8:	3201      	adds	r2, #1
 800c9aa:	7828      	ldrb	r0, [r5, #0]
 800c9ac:	f7ff ff9a 	bl	800c8e4 <__hexdig_fun>
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	d1f8      	bne.n	800c9a6 <__gethex+0x96>
 800c9b4:	1b73      	subs	r3, r6, r5
 800c9b6:	009e      	lsls	r6, r3, #2
 800c9b8:	e004      	b.n	800c9c4 <__gethex+0xb4>
 800c9ba:	2400      	movs	r4, #0
 800c9bc:	4626      	mov	r6, r4
 800c9be:	e7e1      	b.n	800c984 <__gethex+0x74>
 800c9c0:	2e00      	cmp	r6, #0
 800c9c2:	d1f7      	bne.n	800c9b4 <__gethex+0xa4>
 800c9c4:	782b      	ldrb	r3, [r5, #0]
 800c9c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c9ca:	2b50      	cmp	r3, #80	; 0x50
 800c9cc:	d13d      	bne.n	800ca4a <__gethex+0x13a>
 800c9ce:	786b      	ldrb	r3, [r5, #1]
 800c9d0:	2b2b      	cmp	r3, #43	; 0x2b
 800c9d2:	d02f      	beq.n	800ca34 <__gethex+0x124>
 800c9d4:	2b2d      	cmp	r3, #45	; 0x2d
 800c9d6:	d031      	beq.n	800ca3c <__gethex+0x12c>
 800c9d8:	1c69      	adds	r1, r5, #1
 800c9da:	f04f 0b00 	mov.w	fp, #0
 800c9de:	7808      	ldrb	r0, [r1, #0]
 800c9e0:	f7ff ff80 	bl	800c8e4 <__hexdig_fun>
 800c9e4:	1e42      	subs	r2, r0, #1
 800c9e6:	b2d2      	uxtb	r2, r2
 800c9e8:	2a18      	cmp	r2, #24
 800c9ea:	d82e      	bhi.n	800ca4a <__gethex+0x13a>
 800c9ec:	f1a0 0210 	sub.w	r2, r0, #16
 800c9f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c9f4:	f7ff ff76 	bl	800c8e4 <__hexdig_fun>
 800c9f8:	f100 3cff 	add.w	ip, r0, #4294967295
 800c9fc:	fa5f fc8c 	uxtb.w	ip, ip
 800ca00:	f1bc 0f18 	cmp.w	ip, #24
 800ca04:	d91d      	bls.n	800ca42 <__gethex+0x132>
 800ca06:	f1bb 0f00 	cmp.w	fp, #0
 800ca0a:	d000      	beq.n	800ca0e <__gethex+0xfe>
 800ca0c:	4252      	negs	r2, r2
 800ca0e:	4416      	add	r6, r2
 800ca10:	f8ca 1000 	str.w	r1, [sl]
 800ca14:	b1dc      	cbz	r4, 800ca4e <__gethex+0x13e>
 800ca16:	9b01      	ldr	r3, [sp, #4]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	bf14      	ite	ne
 800ca1c:	f04f 0800 	movne.w	r8, #0
 800ca20:	f04f 0806 	moveq.w	r8, #6
 800ca24:	4640      	mov	r0, r8
 800ca26:	b005      	add	sp, #20
 800ca28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca2c:	4645      	mov	r5, r8
 800ca2e:	4626      	mov	r6, r4
 800ca30:	2401      	movs	r4, #1
 800ca32:	e7c7      	b.n	800c9c4 <__gethex+0xb4>
 800ca34:	f04f 0b00 	mov.w	fp, #0
 800ca38:	1ca9      	adds	r1, r5, #2
 800ca3a:	e7d0      	b.n	800c9de <__gethex+0xce>
 800ca3c:	f04f 0b01 	mov.w	fp, #1
 800ca40:	e7fa      	b.n	800ca38 <__gethex+0x128>
 800ca42:	230a      	movs	r3, #10
 800ca44:	fb03 0002 	mla	r0, r3, r2, r0
 800ca48:	e7d0      	b.n	800c9ec <__gethex+0xdc>
 800ca4a:	4629      	mov	r1, r5
 800ca4c:	e7e0      	b.n	800ca10 <__gethex+0x100>
 800ca4e:	eba5 0308 	sub.w	r3, r5, r8
 800ca52:	3b01      	subs	r3, #1
 800ca54:	4621      	mov	r1, r4
 800ca56:	2b07      	cmp	r3, #7
 800ca58:	dc0a      	bgt.n	800ca70 <__gethex+0x160>
 800ca5a:	4648      	mov	r0, r9
 800ca5c:	f7fd ff32 	bl	800a8c4 <_Balloc>
 800ca60:	4604      	mov	r4, r0
 800ca62:	b940      	cbnz	r0, 800ca76 <__gethex+0x166>
 800ca64:	4b61      	ldr	r3, [pc, #388]	; (800cbec <__gethex+0x2dc>)
 800ca66:	4602      	mov	r2, r0
 800ca68:	21e4      	movs	r1, #228	; 0xe4
 800ca6a:	4861      	ldr	r0, [pc, #388]	; (800cbf0 <__gethex+0x2e0>)
 800ca6c:	f7ff feb4 	bl	800c7d8 <__assert_func>
 800ca70:	3101      	adds	r1, #1
 800ca72:	105b      	asrs	r3, r3, #1
 800ca74:	e7ef      	b.n	800ca56 <__gethex+0x146>
 800ca76:	f100 0a14 	add.w	sl, r0, #20
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	495a      	ldr	r1, [pc, #360]	; (800cbe8 <__gethex+0x2d8>)
 800ca7e:	f8cd a004 	str.w	sl, [sp, #4]
 800ca82:	469b      	mov	fp, r3
 800ca84:	45a8      	cmp	r8, r5
 800ca86:	d342      	bcc.n	800cb0e <__gethex+0x1fe>
 800ca88:	9801      	ldr	r0, [sp, #4]
 800ca8a:	f840 bb04 	str.w	fp, [r0], #4
 800ca8e:	eba0 000a 	sub.w	r0, r0, sl
 800ca92:	1080      	asrs	r0, r0, #2
 800ca94:	6120      	str	r0, [r4, #16]
 800ca96:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ca9a:	4658      	mov	r0, fp
 800ca9c:	f7fe f804 	bl	800aaa8 <__hi0bits>
 800caa0:	683d      	ldr	r5, [r7, #0]
 800caa2:	eba8 0000 	sub.w	r0, r8, r0
 800caa6:	42a8      	cmp	r0, r5
 800caa8:	dd59      	ble.n	800cb5e <__gethex+0x24e>
 800caaa:	eba0 0805 	sub.w	r8, r0, r5
 800caae:	4641      	mov	r1, r8
 800cab0:	4620      	mov	r0, r4
 800cab2:	f7fe fb93 	bl	800b1dc <__any_on>
 800cab6:	4683      	mov	fp, r0
 800cab8:	b1b8      	cbz	r0, 800caea <__gethex+0x1da>
 800caba:	f108 33ff 	add.w	r3, r8, #4294967295
 800cabe:	1159      	asrs	r1, r3, #5
 800cac0:	f003 021f 	and.w	r2, r3, #31
 800cac4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cac8:	f04f 0b01 	mov.w	fp, #1
 800cacc:	fa0b f202 	lsl.w	r2, fp, r2
 800cad0:	420a      	tst	r2, r1
 800cad2:	d00a      	beq.n	800caea <__gethex+0x1da>
 800cad4:	455b      	cmp	r3, fp
 800cad6:	dd06      	ble.n	800cae6 <__gethex+0x1d6>
 800cad8:	f1a8 0102 	sub.w	r1, r8, #2
 800cadc:	4620      	mov	r0, r4
 800cade:	f7fe fb7d 	bl	800b1dc <__any_on>
 800cae2:	2800      	cmp	r0, #0
 800cae4:	d138      	bne.n	800cb58 <__gethex+0x248>
 800cae6:	f04f 0b02 	mov.w	fp, #2
 800caea:	4641      	mov	r1, r8
 800caec:	4620      	mov	r0, r4
 800caee:	f7ff fea7 	bl	800c840 <rshift>
 800caf2:	4446      	add	r6, r8
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	42b3      	cmp	r3, r6
 800caf8:	da41      	bge.n	800cb7e <__gethex+0x26e>
 800cafa:	4621      	mov	r1, r4
 800cafc:	4648      	mov	r0, r9
 800cafe:	f7fd ff21 	bl	800a944 <_Bfree>
 800cb02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb04:	2300      	movs	r3, #0
 800cb06:	6013      	str	r3, [r2, #0]
 800cb08:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800cb0c:	e78a      	b.n	800ca24 <__gethex+0x114>
 800cb0e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800cb12:	2a2e      	cmp	r2, #46	; 0x2e
 800cb14:	d014      	beq.n	800cb40 <__gethex+0x230>
 800cb16:	2b20      	cmp	r3, #32
 800cb18:	d106      	bne.n	800cb28 <__gethex+0x218>
 800cb1a:	9b01      	ldr	r3, [sp, #4]
 800cb1c:	f843 bb04 	str.w	fp, [r3], #4
 800cb20:	f04f 0b00 	mov.w	fp, #0
 800cb24:	9301      	str	r3, [sp, #4]
 800cb26:	465b      	mov	r3, fp
 800cb28:	7828      	ldrb	r0, [r5, #0]
 800cb2a:	9303      	str	r3, [sp, #12]
 800cb2c:	f7ff feda 	bl	800c8e4 <__hexdig_fun>
 800cb30:	9b03      	ldr	r3, [sp, #12]
 800cb32:	f000 000f 	and.w	r0, r0, #15
 800cb36:	4098      	lsls	r0, r3
 800cb38:	ea4b 0b00 	orr.w	fp, fp, r0
 800cb3c:	3304      	adds	r3, #4
 800cb3e:	e7a1      	b.n	800ca84 <__gethex+0x174>
 800cb40:	45a8      	cmp	r8, r5
 800cb42:	d8e8      	bhi.n	800cb16 <__gethex+0x206>
 800cb44:	2201      	movs	r2, #1
 800cb46:	4628      	mov	r0, r5
 800cb48:	9303      	str	r3, [sp, #12]
 800cb4a:	f7ff fdf9 	bl	800c740 <strncmp>
 800cb4e:	4926      	ldr	r1, [pc, #152]	; (800cbe8 <__gethex+0x2d8>)
 800cb50:	9b03      	ldr	r3, [sp, #12]
 800cb52:	2800      	cmp	r0, #0
 800cb54:	d1df      	bne.n	800cb16 <__gethex+0x206>
 800cb56:	e795      	b.n	800ca84 <__gethex+0x174>
 800cb58:	f04f 0b03 	mov.w	fp, #3
 800cb5c:	e7c5      	b.n	800caea <__gethex+0x1da>
 800cb5e:	da0b      	bge.n	800cb78 <__gethex+0x268>
 800cb60:	eba5 0800 	sub.w	r8, r5, r0
 800cb64:	4621      	mov	r1, r4
 800cb66:	4642      	mov	r2, r8
 800cb68:	4648      	mov	r0, r9
 800cb6a:	f7fe f905 	bl	800ad78 <__lshift>
 800cb6e:	eba6 0608 	sub.w	r6, r6, r8
 800cb72:	4604      	mov	r4, r0
 800cb74:	f100 0a14 	add.w	sl, r0, #20
 800cb78:	f04f 0b00 	mov.w	fp, #0
 800cb7c:	e7ba      	b.n	800caf4 <__gethex+0x1e4>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	42b3      	cmp	r3, r6
 800cb82:	dd73      	ble.n	800cc6c <__gethex+0x35c>
 800cb84:	1b9e      	subs	r6, r3, r6
 800cb86:	42b5      	cmp	r5, r6
 800cb88:	dc34      	bgt.n	800cbf4 <__gethex+0x2e4>
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2b02      	cmp	r3, #2
 800cb8e:	d023      	beq.n	800cbd8 <__gethex+0x2c8>
 800cb90:	2b03      	cmp	r3, #3
 800cb92:	d025      	beq.n	800cbe0 <__gethex+0x2d0>
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d115      	bne.n	800cbc4 <__gethex+0x2b4>
 800cb98:	42b5      	cmp	r5, r6
 800cb9a:	d113      	bne.n	800cbc4 <__gethex+0x2b4>
 800cb9c:	2d01      	cmp	r5, #1
 800cb9e:	d10b      	bne.n	800cbb8 <__gethex+0x2a8>
 800cba0:	9a02      	ldr	r2, [sp, #8]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6013      	str	r3, [r2, #0]
 800cba6:	2301      	movs	r3, #1
 800cba8:	6123      	str	r3, [r4, #16]
 800cbaa:	f8ca 3000 	str.w	r3, [sl]
 800cbae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbb0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cbb4:	601c      	str	r4, [r3, #0]
 800cbb6:	e735      	b.n	800ca24 <__gethex+0x114>
 800cbb8:	1e69      	subs	r1, r5, #1
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f7fe fb0e 	bl	800b1dc <__any_on>
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	d1ed      	bne.n	800cba0 <__gethex+0x290>
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	4648      	mov	r0, r9
 800cbc8:	f7fd febc 	bl	800a944 <_Bfree>
 800cbcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbce:	2300      	movs	r3, #0
 800cbd0:	6013      	str	r3, [r2, #0]
 800cbd2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cbd6:	e725      	b.n	800ca24 <__gethex+0x114>
 800cbd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d1f2      	bne.n	800cbc4 <__gethex+0x2b4>
 800cbde:	e7df      	b.n	800cba0 <__gethex+0x290>
 800cbe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d1dc      	bne.n	800cba0 <__gethex+0x290>
 800cbe6:	e7ed      	b.n	800cbc4 <__gethex+0x2b4>
 800cbe8:	0800d38c 	.word	0x0800d38c
 800cbec:	0800d221 	.word	0x0800d221
 800cbf0:	0800d536 	.word	0x0800d536
 800cbf4:	f106 38ff 	add.w	r8, r6, #4294967295
 800cbf8:	f1bb 0f00 	cmp.w	fp, #0
 800cbfc:	d133      	bne.n	800cc66 <__gethex+0x356>
 800cbfe:	f1b8 0f00 	cmp.w	r8, #0
 800cc02:	d004      	beq.n	800cc0e <__gethex+0x2fe>
 800cc04:	4641      	mov	r1, r8
 800cc06:	4620      	mov	r0, r4
 800cc08:	f7fe fae8 	bl	800b1dc <__any_on>
 800cc0c:	4683      	mov	fp, r0
 800cc0e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800cc12:	2301      	movs	r3, #1
 800cc14:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cc18:	f008 081f 	and.w	r8, r8, #31
 800cc1c:	fa03 f308 	lsl.w	r3, r3, r8
 800cc20:	4213      	tst	r3, r2
 800cc22:	4631      	mov	r1, r6
 800cc24:	4620      	mov	r0, r4
 800cc26:	bf18      	it	ne
 800cc28:	f04b 0b02 	orrne.w	fp, fp, #2
 800cc2c:	1bad      	subs	r5, r5, r6
 800cc2e:	f7ff fe07 	bl	800c840 <rshift>
 800cc32:	687e      	ldr	r6, [r7, #4]
 800cc34:	f04f 0802 	mov.w	r8, #2
 800cc38:	f1bb 0f00 	cmp.w	fp, #0
 800cc3c:	d04a      	beq.n	800ccd4 <__gethex+0x3c4>
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2b02      	cmp	r3, #2
 800cc42:	d016      	beq.n	800cc72 <__gethex+0x362>
 800cc44:	2b03      	cmp	r3, #3
 800cc46:	d018      	beq.n	800cc7a <__gethex+0x36a>
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d109      	bne.n	800cc60 <__gethex+0x350>
 800cc4c:	f01b 0f02 	tst.w	fp, #2
 800cc50:	d006      	beq.n	800cc60 <__gethex+0x350>
 800cc52:	f8da 3000 	ldr.w	r3, [sl]
 800cc56:	ea4b 0b03 	orr.w	fp, fp, r3
 800cc5a:	f01b 0f01 	tst.w	fp, #1
 800cc5e:	d10f      	bne.n	800cc80 <__gethex+0x370>
 800cc60:	f048 0810 	orr.w	r8, r8, #16
 800cc64:	e036      	b.n	800ccd4 <__gethex+0x3c4>
 800cc66:	f04f 0b01 	mov.w	fp, #1
 800cc6a:	e7d0      	b.n	800cc0e <__gethex+0x2fe>
 800cc6c:	f04f 0801 	mov.w	r8, #1
 800cc70:	e7e2      	b.n	800cc38 <__gethex+0x328>
 800cc72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc74:	f1c3 0301 	rsb	r3, r3, #1
 800cc78:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d0ef      	beq.n	800cc60 <__gethex+0x350>
 800cc80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc84:	f104 0214 	add.w	r2, r4, #20
 800cc88:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800cc8c:	9301      	str	r3, [sp, #4]
 800cc8e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800cc92:	2300      	movs	r3, #0
 800cc94:	4694      	mov	ip, r2
 800cc96:	f852 1b04 	ldr.w	r1, [r2], #4
 800cc9a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cc9e:	d01e      	beq.n	800ccde <__gethex+0x3ce>
 800cca0:	3101      	adds	r1, #1
 800cca2:	f8cc 1000 	str.w	r1, [ip]
 800cca6:	f1b8 0f02 	cmp.w	r8, #2
 800ccaa:	f104 0214 	add.w	r2, r4, #20
 800ccae:	d13d      	bne.n	800cd2c <__gethex+0x41c>
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	3b01      	subs	r3, #1
 800ccb4:	42ab      	cmp	r3, r5
 800ccb6:	d10b      	bne.n	800ccd0 <__gethex+0x3c0>
 800ccb8:	1169      	asrs	r1, r5, #5
 800ccba:	2301      	movs	r3, #1
 800ccbc:	f005 051f 	and.w	r5, r5, #31
 800ccc0:	fa03 f505 	lsl.w	r5, r3, r5
 800ccc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ccc8:	421d      	tst	r5, r3
 800ccca:	bf18      	it	ne
 800cccc:	f04f 0801 	movne.w	r8, #1
 800ccd0:	f048 0820 	orr.w	r8, r8, #32
 800ccd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ccd6:	601c      	str	r4, [r3, #0]
 800ccd8:	9b02      	ldr	r3, [sp, #8]
 800ccda:	601e      	str	r6, [r3, #0]
 800ccdc:	e6a2      	b.n	800ca24 <__gethex+0x114>
 800ccde:	4290      	cmp	r0, r2
 800cce0:	f842 3c04 	str.w	r3, [r2, #-4]
 800cce4:	d8d6      	bhi.n	800cc94 <__gethex+0x384>
 800cce6:	68a2      	ldr	r2, [r4, #8]
 800cce8:	4593      	cmp	fp, r2
 800ccea:	db17      	blt.n	800cd1c <__gethex+0x40c>
 800ccec:	6861      	ldr	r1, [r4, #4]
 800ccee:	4648      	mov	r0, r9
 800ccf0:	3101      	adds	r1, #1
 800ccf2:	f7fd fde7 	bl	800a8c4 <_Balloc>
 800ccf6:	4682      	mov	sl, r0
 800ccf8:	b918      	cbnz	r0, 800cd02 <__gethex+0x3f2>
 800ccfa:	4b1b      	ldr	r3, [pc, #108]	; (800cd68 <__gethex+0x458>)
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	2184      	movs	r1, #132	; 0x84
 800cd00:	e6b3      	b.n	800ca6a <__gethex+0x15a>
 800cd02:	6922      	ldr	r2, [r4, #16]
 800cd04:	3202      	adds	r2, #2
 800cd06:	f104 010c 	add.w	r1, r4, #12
 800cd0a:	0092      	lsls	r2, r2, #2
 800cd0c:	300c      	adds	r0, #12
 800cd0e:	f7fc fe4b 	bl	80099a8 <memcpy>
 800cd12:	4621      	mov	r1, r4
 800cd14:	4648      	mov	r0, r9
 800cd16:	f7fd fe15 	bl	800a944 <_Bfree>
 800cd1a:	4654      	mov	r4, sl
 800cd1c:	6922      	ldr	r2, [r4, #16]
 800cd1e:	1c51      	adds	r1, r2, #1
 800cd20:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cd24:	6121      	str	r1, [r4, #16]
 800cd26:	2101      	movs	r1, #1
 800cd28:	6151      	str	r1, [r2, #20]
 800cd2a:	e7bc      	b.n	800cca6 <__gethex+0x396>
 800cd2c:	6921      	ldr	r1, [r4, #16]
 800cd2e:	4559      	cmp	r1, fp
 800cd30:	dd0b      	ble.n	800cd4a <__gethex+0x43a>
 800cd32:	2101      	movs	r1, #1
 800cd34:	4620      	mov	r0, r4
 800cd36:	f7ff fd83 	bl	800c840 <rshift>
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	3601      	adds	r6, #1
 800cd3e:	42b3      	cmp	r3, r6
 800cd40:	f6ff aedb 	blt.w	800cafa <__gethex+0x1ea>
 800cd44:	f04f 0801 	mov.w	r8, #1
 800cd48:	e7c2      	b.n	800ccd0 <__gethex+0x3c0>
 800cd4a:	f015 051f 	ands.w	r5, r5, #31
 800cd4e:	d0f9      	beq.n	800cd44 <__gethex+0x434>
 800cd50:	9b01      	ldr	r3, [sp, #4]
 800cd52:	441a      	add	r2, r3
 800cd54:	f1c5 0520 	rsb	r5, r5, #32
 800cd58:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800cd5c:	f7fd fea4 	bl	800aaa8 <__hi0bits>
 800cd60:	42a8      	cmp	r0, r5
 800cd62:	dbe6      	blt.n	800cd32 <__gethex+0x422>
 800cd64:	e7ee      	b.n	800cd44 <__gethex+0x434>
 800cd66:	bf00      	nop
 800cd68:	0800d221 	.word	0x0800d221

0800cd6c <L_shift>:
 800cd6c:	f1c2 0208 	rsb	r2, r2, #8
 800cd70:	0092      	lsls	r2, r2, #2
 800cd72:	b570      	push	{r4, r5, r6, lr}
 800cd74:	f1c2 0620 	rsb	r6, r2, #32
 800cd78:	6843      	ldr	r3, [r0, #4]
 800cd7a:	6804      	ldr	r4, [r0, #0]
 800cd7c:	fa03 f506 	lsl.w	r5, r3, r6
 800cd80:	432c      	orrs	r4, r5
 800cd82:	40d3      	lsrs	r3, r2
 800cd84:	6004      	str	r4, [r0, #0]
 800cd86:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd8a:	4288      	cmp	r0, r1
 800cd8c:	d3f4      	bcc.n	800cd78 <L_shift+0xc>
 800cd8e:	bd70      	pop	{r4, r5, r6, pc}

0800cd90 <__match>:
 800cd90:	b530      	push	{r4, r5, lr}
 800cd92:	6803      	ldr	r3, [r0, #0]
 800cd94:	3301      	adds	r3, #1
 800cd96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd9a:	b914      	cbnz	r4, 800cda2 <__match+0x12>
 800cd9c:	6003      	str	r3, [r0, #0]
 800cd9e:	2001      	movs	r0, #1
 800cda0:	bd30      	pop	{r4, r5, pc}
 800cda2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cda6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cdaa:	2d19      	cmp	r5, #25
 800cdac:	bf98      	it	ls
 800cdae:	3220      	addls	r2, #32
 800cdb0:	42a2      	cmp	r2, r4
 800cdb2:	d0f0      	beq.n	800cd96 <__match+0x6>
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	e7f3      	b.n	800cda0 <__match+0x10>

0800cdb8 <__hexnan>:
 800cdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdbc:	680b      	ldr	r3, [r1, #0]
 800cdbe:	6801      	ldr	r1, [r0, #0]
 800cdc0:	115e      	asrs	r6, r3, #5
 800cdc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cdc6:	f013 031f 	ands.w	r3, r3, #31
 800cdca:	b087      	sub	sp, #28
 800cdcc:	bf18      	it	ne
 800cdce:	3604      	addne	r6, #4
 800cdd0:	2500      	movs	r5, #0
 800cdd2:	1f37      	subs	r7, r6, #4
 800cdd4:	4682      	mov	sl, r0
 800cdd6:	4690      	mov	r8, r2
 800cdd8:	9301      	str	r3, [sp, #4]
 800cdda:	f846 5c04 	str.w	r5, [r6, #-4]
 800cdde:	46b9      	mov	r9, r7
 800cde0:	463c      	mov	r4, r7
 800cde2:	9502      	str	r5, [sp, #8]
 800cde4:	46ab      	mov	fp, r5
 800cde6:	784a      	ldrb	r2, [r1, #1]
 800cde8:	1c4b      	adds	r3, r1, #1
 800cdea:	9303      	str	r3, [sp, #12]
 800cdec:	b342      	cbz	r2, 800ce40 <__hexnan+0x88>
 800cdee:	4610      	mov	r0, r2
 800cdf0:	9105      	str	r1, [sp, #20]
 800cdf2:	9204      	str	r2, [sp, #16]
 800cdf4:	f7ff fd76 	bl	800c8e4 <__hexdig_fun>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d14f      	bne.n	800ce9c <__hexnan+0xe4>
 800cdfc:	9a04      	ldr	r2, [sp, #16]
 800cdfe:	9905      	ldr	r1, [sp, #20]
 800ce00:	2a20      	cmp	r2, #32
 800ce02:	d818      	bhi.n	800ce36 <__hexnan+0x7e>
 800ce04:	9b02      	ldr	r3, [sp, #8]
 800ce06:	459b      	cmp	fp, r3
 800ce08:	dd13      	ble.n	800ce32 <__hexnan+0x7a>
 800ce0a:	454c      	cmp	r4, r9
 800ce0c:	d206      	bcs.n	800ce1c <__hexnan+0x64>
 800ce0e:	2d07      	cmp	r5, #7
 800ce10:	dc04      	bgt.n	800ce1c <__hexnan+0x64>
 800ce12:	462a      	mov	r2, r5
 800ce14:	4649      	mov	r1, r9
 800ce16:	4620      	mov	r0, r4
 800ce18:	f7ff ffa8 	bl	800cd6c <L_shift>
 800ce1c:	4544      	cmp	r4, r8
 800ce1e:	d950      	bls.n	800cec2 <__hexnan+0x10a>
 800ce20:	2300      	movs	r3, #0
 800ce22:	f1a4 0904 	sub.w	r9, r4, #4
 800ce26:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce2a:	f8cd b008 	str.w	fp, [sp, #8]
 800ce2e:	464c      	mov	r4, r9
 800ce30:	461d      	mov	r5, r3
 800ce32:	9903      	ldr	r1, [sp, #12]
 800ce34:	e7d7      	b.n	800cde6 <__hexnan+0x2e>
 800ce36:	2a29      	cmp	r2, #41	; 0x29
 800ce38:	d155      	bne.n	800cee6 <__hexnan+0x12e>
 800ce3a:	3102      	adds	r1, #2
 800ce3c:	f8ca 1000 	str.w	r1, [sl]
 800ce40:	f1bb 0f00 	cmp.w	fp, #0
 800ce44:	d04f      	beq.n	800cee6 <__hexnan+0x12e>
 800ce46:	454c      	cmp	r4, r9
 800ce48:	d206      	bcs.n	800ce58 <__hexnan+0xa0>
 800ce4a:	2d07      	cmp	r5, #7
 800ce4c:	dc04      	bgt.n	800ce58 <__hexnan+0xa0>
 800ce4e:	462a      	mov	r2, r5
 800ce50:	4649      	mov	r1, r9
 800ce52:	4620      	mov	r0, r4
 800ce54:	f7ff ff8a 	bl	800cd6c <L_shift>
 800ce58:	4544      	cmp	r4, r8
 800ce5a:	d934      	bls.n	800cec6 <__hexnan+0x10e>
 800ce5c:	f1a8 0204 	sub.w	r2, r8, #4
 800ce60:	4623      	mov	r3, r4
 800ce62:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce66:	f842 1f04 	str.w	r1, [r2, #4]!
 800ce6a:	429f      	cmp	r7, r3
 800ce6c:	d2f9      	bcs.n	800ce62 <__hexnan+0xaa>
 800ce6e:	1b3b      	subs	r3, r7, r4
 800ce70:	f023 0303 	bic.w	r3, r3, #3
 800ce74:	3304      	adds	r3, #4
 800ce76:	3e03      	subs	r6, #3
 800ce78:	3401      	adds	r4, #1
 800ce7a:	42a6      	cmp	r6, r4
 800ce7c:	bf38      	it	cc
 800ce7e:	2304      	movcc	r3, #4
 800ce80:	4443      	add	r3, r8
 800ce82:	2200      	movs	r2, #0
 800ce84:	f843 2b04 	str.w	r2, [r3], #4
 800ce88:	429f      	cmp	r7, r3
 800ce8a:	d2fb      	bcs.n	800ce84 <__hexnan+0xcc>
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	b91b      	cbnz	r3, 800ce98 <__hexnan+0xe0>
 800ce90:	4547      	cmp	r7, r8
 800ce92:	d126      	bne.n	800cee2 <__hexnan+0x12a>
 800ce94:	2301      	movs	r3, #1
 800ce96:	603b      	str	r3, [r7, #0]
 800ce98:	2005      	movs	r0, #5
 800ce9a:	e025      	b.n	800cee8 <__hexnan+0x130>
 800ce9c:	3501      	adds	r5, #1
 800ce9e:	2d08      	cmp	r5, #8
 800cea0:	f10b 0b01 	add.w	fp, fp, #1
 800cea4:	dd06      	ble.n	800ceb4 <__hexnan+0xfc>
 800cea6:	4544      	cmp	r4, r8
 800cea8:	d9c3      	bls.n	800ce32 <__hexnan+0x7a>
 800ceaa:	2300      	movs	r3, #0
 800ceac:	f844 3c04 	str.w	r3, [r4, #-4]
 800ceb0:	2501      	movs	r5, #1
 800ceb2:	3c04      	subs	r4, #4
 800ceb4:	6822      	ldr	r2, [r4, #0]
 800ceb6:	f000 000f 	and.w	r0, r0, #15
 800ceba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cebe:	6020      	str	r0, [r4, #0]
 800cec0:	e7b7      	b.n	800ce32 <__hexnan+0x7a>
 800cec2:	2508      	movs	r5, #8
 800cec4:	e7b5      	b.n	800ce32 <__hexnan+0x7a>
 800cec6:	9b01      	ldr	r3, [sp, #4]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d0df      	beq.n	800ce8c <__hexnan+0xd4>
 800cecc:	f1c3 0320 	rsb	r3, r3, #32
 800ced0:	f04f 32ff 	mov.w	r2, #4294967295
 800ced4:	40da      	lsrs	r2, r3
 800ced6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ceda:	4013      	ands	r3, r2
 800cedc:	f846 3c04 	str.w	r3, [r6, #-4]
 800cee0:	e7d4      	b.n	800ce8c <__hexnan+0xd4>
 800cee2:	3f04      	subs	r7, #4
 800cee4:	e7d2      	b.n	800ce8c <__hexnan+0xd4>
 800cee6:	2004      	movs	r0, #4
 800cee8:	b007      	add	sp, #28
 800ceea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ceee <__ascii_mbtowc>:
 800ceee:	b082      	sub	sp, #8
 800cef0:	b901      	cbnz	r1, 800cef4 <__ascii_mbtowc+0x6>
 800cef2:	a901      	add	r1, sp, #4
 800cef4:	b142      	cbz	r2, 800cf08 <__ascii_mbtowc+0x1a>
 800cef6:	b14b      	cbz	r3, 800cf0c <__ascii_mbtowc+0x1e>
 800cef8:	7813      	ldrb	r3, [r2, #0]
 800cefa:	600b      	str	r3, [r1, #0]
 800cefc:	7812      	ldrb	r2, [r2, #0]
 800cefe:	1e10      	subs	r0, r2, #0
 800cf00:	bf18      	it	ne
 800cf02:	2001      	movne	r0, #1
 800cf04:	b002      	add	sp, #8
 800cf06:	4770      	bx	lr
 800cf08:	4610      	mov	r0, r2
 800cf0a:	e7fb      	b.n	800cf04 <__ascii_mbtowc+0x16>
 800cf0c:	f06f 0001 	mvn.w	r0, #1
 800cf10:	e7f8      	b.n	800cf04 <__ascii_mbtowc+0x16>

0800cf12 <_realloc_r>:
 800cf12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf16:	4680      	mov	r8, r0
 800cf18:	4614      	mov	r4, r2
 800cf1a:	460e      	mov	r6, r1
 800cf1c:	b921      	cbnz	r1, 800cf28 <_realloc_r+0x16>
 800cf1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf22:	4611      	mov	r1, r2
 800cf24:	f7fd bc42 	b.w	800a7ac <_malloc_r>
 800cf28:	b92a      	cbnz	r2, 800cf36 <_realloc_r+0x24>
 800cf2a:	f7fd fbcb 	bl	800a6c4 <_free_r>
 800cf2e:	4625      	mov	r5, r4
 800cf30:	4628      	mov	r0, r5
 800cf32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf36:	f000 f842 	bl	800cfbe <_malloc_usable_size_r>
 800cf3a:	4284      	cmp	r4, r0
 800cf3c:	4607      	mov	r7, r0
 800cf3e:	d802      	bhi.n	800cf46 <_realloc_r+0x34>
 800cf40:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf44:	d812      	bhi.n	800cf6c <_realloc_r+0x5a>
 800cf46:	4621      	mov	r1, r4
 800cf48:	4640      	mov	r0, r8
 800cf4a:	f7fd fc2f 	bl	800a7ac <_malloc_r>
 800cf4e:	4605      	mov	r5, r0
 800cf50:	2800      	cmp	r0, #0
 800cf52:	d0ed      	beq.n	800cf30 <_realloc_r+0x1e>
 800cf54:	42bc      	cmp	r4, r7
 800cf56:	4622      	mov	r2, r4
 800cf58:	4631      	mov	r1, r6
 800cf5a:	bf28      	it	cs
 800cf5c:	463a      	movcs	r2, r7
 800cf5e:	f7fc fd23 	bl	80099a8 <memcpy>
 800cf62:	4631      	mov	r1, r6
 800cf64:	4640      	mov	r0, r8
 800cf66:	f7fd fbad 	bl	800a6c4 <_free_r>
 800cf6a:	e7e1      	b.n	800cf30 <_realloc_r+0x1e>
 800cf6c:	4635      	mov	r5, r6
 800cf6e:	e7df      	b.n	800cf30 <_realloc_r+0x1e>

0800cf70 <__ascii_wctomb>:
 800cf70:	b149      	cbz	r1, 800cf86 <__ascii_wctomb+0x16>
 800cf72:	2aff      	cmp	r2, #255	; 0xff
 800cf74:	bf85      	ittet	hi
 800cf76:	238a      	movhi	r3, #138	; 0x8a
 800cf78:	6003      	strhi	r3, [r0, #0]
 800cf7a:	700a      	strbls	r2, [r1, #0]
 800cf7c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf80:	bf98      	it	ls
 800cf82:	2001      	movls	r0, #1
 800cf84:	4770      	bx	lr
 800cf86:	4608      	mov	r0, r1
 800cf88:	4770      	bx	lr
	...

0800cf8c <fiprintf>:
 800cf8c:	b40e      	push	{r1, r2, r3}
 800cf8e:	b503      	push	{r0, r1, lr}
 800cf90:	4601      	mov	r1, r0
 800cf92:	ab03      	add	r3, sp, #12
 800cf94:	4805      	ldr	r0, [pc, #20]	; (800cfac <fiprintf+0x20>)
 800cf96:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf9a:	6800      	ldr	r0, [r0, #0]
 800cf9c:	9301      	str	r3, [sp, #4]
 800cf9e:	f7ff f957 	bl	800c250 <_vfiprintf_r>
 800cfa2:	b002      	add	sp, #8
 800cfa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfa8:	b003      	add	sp, #12
 800cfaa:	4770      	bx	lr
 800cfac:	20000154 	.word	0x20000154

0800cfb0 <abort>:
 800cfb0:	b508      	push	{r3, lr}
 800cfb2:	2006      	movs	r0, #6
 800cfb4:	f000 f834 	bl	800d020 <raise>
 800cfb8:	2001      	movs	r0, #1
 800cfba:	f7f4 fdff 	bl	8001bbc <_exit>

0800cfbe <_malloc_usable_size_r>:
 800cfbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfc2:	1f18      	subs	r0, r3, #4
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	bfbc      	itt	lt
 800cfc8:	580b      	ldrlt	r3, [r1, r0]
 800cfca:	18c0      	addlt	r0, r0, r3
 800cfcc:	4770      	bx	lr

0800cfce <_raise_r>:
 800cfce:	291f      	cmp	r1, #31
 800cfd0:	b538      	push	{r3, r4, r5, lr}
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	460d      	mov	r5, r1
 800cfd6:	d904      	bls.n	800cfe2 <_raise_r+0x14>
 800cfd8:	2316      	movs	r3, #22
 800cfda:	6003      	str	r3, [r0, #0]
 800cfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe0:	bd38      	pop	{r3, r4, r5, pc}
 800cfe2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cfe4:	b112      	cbz	r2, 800cfec <_raise_r+0x1e>
 800cfe6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfea:	b94b      	cbnz	r3, 800d000 <_raise_r+0x32>
 800cfec:	4620      	mov	r0, r4
 800cfee:	f000 f831 	bl	800d054 <_getpid_r>
 800cff2:	462a      	mov	r2, r5
 800cff4:	4601      	mov	r1, r0
 800cff6:	4620      	mov	r0, r4
 800cff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cffc:	f000 b818 	b.w	800d030 <_kill_r>
 800d000:	2b01      	cmp	r3, #1
 800d002:	d00a      	beq.n	800d01a <_raise_r+0x4c>
 800d004:	1c59      	adds	r1, r3, #1
 800d006:	d103      	bne.n	800d010 <_raise_r+0x42>
 800d008:	2316      	movs	r3, #22
 800d00a:	6003      	str	r3, [r0, #0]
 800d00c:	2001      	movs	r0, #1
 800d00e:	e7e7      	b.n	800cfe0 <_raise_r+0x12>
 800d010:	2400      	movs	r4, #0
 800d012:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d016:	4628      	mov	r0, r5
 800d018:	4798      	blx	r3
 800d01a:	2000      	movs	r0, #0
 800d01c:	e7e0      	b.n	800cfe0 <_raise_r+0x12>
	...

0800d020 <raise>:
 800d020:	4b02      	ldr	r3, [pc, #8]	; (800d02c <raise+0xc>)
 800d022:	4601      	mov	r1, r0
 800d024:	6818      	ldr	r0, [r3, #0]
 800d026:	f7ff bfd2 	b.w	800cfce <_raise_r>
 800d02a:	bf00      	nop
 800d02c:	20000154 	.word	0x20000154

0800d030 <_kill_r>:
 800d030:	b538      	push	{r3, r4, r5, lr}
 800d032:	4d07      	ldr	r5, [pc, #28]	; (800d050 <_kill_r+0x20>)
 800d034:	2300      	movs	r3, #0
 800d036:	4604      	mov	r4, r0
 800d038:	4608      	mov	r0, r1
 800d03a:	4611      	mov	r1, r2
 800d03c:	602b      	str	r3, [r5, #0]
 800d03e:	f7f4 fdad 	bl	8001b9c <_kill>
 800d042:	1c43      	adds	r3, r0, #1
 800d044:	d102      	bne.n	800d04c <_kill_r+0x1c>
 800d046:	682b      	ldr	r3, [r5, #0]
 800d048:	b103      	cbz	r3, 800d04c <_kill_r+0x1c>
 800d04a:	6023      	str	r3, [r4, #0]
 800d04c:	bd38      	pop	{r3, r4, r5, pc}
 800d04e:	bf00      	nop
 800d050:	20002394 	.word	0x20002394

0800d054 <_getpid_r>:
 800d054:	f7f4 bd9a 	b.w	8001b8c <_getpid>

0800d058 <_init>:
 800d058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d05a:	bf00      	nop
 800d05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d05e:	bc08      	pop	{r3}
 800d060:	469e      	mov	lr, r3
 800d062:	4770      	bx	lr

0800d064 <_fini>:
 800d064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d066:	bf00      	nop
 800d068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d06a:	bc08      	pop	{r3}
 800d06c:	469e      	mov	lr, r3
 800d06e:	4770      	bx	lr

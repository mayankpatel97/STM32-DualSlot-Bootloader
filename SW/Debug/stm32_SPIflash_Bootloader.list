
stm32_SPIflash_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c678  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800c818  0800c818  0001c818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd40  0800cd40  000202c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd40  0800cd40  0001cd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd48  0800cd48  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd48  0800cd48  0001cd48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd4c  0800cd4c  0001cd4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800cd50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002008  200002c4  0800d014  000202c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022cc  0800d014  000222cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000102c3  00000000  00000000  00020337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000318e  00000000  00000000  000305fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  00033788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a84  00000000  00000000  000345b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001950b  00000000  00000000  0003503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b08  00000000  00000000  0004e547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b103  00000000  00000000  0006104f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f14  00000000  00000000  000ec154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000f1068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c800 	.word	0x0800c800

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800c800 	.word	0x0800c800

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <calculate_crc16>:
uint16_t fw_crc;

void process_packet(void);

uint16_t calculate_crc16(uint8_t *data, uint16_t length)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 800100c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001010:	81fb      	strh	r3, [r7, #14]
    uint16_t poly = 0x2024;
 8001012:	f242 0324 	movw	r3, #8228	; 0x2024
 8001016:	813b      	strh	r3, [r7, #8]

    for (uint16_t i = 0; i < length; i++) {
 8001018:	2300      	movs	r3, #0
 800101a:	81bb      	strh	r3, [r7, #12]
 800101c:	e026      	b.n	800106c <calculate_crc16+0x6c>
        crc ^= (data[i] << 8);
 800101e:	89bb      	ldrh	r3, [r7, #12]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800102e:	4053      	eors	r3, r2
 8001030:	b21b      	sxth	r3, r3
 8001032:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8001034:	2300      	movs	r3, #0
 8001036:	72fb      	strb	r3, [r7, #11]
 8001038:	e012      	b.n	8001060 <calculate_crc16+0x60>
            if (crc & 0x8000) {
 800103a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800103e:	2b00      	cmp	r3, #0
 8001040:	da08      	bge.n	8001054 <calculate_crc16+0x54>
                crc = (crc << 1) ^ poly;
 8001042:	89fb      	ldrh	r3, [r7, #14]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	b21a      	sxth	r2, r3
 8001048:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800104c:	4053      	eors	r3, r2
 800104e:	b21b      	sxth	r3, r3
 8001050:	81fb      	strh	r3, [r7, #14]
 8001052:	e002      	b.n	800105a <calculate_crc16+0x5a>
            } else {
                crc <<= 1;
 8001054:	89fb      	ldrh	r3, [r7, #14]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	3301      	adds	r3, #1
 800105e:	72fb      	strb	r3, [r7, #11]
 8001060:	7afb      	ldrb	r3, [r7, #11]
 8001062:	2b07      	cmp	r3, #7
 8001064:	d9e9      	bls.n	800103a <calculate_crc16+0x3a>
    for (uint16_t i = 0; i < length; i++) {
 8001066:	89bb      	ldrh	r3, [r7, #12]
 8001068:	3301      	adds	r3, #1
 800106a:	81bb      	strh	r3, [r7, #12]
 800106c:	89ba      	ldrh	r2, [r7, #12]
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	429a      	cmp	r2, r3
 8001072:	d3d4      	bcc.n	800101e <calculate_crc16+0x1e>
            }
        }
    }
    return crc;
 8001074:	89fb      	ldrh	r3, [r7, #14]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <USB_VCP_ReceiveCallback>:


void USB_VCP_ReceiveCallback(uint8_t* Buf, uint32_t *Len)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < *Len; i++) {
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	e0bf      	b.n	8001214 <USB_VCP_ReceiveCallback+0x190>
        uint8_t byte = Buf[i];
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	72fb      	strb	r3, [r7, #11]

        switch (packet_state) {
 800109e:	4b63      	ldr	r3, [pc, #396]	; (800122c <USB_VCP_ReceiveCallback+0x1a8>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	f200 80b3 	bhi.w	800120e <USB_VCP_ReceiveCallback+0x18a>
 80010a8:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <USB_VCP_ReceiveCallback+0x2c>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	080010cd 	.word	0x080010cd
 80010b4:	080010fd 	.word	0x080010fd
 80010b8:	0800111f 	.word	0x0800111f
 80010bc:	08001151 	.word	0x08001151
 80010c0:	0800118f 	.word	0x0800118f
 80010c4:	080011b7 	.word	0x080011b7
 80010c8:	080011e3 	.word	0x080011e3
            case WAIT_FOR_START:
                if (byte == PACKET_START_MARKER) {
 80010cc:	7afb      	ldrb	r3, [r7, #11]
 80010ce:	2b55      	cmp	r3, #85	; 0x55
 80010d0:	f040 809a 	bne.w	8001208 <USB_VCP_ReceiveCallback+0x184>
                    packet_state = READ_CMD;
 80010d4:	4b55      	ldr	r3, [pc, #340]	; (800122c <USB_VCP_ReceiveCallback+0x1a8>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
                    packet_index = 0;
 80010da:	4b55      	ldr	r3, [pc, #340]	; (8001230 <USB_VCP_ReceiveCallback+0x1ac>)
 80010dc:	2200      	movs	r2, #0
 80010de:	801a      	strh	r2, [r3, #0]
                    payload_index = 0;
 80010e0:	4b54      	ldr	r3, [pc, #336]	; (8001234 <USB_VCP_ReceiveCallback+0x1b0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	801a      	strh	r2, [r3, #0]
                    packet[packet_index++] = byte;
 80010e6:	4b52      	ldr	r3, [pc, #328]	; (8001230 <USB_VCP_ReceiveCallback+0x1ac>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	b291      	uxth	r1, r2
 80010ee:	4a50      	ldr	r2, [pc, #320]	; (8001230 <USB_VCP_ReceiveCallback+0x1ac>)
 80010f0:	8011      	strh	r1, [r2, #0]
 80010f2:	4619      	mov	r1, r3
 80010f4:	4a50      	ldr	r2, [pc, #320]	; (8001238 <USB_VCP_ReceiveCallback+0x1b4>)
 80010f6:	7afb      	ldrb	r3, [r7, #11]
 80010f8:	5453      	strb	r3, [r2, r1]
                }
                break;
 80010fa:	e085      	b.n	8001208 <USB_VCP_ReceiveCallback+0x184>

            case READ_CMD:
                cmd = byte;
 80010fc:	4a4f      	ldr	r2, [pc, #316]	; (800123c <USB_VCP_ReceiveCallback+0x1b8>)
 80010fe:	7afb      	ldrb	r3, [r7, #11]
 8001100:	7013      	strb	r3, [r2, #0]
                packet[packet_index++] = byte;
 8001102:	4b4b      	ldr	r3, [pc, #300]	; (8001230 <USB_VCP_ReceiveCallback+0x1ac>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	b291      	uxth	r1, r2
 800110a:	4a49      	ldr	r2, [pc, #292]	; (8001230 <USB_VCP_ReceiveCallback+0x1ac>)
 800110c:	8011      	strh	r1, [r2, #0]
 800110e:	4619      	mov	r1, r3
 8001110:	4a49      	ldr	r2, [pc, #292]	; (8001238 <USB_VCP_ReceiveCallback+0x1b4>)
 8001112:	7afb      	ldrb	r3, [r7, #11]
 8001114:	5453      	strb	r3, [r2, r1]
                packet_state = READ_LEN;
 8001116:	4b45      	ldr	r3, [pc, #276]	; (800122c <USB_VCP_ReceiveCallback+0x1a8>)
 8001118:	2202      	movs	r2, #2
 800111a:	701a      	strb	r2, [r3, #0]
                break;
 800111c:	e077      	b.n	800120e <USB_VCP_ReceiveCallback+0x18a>

            case READ_LEN:
                len = byte;
 800111e:	4a48      	ldr	r2, [pc, #288]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 8001120:	7afb      	ldrb	r3, [r7, #11]
 8001122:	7013      	strb	r3, [r2, #0]
                packet[packet_index++] = byte;
 8001124:	4b42      	ldr	r3, [pc, #264]	; (8001230 <USB_VCP_ReceiveCallback+0x1ac>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	b291      	uxth	r1, r2
 800112c:	4a40      	ldr	r2, [pc, #256]	; (8001230 <USB_VCP_ReceiveCallback+0x1ac>)
 800112e:	8011      	strh	r1, [r2, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	4a41      	ldr	r2, [pc, #260]	; (8001238 <USB_VCP_ReceiveCallback+0x1b4>)
 8001134:	7afb      	ldrb	r3, [r7, #11]
 8001136:	5453      	strb	r3, [r2, r1]
                    packet_state = READ_PAYLOAD;
                } else {
                    packet_state = WAIT_FOR_START; // Invalid length, reset
                }
                */
                if(len == 0) packet_state = READ_CRC1;
 8001138:	4b41      	ldr	r3, [pc, #260]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d103      	bne.n	8001148 <USB_VCP_ReceiveCallback+0xc4>
 8001140:	4b3a      	ldr	r3, [pc, #232]	; (800122c <USB_VCP_ReceiveCallback+0x1a8>)
 8001142:	2204      	movs	r2, #4
 8001144:	701a      	strb	r2, [r3, #0]
                else 		 packet_state = READ_PAYLOAD;
                break;
 8001146:	e062      	b.n	800120e <USB_VCP_ReceiveCallback+0x18a>
                else 		 packet_state = READ_PAYLOAD;
 8001148:	4b38      	ldr	r3, [pc, #224]	; (800122c <USB_VCP_ReceiveCallback+0x1a8>)
 800114a:	2203      	movs	r2, #3
 800114c:	701a      	strb	r2, [r3, #0]
                break;
 800114e:	e05e      	b.n	800120e <USB_VCP_ReceiveCallback+0x18a>

            case READ_PAYLOAD:
                payload[payload_index++] = byte;
 8001150:	4b38      	ldr	r3, [pc, #224]	; (8001234 <USB_VCP_ReceiveCallback+0x1b0>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	b291      	uxth	r1, r2
 8001158:	4a36      	ldr	r2, [pc, #216]	; (8001234 <USB_VCP_ReceiveCallback+0x1b0>)
 800115a:	8011      	strh	r1, [r2, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	4a39      	ldr	r2, [pc, #228]	; (8001244 <USB_VCP_ReceiveCallback+0x1c0>)
 8001160:	7afb      	ldrb	r3, [r7, #11]
 8001162:	5453      	strb	r3, [r2, r1]
                packet[packet_index++] = byte;
 8001164:	4b32      	ldr	r3, [pc, #200]	; (8001230 <USB_VCP_ReceiveCallback+0x1ac>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	1c5a      	adds	r2, r3, #1
 800116a:	b291      	uxth	r1, r2
 800116c:	4a30      	ldr	r2, [pc, #192]	; (8001230 <USB_VCP_ReceiveCallback+0x1ac>)
 800116e:	8011      	strh	r1, [r2, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	4a31      	ldr	r2, [pc, #196]	; (8001238 <USB_VCP_ReceiveCallback+0x1b4>)
 8001174:	7afb      	ldrb	r3, [r7, #11]
 8001176:	5453      	strb	r3, [r2, r1]
                if (payload_index == len) {
 8001178:	4b31      	ldr	r3, [pc, #196]	; (8001240 <USB_VCP_ReceiveCallback+0x1bc>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b29a      	uxth	r2, r3
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <USB_VCP_ReceiveCallback+0x1b0>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d142      	bne.n	800120c <USB_VCP_ReceiveCallback+0x188>
                    packet_state = READ_CRC1;
 8001186:	4b29      	ldr	r3, [pc, #164]	; (800122c <USB_VCP_ReceiveCallback+0x1a8>)
 8001188:	2204      	movs	r2, #4
 800118a:	701a      	strb	r2, [r3, #0]
                }
                break;
 800118c:	e03e      	b.n	800120c <USB_VCP_ReceiveCallback+0x188>

            case READ_CRC1:
                received_crc = (byte << 8);
 800118e:	7afb      	ldrb	r3, [r7, #11]
 8001190:	b29b      	uxth	r3, r3
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <USB_VCP_ReceiveCallback+0x1c4>)
 8001198:	801a      	strh	r2, [r3, #0]
                packet[packet_index++] = byte;
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <USB_VCP_ReceiveCallback+0x1ac>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	b291      	uxth	r1, r2
 80011a2:	4a23      	ldr	r2, [pc, #140]	; (8001230 <USB_VCP_ReceiveCallback+0x1ac>)
 80011a4:	8011      	strh	r1, [r2, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4a23      	ldr	r2, [pc, #140]	; (8001238 <USB_VCP_ReceiveCallback+0x1b4>)
 80011aa:	7afb      	ldrb	r3, [r7, #11]
 80011ac:	5453      	strb	r3, [r2, r1]
                packet_state = READ_CRC2;
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <USB_VCP_ReceiveCallback+0x1a8>)
 80011b0:	2205      	movs	r2, #5
 80011b2:	701a      	strb	r2, [r3, #0]
                break;
 80011b4:	e02b      	b.n	800120e <USB_VCP_ReceiveCallback+0x18a>

            case READ_CRC2:
                received_crc |= byte;
 80011b6:	7afb      	ldrb	r3, [r7, #11]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4b23      	ldr	r3, [pc, #140]	; (8001248 <USB_VCP_ReceiveCallback+0x1c4>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	4313      	orrs	r3, r2
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <USB_VCP_ReceiveCallback+0x1c4>)
 80011c4:	801a      	strh	r2, [r3, #0]
                packet[packet_index++] = byte;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <USB_VCP_ReceiveCallback+0x1ac>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	b291      	uxth	r1, r2
 80011ce:	4a18      	ldr	r2, [pc, #96]	; (8001230 <USB_VCP_ReceiveCallback+0x1ac>)
 80011d0:	8011      	strh	r1, [r2, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4a18      	ldr	r2, [pc, #96]	; (8001238 <USB_VCP_ReceiveCallback+0x1b4>)
 80011d6:	7afb      	ldrb	r3, [r7, #11]
 80011d8:	5453      	strb	r3, [r2, r1]
                packet_state = WAIT_FOR_END;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <USB_VCP_ReceiveCallback+0x1a8>)
 80011dc:	2206      	movs	r2, #6
 80011de:	701a      	strb	r2, [r3, #0]
                break;
 80011e0:	e015      	b.n	800120e <USB_VCP_ReceiveCallback+0x18a>

            case WAIT_FOR_END:
                if (byte == PACKET_END_MARKER) {
 80011e2:	7afb      	ldrb	r3, [r7, #11]
 80011e4:	2baa      	cmp	r3, #170	; 0xaa
 80011e6:	d10b      	bne.n	8001200 <USB_VCP_ReceiveCallback+0x17c>
                    packet[packet_index++] = byte;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <USB_VCP_ReceiveCallback+0x1ac>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	b291      	uxth	r1, r2
 80011f0:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <USB_VCP_ReceiveCallback+0x1ac>)
 80011f2:	8011      	strh	r1, [r2, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	4a10      	ldr	r2, [pc, #64]	; (8001238 <USB_VCP_ReceiveCallback+0x1b4>)
 80011f8:	7afb      	ldrb	r3, [r7, #11]
 80011fa:	5453      	strb	r3, [r2, r1]
                    process_packet();  // Validate and process the packet
 80011fc:	f000 f852 	bl	80012a4 <process_packet>
                }
                packet_state = WAIT_FOR_START;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <USB_VCP_ReceiveCallback+0x1a8>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
                break;
 8001206:	e002      	b.n	800120e <USB_VCP_ReceiveCallback+0x18a>
                break;
 8001208:	bf00      	nop
 800120a:	e000      	b.n	800120e <USB_VCP_ReceiveCallback+0x18a>
                break;
 800120c:	bf00      	nop
    for (uint32_t i = 0; i < *Len; i++) {
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3301      	adds	r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	429a      	cmp	r2, r3
 800121c:	f4ff af3a 	bcc.w	8001094 <USB_VCP_ReceiveCallback+0x10>
        }
    }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200002e0 	.word	0x200002e0
 8001230:	200004de 	.word	0x200004de
 8001234:	200004e0 	.word	0x200004e0
 8001238:	200002e4 	.word	0x200002e4
 800123c:	200004e2 	.word	0x200004e2
 8001240:	200004e3 	.word	0x200004e3
 8001244:	200003e4 	.word	0x200003e4
 8001248:	200004e4 	.word	0x200004e4

0800124c <send_reponse_packet>:



static void send_reponse_packet(dfu_stat_t cmd, RESP_CODE response_code)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	460a      	mov	r2, r1
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	4613      	mov	r3, r2
 800125a:	71bb      	strb	r3, [r7, #6]
	rep_packet_t resp;
	resp.start_byte = PACKET_START_MARKER;
 800125c:	2355      	movs	r3, #85	; 0x55
 800125e:	723b      	strb	r3, [r7, #8]
	resp.cmd = DFU_START;
 8001260:	2301      	movs	r3, #1
 8001262:	727b      	strb	r3, [r7, #9]
	resp.len = 0x01;
 8001264:	2301      	movs	r3, #1
 8001266:	72bb      	strb	r3, [r7, #10]
	resp.data = response_code;
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	72fb      	strb	r3, [r7, #11]
	resp.crc = calculate_crc16((uint8_t *)&resp,resp.len + 2 );
 800126c:	7abb      	ldrb	r3, [r7, #10]
 800126e:	b29b      	uxth	r3, r3
 8001270:	3302      	adds	r3, #2
 8001272:	b29a      	uxth	r2, r3
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	4611      	mov	r1, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fec0 	bl	8001000 <calculate_crc16>
 8001280:	4603      	mov	r3, r0
 8001282:	81bb      	strh	r3, [r7, #12]
	resp.end_byte = PACKET_END_MARKER;
 8001284:	23aa      	movs	r3, #170	; 0xaa
 8001286:	73bb      	strb	r3, [r7, #14]
	CDC_Transmit_FS((uint8_t *)&resp,resp.len + 6);
 8001288:	7abb      	ldrb	r3, [r7, #10]
 800128a:	b29b      	uxth	r3, r3
 800128c:	3306      	adds	r3, #6
 800128e:	b29a      	uxth	r2, r3
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f006 f9f6 	bl	8007688 <CDC_Transmit_FS>
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <process_packet>:

void process_packet(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
    // Verify CRC
    uint16_t calculated_crc = calculate_crc16(packet + 1, len + 2);  // CMD + LEN + PAYLOAD
 80012aa:	4a3d      	ldr	r2, [pc, #244]	; (80013a0 <process_packet+0xfc>)
 80012ac:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <process_packet+0x100>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	3302      	adds	r3, #2
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	4619      	mov	r1, r3
 80012b8:	4610      	mov	r0, r2
 80012ba:	f7ff fea1 	bl	8001000 <calculate_crc16>
 80012be:	4603      	mov	r3, r0
 80012c0:	827b      	strh	r3, [r7, #18]
    if (received_crc != calculated_crc) {
 80012c2:	4b39      	ldr	r3, [pc, #228]	; (80013a8 <process_packet+0x104>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	8a7a      	ldrh	r2, [r7, #18]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d007      	beq.n	80012dc <process_packet+0x38>
    	printf("CRC check failed! Received: 0x%04X, Calculated: 0x%04X\n", received_crc, calculated_crc);
 80012cc:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <process_packet+0x104>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	8a7b      	ldrh	r3, [r7, #18]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4835      	ldr	r0, [pc, #212]	; (80013ac <process_packet+0x108>)
 80012d8:	f007 fd4e 	bl	8008d78 <iprintf>
    }
	// Packet is valid, process it
	printf("Packet received successfully!\n");
 80012dc:	4834      	ldr	r0, [pc, #208]	; (80013b0 <process_packet+0x10c>)
 80012de:	f007 fdb9 	bl	8008e54 <puts>
	printf("Command: 0x%02X\n", cmd);
 80012e2:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <process_packet+0x110>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	4619      	mov	r1, r3
 80012e8:	4833      	ldr	r0, [pc, #204]	; (80013b8 <process_packet+0x114>)
 80012ea:	f007 fd45 	bl	8008d78 <iprintf>
	printf("Payload Length: %d\n", len);
 80012ee:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <process_packet+0x100>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	4619      	mov	r1, r3
 80012f4:	4831      	ldr	r0, [pc, #196]	; (80013bc <process_packet+0x118>)
 80012f6:	f007 fd3f 	bl	8008d78 <iprintf>
	printf("Payload: ");
 80012fa:	4831      	ldr	r0, [pc, #196]	; (80013c0 <process_packet+0x11c>)
 80012fc:	f007 fd3c 	bl	8008d78 <iprintf>
	for (int i = 0; i < len; i++) {
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	e00a      	b.n	800131c <process_packet+0x78>
		printf("0x%02X ", payload[i]);
 8001306:	4a2f      	ldr	r2, [pc, #188]	; (80013c4 <process_packet+0x120>)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4619      	mov	r1, r3
 8001310:	482d      	ldr	r0, [pc, #180]	; (80013c8 <process_packet+0x124>)
 8001312:	f007 fd31 	bl	8008d78 <iprintf>
	for (int i = 0; i < len; i++) {
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <process_packet+0x100>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	4293      	cmp	r3, r2
 8001326:	dbee      	blt.n	8001306 <process_packet+0x62>
	}
	printf("\n");
 8001328:	200a      	movs	r0, #10
 800132a:	f007 fd37 	bl	8008d9c <putchar>


	/* process packet here */
	switch(cmd)
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <process_packet+0x110>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	3b01      	subs	r3, #1
 8001334:	2b06      	cmp	r3, #6
 8001336:	d82e      	bhi.n	8001396 <process_packet+0xf2>
 8001338:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <process_packet+0x9c>)
 800133a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133e:	bf00      	nop
 8001340:	0800135d 	.word	0x0800135d
 8001344:	08001397 	.word	0x08001397
 8001348:	08001373 	.word	0x08001373
 800134c:	08001397 	.word	0x08001397
 8001350:	08001397 	.word	0x08001397
 8001354:	08001397 	.word	0x08001397
 8001358:	08001397 	.word	0x08001397
	{
		case DFU_START:
			printf("Start packet!\n");
 800135c:	481b      	ldr	r0, [pc, #108]	; (80013cc <process_packet+0x128>)
 800135e:	f007 fd79 	bl	8008e54 <puts>
			send_reponse_packet(DFU_START,DFU_OK);
 8001362:	2100      	movs	r1, #0
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff ff71 	bl	800124c <send_reponse_packet>
			dfu_stat = DFU_ERASE_MEM;
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <process_packet+0x12c>)
 800136c:	2202      	movs	r2, #2
 800136e:	701a      	strb	r2, [r3, #0]
			break;
 8001370:	e012      	b.n	8001398 <process_packet+0xf4>
			break;
		case DFU_HEADER:

			/*header[1] cmd[1] len[1] total fw size[4B], fw crc[2B], fw ver[4B] crc[2] footer[1] */
			fw_info_t fw_info;
			memcpy((uint8_t *)&fw_info, &payload, sizeof(fw_info_t));
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <process_packet+0x120>)
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	ca07      	ldmia	r2, {r0, r1, r2}
 8001378:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			received_fw_len =0;
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <process_packet+0x130>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
			total_fw_len = fw_info.total_fw_size;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <process_packet+0x134>)
 8001386:	6013      	str	r3, [r2, #0]
			fw_ver		 = fw_info.fw_ver;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4a14      	ldr	r2, [pc, #80]	; (80013dc <process_packet+0x138>)
 800138c:	6013      	str	r3, [r2, #0]
			fw_crc		 = fw_info.fw_crc;
 800138e:	893a      	ldrh	r2, [r7, #8]
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <process_packet+0x13c>)
 8001392:	801a      	strh	r2, [r3, #0]

			break;
 8001394:	e000      	b.n	8001398 <process_packet+0xf4>
			break;
		case DFU_JUMP_TO_APP:
			break;

		default:
			break;
 8001396:	bf00      	nop
	}
}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200002e5 	.word	0x200002e5
 80013a4:	200004e3 	.word	0x200004e3
 80013a8:	200004e4 	.word	0x200004e4
 80013ac:	0800c818 	.word	0x0800c818
 80013b0:	0800c850 	.word	0x0800c850
 80013b4:	200004e2 	.word	0x200004e2
 80013b8:	0800c870 	.word	0x0800c870
 80013bc:	0800c884 	.word	0x0800c884
 80013c0:	0800c898 	.word	0x0800c898
 80013c4:	200003e4 	.word	0x200003e4
 80013c8:	0800c8a4 	.word	0x0800c8a4
 80013cc:	0800c8ac 	.word	0x0800c8ac
 80013d0:	200004e6 	.word	0x200004e6
 80013d4:	200004ec 	.word	0x200004ec
 80013d8:	200004e8 	.word	0x200004e8
 80013dc:	200004f0 	.word	0x200004f0
 80013e0:	200004f4 	.word	0x200004f4

080013e4 <__io_putchar>:
#endif /* __GNUC__ */
#define DBG_BUFF_LEN 64
char dbg_buff[DBG_BUFF_LEN];
uint8_t dbg_buff_idx;
PUTCHAR_PROTOTYPE
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	if(dbg_buff_idx<DBG_BUFF_LEN)
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <__io_putchar+0x48>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b3f      	cmp	r3, #63	; 0x3f
 80013f2:	d80a      	bhi.n	800140a <__io_putchar+0x26>
	{
		dbg_buff[dbg_buff_idx++] = ch;
 80013f4:	4b0d      	ldr	r3, [pc, #52]	; (800142c <__io_putchar+0x48>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	b2d1      	uxtb	r1, r2
 80013fc:	4a0b      	ldr	r2, [pc, #44]	; (800142c <__io_putchar+0x48>)
 80013fe:	7011      	strb	r1, [r2, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	b2d9      	uxtb	r1, r3
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <__io_putchar+0x4c>)
 8001408:	5499      	strb	r1, [r3, r2]
	}

	if(ch == '\n' || ch == '\r')
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b0a      	cmp	r3, #10
 800140e:	d002      	beq.n	8001416 <__io_putchar+0x32>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b0d      	cmp	r3, #13
 8001414:	d102      	bne.n	800141c <__io_putchar+0x38>
	{
	  //CDC_Transmit_FS((uint8_t *)&dbg_buff[0], dbg_buff_idx);
	  dbg_buff_idx=0;
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <__io_putchar+0x48>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
	}
	return ch;
 800141c:	687b      	ldr	r3, [r7, #4]
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000590 	.word	0x20000590
 8001430:	20000550 	.word	0x20000550

08001434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001438:	f000 fb0a 	bl	8001a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143c:	f000 f81c 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001440:	f000 f8b8 	bl	80015b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001444:	f000 f880 	bl	8001548 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001448:	f006 f85c 	bl	8007504 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //printf("I am Mayank Patel. How are you?\n");

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001452:	4808      	ldr	r0, [pc, #32]	; (8001474 <main+0x40>)
 8001454:	f000 fe28 	bl	80020a8 <HAL_GPIO_WritePin>
	  HAL_Delay(35);
 8001458:	2023      	movs	r0, #35	; 0x23
 800145a:	f000 fb6b 	bl	8001b34 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <main+0x40>)
 8001466:	f000 fe1f 	bl	80020a8 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 800146a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800146e:	f000 fb61 	bl	8001b34 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001472:	e7eb      	b.n	800144c <main+0x18>
 8001474:	40020800 	.word	0x40020800

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b094      	sub	sp, #80	; 0x50
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	2230      	movs	r2, #48	; 0x30
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f007 fde4 	bl	8009054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <SystemClock_Config+0xc8>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	4a26      	ldr	r2, [pc, #152]	; (8001540 <SystemClock_Config+0xc8>)
 80014a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014aa:	6413      	str	r3, [r2, #64]	; 0x40
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <SystemClock_Config+0xc8>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <SystemClock_Config+0xcc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a20      	ldr	r2, [pc, #128]	; (8001544 <SystemClock_Config+0xcc>)
 80014c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <SystemClock_Config+0xcc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d4:	2301      	movs	r3, #1
 80014d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014de:	2302      	movs	r3, #2
 80014e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014e8:	2319      	movs	r3, #25
 80014ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80014ec:	23c0      	movs	r3, #192	; 0xc0
 80014ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80014f0:	2306      	movs	r3, #6
 80014f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014f4:	2304      	movs	r3, #4
 80014f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f8:	f107 0320 	add.w	r3, r7, #32
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 f83d 	bl	800357c <HAL_RCC_OscConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001508:	f000 f8d6 	bl	80016b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150c:	230f      	movs	r3, #15
 800150e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001510:	2302      	movs	r3, #2
 8001512:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	2101      	movs	r1, #1
 8001526:	4618      	mov	r0, r3
 8001528:	f002 faa0 	bl	8003a6c <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001532:	f000 f8c1 	bl	80016b8 <Error_Handler>
  }
}
 8001536:	bf00      	nop
 8001538:	3750      	adds	r7, #80	; 0x50
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40007000 	.word	0x40007000

08001548 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <MX_SPI1_Init+0x64>)
 800154e:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <MX_SPI1_Init+0x68>)
 8001550:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <MX_SPI1_Init+0x64>)
 8001554:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001558:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_SPI1_Init+0x64>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <MX_SPI1_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_SPI1_Init+0x64>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_SPI1_Init+0x64>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_SPI1_Init+0x64>)
 8001574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001578:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_SPI1_Init+0x64>)
 800157c:	2200      	movs	r2, #0
 800157e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <MX_SPI1_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_SPI1_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <MX_SPI1_Init+0x64>)
 800158e:	2200      	movs	r2, #0
 8001590:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_SPI1_Init+0x64>)
 8001594:	220a      	movs	r2, #10
 8001596:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001598:	4804      	ldr	r0, [pc, #16]	; (80015ac <MX_SPI1_Init+0x64>)
 800159a:	f002 fc1f 	bl	8003ddc <HAL_SPI_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015a4:	f000 f888 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200004f8 	.word	0x200004f8
 80015b0:	40013000 	.word	0x40013000

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b37      	ldr	r3, [pc, #220]	; (80016ac <MX_GPIO_Init+0xf8>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a36      	ldr	r2, [pc, #216]	; (80016ac <MX_GPIO_Init+0xf8>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b34      	ldr	r3, [pc, #208]	; (80016ac <MX_GPIO_Init+0xf8>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b30      	ldr	r3, [pc, #192]	; (80016ac <MX_GPIO_Init+0xf8>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a2f      	ldr	r2, [pc, #188]	; (80016ac <MX_GPIO_Init+0xf8>)
 80015f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <MX_GPIO_Init+0xf8>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <MX_GPIO_Init+0xf8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a28      	ldr	r2, [pc, #160]	; (80016ac <MX_GPIO_Init+0xf8>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <MX_GPIO_Init+0xf8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <MX_GPIO_Init+0xf8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a21      	ldr	r2, [pc, #132]	; (80016ac <MX_GPIO_Init+0xf8>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <MX_GPIO_Init+0xf8>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001640:	481b      	ldr	r0, [pc, #108]	; (80016b0 <MX_GPIO_Init+0xfc>)
 8001642:	f000 fd31 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	2110      	movs	r1, #16
 800164a:	481a      	ldr	r0, [pc, #104]	; (80016b4 <MX_GPIO_Init+0x100>)
 800164c:	f000 fd2c 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4811      	ldr	r0, [pc, #68]	; (80016b0 <MX_GPIO_Init+0xfc>)
 800166a:	f000 fb99 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800166e:	2301      	movs	r3, #1
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001676:	2301      	movs	r3, #1
 8001678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	480c      	ldr	r0, [pc, #48]	; (80016b4 <MX_GPIO_Init+0x100>)
 8001682:	f000 fb8d 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001686:	2310      	movs	r3, #16
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_GPIO_Init+0x100>)
 800169e:	f000 fb7f 	bl	8001da0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	; 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020000 	.word	0x40020000

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <Error_Handler+0x8>
	...

080016c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <HAL_MspInit+0x4c>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x4c>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x4c>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a28      	ldr	r2, [pc, #160]	; (80017d4 <HAL_SPI_MspInit+0xc0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d149      	bne.n	80017ca <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <HAL_SPI_MspInit+0xc4>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	4a26      	ldr	r2, [pc, #152]	; (80017d8 <HAL_SPI_MspInit+0xc4>)
 8001740:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001744:	6453      	str	r3, [r2, #68]	; 0x44
 8001746:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_SPI_MspInit+0xc4>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_SPI_MspInit+0xc4>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a1f      	ldr	r2, [pc, #124]	; (80017d8 <HAL_SPI_MspInit+0xc4>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_SPI_MspInit+0xc4>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_SPI_MspInit+0xc4>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a18      	ldr	r2, [pc, #96]	; (80017d8 <HAL_SPI_MspInit+0xc4>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <HAL_SPI_MspInit+0xc4>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800178a:	23a0      	movs	r3, #160	; 0xa0
 800178c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800179a:	2305      	movs	r3, #5
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	4619      	mov	r1, r3
 80017a4:	480d      	ldr	r0, [pc, #52]	; (80017dc <HAL_SPI_MspInit+0xc8>)
 80017a6:	f000 fafb 	bl	8001da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017aa:	2310      	movs	r3, #16
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ba:	2305      	movs	r3, #5
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4806      	ldr	r0, [pc, #24]	; (80017e0 <HAL_SPI_MspInit+0xcc>)
 80017c6:	f000 faeb 	bl	8001da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40013000 	.word	0x40013000
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40020400 	.word	0x40020400

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e8:	e7fe      	b.n	80017e8 <NMI_Handler+0x4>

080017ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <MemManage_Handler+0x4>

080017f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <UsageFault_Handler+0x4>

08001802 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001830:	f000 f960 	bl	8001af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <OTG_FS_IRQHandler+0x10>)
 800183e:	f000 fd90 	bl	8002362 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20001a7c 	.word	0x20001a7c

0800184c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return 1;
 8001850:	2301      	movs	r3, #1
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_kill>:

int _kill(int pid, int sig)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001866:	f007 fc47 	bl	80090f8 <__errno>
 800186a:	4603      	mov	r3, r0
 800186c:	2216      	movs	r2, #22
 800186e:	601a      	str	r2, [r3, #0]
  return -1;
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_exit>:

void _exit (int status)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ffe7 	bl	800185c <_kill>
  while (1) {}    /* Make sure we hang here */
 800188e:	e7fe      	b.n	800188e <_exit+0x12>

08001890 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e00a      	b.n	80018b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018a2:	f3af 8000 	nop.w
 80018a6:	4601      	mov	r1, r0
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	60ba      	str	r2, [r7, #8]
 80018ae:	b2ca      	uxtb	r2, r1
 80018b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbf0      	blt.n	80018a2 <_read+0x12>
  }

  return len;
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	e009      	b.n	80018f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	60ba      	str	r2, [r7, #8]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fd7d 	bl	80013e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbf1      	blt.n	80018dc <_write+0x12>
  }
  return len;
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_close>:

int _close(int file)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800192a:	605a      	str	r2, [r3, #4]
  return 0;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <_isatty>:

int _isatty(int file)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001974:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <_sbrk+0x5c>)
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <_sbrk+0x60>)
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <_sbrk+0x64>)
 800198a:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <_sbrk+0x68>)
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	d207      	bcs.n	80019ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800199c:	f007 fbac 	bl	80090f8 <__errno>
 80019a0:	4603      	mov	r3, r0
 80019a2:	220c      	movs	r2, #12
 80019a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	e009      	b.n	80019c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <_sbrk+0x64>)
 80019bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20020000 	.word	0x20020000
 80019cc:	00000400 	.word	0x00000400
 80019d0:	20000594 	.word	0x20000594
 80019d4:	200022d0 	.word	0x200022d0

080019d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <SystemInit+0x20>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <SystemInit+0x20>)
 80019e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a00:	f7ff ffea 	bl	80019d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a06:	490d      	ldr	r1, [pc, #52]	; (8001a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a1c:	4c0a      	ldr	r4, [pc, #40]	; (8001a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2a:	f007 fb6b 	bl	8009104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a2e:	f7ff fd01 	bl	8001434 <main>
  bx  lr    
 8001a32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001a40:	0800cd50 	.word	0x0800cd50
  ldr r2, =_sbss
 8001a44:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001a48:	200022cc 	.word	0x200022cc

08001a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC_IRQHandler>
	...

08001a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0d      	ldr	r2, [pc, #52]	; (8001a90 <HAL_Init+0x40>)
 8001a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_Init+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <HAL_Init+0x40>)
 8001a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <HAL_Init+0x40>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <HAL_Init+0x40>)
 8001a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a78:	2003      	movs	r0, #3
 8001a7a:	f000 f94f 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a7e:	200f      	movs	r0, #15
 8001a80:	f000 f808 	bl	8001a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a84:	f7ff fe1e 	bl	80016c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023c00 	.word	0x40023c00

08001a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_InitTick+0x54>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_InitTick+0x58>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f967 	bl	8001d86 <HAL_SYSTICK_Config>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00e      	b.n	8001ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b0f      	cmp	r3, #15
 8001ac6:	d80a      	bhi.n	8001ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f000 f92f 	bl	8001d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad4:	4a06      	ldr	r2, [pc, #24]	; (8001af0 <HAL_InitTick+0x5c>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e000      	b.n	8001ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	20000008 	.word	0x20000008
 8001af0:	20000004 	.word	0x20000004

08001af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_IncTick+0x20>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_IncTick+0x24>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <HAL_IncTick+0x24>)
 8001b06:	6013      	str	r3, [r2, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000008 	.word	0x20000008
 8001b18:	20000598 	.word	0x20000598

08001b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_GetTick+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000598 	.word	0x20000598

08001b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b3c:	f7ff ffee 	bl	8001b1c <HAL_GetTick>
 8001b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4c:	d005      	beq.n	8001b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_Delay+0x44>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b5a:	bf00      	nop
 8001b5c:	f7ff ffde 	bl	8001b1c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d8f7      	bhi.n	8001b5c <HAL_Delay+0x28>
  {
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000008 	.word	0x20000008

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	; (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	; (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f7ff ff8e 	bl	8001c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff29 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff ff3e 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ff8e 	bl	8001c70 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff5d 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff31 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffa2 	bl	8001cd8 <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	e159      	b.n	8002070 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	f040 8148 	bne.w	800206a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d005      	beq.n	8001df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d130      	bne.n	8001e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e28:	2201      	movs	r2, #1
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 0201 	and.w	r2, r3, #1
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d017      	beq.n	8001e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d123      	bne.n	8001ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	08da      	lsrs	r2, r3, #3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3208      	adds	r2, #8
 8001ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	220f      	movs	r2, #15
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	08da      	lsrs	r2, r3, #3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3208      	adds	r2, #8
 8001ede:	69b9      	ldr	r1, [r7, #24]
 8001ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	2203      	movs	r2, #3
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0203 	and.w	r2, r3, #3
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80a2 	beq.w	800206a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b57      	ldr	r3, [pc, #348]	; (8002088 <HAL_GPIO_Init+0x2e8>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	4a56      	ldr	r2, [pc, #344]	; (8002088 <HAL_GPIO_Init+0x2e8>)
 8001f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f34:	6453      	str	r3, [r2, #68]	; 0x44
 8001f36:	4b54      	ldr	r3, [pc, #336]	; (8002088 <HAL_GPIO_Init+0x2e8>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f42:	4a52      	ldr	r2, [pc, #328]	; (800208c <HAL_GPIO_Init+0x2ec>)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	220f      	movs	r2, #15
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a49      	ldr	r2, [pc, #292]	; (8002090 <HAL_GPIO_Init+0x2f0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d019      	beq.n	8001fa2 <HAL_GPIO_Init+0x202>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a48      	ldr	r2, [pc, #288]	; (8002094 <HAL_GPIO_Init+0x2f4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_GPIO_Init+0x1fe>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a47      	ldr	r2, [pc, #284]	; (8002098 <HAL_GPIO_Init+0x2f8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00d      	beq.n	8001f9a <HAL_GPIO_Init+0x1fa>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a46      	ldr	r2, [pc, #280]	; (800209c <HAL_GPIO_Init+0x2fc>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d007      	beq.n	8001f96 <HAL_GPIO_Init+0x1f6>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a45      	ldr	r2, [pc, #276]	; (80020a0 <HAL_GPIO_Init+0x300>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_GPIO_Init+0x1f2>
 8001f8e:	2304      	movs	r3, #4
 8001f90:	e008      	b.n	8001fa4 <HAL_GPIO_Init+0x204>
 8001f92:	2307      	movs	r3, #7
 8001f94:	e006      	b.n	8001fa4 <HAL_GPIO_Init+0x204>
 8001f96:	2303      	movs	r3, #3
 8001f98:	e004      	b.n	8001fa4 <HAL_GPIO_Init+0x204>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e002      	b.n	8001fa4 <HAL_GPIO_Init+0x204>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_GPIO_Init+0x204>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	f002 0203 	and.w	r2, r2, #3
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	4093      	lsls	r3, r2
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fb4:	4935      	ldr	r1, [pc, #212]	; (800208c <HAL_GPIO_Init+0x2ec>)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	3302      	adds	r3, #2
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fc2:	4b38      	ldr	r3, [pc, #224]	; (80020a4 <HAL_GPIO_Init+0x304>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fe6:	4a2f      	ldr	r2, [pc, #188]	; (80020a4 <HAL_GPIO_Init+0x304>)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fec:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <HAL_GPIO_Init+0x304>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002010:	4a24      	ldr	r2, [pc, #144]	; (80020a4 <HAL_GPIO_Init+0x304>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <HAL_GPIO_Init+0x304>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800203a:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <HAL_GPIO_Init+0x304>)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <HAL_GPIO_Init+0x304>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002064:	4a0f      	ldr	r2, [pc, #60]	; (80020a4 <HAL_GPIO_Init+0x304>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3301      	adds	r3, #1
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	2b0f      	cmp	r3, #15
 8002074:	f67f aea2 	bls.w	8001dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	40013800 	.word	0x40013800
 8002090:	40020000 	.word	0x40020000
 8002094:	40020400 	.word	0x40020400
 8002098:	40020800 	.word	0x40020800
 800209c:	40020c00 	.word	0x40020c00
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40013c00 	.word	0x40013c00

080020a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
 80020b4:	4613      	mov	r3, r2
 80020b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020b8:	787b      	ldrb	r3, [r7, #1]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020c4:	e003      	b.n	80020ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	041a      	lsls	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	619a      	str	r2, [r3, #24]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af02      	add	r7, sp, #8
 80020e0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e101      	b.n	80022f0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d106      	bne.n	800210c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f005 fc06 	bl	8007918 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2203      	movs	r2, #3
 8002110:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800211a:	d102      	bne.n	8002122 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f001 fff9 	bl	800411e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	7c1a      	ldrb	r2, [r3, #16]
 8002134:	f88d 2000 	strb.w	r2, [sp]
 8002138:	3304      	adds	r3, #4
 800213a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800213c:	f001 fed7 	bl	8003eee <USB_CoreInit>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2202      	movs	r2, #2
 800214a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0ce      	b.n	80022f0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f001 fff1 	bl	8004140 <USB_SetCurrentMode>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0bf      	b.n	80022f0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	e04a      	b.n	800220c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	3315      	adds	r3, #21
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	3314      	adds	r3, #20
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	b298      	uxth	r0, r3
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	332e      	adds	r3, #46	; 0x2e
 80021b2:	4602      	mov	r2, r0
 80021b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	3318      	adds	r3, #24
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	331c      	adds	r3, #28
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	3320      	adds	r3, #32
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	3324      	adds	r3, #36	; 0x24
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	3301      	adds	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	791b      	ldrb	r3, [r3, #4]
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	429a      	cmp	r2, r3
 8002214:	d3af      	bcc.n	8002176 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	e044      	b.n	80022a6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	f203 2355 	addw	r3, r3, #597	; 0x255
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	3301      	adds	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	791b      	ldrb	r3, [r3, #4]
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d3b5      	bcc.n	800221c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	7c1a      	ldrb	r2, [r3, #16]
 80022b8:	f88d 2000 	strb.w	r2, [sp]
 80022bc:	3304      	adds	r3, #4
 80022be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c0:	f001 ff8a 	bl	80041d8 <USB_DevInit>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2202      	movs	r2, #2
 80022ce:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00c      	b.n	80022f0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f002 ffce 	bl	800528a <USB_DevDisconnect>

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_PCD_Start+0x1c>
 8002310:	2302      	movs	r3, #2
 8002312:	e022      	b.n	800235a <HAL_PCD_Start+0x62>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800232c:	2b01      	cmp	r3, #1
 800232e:	d105      	bne.n	800233c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002334:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f001 fedb 	bl	80040fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f002 ff7c 	bl	8005248 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002362:	b590      	push	{r4, r7, lr}
 8002364:	b08d      	sub	sp, #52	; 0x34
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f003 f83a 	bl	80053f2 <USB_GetMode>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	f040 848c 	bne.w	8002c9e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f002 ff9e 	bl	80052cc <USB_ReadInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 8482 	beq.w	8002c9c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f002 ff8b 	bl	80052cc <USB_ReadInterrupts>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d107      	bne.n	80023d0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f002 0202 	and.w	r2, r2, #2
 80023ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f002 ff79 	bl	80052cc <USB_ReadInterrupts>
 80023da:	4603      	mov	r3, r0
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b10      	cmp	r3, #16
 80023e2:	d161      	bne.n	80024a8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0210 	bic.w	r2, r2, #16
 80023f2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	f003 020f 	and.w	r2, r3, #15
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	4413      	add	r3, r2
 8002410:	3304      	adds	r3, #4
 8002412:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	0c5b      	lsrs	r3, r3, #17
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	2b02      	cmp	r3, #2
 800241e:	d124      	bne.n	800246a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002426:	4013      	ands	r3, r2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d035      	beq.n	8002498 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800243a:	b29b      	uxth	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	6a38      	ldr	r0, [r7, #32]
 8002440:	f002 fdb0 	bl	8004fa4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002450:	441a      	add	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002462:	441a      	add	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	615a      	str	r2, [r3, #20]
 8002468:	e016      	b.n	8002498 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	0c5b      	lsrs	r3, r3, #17
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	2b06      	cmp	r3, #6
 8002474:	d110      	bne.n	8002498 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800247c:	2208      	movs	r2, #8
 800247e:	4619      	mov	r1, r3
 8002480:	6a38      	ldr	r0, [r7, #32]
 8002482:	f002 fd8f 	bl	8004fa4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002492:	441a      	add	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0210 	orr.w	r2, r2, #16
 80024a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f002 ff0d 	bl	80052cc <USB_ReadInterrupts>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024bc:	f040 80a7 	bne.w	800260e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f002 ff12 	bl	80052f2 <USB_ReadDevAllOutEpInterrupt>
 80024ce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80024d0:	e099      	b.n	8002606 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80024d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 808e 	beq.w	80025fa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 ff36 	bl	800535a <USB_ReadDevOutEPInterrupt>
 80024ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00c      	beq.n	8002514 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002506:	461a      	mov	r2, r3
 8002508:	2301      	movs	r3, #1
 800250a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800250c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fea2 	bl	8003258 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00c      	beq.n	8002538 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	4413      	add	r3, r2
 8002526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800252a:	461a      	mov	r2, r3
 800252c:	2308      	movs	r3, #8
 800252e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 ff78 	bl	8003428 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	4413      	add	r3, r2
 800254a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800254e:	461a      	mov	r2, r3
 8002550:	2310      	movs	r3, #16
 8002552:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d030      	beq.n	80025c0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002566:	2b80      	cmp	r3, #128	; 0x80
 8002568:	d109      	bne.n	800257e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002578:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800257c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800257e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	78db      	ldrb	r3, [r3, #3]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d108      	bne.n	80025ae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2200      	movs	r2, #0
 80025a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f005 fab1 	bl	8007b10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ba:	461a      	mov	r2, r3
 80025bc:	2302      	movs	r3, #2
 80025be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d008      	beq.n	80025dc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d6:	461a      	mov	r2, r3
 80025d8:	2320      	movs	r3, #32
 80025da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f2:	461a      	mov	r2, r3
 80025f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	3301      	adds	r3, #1
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002602:	085b      	lsrs	r3, r3, #1
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	2b00      	cmp	r3, #0
 800260a:	f47f af62 	bne.w	80024d2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f002 fe5a 	bl	80052cc <USB_ReadInterrupts>
 8002618:	4603      	mov	r3, r0
 800261a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002622:	f040 80db 	bne.w	80027dc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f002 fe7b 	bl	8005326 <USB_ReadDevAllInEpInterrupt>
 8002630:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002636:	e0cd      	b.n	80027d4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 80c2 	beq.w	80027c8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f002 fea1 	bl	8005396 <USB_ReadDevInEPInterrupt>
 8002654:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d057      	beq.n	8002710 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	2201      	movs	r2, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	43db      	mvns	r3, r3
 800267a:	69f9      	ldr	r1, [r7, #28]
 800267c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002680:	4013      	ands	r3, r2
 8002682:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	4413      	add	r3, r2
 800268c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002690:	461a      	mov	r2, r3
 8002692:	2301      	movs	r3, #1
 8002694:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	799b      	ldrb	r3, [r3, #6]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d132      	bne.n	8002704 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	3320      	adds	r3, #32
 80026ae:	6819      	ldr	r1, [r3, #0]
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4403      	add	r3, r0
 80026be:	331c      	adds	r3, #28
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4419      	add	r1, r3
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4403      	add	r3, r0
 80026d2:	3320      	adds	r3, #32
 80026d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d113      	bne.n	8002704 <HAL_PCD_IRQHandler+0x3a2>
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	3324      	adds	r3, #36	; 0x24
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d108      	bne.n	8002704 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80026fc:	461a      	mov	r2, r3
 80026fe:	2101      	movs	r1, #1
 8002700:	f002 fea8 	bl	8005454 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	b2db      	uxtb	r3, r3
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f005 f985 	bl	8007a1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	4413      	add	r3, r2
 8002722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002726:	461a      	mov	r2, r3
 8002728:	2308      	movs	r3, #8
 800272a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f003 0310 	and.w	r3, r3, #16
 8002732:	2b00      	cmp	r3, #0
 8002734:	d008      	beq.n	8002748 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	4413      	add	r3, r2
 800273e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002742:	461a      	mov	r2, r3
 8002744:	2310      	movs	r3, #16
 8002746:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d008      	beq.n	8002764 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	4413      	add	r3, r2
 800275a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800275e:	461a      	mov	r2, r3
 8002760:	2340      	movs	r3, #64	; 0x40
 8002762:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d023      	beq.n	80027b6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800276e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002770:	6a38      	ldr	r0, [r7, #32]
 8002772:	f001 fe95 	bl	80044a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	3310      	adds	r3, #16
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	3304      	adds	r3, #4
 8002788:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	78db      	ldrb	r3, [r3, #3]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d108      	bne.n	80027a4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2200      	movs	r2, #0
 8002796:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	b2db      	uxtb	r3, r3
 800279c:	4619      	mov	r1, r3
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f005 f9c8 	bl	8007b34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b0:	461a      	mov	r2, r3
 80027b2:	2302      	movs	r3, #2
 80027b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fcbb 	bl	800313e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	3301      	adds	r3, #1
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f47f af2e 	bne.w	8002638 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f002 fd73 	bl	80052cc <USB_ReadInterrupts>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027f0:	d122      	bne.n	8002838 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800280c:	2b01      	cmp	r3, #1
 800280e:	d108      	bne.n	8002822 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002818:	2100      	movs	r1, #0
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fea2 	bl	8003564 <HAL_PCDEx_LPM_Callback>
 8002820:	e002      	b.n	8002828 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f005 f966 	bl	8007af4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002836:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f002 fd45 	bl	80052cc <USB_ReadInterrupts>
 8002842:	4603      	mov	r3, r0
 8002844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800284c:	d112      	bne.n	8002874 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b01      	cmp	r3, #1
 800285c:	d102      	bne.n	8002864 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f005 f922 	bl	8007aa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002872:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f002 fd27 	bl	80052cc <USB_ReadInterrupts>
 800287e:	4603      	mov	r3, r0
 8002880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002888:	f040 80b7 	bne.w	80029fa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2110      	movs	r1, #16
 80028a6:	4618      	mov	r0, r3
 80028a8:	f001 fdfa 	bl	80044a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b0:	e046      	b.n	8002940 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028be:	461a      	mov	r2, r3
 80028c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d6:	0151      	lsls	r1, r2, #5
 80028d8:	69fa      	ldr	r2, [r7, #28]
 80028da:	440a      	add	r2, r1
 80028dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f2:	461a      	mov	r2, r3
 80028f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	4413      	add	r3, r2
 8002902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800290a:	0151      	lsls	r1, r2, #5
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	440a      	add	r2, r1
 8002910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002914:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002918:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	4413      	add	r3, r2
 8002922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800292a:	0151      	lsls	r1, r2, #5
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	440a      	add	r2, r1
 8002930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002934:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002938:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	3301      	adds	r3, #1
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	791b      	ldrb	r3, [r3, #4]
 8002944:	461a      	mov	r2, r3
 8002946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002948:	4293      	cmp	r3, r2
 800294a:	d3b2      	bcc.n	80028b2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800295a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800295e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7bdb      	ldrb	r3, [r3, #15]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d016      	beq.n	8002996 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800296e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002978:	f043 030b 	orr.w	r3, r3, #11
 800297c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800298e:	f043 030b 	orr.w	r3, r3, #11
 8002992:	6453      	str	r3, [r2, #68]	; 0x44
 8002994:	e015      	b.n	80029c2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029a8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80029ac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029bc:	f043 030b 	orr.w	r3, r3, #11
 80029c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80029d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029e4:	461a      	mov	r2, r3
 80029e6:	f002 fd35 	bl	8005454 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f002 fc64 	bl	80052cc <USB_ReadInterrupts>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a0e:	d123      	bne.n	8002a58 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f002 fcfa 	bl	800540e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f001 fdb7 	bl	8004592 <USB_GetDevSpeed>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681c      	ldr	r4, [r3, #0]
 8002a30:	f001 f9c8 	bl	8003dc4 <HAL_RCC_GetHCLKFreq>
 8002a34:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f001 fabb 	bl	8003fb8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f005 f811 	bl	8007a6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f002 fc35 	bl	80052cc <USB_ReadInterrupts>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d10a      	bne.n	8002a82 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f004 ffee 	bl	8007a4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f002 0208 	and.w	r2, r2, #8
 8002a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f002 fc20 	bl	80052cc <USB_ReadInterrupts>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a92:	2b80      	cmp	r3, #128	; 0x80
 8002a94:	d123      	bne.n	8002ade <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa6:	e014      	b.n	8002ad2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d105      	bne.n	8002acc <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fb08 	bl	80030dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	3301      	adds	r3, #1
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	791b      	ldrb	r3, [r3, #4]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d3e4      	bcc.n	8002aa8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f002 fbf2 	bl	80052cc <USB_ReadInterrupts>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002af2:	d13c      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002af4:	2301      	movs	r3, #1
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
 8002af8:	e02b      	b.n	8002b52 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	3318      	adds	r3, #24
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d115      	bne.n	8002b4c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b20:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	da12      	bge.n	8002b4c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	3317      	adds	r3, #23
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	4619      	mov	r1, r3
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fac8 	bl	80030dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	3301      	adds	r3, #1
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	791b      	ldrb	r3, [r3, #4]
 8002b56:	461a      	mov	r2, r3
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d3cd      	bcc.n	8002afa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f002 fbaa 	bl	80052cc <USB_ReadInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b82:	d156      	bne.n	8002c32 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b84:	2301      	movs	r3, #1
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
 8002b88:	e045      	b.n	8002c16 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d12e      	bne.n	8002c10 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bb2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	da2b      	bge.n	8002c10 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002bc4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d121      	bne.n	8002c10 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10a      	bne.n	8002c10 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	69fa      	ldr	r2, [r7, #28]
 8002c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c0c:	6053      	str	r3, [r2, #4]
            break;
 8002c0e:	e008      	b.n	8002c22 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	3301      	adds	r3, #1
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	791b      	ldrb	r3, [r3, #4]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d3b3      	bcc.n	8002b8a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f002 fb48 	bl	80052cc <USB_ReadInterrupts>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c46:	d10a      	bne.n	8002c5e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f004 ff85 	bl	8007b58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f002 fb32 	bl	80052cc <USB_ReadInterrupts>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d115      	bne.n	8002c9e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f004 ff75 	bl	8007b74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	e000      	b.n	8002c9e <HAL_PCD_IRQHandler+0x93c>
      return;
 8002c9c:	bf00      	nop
    }
  }
}
 8002c9e:	3734      	adds	r7, #52	; 0x34
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd90      	pop	{r4, r7, pc}

08002ca4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_PCD_SetAddress+0x1a>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e012      	b.n	8002ce4 <HAL_PCD_SetAddress+0x40>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f002 fa91 	bl	80051fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	70fb      	strb	r3, [r7, #3]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	803b      	strh	r3, [r7, #0]
 8002d02:	4613      	mov	r3, r2
 8002d04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	da0f      	bge.n	8002d32 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	f003 020f 	and.w	r2, r3, #15
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	3310      	adds	r3, #16
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	3304      	adds	r3, #4
 8002d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	705a      	strb	r2, [r3, #1]
 8002d30:	e00f      	b.n	8002d52 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d32:	78fb      	ldrb	r3, [r7, #3]
 8002d34:	f003 020f 	and.w	r2, r3, #15
 8002d38:	4613      	mov	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	3304      	adds	r3, #4
 8002d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d5e:	883a      	ldrh	r2, [r7, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	78ba      	ldrb	r2, [r7, #2]
 8002d68:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	785b      	ldrb	r3, [r3, #1]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d7c:	78bb      	ldrb	r3, [r7, #2]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d102      	bne.n	8002d88 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_PCD_EP_Open+0xaa>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e00e      	b.n	8002db4 <HAL_PCD_EP_Open+0xc8>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68f9      	ldr	r1, [r7, #12]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f001 fc19 	bl	80045dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002db2:	7afb      	ldrb	r3, [r7, #11]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	da0f      	bge.n	8002df0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	f003 020f 	and.w	r2, r3, #15
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	3310      	adds	r3, #16
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	4413      	add	r3, r2
 8002de4:	3304      	adds	r3, #4
 8002de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	705a      	strb	r2, [r3, #1]
 8002dee:	e00f      	b.n	8002e10 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	f003 020f 	and.w	r2, r3, #15
 8002df6:	4613      	mov	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	3304      	adds	r3, #4
 8002e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_PCD_EP_Close+0x6e>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e00e      	b.n	8002e48 <HAL_PCD_EP_Close+0x8c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68f9      	ldr	r1, [r7, #12]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f001 fc57 	bl	80046ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e60:	7afb      	ldrb	r3, [r7, #11]
 8002e62:	f003 020f 	and.w	r2, r3, #15
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4413      	add	r3, r2
 8002e76:	3304      	adds	r3, #4
 8002e78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e92:	7afb      	ldrb	r3, [r7, #11]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	799b      	ldrb	r3, [r3, #6]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d102      	bne.n	8002eac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	799b      	ldrb	r3, [r3, #6]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	6979      	ldr	r1, [r7, #20]
 8002eb8:	f001 fcf4 	bl	80048a4 <USB_EPStartXfer>

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	f003 020f 	and.w	r2, r3, #15
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002ee8:	681b      	ldr	r3, [r3, #0]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b086      	sub	sp, #24
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	460b      	mov	r3, r1
 8002f04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f06:	7afb      	ldrb	r3, [r7, #11]
 8002f08:	f003 020f 	and.w	r2, r3, #15
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	3310      	adds	r3, #16
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4413      	add	r3, r2
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2201      	movs	r2, #1
 8002f34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f36:	7afb      	ldrb	r3, [r7, #11]
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	799b      	ldrb	r3, [r3, #6]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d102      	bne.n	8002f50 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	799b      	ldrb	r3, [r3, #6]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	6979      	ldr	r1, [r7, #20]
 8002f5c:	f001 fca2 	bl	80048a4 <USB_EPStartXfer>

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	7912      	ldrb	r2, [r2, #4]
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e04f      	b.n	8003028 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	da0f      	bge.n	8002fb0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 020f 	and.w	r2, r3, #15
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	3310      	adds	r3, #16
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	705a      	strb	r2, [r3, #1]
 8002fae:	e00d      	b.n	8002fcc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_PCD_EP_SetStall+0x82>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e01d      	b.n	8003028 <HAL_PCD_EP_SetStall+0xbe>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68f9      	ldr	r1, [r7, #12]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f002 f82a 	bl	8005054 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	7999      	ldrb	r1, [r3, #6]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003018:	461a      	mov	r2, r3
 800301a:	f002 fa1b 	bl	8005454 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	7912      	ldrb	r2, [r2, #4]
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e042      	b.n	80030d4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800304e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003052:	2b00      	cmp	r3, #0
 8003054:	da0f      	bge.n	8003076 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	3310      	adds	r3, #16
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	3304      	adds	r3, #4
 800306c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	705a      	strb	r2, [r3, #1]
 8003074:	e00f      	b.n	8003096 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	f003 020f 	and.w	r2, r3, #15
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	3304      	adds	r3, #4
 800308e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_PCD_EP_ClrStall+0x86>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e00e      	b.n	80030d4 <HAL_PCD_EP_ClrStall+0xa4>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68f9      	ldr	r1, [r7, #12]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f002 f833 	bl	8005130 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80030e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	da0c      	bge.n	800310a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	f003 020f 	and.w	r2, r3, #15
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	3310      	adds	r3, #16
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	e00c      	b.n	8003124 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	f003 020f 	and.w	r2, r3, #15
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	4413      	add	r3, r2
 8003120:	3304      	adds	r3, #4
 8003122:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68f9      	ldr	r1, [r7, #12]
 800312a:	4618      	mov	r0, r3
 800312c:	f001 fe52 	bl	8004dd4 <USB_EPStopXfer>
 8003130:	4603      	mov	r3, r0
 8003132:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003134:	7afb      	ldrb	r3, [r7, #11]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b08a      	sub	sp, #40	; 0x28
 8003142:	af02      	add	r7, sp, #8
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	3310      	adds	r3, #16
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	3304      	adds	r3, #4
 8003164:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	429a      	cmp	r2, r3
 8003170:	d901      	bls.n	8003176 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e06b      	b.n	800324e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	429a      	cmp	r2, r3
 800318a:	d902      	bls.n	8003192 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3303      	adds	r3, #3
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800319a:	e02a      	b.n	80031f2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d902      	bls.n	80031b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	3303      	adds	r3, #3
 80031bc:	089b      	lsrs	r3, r3, #2
 80031be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	68d9      	ldr	r1, [r3, #12]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	4603      	mov	r3, r0
 80031d4:	6978      	ldr	r0, [r7, #20]
 80031d6:	f001 fea7 	bl	8004f28 <USB_WritePacket>

    ep->xfer_buff  += len;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	441a      	add	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	441a      	add	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	429a      	cmp	r2, r3
 8003206:	d809      	bhi.n	800321c <PCD_WriteEmptyTxFifo+0xde>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	695a      	ldr	r2, [r3, #20]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003210:	429a      	cmp	r2, r3
 8003212:	d203      	bcs.n	800321c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1bf      	bne.n	800319c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	429a      	cmp	r2, r3
 8003226:	d811      	bhi.n	800324c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	2201      	movs	r2, #1
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	43db      	mvns	r3, r3
 8003242:	6939      	ldr	r1, [r7, #16]
 8003244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003248:	4013      	ands	r3, r2
 800324a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	333c      	adds	r3, #60	; 0x3c
 8003270:	3304      	adds	r3, #4
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	799b      	ldrb	r3, [r3, #6]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d17b      	bne.n	8003386 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d015      	beq.n	80032c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	4a61      	ldr	r2, [pc, #388]	; (8003420 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	f240 80b9 	bls.w	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80b3 	beq.w	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ba:	461a      	mov	r2, r3
 80032bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c0:	6093      	str	r3, [r2, #8]
 80032c2:	e0a7      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032da:	461a      	mov	r2, r3
 80032dc:	2320      	movs	r3, #32
 80032de:	6093      	str	r3, [r2, #8]
 80032e0:	e098      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f040 8093 	bne.w	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	4a4b      	ldr	r2, [pc, #300]	; (8003420 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d90f      	bls.n	8003316 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330c:	461a      	mov	r2, r3
 800330e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003312:	6093      	str	r3, [r2, #8]
 8003314:	e07e      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4413      	add	r3, r2
 8003328:	3304      	adds	r3, #4
 800332a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1a      	ldr	r2, [r3, #32]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	0159      	lsls	r1, r3, #5
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	440b      	add	r3, r1
 8003338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003342:	1ad2      	subs	r2, r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d114      	bne.n	8003378 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003360:	461a      	mov	r2, r3
 8003362:	2101      	movs	r1, #1
 8003364:	f002 f876 	bl	8005454 <USB_EP0_OutStart>
 8003368:	e006      	b.n	8003378 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	441a      	add	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	4619      	mov	r1, r3
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f004 fb30 	bl	80079e4 <HAL_PCD_DataOutStageCallback>
 8003384:	e046      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	4a26      	ldr	r2, [pc, #152]	; (8003424 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d124      	bne.n	80033d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a4:	461a      	mov	r2, r3
 80033a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033aa:	6093      	str	r3, [r2, #8]
 80033ac:	e032      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c4:	461a      	mov	r2, r3
 80033c6:	2320      	movs	r3, #32
 80033c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f004 fb07 	bl	80079e4 <HAL_PCD_DataOutStageCallback>
 80033d6:	e01d      	b.n	8003414 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d114      	bne.n	8003408 <PCD_EP_OutXfrComplete_int+0x1b0>
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d108      	bne.n	8003408 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003400:	461a      	mov	r2, r3
 8003402:	2100      	movs	r1, #0
 8003404:	f002 f826 	bl	8005454 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f004 fae8 	bl	80079e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	4f54300a 	.word	0x4f54300a
 8003424:	4f54310a 	.word	0x4f54310a

08003428 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	333c      	adds	r3, #60	; 0x3c
 8003440:	3304      	adds	r3, #4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4a15      	ldr	r2, [pc, #84]	; (80034b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d90e      	bls.n	800347c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003464:	2b00      	cmp	r3, #0
 8003466:	d009      	beq.n	800347c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003474:	461a      	mov	r2, r3
 8003476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f004 fa9f 	bl	80079c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d90c      	bls.n	80034a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	799b      	ldrb	r3, [r3, #6]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d108      	bne.n	80034a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800349c:	461a      	mov	r2, r3
 800349e:	2101      	movs	r1, #1
 80034a0:	f001 ffd8 	bl	8005454 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	4f54300a 	.word	0x4f54300a

080034b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
 80034c0:	4613      	mov	r3, r2
 80034c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d107      	bne.n	80034e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034d2:	883b      	ldrh	r3, [r7, #0]
 80034d4:	0419      	lsls	r1, r3, #16
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	430a      	orrs	r2, r1
 80034de:	629a      	str	r2, [r3, #40]	; 0x28
 80034e0:	e028      	b.n	8003534 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	0c1b      	lsrs	r3, r3, #16
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	4413      	add	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034f0:	2300      	movs	r3, #0
 80034f2:	73fb      	strb	r3, [r7, #15]
 80034f4:	e00d      	b.n	8003512 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	3340      	adds	r3, #64	; 0x40
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	0c1b      	lsrs	r3, r3, #16
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	4413      	add	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	3301      	adds	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	3b01      	subs	r3, #1
 8003518:	429a      	cmp	r2, r3
 800351a:	d3ec      	bcc.n	80034f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800351c:	883b      	ldrh	r3, [r7, #0]
 800351e:	0418      	lsls	r0, r3, #16
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6819      	ldr	r1, [r3, #0]
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	3b01      	subs	r3, #1
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	4302      	orrs	r2, r0
 800352c:	3340      	adds	r3, #64	; 0x40
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	460b      	mov	r3, r1
 800354c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	887a      	ldrh	r2, [r7, #2]
 8003554:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e267      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d075      	beq.n	8003686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800359a:	4b88      	ldr	r3, [pc, #544]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d00c      	beq.n	80035c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035a6:	4b85      	ldr	r3, [pc, #532]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d112      	bne.n	80035d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b2:	4b82      	ldr	r3, [pc, #520]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035be:	d10b      	bne.n	80035d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	4b7e      	ldr	r3, [pc, #504]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d05b      	beq.n	8003684 <HAL_RCC_OscConfig+0x108>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d157      	bne.n	8003684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e242      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e0:	d106      	bne.n	80035f0 <HAL_RCC_OscConfig+0x74>
 80035e2:	4b76      	ldr	r3, [pc, #472]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a75      	ldr	r2, [pc, #468]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e01d      	b.n	800362c <HAL_RCC_OscConfig+0xb0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x98>
 80035fa:	4b70      	ldr	r3, [pc, #448]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a6f      	ldr	r2, [pc, #444]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b6d      	ldr	r3, [pc, #436]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6c      	ldr	r2, [pc, #432]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0xb0>
 8003614:	4b69      	ldr	r3, [pc, #420]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a68      	ldr	r2, [pc, #416]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 800361a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b66      	ldr	r3, [pc, #408]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a65      	ldr	r2, [pc, #404]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fe fa72 	bl	8001b1c <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800363c:	f7fe fa6e 	bl	8001b1c <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e207      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	4b5b      	ldr	r3, [pc, #364]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0xc0>
 800365a:	e014      	b.n	8003686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fe fa5e 	bl	8001b1c <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003664:	f7fe fa5a 	bl	8001b1c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	; 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e1f3      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003676:	4b51      	ldr	r3, [pc, #324]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0xe8>
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d063      	beq.n	800375a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003692:	4b4a      	ldr	r3, [pc, #296]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800369e:	4b47      	ldr	r3, [pc, #284]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d11c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036aa:	4b44      	ldr	r3, [pc, #272]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d116      	bne.n	80036e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b6:	4b41      	ldr	r3, [pc, #260]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_RCC_OscConfig+0x152>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e1c7      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ce:	4b3b      	ldr	r3, [pc, #236]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4937      	ldr	r1, [pc, #220]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	e03a      	b.n	800375a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ec:	4b34      	ldr	r3, [pc, #208]	; (80037c0 <HAL_RCC_OscConfig+0x244>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fe fa13 	bl	8001b1c <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036fa:	f7fe fa0f 	bl	8001b1c <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e1a8      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370c:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003718:	4b28      	ldr	r3, [pc, #160]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4925      	ldr	r1, [pc, #148]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]
 800372c:	e015      	b.n	800375a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372e:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <HAL_RCC_OscConfig+0x244>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fe f9f2 	bl	8001b1c <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800373c:	f7fe f9ee 	bl	8001b1c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e187      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374e:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d036      	beq.n	80037d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d016      	beq.n	800379c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <HAL_RCC_OscConfig+0x248>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7fe f9d2 	bl	8001b1c <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800377c:	f7fe f9ce 	bl	8001b1c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e167      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCC_OscConfig+0x240>)
 8003790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x200>
 800379a:	e01b      	b.n	80037d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800379c:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <HAL_RCC_OscConfig+0x248>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a2:	f7fe f9bb 	bl	8001b1c <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	e00e      	b.n	80037c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037aa:	f7fe f9b7 	bl	8001b1c <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d907      	bls.n	80037c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e150      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
 80037bc:	40023800 	.word	0x40023800
 80037c0:	42470000 	.word	0x42470000
 80037c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c8:	4b88      	ldr	r3, [pc, #544]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 80037ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ea      	bne.n	80037aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8097 	beq.w	8003910 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e2:	2300      	movs	r3, #0
 80037e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e6:	4b81      	ldr	r3, [pc, #516]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10f      	bne.n	8003812 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	4b7d      	ldr	r3, [pc, #500]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	4a7c      	ldr	r2, [pc, #496]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 80037fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003800:	6413      	str	r3, [r2, #64]	; 0x40
 8003802:	4b7a      	ldr	r3, [pc, #488]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380e:	2301      	movs	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003812:	4b77      	ldr	r3, [pc, #476]	; (80039f0 <HAL_RCC_OscConfig+0x474>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d118      	bne.n	8003850 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800381e:	4b74      	ldr	r3, [pc, #464]	; (80039f0 <HAL_RCC_OscConfig+0x474>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a73      	ldr	r2, [pc, #460]	; (80039f0 <HAL_RCC_OscConfig+0x474>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382a:	f7fe f977 	bl	8001b1c <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003832:	f7fe f973 	bl	8001b1c <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e10c      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003844:	4b6a      	ldr	r3, [pc, #424]	; (80039f0 <HAL_RCC_OscConfig+0x474>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d106      	bne.n	8003866 <HAL_RCC_OscConfig+0x2ea>
 8003858:	4b64      	ldr	r3, [pc, #400]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	4a63      	ldr	r2, [pc, #396]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6713      	str	r3, [r2, #112]	; 0x70
 8003864:	e01c      	b.n	80038a0 <HAL_RCC_OscConfig+0x324>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b05      	cmp	r3, #5
 800386c:	d10c      	bne.n	8003888 <HAL_RCC_OscConfig+0x30c>
 800386e:	4b5f      	ldr	r3, [pc, #380]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	4a5e      	ldr	r2, [pc, #376]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	6713      	str	r3, [r2, #112]	; 0x70
 800387a:	4b5c      	ldr	r3, [pc, #368]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	4a5b      	ldr	r2, [pc, #364]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6713      	str	r3, [r2, #112]	; 0x70
 8003886:	e00b      	b.n	80038a0 <HAL_RCC_OscConfig+0x324>
 8003888:	4b58      	ldr	r3, [pc, #352]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	4a57      	ldr	r2, [pc, #348]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	6713      	str	r3, [r2, #112]	; 0x70
 8003894:	4b55      	ldr	r3, [pc, #340]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	4a54      	ldr	r2, [pc, #336]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 800389a:	f023 0304 	bic.w	r3, r3, #4
 800389e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d015      	beq.n	80038d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7fe f938 	bl	8001b1c <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b0:	f7fe f934 	bl	8001b1c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e0cb      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c6:	4b49      	ldr	r3, [pc, #292]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0ee      	beq.n	80038b0 <HAL_RCC_OscConfig+0x334>
 80038d2:	e014      	b.n	80038fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d4:	f7fe f922 	bl	8001b1c <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7fe f91e 	bl	8001b1c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e0b5      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f2:	4b3e      	ldr	r3, [pc, #248]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1ee      	bne.n	80038dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d105      	bne.n	8003910 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003904:	4b39      	ldr	r3, [pc, #228]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	4a38      	ldr	r2, [pc, #224]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 800390a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800390e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80a1 	beq.w	8003a5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800391a:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b08      	cmp	r3, #8
 8003924:	d05c      	beq.n	80039e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d141      	bne.n	80039b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392e:	4b31      	ldr	r3, [pc, #196]	; (80039f4 <HAL_RCC_OscConfig+0x478>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7fe f8f2 	bl	8001b1c <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393c:	f7fe f8ee 	bl	8001b1c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e087      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	4b27      	ldr	r3, [pc, #156]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69da      	ldr	r2, [r3, #28]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	019b      	lsls	r3, r3, #6
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	3b01      	subs	r3, #1
 8003974:	041b      	lsls	r3, r3, #16
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	491b      	ldr	r1, [pc, #108]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 8003980:	4313      	orrs	r3, r2
 8003982:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003984:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <HAL_RCC_OscConfig+0x478>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398a:	f7fe f8c7 	bl	8001b1c <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003992:	f7fe f8c3 	bl	8001b1c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e05c      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a4:	4b11      	ldr	r3, [pc, #68]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x416>
 80039b0:	e054      	b.n	8003a5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_RCC_OscConfig+0x478>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fe f8b0 	bl	8001b1c <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c0:	f7fe f8ac 	bl	8001b1c <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e045      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_RCC_OscConfig+0x470>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x444>
 80039de:	e03d      	b.n	8003a5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d107      	bne.n	80039f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e038      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40007000 	.word	0x40007000
 80039f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039f8:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <HAL_RCC_OscConfig+0x4ec>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d028      	beq.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d121      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d11a      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a28:	4013      	ands	r3, r2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d111      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	3b01      	subs	r3, #1
 8003a42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800

08003a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0cc      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a80:	4b68      	ldr	r3, [pc, #416]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d90c      	bls.n	8003aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8e:	4b65      	ldr	r3, [pc, #404]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b63      	ldr	r3, [pc, #396]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0b8      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d020      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac0:	4b59      	ldr	r3, [pc, #356]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4a58      	ldr	r2, [pc, #352]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ad8:	4b53      	ldr	r3, [pc, #332]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	4a52      	ldr	r2, [pc, #328]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae4:	4b50      	ldr	r3, [pc, #320]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	494d      	ldr	r1, [pc, #308]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d044      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0a:	4b47      	ldr	r3, [pc, #284]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d119      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e07f      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d003      	beq.n	8003b2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d107      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2a:	4b3f      	ldr	r3, [pc, #252]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d109      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e06f      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3a:	4b3b      	ldr	r3, [pc, #236]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e067      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4a:	4b37      	ldr	r3, [pc, #220]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f023 0203 	bic.w	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4934      	ldr	r1, [pc, #208]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b5c:	f7fd ffde 	bl	8001b1c <HAL_GetTick>
 8003b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b64:	f7fd ffda 	bl	8001b1c <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e04f      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7a:	4b2b      	ldr	r3, [pc, #172]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 020c 	and.w	r2, r3, #12
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d1eb      	bne.n	8003b64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b8c:	4b25      	ldr	r3, [pc, #148]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d20c      	bcs.n	8003bb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9a:	4b22      	ldr	r3, [pc, #136]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b20      	ldr	r3, [pc, #128]	; (8003c24 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e032      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc0:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4916      	ldr	r1, [pc, #88]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d009      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bde:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	490e      	ldr	r1, [pc, #56]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bf2:	f000 f821 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	490a      	ldr	r1, [pc, #40]	; (8003c2c <HAL_RCC_ClockConfig+0x1c0>)
 8003c04:	5ccb      	ldrb	r3, [r1, r3]
 8003c06:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0a:	4a09      	ldr	r2, [pc, #36]	; (8003c30 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c0e:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_RCC_ClockConfig+0x1c8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fd ff3e 	bl	8001a94 <HAL_InitTick>

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40023c00 	.word	0x40023c00
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	0800c904 	.word	0x0800c904
 8003c30:	20000000 	.word	0x20000000
 8003c34:	20000004 	.word	0x20000004

08003c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c3c:	b090      	sub	sp, #64	; 0x40
 8003c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	637b      	str	r3, [r7, #52]	; 0x34
 8003c44:	2300      	movs	r3, #0
 8003c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c48:	2300      	movs	r3, #0
 8003c4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c50:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d00d      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x40>
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	f200 80a1 	bhi.w	8003da4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x34>
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d003      	beq.n	8003c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c6a:	e09b      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c6c:	4b53      	ldr	r3, [pc, #332]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8003c6e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c70:	e09b      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c72:	4b53      	ldr	r3, [pc, #332]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c76:	e098      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c78:	4b4f      	ldr	r3, [pc, #316]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c80:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c82:	4b4d      	ldr	r3, [pc, #308]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d028      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c8e:	4b4a      	ldr	r3, [pc, #296]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	099b      	lsrs	r3, r3, #6
 8003c94:	2200      	movs	r2, #0
 8003c96:	623b      	str	r3, [r7, #32]
 8003c98:	627a      	str	r2, [r7, #36]	; 0x24
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4b47      	ldr	r3, [pc, #284]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ca4:	fb03 f201 	mul.w	r2, r3, r1
 8003ca8:	2300      	movs	r3, #0
 8003caa:	fb00 f303 	mul.w	r3, r0, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	4a43      	ldr	r2, [pc, #268]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cb2:	fba0 1202 	umull	r1, r2, r0, r2
 8003cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cb8:	460a      	mov	r2, r1
 8003cba:	62ba      	str	r2, [r7, #40]	; 0x28
 8003cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cbe:	4413      	add	r3, r2
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	61fa      	str	r2, [r7, #28]
 8003cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003cd2:	f7fc ffe1 	bl	8000c98 <__aeabi_uldivmod>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4613      	mov	r3, r2
 8003cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cde:	e053      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce0:	4b35      	ldr	r3, [pc, #212]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	099b      	lsrs	r3, r3, #6
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	617a      	str	r2, [r7, #20]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cf2:	f04f 0b00 	mov.w	fp, #0
 8003cf6:	4652      	mov	r2, sl
 8003cf8:	465b      	mov	r3, fp
 8003cfa:	f04f 0000 	mov.w	r0, #0
 8003cfe:	f04f 0100 	mov.w	r1, #0
 8003d02:	0159      	lsls	r1, r3, #5
 8003d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d08:	0150      	lsls	r0, r2, #5
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	ebb2 080a 	subs.w	r8, r2, sl
 8003d12:	eb63 090b 	sbc.w	r9, r3, fp
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d2a:	ebb2 0408 	subs.w	r4, r2, r8
 8003d2e:	eb63 0509 	sbc.w	r5, r3, r9
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	00eb      	lsls	r3, r5, #3
 8003d3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d40:	00e2      	lsls	r2, r4, #3
 8003d42:	4614      	mov	r4, r2
 8003d44:	461d      	mov	r5, r3
 8003d46:	eb14 030a 	adds.w	r3, r4, sl
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	eb45 030b 	adc.w	r3, r5, fp
 8003d50:	607b      	str	r3, [r7, #4]
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d5e:	4629      	mov	r1, r5
 8003d60:	028b      	lsls	r3, r1, #10
 8003d62:	4621      	mov	r1, r4
 8003d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d68:	4621      	mov	r1, r4
 8003d6a:	028a      	lsls	r2, r1, #10
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d72:	2200      	movs	r2, #0
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	60fa      	str	r2, [r7, #12]
 8003d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d7c:	f7fc ff8c 	bl	8000c98 <__aeabi_uldivmod>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4613      	mov	r3, r2
 8003d86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	0c1b      	lsrs	r3, r3, #16
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	3301      	adds	r3, #1
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003da2:	e002      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8003da6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3740      	adds	r7, #64	; 0x40
 8003db0:	46bd      	mov	sp, r7
 8003db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	00f42400 	.word	0x00f42400
 8003dc0:	017d7840 	.word	0x017d7840

08003dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc8:	4b03      	ldr	r3, [pc, #12]	; (8003dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dca:	681b      	ldr	r3, [r3, #0]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	20000000 	.word	0x20000000

08003ddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e07b      	b.n	8003ee6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d108      	bne.n	8003e08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dfe:	d009      	beq.n	8003e14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	61da      	str	r2, [r3, #28]
 8003e06:	e005      	b.n	8003e14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd fc70 	bl	8001714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e98:	ea42 0103 	orr.w	r1, r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	0c1b      	lsrs	r3, r3, #16
 8003eb2:	f003 0104 	and.w	r1, r3, #4
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	f003 0210 	and.w	r2, r3, #16
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ed4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003eee:	b084      	sub	sp, #16
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	f107 001c 	add.w	r0, r7, #28
 8003efc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f00:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d123      	bne.n	8003f50 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d105      	bne.n	8003f44 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f001 fae3 	bl	8005510 <USB_CoreReset>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	73fb      	strb	r3, [r7, #15]
 8003f4e:	e01b      	b.n	8003f88 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f001 fad7 	bl	8005510 <USB_CoreReset>
 8003f62:	4603      	mov	r3, r0
 8003f64:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f66:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	639a      	str	r2, [r3, #56]	; 0x38
 8003f7a:	e005      	b.n	8003f88 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f88:	7fbb      	ldrb	r3, [r7, #30]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d10b      	bne.n	8003fa6 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f043 0206 	orr.w	r2, r3, #6
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f043 0220 	orr.w	r2, r3, #32
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fb2:	b004      	add	sp, #16
 8003fb4:	4770      	bx	lr
	...

08003fb8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d165      	bne.n	8004098 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4a41      	ldr	r2, [pc, #260]	; (80040d4 <USB_SetTurnaroundTime+0x11c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d906      	bls.n	8003fe2 <USB_SetTurnaroundTime+0x2a>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4a40      	ldr	r2, [pc, #256]	; (80040d8 <USB_SetTurnaroundTime+0x120>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d202      	bcs.n	8003fe2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003fdc:	230f      	movs	r3, #15
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	e062      	b.n	80040a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4a3c      	ldr	r2, [pc, #240]	; (80040d8 <USB_SetTurnaroundTime+0x120>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d306      	bcc.n	8003ff8 <USB_SetTurnaroundTime+0x40>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	4a3b      	ldr	r2, [pc, #236]	; (80040dc <USB_SetTurnaroundTime+0x124>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d202      	bcs.n	8003ff8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ff2:	230e      	movs	r3, #14
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	e057      	b.n	80040a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4a38      	ldr	r2, [pc, #224]	; (80040dc <USB_SetTurnaroundTime+0x124>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d306      	bcc.n	800400e <USB_SetTurnaroundTime+0x56>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4a37      	ldr	r2, [pc, #220]	; (80040e0 <USB_SetTurnaroundTime+0x128>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d202      	bcs.n	800400e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004008:	230d      	movs	r3, #13
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	e04c      	b.n	80040a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4a33      	ldr	r2, [pc, #204]	; (80040e0 <USB_SetTurnaroundTime+0x128>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d306      	bcc.n	8004024 <USB_SetTurnaroundTime+0x6c>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4a32      	ldr	r2, [pc, #200]	; (80040e4 <USB_SetTurnaroundTime+0x12c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d802      	bhi.n	8004024 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800401e:	230c      	movs	r3, #12
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	e041      	b.n	80040a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4a2f      	ldr	r2, [pc, #188]	; (80040e4 <USB_SetTurnaroundTime+0x12c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d906      	bls.n	800403a <USB_SetTurnaroundTime+0x82>
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4a2e      	ldr	r2, [pc, #184]	; (80040e8 <USB_SetTurnaroundTime+0x130>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d802      	bhi.n	800403a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004034:	230b      	movs	r3, #11
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	e036      	b.n	80040a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4a2a      	ldr	r2, [pc, #168]	; (80040e8 <USB_SetTurnaroundTime+0x130>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d906      	bls.n	8004050 <USB_SetTurnaroundTime+0x98>
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4a29      	ldr	r2, [pc, #164]	; (80040ec <USB_SetTurnaroundTime+0x134>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d802      	bhi.n	8004050 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800404a:	230a      	movs	r3, #10
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	e02b      	b.n	80040a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4a26      	ldr	r2, [pc, #152]	; (80040ec <USB_SetTurnaroundTime+0x134>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d906      	bls.n	8004066 <USB_SetTurnaroundTime+0xae>
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4a25      	ldr	r2, [pc, #148]	; (80040f0 <USB_SetTurnaroundTime+0x138>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d202      	bcs.n	8004066 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004060:	2309      	movs	r3, #9
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	e020      	b.n	80040a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4a21      	ldr	r2, [pc, #132]	; (80040f0 <USB_SetTurnaroundTime+0x138>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d306      	bcc.n	800407c <USB_SetTurnaroundTime+0xc4>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4a20      	ldr	r2, [pc, #128]	; (80040f4 <USB_SetTurnaroundTime+0x13c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d802      	bhi.n	800407c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004076:	2308      	movs	r3, #8
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	e015      	b.n	80040a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <USB_SetTurnaroundTime+0x13c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d906      	bls.n	8004092 <USB_SetTurnaroundTime+0xda>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4a1c      	ldr	r2, [pc, #112]	; (80040f8 <USB_SetTurnaroundTime+0x140>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d202      	bcs.n	8004092 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800408c:	2307      	movs	r3, #7
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	e00a      	b.n	80040a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004092:	2306      	movs	r3, #6
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	e007      	b.n	80040a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d102      	bne.n	80040a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800409e:	2309      	movs	r3, #9
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	e001      	b.n	80040a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80040a4:	2309      	movs	r3, #9
 80040a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	029b      	lsls	r3, r3, #10
 80040bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80040c0:	431a      	orrs	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	371c      	adds	r7, #28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	00d8acbf 	.word	0x00d8acbf
 80040d8:	00e4e1c0 	.word	0x00e4e1c0
 80040dc:	00f42400 	.word	0x00f42400
 80040e0:	01067380 	.word	0x01067380
 80040e4:	011a499f 	.word	0x011a499f
 80040e8:	01312cff 	.word	0x01312cff
 80040ec:	014ca43f 	.word	0x014ca43f
 80040f0:	016e3600 	.word	0x016e3600
 80040f4:	01a6ab1f 	.word	0x01a6ab1f
 80040f8:	01e84800 	.word	0x01e84800

080040fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f043 0201 	orr.w	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f023 0201 	bic.w	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d115      	bne.n	800418e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800416e:	200a      	movs	r0, #10
 8004170:	f7fd fce0 	bl	8001b34 <HAL_Delay>
      ms += 10U;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	330a      	adds	r3, #10
 8004178:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f001 f939 	bl	80053f2 <USB_GetMode>
 8004180:	4603      	mov	r3, r0
 8004182:	2b01      	cmp	r3, #1
 8004184:	d01e      	beq.n	80041c4 <USB_SetCurrentMode+0x84>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2bc7      	cmp	r3, #199	; 0xc7
 800418a:	d9f0      	bls.n	800416e <USB_SetCurrentMode+0x2e>
 800418c:	e01a      	b.n	80041c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d115      	bne.n	80041c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80041a0:	200a      	movs	r0, #10
 80041a2:	f7fd fcc7 	bl	8001b34 <HAL_Delay>
      ms += 10U;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	330a      	adds	r3, #10
 80041aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f001 f920 	bl	80053f2 <USB_GetMode>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <USB_SetCurrentMode+0x84>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2bc7      	cmp	r3, #199	; 0xc7
 80041bc:	d9f0      	bls.n	80041a0 <USB_SetCurrentMode+0x60>
 80041be:	e001      	b.n	80041c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e005      	b.n	80041d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2bc8      	cmp	r3, #200	; 0xc8
 80041c8:	d101      	bne.n	80041ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041d8:	b084      	sub	sp, #16
 80041da:	b580      	push	{r7, lr}
 80041dc:	b086      	sub	sp, #24
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	e009      	b.n	800420c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	3340      	adds	r3, #64	; 0x40
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	2200      	movs	r2, #0
 8004204:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	3301      	adds	r3, #1
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b0e      	cmp	r3, #14
 8004210:	d9f2      	bls.n	80041f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004212:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004216:	2b00      	cmp	r3, #0
 8004218:	d11c      	bne.n	8004254 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004228:	f043 0302 	orr.w	r3, r3, #2
 800422c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	639a      	str	r2, [r3, #56]	; 0x38
 8004252:	e00b      	b.n	800426c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004272:	461a      	mov	r2, r3
 8004274:	2300      	movs	r3, #0
 8004276:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004278:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800427c:	2b01      	cmp	r3, #1
 800427e:	d10d      	bne.n	800429c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004284:	2b00      	cmp	r3, #0
 8004286:	d104      	bne.n	8004292 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004288:	2100      	movs	r1, #0
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f968 	bl	8004560 <USB_SetDevSpeed>
 8004290:	e008      	b.n	80042a4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004292:	2101      	movs	r1, #1
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f963 	bl	8004560 <USB_SetDevSpeed>
 800429a:	e003      	b.n	80042a4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800429c:	2103      	movs	r1, #3
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f95e 	bl	8004560 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042a4:	2110      	movs	r1, #16
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f8fa 	bl	80044a0 <USB_FlushTxFifo>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f924 	bl	8004504 <USB_FlushRxFifo>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042cc:	461a      	mov	r2, r3
 80042ce:	2300      	movs	r3, #0
 80042d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d8:	461a      	mov	r2, r3
 80042da:	2300      	movs	r3, #0
 80042dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e4:	461a      	mov	r2, r3
 80042e6:	2300      	movs	r3, #0
 80042e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042ea:	2300      	movs	r3, #0
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	e043      	b.n	8004378 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004306:	d118      	bne.n	800433a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431a:	461a      	mov	r2, r3
 800431c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e013      	b.n	800434c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004330:	461a      	mov	r2, r3
 8004332:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	e008      	b.n	800434c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004346:	461a      	mov	r2, r3
 8004348:	2300      	movs	r3, #0
 800434a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004358:	461a      	mov	r2, r3
 800435a:	2300      	movs	r3, #0
 800435c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436a:	461a      	mov	r2, r3
 800436c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004370:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	3301      	adds	r3, #1
 8004376:	613b      	str	r3, [r7, #16]
 8004378:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800437c:	461a      	mov	r2, r3
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4293      	cmp	r3, r2
 8004382:	d3b5      	bcc.n	80042f0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	e043      	b.n	8004412 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800439c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043a0:	d118      	bne.n	80043d4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b4:	461a      	mov	r2, r3
 80043b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	e013      	b.n	80043e6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	461a      	mov	r2, r3
 80043cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e008      	b.n	80043e6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e0:	461a      	mov	r2, r3
 80043e2:	2300      	movs	r3, #0
 80043e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f2:	461a      	mov	r2, r3
 80043f4:	2300      	movs	r3, #0
 80043f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004404:	461a      	mov	r2, r3
 8004406:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800440a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	3301      	adds	r3, #1
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004416:	461a      	mov	r2, r3
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4293      	cmp	r3, r2
 800441c:	d3b5      	bcc.n	800438a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800442c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004430:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800443e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004440:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004444:	2b00      	cmp	r3, #0
 8004446:	d105      	bne.n	8004454 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f043 0210 	orr.w	r2, r3, #16
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699a      	ldr	r2, [r3, #24]
 8004458:	4b10      	ldr	r3, [pc, #64]	; (800449c <USB_DevInit+0x2c4>)
 800445a:	4313      	orrs	r3, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004460:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	f043 0208 	orr.w	r2, r3, #8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004474:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004478:	2b01      	cmp	r3, #1
 800447a:	d107      	bne.n	800448c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004484:	f043 0304 	orr.w	r3, r3, #4
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800448c:	7dfb      	ldrb	r3, [r7, #23]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004498:	b004      	add	sp, #16
 800449a:	4770      	bx	lr
 800449c:	803c3800 	.word	0x803c3800

080044a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3301      	adds	r3, #1
 80044b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80044ba:	d901      	bls.n	80044c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e01b      	b.n	80044f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	daf2      	bge.n	80044ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	019b      	lsls	r3, r3, #6
 80044d0:	f043 0220 	orr.w	r2, r3, #32
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3301      	adds	r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80044e4:	d901      	bls.n	80044ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e006      	b.n	80044f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d0f0      	beq.n	80044d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800451c:	d901      	bls.n	8004522 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e018      	b.n	8004554 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	daf2      	bge.n	8004510 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2210      	movs	r2, #16
 8004532:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3301      	adds	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004540:	d901      	bls.n	8004546 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e006      	b.n	8004554 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b10      	cmp	r3, #16
 8004550:	d0f0      	beq.n	8004534 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	68f9      	ldr	r1, [r7, #12]
 800457c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004580:	4313      	orrs	r3, r2
 8004582:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004592:	b480      	push	{r7}
 8004594:	b087      	sub	sp, #28
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0306 	and.w	r3, r3, #6
 80045aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d102      	bne.n	80045b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80045b2:	2300      	movs	r3, #0
 80045b4:	75fb      	strb	r3, [r7, #23]
 80045b6:	e00a      	b.n	80045ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d002      	beq.n	80045c4 <USB_GetDevSpeed+0x32>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b06      	cmp	r3, #6
 80045c2:	d102      	bne.n	80045ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80045c4:	2302      	movs	r3, #2
 80045c6:	75fb      	strb	r3, [r7, #23]
 80045c8:	e001      	b.n	80045ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80045ca:	230f      	movs	r3, #15
 80045cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	371c      	adds	r7, #28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	785b      	ldrb	r3, [r3, #1]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d13a      	bne.n	800466e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fe:	69da      	ldr	r2, [r3, #28]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	2101      	movs	r1, #1
 800460a:	fa01 f303 	lsl.w	r3, r1, r3
 800460e:	b29b      	uxth	r3, r3
 8004610:	68f9      	ldr	r1, [r7, #12]
 8004612:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004616:	4313      	orrs	r3, r2
 8004618:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d155      	bne.n	80046dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	791b      	ldrb	r3, [r3, #4]
 800464a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800464c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	059b      	lsls	r3, r3, #22
 8004652:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004654:	4313      	orrs	r3, r2
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	0151      	lsls	r1, r2, #5
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	440a      	add	r2, r1
 800465e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	e036      	b.n	80046dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004674:	69da      	ldr	r2, [r3, #28]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	2101      	movs	r1, #1
 8004680:	fa01 f303 	lsl.w	r3, r1, r3
 8004684:	041b      	lsls	r3, r3, #16
 8004686:	68f9      	ldr	r1, [r7, #12]
 8004688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800468c:	4313      	orrs	r3, r2
 800468e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d11a      	bne.n	80046dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	791b      	ldrb	r3, [r3, #4]
 80046c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046c2:	430b      	orrs	r3, r1
 80046c4:	4313      	orrs	r3, r2
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	0151      	lsls	r1, r2, #5
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	440a      	add	r2, r1
 80046ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	785b      	ldrb	r3, [r3, #1]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d161      	bne.n	80047cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800471a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800471e:	d11f      	bne.n	8004760 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	0151      	lsls	r1, r2, #5
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	440a      	add	r2, r1
 8004736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800473a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800473e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	0151      	lsls	r1, r2, #5
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	440a      	add	r2, r1
 8004756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800475a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800475e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	2101      	movs	r1, #1
 8004772:	fa01 f303 	lsl.w	r3, r1, r3
 8004776:	b29b      	uxth	r3, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	68f9      	ldr	r1, [r7, #12]
 800477c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004780:	4013      	ands	r3, r2
 8004782:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	2101      	movs	r1, #1
 8004796:	fa01 f303 	lsl.w	r3, r1, r3
 800479a:	b29b      	uxth	r3, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	68f9      	ldr	r1, [r7, #12]
 80047a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047a4:	4013      	ands	r3, r2
 80047a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	0159      	lsls	r1, r3, #5
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	440b      	add	r3, r1
 80047be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c2:	4619      	mov	r1, r3
 80047c4:	4b35      	ldr	r3, [pc, #212]	; (800489c <USB_DeactivateEndpoint+0x1b0>)
 80047c6:	4013      	ands	r3, r2
 80047c8:	600b      	str	r3, [r1, #0]
 80047ca:	e060      	b.n	800488e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047e2:	d11f      	bne.n	8004824 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	0151      	lsls	r1, r2, #5
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	440a      	add	r2, r1
 80047fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004802:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	0151      	lsls	r1, r2, #5
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	440a      	add	r2, r1
 800481a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800481e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004822:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	2101      	movs	r1, #1
 8004836:	fa01 f303 	lsl.w	r3, r1, r3
 800483a:	041b      	lsls	r3, r3, #16
 800483c:	43db      	mvns	r3, r3
 800483e:	68f9      	ldr	r1, [r7, #12]
 8004840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004844:	4013      	ands	r3, r2
 8004846:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	2101      	movs	r1, #1
 800485a:	fa01 f303 	lsl.w	r3, r1, r3
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	43db      	mvns	r3, r3
 8004862:	68f9      	ldr	r1, [r7, #12]
 8004864:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004868:	4013      	ands	r3, r2
 800486a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	0159      	lsls	r1, r3, #5
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	440b      	add	r3, r1
 8004882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004886:	4619      	mov	r1, r3
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <USB_DeactivateEndpoint+0x1b4>)
 800488a:	4013      	ands	r3, r2
 800488c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	ec337800 	.word	0xec337800
 80048a0:	eff37800 	.word	0xeff37800

080048a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08a      	sub	sp, #40	; 0x28
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	4613      	mov	r3, r2
 80048b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	785b      	ldrb	r3, [r3, #1]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	f040 817a 	bne.w	8004bba <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d132      	bne.n	8004934 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	0151      	lsls	r1, r2, #5
 80048e0:	69fa      	ldr	r2, [r7, #28]
 80048e2:	440a      	add	r2, r1
 80048e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	0151      	lsls	r1, r2, #5
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	440a      	add	r2, r1
 8004908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800490c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004910:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	0151      	lsls	r1, r2, #5
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	440a      	add	r2, r1
 8004928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800492c:	0cdb      	lsrs	r3, r3, #19
 800492e:	04db      	lsls	r3, r3, #19
 8004930:	6113      	str	r3, [r2, #16]
 8004932:	e092      	b.n	8004a5a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	0151      	lsls	r1, r2, #5
 8004946:	69fa      	ldr	r2, [r7, #28]
 8004948:	440a      	add	r2, r1
 800494a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494e:	0cdb      	lsrs	r3, r3, #19
 8004950:	04db      	lsls	r3, r3, #19
 8004952:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	0151      	lsls	r1, r2, #5
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	440a      	add	r2, r1
 800496a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004972:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004976:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d11a      	bne.n	80049b4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	429a      	cmp	r2, r3
 8004988:	d903      	bls.n	8004992 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	0151      	lsls	r1, r2, #5
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	440a      	add	r2, r1
 80049a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049b0:	6113      	str	r3, [r2, #16]
 80049b2:	e01b      	b.n	80049ec <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	6919      	ldr	r1, [r3, #16]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	440b      	add	r3, r1
 80049cc:	1e59      	subs	r1, r3, #1
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80049d6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049d8:	4ba2      	ldr	r3, [pc, #648]	; (8004c64 <USB_EPStartXfer+0x3c0>)
 80049da:	400b      	ands	r3, r1
 80049dc:	69b9      	ldr	r1, [r7, #24]
 80049de:	0148      	lsls	r0, r1, #5
 80049e0:	69f9      	ldr	r1, [r7, #28]
 80049e2:	4401      	add	r1, r0
 80049e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049e8:	4313      	orrs	r3, r2
 80049ea:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a02:	69b9      	ldr	r1, [r7, #24]
 8004a04:	0148      	lsls	r0, r1, #5
 8004a06:	69f9      	ldr	r1, [r7, #28]
 8004a08:	4401      	add	r1, r0
 8004a0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	791b      	ldrb	r3, [r3, #4]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d11f      	bne.n	8004a5a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	0151      	lsls	r1, r2, #5
 8004a2c:	69fa      	ldr	r2, [r7, #28]
 8004a2e:	440a      	add	r2, r1
 8004a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a34:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a38:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	0151      	lsls	r1, r2, #5
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	440a      	add	r2, r1
 8004a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a58:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d14b      	bne.n	8004af8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d009      	beq.n	8004a7c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a74:	461a      	mov	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	791b      	ldrb	r3, [r3, #4]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d128      	bne.n	8004ad6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d110      	bne.n	8004ab6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	0151      	lsls	r1, r2, #5
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	440a      	add	r2, r1
 8004aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	e00f      	b.n	8004ad6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	0151      	lsls	r1, r2, #5
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	440a      	add	r2, r1
 8004aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	e165      	b.n	8004dc4 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	0151      	lsls	r1, r2, #5
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	440a      	add	r2, r1
 8004b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b16:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	791b      	ldrb	r3, [r3, #4]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d015      	beq.n	8004b4c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 814d 	beq.w	8004dc4 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b40:	69f9      	ldr	r1, [r7, #28]
 8004b42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b46:	4313      	orrs	r3, r2
 8004b48:	634b      	str	r3, [r1, #52]	; 0x34
 8004b4a:	e13b      	b.n	8004dc4 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d110      	bne.n	8004b7e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	0151      	lsls	r1, r2, #5
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	440a      	add	r2, r1
 8004b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	e00f      	b.n	8004b9e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	0151      	lsls	r1, r2, #5
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	440a      	add	r2, r1
 8004b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	68d9      	ldr	r1, [r3, #12]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	781a      	ldrb	r2, [r3, #0]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	b298      	uxth	r0, r3
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 f9b8 	bl	8004f28 <USB_WritePacket>
 8004bb8:	e104      	b.n	8004dc4 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	0151      	lsls	r1, r2, #5
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	440a      	add	r2, r1
 8004bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd4:	0cdb      	lsrs	r3, r3, #19
 8004bd6:	04db      	lsls	r3, r3, #19
 8004bd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	0151      	lsls	r1, r2, #5
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	440a      	add	r2, r1
 8004bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bfc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d131      	bne.n	8004c68 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	691a      	ldr	r2, [r3, #16]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c32:	69b9      	ldr	r1, [r7, #24]
 8004c34:	0148      	lsls	r0, r1, #5
 8004c36:	69f9      	ldr	r1, [r7, #28]
 8004c38:	4401      	add	r1, r0
 8004c3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	0151      	lsls	r1, r2, #5
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	440a      	add	r2, r1
 8004c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c60:	6113      	str	r3, [r2, #16]
 8004c62:	e061      	b.n	8004d28 <USB_EPStartXfer+0x484>
 8004c64:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d123      	bne.n	8004cb8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c86:	69b9      	ldr	r1, [r7, #24]
 8004c88:	0148      	lsls	r0, r1, #5
 8004c8a:	69f9      	ldr	r1, [r7, #28]
 8004c8c:	4401      	add	r1, r0
 8004c8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c92:	4313      	orrs	r3, r2
 8004c94:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	0151      	lsls	r1, r2, #5
 8004ca8:	69fa      	ldr	r2, [r7, #28]
 8004caa:	440a      	add	r2, r1
 8004cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cb4:	6113      	str	r3, [r2, #16]
 8004cb6:	e037      	b.n	8004d28 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	1e5a      	subs	r2, r3, #1
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ccc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	8afa      	ldrh	r2, [r7, #22]
 8004cd4:	fb03 f202 	mul.w	r2, r3, r2
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	8afb      	ldrh	r3, [r7, #22]
 8004cec:	04d9      	lsls	r1, r3, #19
 8004cee:	4b38      	ldr	r3, [pc, #224]	; (8004dd0 <USB_EPStartXfer+0x52c>)
 8004cf0:	400b      	ands	r3, r1
 8004cf2:	69b9      	ldr	r1, [r7, #24]
 8004cf4:	0148      	lsls	r0, r1, #5
 8004cf6:	69f9      	ldr	r1, [r7, #28]
 8004cf8:	4401      	add	r1, r0
 8004cfa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d18:	69b9      	ldr	r1, [r7, #24]
 8004d1a:	0148      	lsls	r0, r1, #5
 8004d1c:	69f9      	ldr	r1, [r7, #28]
 8004d1e:	4401      	add	r1, r0
 8004d20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d24:	4313      	orrs	r3, r2
 8004d26:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d10d      	bne.n	8004d4a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d009      	beq.n	8004d4a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	68d9      	ldr	r1, [r3, #12]
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d46:	460a      	mov	r2, r1
 8004d48:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	791b      	ldrb	r3, [r3, #4]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d128      	bne.n	8004da4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d110      	bne.n	8004d84 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	0151      	lsls	r1, r2, #5
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	440a      	add	r2, r1
 8004d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	e00f      	b.n	8004da4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	0151      	lsls	r1, r2, #5
 8004d96:	69fa      	ldr	r2, [r7, #28]
 8004d98:	440a      	add	r2, r1
 8004d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	0151      	lsls	r1, r2, #5
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	440a      	add	r2, r1
 8004dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3720      	adds	r7, #32
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	1ff80000 	.word	0x1ff80000

08004dd4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	785b      	ldrb	r3, [r3, #1]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d14a      	bne.n	8004e88 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e0a:	f040 8086 	bne.w	8004f1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	7812      	ldrb	r2, [r2, #0]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e30:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	7812      	ldrb	r2, [r2, #0]
 8004e46:	0151      	lsls	r1, r2, #5
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	440a      	add	r2, r1
 8004e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d902      	bls.n	8004e6c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	75fb      	strb	r3, [r7, #23]
          break;
 8004e6a:	e056      	b.n	8004f1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e84:	d0e7      	beq.n	8004e56 <USB_EPStopXfer+0x82>
 8004e86:	e048      	b.n	8004f1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ea0:	d13b      	bne.n	8004f1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	7812      	ldrb	r2, [r2, #0]
 8004eb6:	0151      	lsls	r1, r2, #5
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	440a      	add	r2, r1
 8004ebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ec0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ec4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	7812      	ldrb	r2, [r2, #0]
 8004eda:	0151      	lsls	r1, r2, #5
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	440a      	add	r2, r1
 8004ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ee8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3301      	adds	r3, #1
 8004eee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d902      	bls.n	8004f00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	75fb      	strb	r3, [r7, #23]
          break;
 8004efe:	e00c      	b.n	8004f1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f18:	d0e7      	beq.n	8004eea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	371c      	adds	r7, #28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b089      	sub	sp, #36	; 0x24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	4611      	mov	r1, r2
 8004f34:	461a      	mov	r2, r3
 8004f36:	460b      	mov	r3, r1
 8004f38:	71fb      	strb	r3, [r7, #7]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d123      	bne.n	8004f96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f4e:	88bb      	ldrh	r3, [r7, #4]
 8004f50:	3303      	adds	r3, #3
 8004f52:	089b      	lsrs	r3, r3, #2
 8004f54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f56:	2300      	movs	r3, #0
 8004f58:	61bb      	str	r3, [r7, #24]
 8004f5a:	e018      	b.n	8004f8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	031a      	lsls	r2, r3, #12
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f68:	461a      	mov	r2, r3
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	3301      	adds	r3, #1
 8004f74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	3301      	adds	r3, #1
 8004f86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d3e2      	bcc.n	8004f5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3724      	adds	r7, #36	; 0x24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b08b      	sub	sp, #44	; 0x2c
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	089b      	lsrs	r3, r3, #2
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004fc2:	88fb      	ldrh	r3, [r7, #6]
 8004fc4:	f003 0303 	and.w	r3, r3, #3
 8004fc8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004fca:	2300      	movs	r3, #0
 8004fcc:	623b      	str	r3, [r7, #32]
 8004fce:	e014      	b.n	8004ffa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	601a      	str	r2, [r3, #0]
    pDest++;
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	3301      	adds	r3, #1
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	3301      	adds	r3, #1
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	623b      	str	r3, [r7, #32]
 8004ffa:	6a3a      	ldr	r2, [r7, #32]
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d3e6      	bcc.n	8004fd0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005002:	8bfb      	ldrh	r3, [r7, #30]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d01e      	beq.n	8005046 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005012:	461a      	mov	r2, r3
 8005014:	f107 0310 	add.w	r3, r7, #16
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	fa22 f303 	lsr.w	r3, r2, r3
 8005028:	b2da      	uxtb	r2, r3
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	701a      	strb	r2, [r3, #0]
      i++;
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	3301      	adds	r3, #1
 8005032:	623b      	str	r3, [r7, #32]
      pDest++;
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	3301      	adds	r3, #1
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800503a:	8bfb      	ldrh	r3, [r7, #30]
 800503c:	3b01      	subs	r3, #1
 800503e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005040:	8bfb      	ldrh	r3, [r7, #30]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1ea      	bne.n	800501c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005048:	4618      	mov	r0, r3
 800504a:	372c      	adds	r7, #44	; 0x2c
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	785b      	ldrb	r3, [r3, #1]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d12c      	bne.n	80050ca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	db12      	blt.n	80050a8 <USB_EPSetStall+0x54>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00f      	beq.n	80050a8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	0151      	lsls	r1, r2, #5
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	440a      	add	r2, r1
 800509e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050a6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	0151      	lsls	r1, r2, #5
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	440a      	add	r2, r1
 80050be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	e02b      	b.n	8005122 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	db12      	blt.n	8005102 <USB_EPSetStall+0xae>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00f      	beq.n	8005102 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	0151      	lsls	r1, r2, #5
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	440a      	add	r2, r1
 80050f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005100:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	0151      	lsls	r1, r2, #5
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	440a      	add	r2, r1
 8005118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800511c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005120:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	785b      	ldrb	r3, [r3, #1]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d128      	bne.n	800519e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	0151      	lsls	r1, r2, #5
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	440a      	add	r2, r1
 8005162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005166:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800516a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	791b      	ldrb	r3, [r3, #4]
 8005170:	2b03      	cmp	r3, #3
 8005172:	d003      	beq.n	800517c <USB_EPClearStall+0x4c>
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	791b      	ldrb	r3, [r3, #4]
 8005178:	2b02      	cmp	r3, #2
 800517a:	d138      	bne.n	80051ee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	0151      	lsls	r1, r2, #5
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	440a      	add	r2, r1
 8005192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	e027      	b.n	80051ee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	791b      	ldrb	r3, [r3, #4]
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d003      	beq.n	80051ce <USB_EPClearStall+0x9e>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	791b      	ldrb	r3, [r3, #4]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d10f      	bne.n	80051ee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	0151      	lsls	r1, r2, #5
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	440a      	add	r2, r1
 80051e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	460b      	mov	r3, r1
 8005206:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800521a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800521e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005230:	68f9      	ldr	r1, [r7, #12]
 8005232:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005236:	4313      	orrs	r3, r2
 8005238:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005262:	f023 0303 	bic.w	r3, r3, #3
 8005266:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005276:	f023 0302 	bic.w	r3, r3, #2
 800527a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800528a:	b480      	push	{r7}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052a4:	f023 0303 	bic.w	r3, r3, #3
 80052a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052b8:	f043 0302 	orr.w	r3, r3, #2
 80052bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4013      	ands	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80052e4:	68fb      	ldr	r3, [r7, #12]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b085      	sub	sp, #20
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	4013      	ands	r3, r2
 8005314:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	0c1b      	lsrs	r3, r3, #16
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005326:	b480      	push	{r7}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	4013      	ands	r3, r2
 8005348:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	b29b      	uxth	r3, r3
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	460b      	mov	r3, r1
 8005364:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800536a:	78fb      	ldrb	r3, [r7, #3]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	4013      	ands	r3, r2
 8005386:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005388:	68bb      	ldr	r3, [r7, #8]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005396:	b480      	push	{r7}
 8005398:	b087      	sub	sp, #28
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	fa22 f303 	lsr.w	r3, r2, r3
 80053c6:	01db      	lsls	r3, r3, #7
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4013      	ands	r3, r2
 80053e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053e4:	68bb      	ldr	r3, [r7, #8]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f003 0301 	and.w	r3, r3, #1
}
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800540e:	b480      	push	{r7}
 8005410:	b085      	sub	sp, #20
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005428:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800542c:	f023 0307 	bic.w	r3, r3, #7
 8005430:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005444:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	460b      	mov	r3, r1
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	333c      	adds	r3, #60	; 0x3c
 800546a:	3304      	adds	r3, #4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	4a26      	ldr	r2, [pc, #152]	; (800550c <USB_EP0_OutStart+0xb8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d90a      	bls.n	800548e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005484:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005488:	d101      	bne.n	800548e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	e037      	b.n	80054fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005494:	461a      	mov	r2, r3
 8005496:	2300      	movs	r3, #0
 8005498:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054bc:	f043 0318 	orr.w	r3, r3, #24
 80054c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80054d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80054d6:	7afb      	ldrb	r3, [r7, #11]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d10f      	bne.n	80054fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e2:	461a      	mov	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80054fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	4f54300a 	.word	0x4f54300a

08005510 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3301      	adds	r3, #1
 8005520:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005528:	d901      	bls.n	800552e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e01b      	b.n	8005566 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	daf2      	bge.n	800551c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f043 0201 	orr.w	r2, r3, #1
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3301      	adds	r3, #1
 800554a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005552:	d901      	bls.n	8005558 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e006      	b.n	8005566 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d0f0      	beq.n	8005546 <USB_CoreReset+0x36>

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
	...

08005574 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005580:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005584:	f002 fc8e 	bl	8007ea4 <USBD_static_malloc>
 8005588:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d109      	bne.n	80055a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	32b0      	adds	r2, #176	; 0xb0
 800559a:	2100      	movs	r1, #0
 800559c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80055a0:	2302      	movs	r3, #2
 80055a2:	e0d4      	b.n	800574e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80055a4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80055a8:	2100      	movs	r1, #0
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f003 fd52 	bl	8009054 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	32b0      	adds	r2, #176	; 0xb0
 80055ba:	68f9      	ldr	r1, [r7, #12]
 80055bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	32b0      	adds	r2, #176	; 0xb0
 80055ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	7c1b      	ldrb	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d138      	bne.n	800564e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80055dc:	4b5e      	ldr	r3, [pc, #376]	; (8005758 <USBD_CDC_Init+0x1e4>)
 80055de:	7819      	ldrb	r1, [r3, #0]
 80055e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055e4:	2202      	movs	r2, #2
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f002 fb39 	bl	8007c5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80055ec:	4b5a      	ldr	r3, [pc, #360]	; (8005758 <USBD_CDC_Init+0x1e4>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	f003 020f 	and.w	r2, r3, #15
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	3324      	adds	r3, #36	; 0x24
 8005602:	2201      	movs	r2, #1
 8005604:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005606:	4b55      	ldr	r3, [pc, #340]	; (800575c <USBD_CDC_Init+0x1e8>)
 8005608:	7819      	ldrb	r1, [r3, #0]
 800560a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800560e:	2202      	movs	r2, #2
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f002 fb24 	bl	8007c5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005616:	4b51      	ldr	r3, [pc, #324]	; (800575c <USBD_CDC_Init+0x1e8>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	f003 020f 	and.w	r2, r3, #15
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800562e:	2201      	movs	r2, #1
 8005630:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005632:	4b4b      	ldr	r3, [pc, #300]	; (8005760 <USBD_CDC_Init+0x1ec>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	f003 020f 	and.w	r2, r3, #15
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	3326      	adds	r3, #38	; 0x26
 8005648:	2210      	movs	r2, #16
 800564a:	801a      	strh	r2, [r3, #0]
 800564c:	e035      	b.n	80056ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800564e:	4b42      	ldr	r3, [pc, #264]	; (8005758 <USBD_CDC_Init+0x1e4>)
 8005650:	7819      	ldrb	r1, [r3, #0]
 8005652:	2340      	movs	r3, #64	; 0x40
 8005654:	2202      	movs	r2, #2
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f002 fb01 	bl	8007c5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800565c:	4b3e      	ldr	r3, [pc, #248]	; (8005758 <USBD_CDC_Init+0x1e4>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	f003 020f 	and.w	r2, r3, #15
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	3324      	adds	r3, #36	; 0x24
 8005672:	2201      	movs	r2, #1
 8005674:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005676:	4b39      	ldr	r3, [pc, #228]	; (800575c <USBD_CDC_Init+0x1e8>)
 8005678:	7819      	ldrb	r1, [r3, #0]
 800567a:	2340      	movs	r3, #64	; 0x40
 800567c:	2202      	movs	r2, #2
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f002 faed 	bl	8007c5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005684:	4b35      	ldr	r3, [pc, #212]	; (800575c <USBD_CDC_Init+0x1e8>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	f003 020f 	and.w	r2, r3, #15
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800569c:	2201      	movs	r2, #1
 800569e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80056a0:	4b2f      	ldr	r3, [pc, #188]	; (8005760 <USBD_CDC_Init+0x1ec>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	f003 020f 	and.w	r2, r3, #15
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	4613      	mov	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	440b      	add	r3, r1
 80056b4:	3326      	adds	r3, #38	; 0x26
 80056b6:	2210      	movs	r2, #16
 80056b8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80056ba:	4b29      	ldr	r3, [pc, #164]	; (8005760 <USBD_CDC_Init+0x1ec>)
 80056bc:	7819      	ldrb	r1, [r3, #0]
 80056be:	2308      	movs	r3, #8
 80056c0:	2203      	movs	r2, #3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f002 facb 	bl	8007c5e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80056c8:	4b25      	ldr	r3, [pc, #148]	; (8005760 <USBD_CDC_Init+0x1ec>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	f003 020f 	and.w	r2, r3, #15
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	3324      	adds	r3, #36	; 0x24
 80056de:	2201      	movs	r2, #1
 80056e0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	33b0      	adds	r3, #176	; 0xb0
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005718:	2302      	movs	r3, #2
 800571a:	e018      	b.n	800574e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	7c1b      	ldrb	r3, [r3, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005724:	4b0d      	ldr	r3, [pc, #52]	; (800575c <USBD_CDC_Init+0x1e8>)
 8005726:	7819      	ldrb	r1, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800572e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f002 fb82 	bl	8007e3c <USBD_LL_PrepareReceive>
 8005738:	e008      	b.n	800574c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800573a:	4b08      	ldr	r3, [pc, #32]	; (800575c <USBD_CDC_Init+0x1e8>)
 800573c:	7819      	ldrb	r1, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005744:	2340      	movs	r3, #64	; 0x40
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f002 fb78 	bl	8007e3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000093 	.word	0x20000093
 800575c:	20000094 	.word	0x20000094
 8005760:	20000095 	.word	0x20000095

08005764 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005770:	4b3a      	ldr	r3, [pc, #232]	; (800585c <USBD_CDC_DeInit+0xf8>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f002 fa97 	bl	8007caa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800577c:	4b37      	ldr	r3, [pc, #220]	; (800585c <USBD_CDC_DeInit+0xf8>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	f003 020f 	and.w	r2, r3, #15
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	3324      	adds	r3, #36	; 0x24
 8005792:	2200      	movs	r2, #0
 8005794:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005796:	4b32      	ldr	r3, [pc, #200]	; (8005860 <USBD_CDC_DeInit+0xfc>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f002 fa84 	bl	8007caa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80057a2:	4b2f      	ldr	r3, [pc, #188]	; (8005860 <USBD_CDC_DeInit+0xfc>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	f003 020f 	and.w	r2, r3, #15
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	4613      	mov	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80057ba:	2200      	movs	r2, #0
 80057bc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80057be:	4b29      	ldr	r3, [pc, #164]	; (8005864 <USBD_CDC_DeInit+0x100>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f002 fa70 	bl	8007caa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80057ca:	4b26      	ldr	r3, [pc, #152]	; (8005864 <USBD_CDC_DeInit+0x100>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	f003 020f 	and.w	r2, r3, #15
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	440b      	add	r3, r1
 80057de:	3324      	adds	r3, #36	; 0x24
 80057e0:	2200      	movs	r2, #0
 80057e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80057e4:	4b1f      	ldr	r3, [pc, #124]	; (8005864 <USBD_CDC_DeInit+0x100>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	f003 020f 	and.w	r2, r3, #15
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	3326      	adds	r3, #38	; 0x26
 80057fa:	2200      	movs	r2, #0
 80057fc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	32b0      	adds	r2, #176	; 0xb0
 8005808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01f      	beq.n	8005850 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	33b0      	adds	r3, #176	; 0xb0
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	32b0      	adds	r2, #176	; 0xb0
 800582e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005832:	4618      	mov	r0, r3
 8005834:	f002 fb44 	bl	8007ec0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	32b0      	adds	r2, #176	; 0xb0
 8005842:	2100      	movs	r1, #0
 8005844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20000093 	.word	0x20000093
 8005860:	20000094 	.word	0x20000094
 8005864:	20000095 	.word	0x20000095

08005868 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	32b0      	adds	r2, #176	; 0xb0
 800587c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005880:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005894:	2303      	movs	r3, #3
 8005896:	e0bf      	b.n	8005a18 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d050      	beq.n	8005946 <USBD_CDC_Setup+0xde>
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	f040 80af 	bne.w	8005a08 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	88db      	ldrh	r3, [r3, #6]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d03a      	beq.n	8005928 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	b25b      	sxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	da1b      	bge.n	80058f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	33b0      	adds	r3, #176	; 0xb0
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80058d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	88d2      	ldrh	r2, [r2, #6]
 80058d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	88db      	ldrh	r3, [r3, #6]
 80058de:	2b07      	cmp	r3, #7
 80058e0:	bf28      	it	cs
 80058e2:	2307      	movcs	r3, #7
 80058e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	89fa      	ldrh	r2, [r7, #14]
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f001 fd89 	bl	8007404 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80058f2:	e090      	b.n	8005a16 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	785a      	ldrb	r2, [r3, #1]
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	88db      	ldrh	r3, [r3, #6]
 8005902:	2b3f      	cmp	r3, #63	; 0x3f
 8005904:	d803      	bhi.n	800590e <USBD_CDC_Setup+0xa6>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	88db      	ldrh	r3, [r3, #6]
 800590a:	b2da      	uxtb	r2, r3
 800590c:	e000      	b.n	8005910 <USBD_CDC_Setup+0xa8>
 800590e:	2240      	movs	r2, #64	; 0x40
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005916:	6939      	ldr	r1, [r7, #16]
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800591e:	461a      	mov	r2, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 fd9b 	bl	800745c <USBD_CtlPrepareRx>
      break;
 8005926:	e076      	b.n	8005a16 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	33b0      	adds	r3, #176	; 0xb0
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	7850      	ldrb	r0, [r2, #1]
 800593e:	2200      	movs	r2, #0
 8005940:	6839      	ldr	r1, [r7, #0]
 8005942:	4798      	blx	r3
      break;
 8005944:	e067      	b.n	8005a16 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	785b      	ldrb	r3, [r3, #1]
 800594a:	2b0b      	cmp	r3, #11
 800594c:	d851      	bhi.n	80059f2 <USBD_CDC_Setup+0x18a>
 800594e:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <USBD_CDC_Setup+0xec>)
 8005950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005954:	08005985 	.word	0x08005985
 8005958:	08005a01 	.word	0x08005a01
 800595c:	080059f3 	.word	0x080059f3
 8005960:	080059f3 	.word	0x080059f3
 8005964:	080059f3 	.word	0x080059f3
 8005968:	080059f3 	.word	0x080059f3
 800596c:	080059f3 	.word	0x080059f3
 8005970:	080059f3 	.word	0x080059f3
 8005974:	080059f3 	.word	0x080059f3
 8005978:	080059f3 	.word	0x080059f3
 800597c:	080059af 	.word	0x080059af
 8005980:	080059d9 	.word	0x080059d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b03      	cmp	r3, #3
 800598e:	d107      	bne.n	80059a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005990:	f107 030a 	add.w	r3, r7, #10
 8005994:	2202      	movs	r2, #2
 8005996:	4619      	mov	r1, r3
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 fd33 	bl	8007404 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800599e:	e032      	b.n	8005a06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 fcbd 	bl	8007322 <USBD_CtlError>
            ret = USBD_FAIL;
 80059a8:	2303      	movs	r3, #3
 80059aa:	75fb      	strb	r3, [r7, #23]
          break;
 80059ac:	e02b      	b.n	8005a06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d107      	bne.n	80059ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80059ba:	f107 030d 	add.w	r3, r7, #13
 80059be:	2201      	movs	r2, #1
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f001 fd1e 	bl	8007404 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059c8:	e01d      	b.n	8005a06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 fca8 	bl	8007322 <USBD_CtlError>
            ret = USBD_FAIL;
 80059d2:	2303      	movs	r3, #3
 80059d4:	75fb      	strb	r3, [r7, #23]
          break;
 80059d6:	e016      	b.n	8005a06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d00f      	beq.n	8005a04 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80059e4:	6839      	ldr	r1, [r7, #0]
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f001 fc9b 	bl	8007322 <USBD_CtlError>
            ret = USBD_FAIL;
 80059ec:	2303      	movs	r3, #3
 80059ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80059f0:	e008      	b.n	8005a04 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f001 fc94 	bl	8007322 <USBD_CtlError>
          ret = USBD_FAIL;
 80059fa:	2303      	movs	r3, #3
 80059fc:	75fb      	strb	r3, [r7, #23]
          break;
 80059fe:	e002      	b.n	8005a06 <USBD_CDC_Setup+0x19e>
          break;
 8005a00:	bf00      	nop
 8005a02:	e008      	b.n	8005a16 <USBD_CDC_Setup+0x1ae>
          break;
 8005a04:	bf00      	nop
      }
      break;
 8005a06:	e006      	b.n	8005a16 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f001 fc89 	bl	8007322 <USBD_CtlError>
      ret = USBD_FAIL;
 8005a10:	2303      	movs	r3, #3
 8005a12:	75fb      	strb	r3, [r7, #23]
      break;
 8005a14:	bf00      	nop
  }

  return (uint8_t)ret;
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005a32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	32b0      	adds	r2, #176	; 0xb0
 8005a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e065      	b.n	8005b16 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	32b0      	adds	r2, #176	; 0xb0
 8005a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a5a:	78fb      	ldrb	r3, [r7, #3]
 8005a5c:	f003 020f 	and.w	r2, r3, #15
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	4613      	mov	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	3318      	adds	r3, #24
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d02f      	beq.n	8005ad4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	f003 020f 	and.w	r2, r3, #15
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	440b      	add	r3, r1
 8005a86:	3318      	adds	r3, #24
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	f003 010f 	and.w	r1, r3, #15
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	460b      	mov	r3, r1
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	440b      	add	r3, r1
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4403      	add	r3, r0
 8005a9c:	331c      	adds	r3, #28
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	fbb2 f1f3 	udiv	r1, r2, r3
 8005aa4:	fb01 f303 	mul.w	r3, r1, r3
 8005aa8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d112      	bne.n	8005ad4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	f003 020f 	and.w	r2, r3, #15
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	440b      	add	r3, r1
 8005ac0:	3318      	adds	r3, #24
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005ac6:	78f9      	ldrb	r1, [r7, #3]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	2200      	movs	r2, #0
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f002 f994 	bl	8007dfa <USBD_LL_Transmit>
 8005ad2:	e01f      	b.n	8005b14 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	33b0      	adds	r3, #176	; 0xb0
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d010      	beq.n	8005b14 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	33b0      	adds	r3, #176	; 0xb0
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005b10:	78fa      	ldrb	r2, [r7, #3]
 8005b12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	460b      	mov	r3, r1
 8005b28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	32b0      	adds	r2, #176	; 0xb0
 8005b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	32b0      	adds	r2, #176	; 0xb0
 8005b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e01a      	b.n	8005b86 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	4619      	mov	r1, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f002 f992 	bl	8007e7e <USBD_LL_GetRxDataSize>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	33b0      	adds	r3, #176	; 0xb0
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b80:	4611      	mov	r1, r2
 8005b82:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b084      	sub	sp, #16
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	32b0      	adds	r2, #176	; 0xb0
 8005ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e025      	b.n	8005bfc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	33b0      	adds	r3, #176	; 0xb0
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d01a      	beq.n	8005bfa <USBD_CDC_EP0_RxReady+0x6c>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005bca:	2bff      	cmp	r3, #255	; 0xff
 8005bcc:	d015      	beq.n	8005bfa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	33b0      	adds	r3, #176	; 0xb0
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005be6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005bee:	b292      	uxth	r2, r2
 8005bf0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	22ff      	movs	r2, #255	; 0xff
 8005bf6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c0c:	2182      	movs	r1, #130	; 0x82
 8005c0e:	4818      	ldr	r0, [pc, #96]	; (8005c70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005c10:	f000 fd4f 	bl	80066b2 <USBD_GetEpDesc>
 8005c14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c16:	2101      	movs	r1, #1
 8005c18:	4815      	ldr	r0, [pc, #84]	; (8005c70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005c1a:	f000 fd4a 	bl	80066b2 <USBD_GetEpDesc>
 8005c1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c20:	2181      	movs	r1, #129	; 0x81
 8005c22:	4813      	ldr	r0, [pc, #76]	; (8005c70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005c24:	f000 fd45 	bl	80066b2 <USBD_GetEpDesc>
 8005c28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2210      	movs	r2, #16
 8005c34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d006      	beq.n	8005c4a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c44:	711a      	strb	r2, [r3, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d006      	beq.n	8005c5e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c58:	711a      	strb	r2, [r3, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2243      	movs	r2, #67	; 0x43
 8005c62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c64:	4b02      	ldr	r3, [pc, #8]	; (8005c70 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20000050 	.word	0x20000050

08005c74 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c7c:	2182      	movs	r1, #130	; 0x82
 8005c7e:	4818      	ldr	r0, [pc, #96]	; (8005ce0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c80:	f000 fd17 	bl	80066b2 <USBD_GetEpDesc>
 8005c84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c86:	2101      	movs	r1, #1
 8005c88:	4815      	ldr	r0, [pc, #84]	; (8005ce0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c8a:	f000 fd12 	bl	80066b2 <USBD_GetEpDesc>
 8005c8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c90:	2181      	movs	r1, #129	; 0x81
 8005c92:	4813      	ldr	r0, [pc, #76]	; (8005ce0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c94:	f000 fd0d 	bl	80066b2 <USBD_GetEpDesc>
 8005c98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	2210      	movs	r2, #16
 8005ca4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d006      	beq.n	8005cba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	711a      	strb	r2, [r3, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f042 0202 	orr.w	r2, r2, #2
 8005cb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d006      	beq.n	8005cce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	711a      	strb	r2, [r3, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f042 0202 	orr.w	r2, r2, #2
 8005ccc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2243      	movs	r2, #67	; 0x43
 8005cd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005cd4:	4b02      	ldr	r3, [pc, #8]	; (8005ce0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	20000050 	.word	0x20000050

08005ce4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005cec:	2182      	movs	r1, #130	; 0x82
 8005cee:	4818      	ldr	r0, [pc, #96]	; (8005d50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005cf0:	f000 fcdf 	bl	80066b2 <USBD_GetEpDesc>
 8005cf4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	4815      	ldr	r0, [pc, #84]	; (8005d50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005cfa:	f000 fcda 	bl	80066b2 <USBD_GetEpDesc>
 8005cfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d00:	2181      	movs	r1, #129	; 0x81
 8005d02:	4813      	ldr	r0, [pc, #76]	; (8005d50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005d04:	f000 fcd5 	bl	80066b2 <USBD_GetEpDesc>
 8005d08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2210      	movs	r2, #16
 8005d14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d006      	beq.n	8005d2a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d24:	711a      	strb	r2, [r3, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d006      	beq.n	8005d3e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d38:	711a      	strb	r2, [r3, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2243      	movs	r2, #67	; 0x43
 8005d42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d44:	4b02      	ldr	r3, [pc, #8]	; (8005d50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000050 	.word	0x20000050

08005d54 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	220a      	movs	r2, #10
 8005d60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005d62:	4b03      	ldr	r3, [pc, #12]	; (8005d70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	2000000c 	.word	0x2000000c

08005d74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e009      	b.n	8005d9c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	33b0      	adds	r3, #176	; 0xb0
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	32b0      	adds	r2, #176	; 0xb0
 8005dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e008      	b.n	8005de0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	32b0      	adds	r2, #176	; 0xb0
 8005e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e004      	b.n	8005e1a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	32b0      	adds	r2, #176	; 0xb0
 8005e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005e40:	2301      	movs	r3, #1
 8005e42:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e025      	b.n	8005e9a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d11f      	bne.n	8005e98 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005e60:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <USBD_CDC_TransmitPacket+0x7c>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	f003 020f 	and.w	r2, r3, #15
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4403      	add	r3, r0
 8005e7a:	3318      	adds	r3, #24
 8005e7c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005e7e:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <USBD_CDC_TransmitPacket+0x7c>)
 8005e80:	7819      	ldrb	r1, [r3, #0]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f001 ffb3 	bl	8007dfa <USBD_LL_Transmit>

    ret = USBD_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000093 	.word	0x20000093

08005ea8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	32b0      	adds	r2, #176	; 0xb0
 8005eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ebe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	32b0      	adds	r2, #176	; 0xb0
 8005eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e018      	b.n	8005f08 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	7c1b      	ldrb	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10a      	bne.n	8005ef4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ede:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <USBD_CDC_ReceivePacket+0x68>)
 8005ee0:	7819      	ldrb	r1, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 ffa5 	bl	8007e3c <USBD_LL_PrepareReceive>
 8005ef2:	e008      	b.n	8005f06 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ef4:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <USBD_CDC_ReceivePacket+0x68>)
 8005ef6:	7819      	ldrb	r1, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005efe:	2340      	movs	r3, #64	; 0x40
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f001 ff9b 	bl	8007e3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20000094 	.word	0x20000094

08005f14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e01f      	b.n	8005f6c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	79fa      	ldrb	r2, [r7, #7]
 8005f5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f001 fe15 	bl	8007b90 <USBD_LL_Init>
 8005f66:	4603      	mov	r3, r0
 8005f68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e025      	b.n	8005fd8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	32ae      	adds	r2, #174	; 0xae
 8005f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00f      	beq.n	8005fc8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	32ae      	adds	r2, #174	; 0xae
 8005fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	f107 020e 	add.w	r2, r7, #14
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	4798      	blx	r3
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f001 fe1d 	bl	8007c28 <USBD_LL_Start>
 8005fee:	4603      	mov	r3, r0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006000:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006002:	4618      	mov	r0, r3
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	460b      	mov	r3, r1
 8006018:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d009      	beq.n	800603c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	78fa      	ldrb	r2, [r7, #3]
 8006032:	4611      	mov	r1, r2
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	4798      	blx	r3
 8006038:	4603      	mov	r3, r0
 800603a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800603c:	7bfb      	ldrb	r3, [r7, #15]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	460b      	mov	r3, r1
 8006050:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	78fa      	ldrb	r2, [r7, #3]
 8006060:	4611      	mov	r1, r2
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	4798      	blx	r3
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800606c:	2303      	movs	r3, #3
 800606e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006070:	7bfb      	ldrb	r3, [r7, #15]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	4618      	mov	r0, r3
 800608e:	f001 f90e 	bl	80072ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80060a0:	461a      	mov	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060ae:	f003 031f 	and.w	r3, r3, #31
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d01a      	beq.n	80060ec <USBD_LL_SetupStage+0x72>
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d822      	bhi.n	8006100 <USBD_LL_SetupStage+0x86>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <USBD_LL_SetupStage+0x4a>
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d00a      	beq.n	80060d8 <USBD_LL_SetupStage+0x5e>
 80060c2:	e01d      	b.n	8006100 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fb65 	bl	800679c <USBD_StdDevReq>
 80060d2:	4603      	mov	r3, r0
 80060d4:	73fb      	strb	r3, [r7, #15]
      break;
 80060d6:	e020      	b.n	800611a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fbcd 	bl	8006880 <USBD_StdItfReq>
 80060e6:	4603      	mov	r3, r0
 80060e8:	73fb      	strb	r3, [r7, #15]
      break;
 80060ea:	e016      	b.n	800611a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fc2f 	bl	8006958 <USBD_StdEPReq>
 80060fa:	4603      	mov	r3, r0
 80060fc:	73fb      	strb	r3, [r7, #15]
      break;
 80060fe:	e00c      	b.n	800611a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006106:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800610a:	b2db      	uxtb	r3, r3
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f001 fdea 	bl	8007ce8 <USBD_LL_StallEP>
 8006114:	4603      	mov	r3, r0
 8006116:	73fb      	strb	r3, [r7, #15]
      break;
 8006118:	bf00      	nop
  }

  return ret;
 800611a:	7bfb      	ldrb	r3, [r7, #15]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	460b      	mov	r3, r1
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006136:	7afb      	ldrb	r3, [r7, #11]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d16e      	bne.n	800621a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006142:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800614a:	2b03      	cmp	r3, #3
 800614c:	f040 8098 	bne.w	8006280 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	429a      	cmp	r2, r3
 800615a:	d913      	bls.n	8006184 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	1ad2      	subs	r2, r2, r3
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	4293      	cmp	r3, r2
 8006174:	bf28      	it	cs
 8006176:	4613      	movcs	r3, r2
 8006178:	461a      	mov	r2, r3
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f001 f98a 	bl	8007496 <USBD_CtlContinueRx>
 8006182:	e07d      	b.n	8006280 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	2b02      	cmp	r3, #2
 8006190:	d014      	beq.n	80061bc <USBD_LL_DataOutStage+0x98>
 8006192:	2b02      	cmp	r3, #2
 8006194:	d81d      	bhi.n	80061d2 <USBD_LL_DataOutStage+0xae>
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <USBD_LL_DataOutStage+0x7c>
 800619a:	2b01      	cmp	r3, #1
 800619c:	d003      	beq.n	80061a6 <USBD_LL_DataOutStage+0x82>
 800619e:	e018      	b.n	80061d2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	75bb      	strb	r3, [r7, #22]
            break;
 80061a4:	e018      	b.n	80061d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	4619      	mov	r1, r3
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 fa64 	bl	800667e <USBD_CoreFindIF>
 80061b6:	4603      	mov	r3, r0
 80061b8:	75bb      	strb	r3, [r7, #22]
            break;
 80061ba:	e00d      	b.n	80061d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	4619      	mov	r1, r3
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 fa66 	bl	8006698 <USBD_CoreFindEP>
 80061cc:	4603      	mov	r3, r0
 80061ce:	75bb      	strb	r3, [r7, #22]
            break;
 80061d0:	e002      	b.n	80061d8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	75bb      	strb	r3, [r7, #22]
            break;
 80061d6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80061d8:	7dbb      	ldrb	r3, [r7, #22]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d119      	bne.n	8006212 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d113      	bne.n	8006212 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80061ea:	7dba      	ldrb	r2, [r7, #22]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	32ae      	adds	r2, #174	; 0xae
 80061f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00b      	beq.n	8006212 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80061fa:	7dba      	ldrb	r2, [r7, #22]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006202:	7dba      	ldrb	r2, [r7, #22]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	32ae      	adds	r2, #174	; 0xae
 8006208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f001 f950 	bl	80074b8 <USBD_CtlSendStatus>
 8006218:	e032      	b.n	8006280 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800621a:	7afb      	ldrb	r3, [r7, #11]
 800621c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006220:	b2db      	uxtb	r3, r3
 8006222:	4619      	mov	r1, r3
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 fa37 	bl	8006698 <USBD_CoreFindEP>
 800622a:	4603      	mov	r3, r0
 800622c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800622e:	7dbb      	ldrb	r3, [r7, #22]
 8006230:	2bff      	cmp	r3, #255	; 0xff
 8006232:	d025      	beq.n	8006280 <USBD_LL_DataOutStage+0x15c>
 8006234:	7dbb      	ldrb	r3, [r7, #22]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d122      	bne.n	8006280 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b03      	cmp	r3, #3
 8006244:	d117      	bne.n	8006276 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006246:	7dba      	ldrb	r2, [r7, #22]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	32ae      	adds	r2, #174	; 0xae
 800624c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00f      	beq.n	8006276 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006256:	7dba      	ldrb	r2, [r7, #22]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800625e:	7dba      	ldrb	r2, [r7, #22]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	32ae      	adds	r2, #174	; 0xae
 8006264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	7afa      	ldrb	r2, [r7, #11]
 800626c:	4611      	mov	r1, r2
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	4798      	blx	r3
 8006272:	4603      	mov	r3, r0
 8006274:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006276:	7dfb      	ldrb	r3, [r7, #23]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800627c:	7dfb      	ldrb	r3, [r7, #23]
 800627e:	e000      	b.n	8006282 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b086      	sub	sp, #24
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	460b      	mov	r3, r1
 8006294:	607a      	str	r2, [r7, #4]
 8006296:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006298:	7afb      	ldrb	r3, [r7, #11]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d16f      	bne.n	800637e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	3314      	adds	r3, #20
 80062a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d15a      	bne.n	8006364 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d914      	bls.n	80062e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	1ad2      	subs	r2, r2, r3
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	461a      	mov	r2, r3
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f001 f8b2 	bl	800743a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062d6:	2300      	movs	r3, #0
 80062d8:	2200      	movs	r2, #0
 80062da:	2100      	movs	r1, #0
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f001 fdad 	bl	8007e3c <USBD_LL_PrepareReceive>
 80062e2:	e03f      	b.n	8006364 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d11c      	bne.n	800632a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d316      	bcc.n	800632a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006306:	429a      	cmp	r2, r3
 8006308:	d20f      	bcs.n	800632a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800630a:	2200      	movs	r2, #0
 800630c:	2100      	movs	r1, #0
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f001 f893 	bl	800743a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800631c:	2300      	movs	r3, #0
 800631e:	2200      	movs	r2, #0
 8006320:	2100      	movs	r1, #0
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f001 fd8a 	bl	8007e3c <USBD_LL_PrepareReceive>
 8006328:	e01c      	b.n	8006364 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b03      	cmp	r3, #3
 8006334:	d10f      	bne.n	8006356 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d009      	beq.n	8006356 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006356:	2180      	movs	r1, #128	; 0x80
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f001 fcc5 	bl	8007ce8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f001 f8bd 	bl	80074de <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d03a      	beq.n	80063e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f7ff fe42 	bl	8005ff8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800637c:	e032      	b.n	80063e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800637e:	7afb      	ldrb	r3, [r7, #11]
 8006380:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006384:	b2db      	uxtb	r3, r3
 8006386:	4619      	mov	r1, r3
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f985 	bl	8006698 <USBD_CoreFindEP>
 800638e:	4603      	mov	r3, r0
 8006390:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006392:	7dfb      	ldrb	r3, [r7, #23]
 8006394:	2bff      	cmp	r3, #255	; 0xff
 8006396:	d025      	beq.n	80063e4 <USBD_LL_DataInStage+0x15a>
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d122      	bne.n	80063e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d11c      	bne.n	80063e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80063aa:	7dfa      	ldrb	r2, [r7, #23]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	32ae      	adds	r2, #174	; 0xae
 80063b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d014      	beq.n	80063e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80063ba:	7dfa      	ldrb	r2, [r7, #23]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80063c2:	7dfa      	ldrb	r2, [r7, #23]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	32ae      	adds	r2, #174	; 0xae
 80063c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	7afa      	ldrb	r2, [r7, #11]
 80063d0:	4611      	mov	r1, r2
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	4798      	blx	r3
 80063d6:	4603      	mov	r3, r0
 80063d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80063da:	7dbb      	ldrb	r3, [r7, #22]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80063e0:	7dbb      	ldrb	r3, [r7, #22]
 80063e2:	e000      	b.n	80063e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b084      	sub	sp, #16
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006426:	2b00      	cmp	r3, #0
 8006428:	d014      	beq.n	8006454 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00e      	beq.n	8006454 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6852      	ldr	r2, [r2, #4]
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	4611      	mov	r1, r2
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	4798      	blx	r3
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006450:	2303      	movs	r3, #3
 8006452:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006454:	2340      	movs	r3, #64	; 0x40
 8006456:	2200      	movs	r2, #0
 8006458:	2100      	movs	r1, #0
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 fbff 	bl	8007c5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2240      	movs	r2, #64	; 0x40
 800646c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006470:	2340      	movs	r3, #64	; 0x40
 8006472:	2200      	movs	r2, #0
 8006474:	2180      	movs	r1, #128	; 0x80
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f001 fbf1 	bl	8007c5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2240      	movs	r2, #64	; 0x40
 8006486:	621a      	str	r2, [r3, #32]

  return ret;
 8006488:	7bfb      	ldrb	r3, [r7, #15]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	460b      	mov	r3, r1
 800649c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	78fa      	ldrb	r2, [r7, #3]
 80064a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d006      	beq.n	80064d4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2204      	movs	r2, #4
 80064d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d106      	bne.n	800650c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006504:	b2da      	uxtb	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b03      	cmp	r3, #3
 800652c:	d110      	bne.n	8006550 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00b      	beq.n	8006550 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b082      	sub	sp, #8
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	460b      	mov	r3, r1
 8006564:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	32ae      	adds	r2, #174	; 0xae
 8006570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006578:	2303      	movs	r3, #3
 800657a:	e01c      	b.n	80065b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b03      	cmp	r3, #3
 8006586:	d115      	bne.n	80065b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	32ae      	adds	r2, #174	; 0xae
 8006592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00b      	beq.n	80065b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	32ae      	adds	r2, #174	; 0xae
 80065a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	78fa      	ldrb	r2, [r7, #3]
 80065ae:	4611      	mov	r1, r2
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	460b      	mov	r3, r1
 80065c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	32ae      	adds	r2, #174	; 0xae
 80065d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80065dc:	2303      	movs	r3, #3
 80065de:	e01c      	b.n	800661a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	d115      	bne.n	8006618 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	32ae      	adds	r2, #174	; 0xae
 80065f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00b      	beq.n	8006618 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	32ae      	adds	r2, #174	; 0xae
 800660a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	78fa      	ldrb	r2, [r7, #3]
 8006612:	4611      	mov	r1, r2
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00e      	beq.n	8006674 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	6852      	ldr	r2, [r2, #4]
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	4611      	mov	r1, r2
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	4798      	blx	r3
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006670:	2303      	movs	r3, #3
 8006672:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800668a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80066a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b086      	sub	sp, #24
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	460b      	mov	r3, r1
 80066bc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	885b      	ldrh	r3, [r3, #2]
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d920      	bls.n	800671c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80066e2:	e013      	b.n	800670c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80066e4:	f107 030a 	add.w	r3, r7, #10
 80066e8:	4619      	mov	r1, r3
 80066ea:	6978      	ldr	r0, [r7, #20]
 80066ec:	f000 f81b 	bl	8006726 <USBD_GetNextDesc>
 80066f0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	2b05      	cmp	r3, #5
 80066f8:	d108      	bne.n	800670c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	789b      	ldrb	r3, [r3, #2]
 8006702:	78fa      	ldrb	r2, [r7, #3]
 8006704:	429a      	cmp	r2, r3
 8006706:	d008      	beq.n	800671a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006708:	2300      	movs	r3, #0
 800670a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	885b      	ldrh	r3, [r3, #2]
 8006710:	b29a      	uxth	r2, r3
 8006712:	897b      	ldrh	r3, [r7, #10]
 8006714:	429a      	cmp	r2, r3
 8006716:	d8e5      	bhi.n	80066e4 <USBD_GetEpDesc+0x32>
 8006718:	e000      	b.n	800671c <USBD_GetEpDesc+0x6a>
          break;
 800671a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800671c:	693b      	ldr	r3, [r7, #16]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006726:	b480      	push	{r7}
 8006728:	b085      	sub	sp, #20
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	881a      	ldrh	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	b29b      	uxth	r3, r3
 800673e:	4413      	add	r3, r2
 8006740:	b29a      	uxth	r2, r3
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4413      	add	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006752:	68fb      	ldr	r3, [r7, #12]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	3301      	adds	r3, #1
 8006776:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800677e:	8a3b      	ldrh	r3, [r7, #16]
 8006780:	021b      	lsls	r3, r3, #8
 8006782:	b21a      	sxth	r2, r3
 8006784:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006788:	4313      	orrs	r3, r2
 800678a:	b21b      	sxth	r3, r3
 800678c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800678e:	89fb      	ldrh	r3, [r7, #14]
}
 8006790:	4618      	mov	r0, r3
 8006792:	371c      	adds	r7, #28
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067b2:	2b40      	cmp	r3, #64	; 0x40
 80067b4:	d005      	beq.n	80067c2 <USBD_StdDevReq+0x26>
 80067b6:	2b40      	cmp	r3, #64	; 0x40
 80067b8:	d857      	bhi.n	800686a <USBD_StdDevReq+0xce>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00f      	beq.n	80067de <USBD_StdDevReq+0x42>
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d153      	bne.n	800686a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	32ae      	adds	r2, #174	; 0xae
 80067cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	4798      	blx	r3
 80067d8:	4603      	mov	r3, r0
 80067da:	73fb      	strb	r3, [r7, #15]
      break;
 80067dc:	e04a      	b.n	8006874 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	785b      	ldrb	r3, [r3, #1]
 80067e2:	2b09      	cmp	r3, #9
 80067e4:	d83b      	bhi.n	800685e <USBD_StdDevReq+0xc2>
 80067e6:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <USBD_StdDevReq+0x50>)
 80067e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ec:	08006841 	.word	0x08006841
 80067f0:	08006855 	.word	0x08006855
 80067f4:	0800685f 	.word	0x0800685f
 80067f8:	0800684b 	.word	0x0800684b
 80067fc:	0800685f 	.word	0x0800685f
 8006800:	0800681f 	.word	0x0800681f
 8006804:	08006815 	.word	0x08006815
 8006808:	0800685f 	.word	0x0800685f
 800680c:	08006837 	.word	0x08006837
 8006810:	08006829 	.word	0x08006829
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fa3c 	bl	8006c94 <USBD_GetDescriptor>
          break;
 800681c:	e024      	b.n	8006868 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fba1 	bl	8006f68 <USBD_SetAddress>
          break;
 8006826:	e01f      	b.n	8006868 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fbe0 	bl	8006ff0 <USBD_SetConfig>
 8006830:	4603      	mov	r3, r0
 8006832:	73fb      	strb	r3, [r7, #15]
          break;
 8006834:	e018      	b.n	8006868 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fc83 	bl	8007144 <USBD_GetConfig>
          break;
 800683e:	e013      	b.n	8006868 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fcb4 	bl	80071b0 <USBD_GetStatus>
          break;
 8006848:	e00e      	b.n	8006868 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fce3 	bl	8007218 <USBD_SetFeature>
          break;
 8006852:	e009      	b.n	8006868 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fd07 	bl	800726a <USBD_ClrFeature>
          break;
 800685c:	e004      	b.n	8006868 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fd5e 	bl	8007322 <USBD_CtlError>
          break;
 8006866:	bf00      	nop
      }
      break;
 8006868:	e004      	b.n	8006874 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fd58 	bl	8007322 <USBD_CtlError>
      break;
 8006872:	bf00      	nop
  }

  return ret;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop

08006880 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006896:	2b40      	cmp	r3, #64	; 0x40
 8006898:	d005      	beq.n	80068a6 <USBD_StdItfReq+0x26>
 800689a:	2b40      	cmp	r3, #64	; 0x40
 800689c:	d852      	bhi.n	8006944 <USBD_StdItfReq+0xc4>
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <USBD_StdItfReq+0x26>
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	d14e      	bne.n	8006944 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d840      	bhi.n	8006936 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	889b      	ldrh	r3, [r3, #4]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d836      	bhi.n	800692c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	889b      	ldrh	r3, [r3, #4]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7ff fed9 	bl	800667e <USBD_CoreFindIF>
 80068cc:	4603      	mov	r3, r0
 80068ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068d0:	7bbb      	ldrb	r3, [r7, #14]
 80068d2:	2bff      	cmp	r3, #255	; 0xff
 80068d4:	d01d      	beq.n	8006912 <USBD_StdItfReq+0x92>
 80068d6:	7bbb      	ldrb	r3, [r7, #14]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d11a      	bne.n	8006912 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80068dc:	7bba      	ldrb	r2, [r7, #14]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	32ae      	adds	r2, #174	; 0xae
 80068e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00f      	beq.n	800690c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80068ec:	7bba      	ldrb	r2, [r7, #14]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80068f4:	7bba      	ldrb	r2, [r7, #14]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	32ae      	adds	r2, #174	; 0xae
 80068fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	4798      	blx	r3
 8006906:	4603      	mov	r3, r0
 8006908:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800690a:	e004      	b.n	8006916 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800690c:	2303      	movs	r3, #3
 800690e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006910:	e001      	b.n	8006916 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006912:	2303      	movs	r3, #3
 8006914:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	88db      	ldrh	r3, [r3, #6]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d110      	bne.n	8006940 <USBD_StdItfReq+0xc0>
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10d      	bne.n	8006940 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fdc7 	bl	80074b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800692a:	e009      	b.n	8006940 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fcf7 	bl	8007322 <USBD_CtlError>
          break;
 8006934:	e004      	b.n	8006940 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fcf2 	bl	8007322 <USBD_CtlError>
          break;
 800693e:	e000      	b.n	8006942 <USBD_StdItfReq+0xc2>
          break;
 8006940:	bf00      	nop
      }
      break;
 8006942:	e004      	b.n	800694e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fceb 	bl	8007322 <USBD_CtlError>
      break;
 800694c:	bf00      	nop
  }

  return ret;
 800694e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	889b      	ldrh	r3, [r3, #4]
 800696a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006974:	2b40      	cmp	r3, #64	; 0x40
 8006976:	d007      	beq.n	8006988 <USBD_StdEPReq+0x30>
 8006978:	2b40      	cmp	r3, #64	; 0x40
 800697a:	f200 817f 	bhi.w	8006c7c <USBD_StdEPReq+0x324>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d02a      	beq.n	80069d8 <USBD_StdEPReq+0x80>
 8006982:	2b20      	cmp	r3, #32
 8006984:	f040 817a 	bne.w	8006c7c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006988:	7bbb      	ldrb	r3, [r7, #14]
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff fe83 	bl	8006698 <USBD_CoreFindEP>
 8006992:	4603      	mov	r3, r0
 8006994:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006996:	7b7b      	ldrb	r3, [r7, #13]
 8006998:	2bff      	cmp	r3, #255	; 0xff
 800699a:	f000 8174 	beq.w	8006c86 <USBD_StdEPReq+0x32e>
 800699e:	7b7b      	ldrb	r3, [r7, #13]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f040 8170 	bne.w	8006c86 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80069a6:	7b7a      	ldrb	r2, [r7, #13]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80069ae:	7b7a      	ldrb	r2, [r7, #13]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	32ae      	adds	r2, #174	; 0xae
 80069b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 8163 	beq.w	8006c86 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80069c0:	7b7a      	ldrb	r2, [r7, #13]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	32ae      	adds	r2, #174	; 0xae
 80069c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
 80069d2:	4603      	mov	r3, r0
 80069d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069d6:	e156      	b.n	8006c86 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	785b      	ldrb	r3, [r3, #1]
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d008      	beq.n	80069f2 <USBD_StdEPReq+0x9a>
 80069e0:	2b03      	cmp	r3, #3
 80069e2:	f300 8145 	bgt.w	8006c70 <USBD_StdEPReq+0x318>
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 809b 	beq.w	8006b22 <USBD_StdEPReq+0x1ca>
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d03c      	beq.n	8006a6a <USBD_StdEPReq+0x112>
 80069f0:	e13e      	b.n	8006c70 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d002      	beq.n	8006a04 <USBD_StdEPReq+0xac>
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d016      	beq.n	8006a30 <USBD_StdEPReq+0xd8>
 8006a02:	e02c      	b.n	8006a5e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a04:	7bbb      	ldrb	r3, [r7, #14]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00d      	beq.n	8006a26 <USBD_StdEPReq+0xce>
 8006a0a:	7bbb      	ldrb	r3, [r7, #14]
 8006a0c:	2b80      	cmp	r3, #128	; 0x80
 8006a0e:	d00a      	beq.n	8006a26 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a10:	7bbb      	ldrb	r3, [r7, #14]
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 f967 	bl	8007ce8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a1a:	2180      	movs	r1, #128	; 0x80
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 f963 	bl	8007ce8 <USBD_LL_StallEP>
 8006a22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a24:	e020      	b.n	8006a68 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fc7a 	bl	8007322 <USBD_CtlError>
              break;
 8006a2e:	e01b      	b.n	8006a68 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	885b      	ldrh	r3, [r3, #2]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10e      	bne.n	8006a56 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00b      	beq.n	8006a56 <USBD_StdEPReq+0xfe>
 8006a3e:	7bbb      	ldrb	r3, [r7, #14]
 8006a40:	2b80      	cmp	r3, #128	; 0x80
 8006a42:	d008      	beq.n	8006a56 <USBD_StdEPReq+0xfe>
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	88db      	ldrh	r3, [r3, #6]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d104      	bne.n	8006a56 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a4c:	7bbb      	ldrb	r3, [r7, #14]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 f949 	bl	8007ce8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fd2e 	bl	80074b8 <USBD_CtlSendStatus>

              break;
 8006a5c:	e004      	b.n	8006a68 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fc5e 	bl	8007322 <USBD_CtlError>
              break;
 8006a66:	bf00      	nop
          }
          break;
 8006a68:	e107      	b.n	8006c7a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d002      	beq.n	8006a7c <USBD_StdEPReq+0x124>
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d016      	beq.n	8006aa8 <USBD_StdEPReq+0x150>
 8006a7a:	e04b      	b.n	8006b14 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a7c:	7bbb      	ldrb	r3, [r7, #14]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00d      	beq.n	8006a9e <USBD_StdEPReq+0x146>
 8006a82:	7bbb      	ldrb	r3, [r7, #14]
 8006a84:	2b80      	cmp	r3, #128	; 0x80
 8006a86:	d00a      	beq.n	8006a9e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a88:	7bbb      	ldrb	r3, [r7, #14]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 f92b 	bl	8007ce8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a92:	2180      	movs	r1, #128	; 0x80
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 f927 	bl	8007ce8 <USBD_LL_StallEP>
 8006a9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a9c:	e040      	b.n	8006b20 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fc3e 	bl	8007322 <USBD_CtlError>
              break;
 8006aa6:	e03b      	b.n	8006b20 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	885b      	ldrh	r3, [r3, #2]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d136      	bne.n	8006b1e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ab0:	7bbb      	ldrb	r3, [r7, #14]
 8006ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006aba:	7bbb      	ldrb	r3, [r7, #14]
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f001 f931 	bl	8007d26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fcf7 	bl	80074b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff fde2 	bl	8006698 <USBD_CoreFindEP>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ad8:	7b7b      	ldrb	r3, [r7, #13]
 8006ada:	2bff      	cmp	r3, #255	; 0xff
 8006adc:	d01f      	beq.n	8006b1e <USBD_StdEPReq+0x1c6>
 8006ade:	7b7b      	ldrb	r3, [r7, #13]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d11c      	bne.n	8006b1e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006ae4:	7b7a      	ldrb	r2, [r7, #13]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006aec:	7b7a      	ldrb	r2, [r7, #13]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	32ae      	adds	r2, #174	; 0xae
 8006af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d010      	beq.n	8006b1e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006afc:	7b7a      	ldrb	r2, [r7, #13]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	32ae      	adds	r2, #174	; 0xae
 8006b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4798      	blx	r3
 8006b0e:	4603      	mov	r3, r0
 8006b10:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006b12:	e004      	b.n	8006b1e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fc03 	bl	8007322 <USBD_CtlError>
              break;
 8006b1c:	e000      	b.n	8006b20 <USBD_StdEPReq+0x1c8>
              break;
 8006b1e:	bf00      	nop
          }
          break;
 8006b20:	e0ab      	b.n	8006c7a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d002      	beq.n	8006b34 <USBD_StdEPReq+0x1dc>
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d032      	beq.n	8006b98 <USBD_StdEPReq+0x240>
 8006b32:	e097      	b.n	8006c64 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b34:	7bbb      	ldrb	r3, [r7, #14]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d007      	beq.n	8006b4a <USBD_StdEPReq+0x1f2>
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b80      	cmp	r3, #128	; 0x80
 8006b3e:	d004      	beq.n	8006b4a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fbed 	bl	8007322 <USBD_CtlError>
                break;
 8006b48:	e091      	b.n	8006c6e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	da0b      	bge.n	8006b6a <USBD_StdEPReq+0x212>
 8006b52:	7bbb      	ldrb	r3, [r7, #14]
 8006b54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	3310      	adds	r3, #16
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	4413      	add	r3, r2
 8006b66:	3304      	adds	r3, #4
 8006b68:	e00b      	b.n	8006b82 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	4413      	add	r3, r2
 8006b80:	3304      	adds	r3, #4
 8006b82:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2200      	movs	r2, #0
 8006b88:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fc37 	bl	8007404 <USBD_CtlSendData>
              break;
 8006b96:	e06a      	b.n	8006c6e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	da11      	bge.n	8006bc4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	f003 020f 	and.w	r2, r3, #15
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	440b      	add	r3, r1
 8006bb2:	3324      	adds	r3, #36	; 0x24
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d117      	bne.n	8006bea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fbb0 	bl	8007322 <USBD_CtlError>
                  break;
 8006bc2:	e054      	b.n	8006c6e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006bc4:	7bbb      	ldrb	r3, [r7, #14]
 8006bc6:	f003 020f 	and.w	r2, r3, #15
 8006bca:	6879      	ldr	r1, [r7, #4]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	440b      	add	r3, r1
 8006bd6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d104      	bne.n	8006bea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fb9d 	bl	8007322 <USBD_CtlError>
                  break;
 8006be8:	e041      	b.n	8006c6e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	da0b      	bge.n	8006c0a <USBD_StdEPReq+0x2b2>
 8006bf2:	7bbb      	ldrb	r3, [r7, #14]
 8006bf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	3310      	adds	r3, #16
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	4413      	add	r3, r2
 8006c06:	3304      	adds	r3, #4
 8006c08:	e00b      	b.n	8006c22 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c10:	4613      	mov	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	4413      	add	r3, r2
 8006c20:	3304      	adds	r3, #4
 8006c22:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d002      	beq.n	8006c30 <USBD_StdEPReq+0x2d8>
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	2b80      	cmp	r3, #128	; 0x80
 8006c2e:	d103      	bne.n	8006c38 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	e00e      	b.n	8006c56 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 f891 	bl	8007d64 <USBD_LL_IsStallEP>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	e002      	b.n	8006c56 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fbd1 	bl	8007404 <USBD_CtlSendData>
              break;
 8006c62:	e004      	b.n	8006c6e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006c64:	6839      	ldr	r1, [r7, #0]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fb5b 	bl	8007322 <USBD_CtlError>
              break;
 8006c6c:	bf00      	nop
          }
          break;
 8006c6e:	e004      	b.n	8006c7a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fb55 	bl	8007322 <USBD_CtlError>
          break;
 8006c78:	bf00      	nop
      }
      break;
 8006c7a:	e005      	b.n	8006c88 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fb4f 	bl	8007322 <USBD_CtlError>
      break;
 8006c84:	e000      	b.n	8006c88 <USBD_StdEPReq+0x330>
      break;
 8006c86:	bf00      	nop
  }

  return ret;
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	885b      	ldrh	r3, [r3, #2]
 8006cae:	0a1b      	lsrs	r3, r3, #8
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	2b06      	cmp	r3, #6
 8006cb6:	f200 8128 	bhi.w	8006f0a <USBD_GetDescriptor+0x276>
 8006cba:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <USBD_GetDescriptor+0x2c>)
 8006cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc0:	08006cdd 	.word	0x08006cdd
 8006cc4:	08006cf5 	.word	0x08006cf5
 8006cc8:	08006d35 	.word	0x08006d35
 8006ccc:	08006f0b 	.word	0x08006f0b
 8006cd0:	08006f0b 	.word	0x08006f0b
 8006cd4:	08006eab 	.word	0x08006eab
 8006cd8:	08006ed7 	.word	0x08006ed7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	7c12      	ldrb	r2, [r2, #16]
 8006ce8:	f107 0108 	add.w	r1, r7, #8
 8006cec:	4610      	mov	r0, r2
 8006cee:	4798      	blx	r3
 8006cf0:	60f8      	str	r0, [r7, #12]
      break;
 8006cf2:	e112      	b.n	8006f1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	7c1b      	ldrb	r3, [r3, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10d      	bne.n	8006d18 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d04:	f107 0208 	add.w	r2, r7, #8
 8006d08:	4610      	mov	r0, r2
 8006d0a:	4798      	blx	r3
 8006d0c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3301      	adds	r3, #1
 8006d12:	2202      	movs	r2, #2
 8006d14:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d16:	e100      	b.n	8006f1a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	f107 0208 	add.w	r2, r7, #8
 8006d24:	4610      	mov	r0, r2
 8006d26:	4798      	blx	r3
 8006d28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	2202      	movs	r2, #2
 8006d30:	701a      	strb	r2, [r3, #0]
      break;
 8006d32:	e0f2      	b.n	8006f1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	885b      	ldrh	r3, [r3, #2]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b05      	cmp	r3, #5
 8006d3c:	f200 80ac 	bhi.w	8006e98 <USBD_GetDescriptor+0x204>
 8006d40:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <USBD_GetDescriptor+0xb4>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006d61 	.word	0x08006d61
 8006d4c:	08006d95 	.word	0x08006d95
 8006d50:	08006dc9 	.word	0x08006dc9
 8006d54:	08006dfd 	.word	0x08006dfd
 8006d58:	08006e31 	.word	0x08006e31
 8006d5c:	08006e65 	.word	0x08006e65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00b      	beq.n	8006d84 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	7c12      	ldrb	r2, [r2, #16]
 8006d78:	f107 0108 	add.w	r1, r7, #8
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	4798      	blx	r3
 8006d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d82:	e091      	b.n	8006ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 facb 	bl	8007322 <USBD_CtlError>
            err++;
 8006d8c:	7afb      	ldrb	r3, [r7, #11]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	72fb      	strb	r3, [r7, #11]
          break;
 8006d92:	e089      	b.n	8006ea8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00b      	beq.n	8006db8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	7c12      	ldrb	r2, [r2, #16]
 8006dac:	f107 0108 	add.w	r1, r7, #8
 8006db0:	4610      	mov	r0, r2
 8006db2:	4798      	blx	r3
 8006db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006db6:	e077      	b.n	8006ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fab1 	bl	8007322 <USBD_CtlError>
            err++;
 8006dc0:	7afb      	ldrb	r3, [r7, #11]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8006dc6:	e06f      	b.n	8006ea8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00b      	beq.n	8006dec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	7c12      	ldrb	r2, [r2, #16]
 8006de0:	f107 0108 	add.w	r1, r7, #8
 8006de4:	4610      	mov	r0, r2
 8006de6:	4798      	blx	r3
 8006de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dea:	e05d      	b.n	8006ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fa97 	bl	8007322 <USBD_CtlError>
            err++;
 8006df4:	7afb      	ldrb	r3, [r7, #11]
 8006df6:	3301      	adds	r3, #1
 8006df8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dfa:	e055      	b.n	8006ea8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00b      	beq.n	8006e20 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	7c12      	ldrb	r2, [r2, #16]
 8006e14:	f107 0108 	add.w	r1, r7, #8
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4798      	blx	r3
 8006e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e1e:	e043      	b.n	8006ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fa7d 	bl	8007322 <USBD_CtlError>
            err++;
 8006e28:	7afb      	ldrb	r3, [r7, #11]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e2e:	e03b      	b.n	8006ea8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00b      	beq.n	8006e54 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	7c12      	ldrb	r2, [r2, #16]
 8006e48:	f107 0108 	add.w	r1, r7, #8
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	4798      	blx	r3
 8006e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e52:	e029      	b.n	8006ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fa63 	bl	8007322 <USBD_CtlError>
            err++;
 8006e5c:	7afb      	ldrb	r3, [r7, #11]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	72fb      	strb	r3, [r7, #11]
          break;
 8006e62:	e021      	b.n	8006ea8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00b      	beq.n	8006e88 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	7c12      	ldrb	r2, [r2, #16]
 8006e7c:	f107 0108 	add.w	r1, r7, #8
 8006e80:	4610      	mov	r0, r2
 8006e82:	4798      	blx	r3
 8006e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e86:	e00f      	b.n	8006ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fa49 	bl	8007322 <USBD_CtlError>
            err++;
 8006e90:	7afb      	ldrb	r3, [r7, #11]
 8006e92:	3301      	adds	r3, #1
 8006e94:	72fb      	strb	r3, [r7, #11]
          break;
 8006e96:	e007      	b.n	8006ea8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fa41 	bl	8007322 <USBD_CtlError>
          err++;
 8006ea0:	7afb      	ldrb	r3, [r7, #11]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006ea6:	bf00      	nop
      }
      break;
 8006ea8:	e037      	b.n	8006f1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	7c1b      	ldrb	r3, [r3, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d109      	bne.n	8006ec6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	f107 0208 	add.w	r2, r7, #8
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	4798      	blx	r3
 8006ec2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ec4:	e029      	b.n	8006f1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fa2a 	bl	8007322 <USBD_CtlError>
        err++;
 8006ece:	7afb      	ldrb	r3, [r7, #11]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ed4:	e021      	b.n	8006f1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	7c1b      	ldrb	r3, [r3, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10d      	bne.n	8006efa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee6:	f107 0208 	add.w	r2, r7, #8
 8006eea:	4610      	mov	r0, r2
 8006eec:	4798      	blx	r3
 8006eee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	2207      	movs	r2, #7
 8006ef6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ef8:	e00f      	b.n	8006f1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fa10 	bl	8007322 <USBD_CtlError>
        err++;
 8006f02:	7afb      	ldrb	r3, [r7, #11]
 8006f04:	3301      	adds	r3, #1
 8006f06:	72fb      	strb	r3, [r7, #11]
      break;
 8006f08:	e007      	b.n	8006f1a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fa08 	bl	8007322 <USBD_CtlError>
      err++;
 8006f12:	7afb      	ldrb	r3, [r7, #11]
 8006f14:	3301      	adds	r3, #1
 8006f16:	72fb      	strb	r3, [r7, #11]
      break;
 8006f18:	bf00      	nop
  }

  if (err != 0U)
 8006f1a:	7afb      	ldrb	r3, [r7, #11]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d11e      	bne.n	8006f5e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	88db      	ldrh	r3, [r3, #6]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d016      	beq.n	8006f56 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006f28:	893b      	ldrh	r3, [r7, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00e      	beq.n	8006f4c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	88da      	ldrh	r2, [r3, #6]
 8006f32:	893b      	ldrh	r3, [r7, #8]
 8006f34:	4293      	cmp	r3, r2
 8006f36:	bf28      	it	cs
 8006f38:	4613      	movcs	r3, r2
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f3e:	893b      	ldrh	r3, [r7, #8]
 8006f40:	461a      	mov	r2, r3
 8006f42:	68f9      	ldr	r1, [r7, #12]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fa5d 	bl	8007404 <USBD_CtlSendData>
 8006f4a:	e009      	b.n	8006f60 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f9e7 	bl	8007322 <USBD_CtlError>
 8006f54:	e004      	b.n	8006f60 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 faae 	bl	80074b8 <USBD_CtlSendStatus>
 8006f5c:	e000      	b.n	8006f60 <USBD_GetDescriptor+0x2cc>
    return;
 8006f5e:	bf00      	nop
  }
}
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop

08006f68 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	889b      	ldrh	r3, [r3, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d131      	bne.n	8006fde <USBD_SetAddress+0x76>
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	88db      	ldrh	r3, [r3, #6]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d12d      	bne.n	8006fde <USBD_SetAddress+0x76>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	885b      	ldrh	r3, [r3, #2]
 8006f86:	2b7f      	cmp	r3, #127	; 0x7f
 8006f88:	d829      	bhi.n	8006fde <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	885b      	ldrh	r3, [r3, #2]
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d104      	bne.n	8006fac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f9bc 	bl	8007322 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006faa:	e01d      	b.n	8006fe8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	7bfa      	ldrb	r2, [r7, #15]
 8006fb0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 feff 	bl	8007dbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fa7a 	bl	80074b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d004      	beq.n	8006fd4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd2:	e009      	b.n	8006fe8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fdc:	e004      	b.n	8006fe8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f99e 	bl	8007322 <USBD_CtlError>
  }
}
 8006fe6:	bf00      	nop
 8006fe8:	bf00      	nop
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	885b      	ldrh	r3, [r3, #2]
 8007002:	b2da      	uxtb	r2, r3
 8007004:	4b4e      	ldr	r3, [pc, #312]	; (8007140 <USBD_SetConfig+0x150>)
 8007006:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007008:	4b4d      	ldr	r3, [pc, #308]	; (8007140 <USBD_SetConfig+0x150>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d905      	bls.n	800701c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f985 	bl	8007322 <USBD_CtlError>
    return USBD_FAIL;
 8007018:	2303      	movs	r3, #3
 800701a:	e08c      	b.n	8007136 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d002      	beq.n	800702e <USBD_SetConfig+0x3e>
 8007028:	2b03      	cmp	r3, #3
 800702a:	d029      	beq.n	8007080 <USBD_SetConfig+0x90>
 800702c:	e075      	b.n	800711a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800702e:	4b44      	ldr	r3, [pc, #272]	; (8007140 <USBD_SetConfig+0x150>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d020      	beq.n	8007078 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007036:	4b42      	ldr	r3, [pc, #264]	; (8007140 <USBD_SetConfig+0x150>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007040:	4b3f      	ldr	r3, [pc, #252]	; (8007140 <USBD_SetConfig+0x150>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7fe ffe1 	bl	800600e <USBD_SetClassConfig>
 800704c:	4603      	mov	r3, r0
 800704e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007050:	7bfb      	ldrb	r3, [r7, #15]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d008      	beq.n	8007068 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f962 	bl	8007322 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2202      	movs	r2, #2
 8007062:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007066:	e065      	b.n	8007134 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fa25 	bl	80074b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2203      	movs	r2, #3
 8007072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007076:	e05d      	b.n	8007134 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fa1d 	bl	80074b8 <USBD_CtlSendStatus>
      break;
 800707e:	e059      	b.n	8007134 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007080:	4b2f      	ldr	r3, [pc, #188]	; (8007140 <USBD_SetConfig+0x150>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d112      	bne.n	80070ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007090:	4b2b      	ldr	r3, [pc, #172]	; (8007140 <USBD_SetConfig+0x150>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	461a      	mov	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800709a:	4b29      	ldr	r3, [pc, #164]	; (8007140 <USBD_SetConfig+0x150>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7fe ffd0 	bl	8006046 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa06 	bl	80074b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070ac:	e042      	b.n	8007134 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80070ae:	4b24      	ldr	r3, [pc, #144]	; (8007140 <USBD_SetConfig+0x150>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d02a      	beq.n	8007112 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7fe ffbe 	bl	8006046 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80070ca:	4b1d      	ldr	r3, [pc, #116]	; (8007140 <USBD_SetConfig+0x150>)
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070d4:	4b1a      	ldr	r3, [pc, #104]	; (8007140 <USBD_SetConfig+0x150>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fe ff97 	bl	800600e <USBD_SetClassConfig>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00f      	beq.n	800710a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f918 	bl	8007322 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7fe ffa3 	bl	8006046 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007108:	e014      	b.n	8007134 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f9d4 	bl	80074b8 <USBD_CtlSendStatus>
      break;
 8007110:	e010      	b.n	8007134 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f9d0 	bl	80074b8 <USBD_CtlSendStatus>
      break;
 8007118:	e00c      	b.n	8007134 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f900 	bl	8007322 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007122:	4b07      	ldr	r3, [pc, #28]	; (8007140 <USBD_SetConfig+0x150>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7fe ff8c 	bl	8006046 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800712e:	2303      	movs	r3, #3
 8007130:	73fb      	strb	r3, [r7, #15]
      break;
 8007132:	bf00      	nop
  }

  return ret;
 8007134:	7bfb      	ldrb	r3, [r7, #15]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	2000059c 	.word	0x2000059c

08007144 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	88db      	ldrh	r3, [r3, #6]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d004      	beq.n	8007160 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f8e2 	bl	8007322 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800715e:	e023      	b.n	80071a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b02      	cmp	r3, #2
 800716a:	dc02      	bgt.n	8007172 <USBD_GetConfig+0x2e>
 800716c:	2b00      	cmp	r3, #0
 800716e:	dc03      	bgt.n	8007178 <USBD_GetConfig+0x34>
 8007170:	e015      	b.n	800719e <USBD_GetConfig+0x5a>
 8007172:	2b03      	cmp	r3, #3
 8007174:	d00b      	beq.n	800718e <USBD_GetConfig+0x4a>
 8007176:	e012      	b.n	800719e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	3308      	adds	r3, #8
 8007182:	2201      	movs	r2, #1
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f93c 	bl	8007404 <USBD_CtlSendData>
        break;
 800718c:	e00c      	b.n	80071a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	3304      	adds	r3, #4
 8007192:	2201      	movs	r2, #1
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f934 	bl	8007404 <USBD_CtlSendData>
        break;
 800719c:	e004      	b.n	80071a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f8be 	bl	8007322 <USBD_CtlError>
        break;
 80071a6:	bf00      	nop
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	3b01      	subs	r3, #1
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d81e      	bhi.n	8007206 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	88db      	ldrh	r3, [r3, #6]
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d004      	beq.n	80071da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f8a5 	bl	8007322 <USBD_CtlError>
        break;
 80071d8:	e01a      	b.n	8007210 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	f043 0202 	orr.w	r2, r3, #2
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	330c      	adds	r3, #12
 80071fa:	2202      	movs	r2, #2
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f900 	bl	8007404 <USBD_CtlSendData>
      break;
 8007204:	e004      	b.n	8007210 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f88a 	bl	8007322 <USBD_CtlError>
      break;
 800720e:	bf00      	nop
  }
}
 8007210:	bf00      	nop
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	885b      	ldrh	r3, [r3, #2]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d107      	bne.n	800723a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f940 	bl	80074b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007238:	e013      	b.n	8007262 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	885b      	ldrh	r3, [r3, #2]
 800723e:	2b02      	cmp	r3, #2
 8007240:	d10b      	bne.n	800725a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	889b      	ldrh	r3, [r3, #4]
 8007246:	0a1b      	lsrs	r3, r3, #8
 8007248:	b29b      	uxth	r3, r3
 800724a:	b2da      	uxtb	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f930 	bl	80074b8 <USBD_CtlSendStatus>
}
 8007258:	e003      	b.n	8007262 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f860 	bl	8007322 <USBD_CtlError>
}
 8007262:	bf00      	nop
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727a:	b2db      	uxtb	r3, r3
 800727c:	3b01      	subs	r3, #1
 800727e:	2b02      	cmp	r3, #2
 8007280:	d80b      	bhi.n	800729a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	885b      	ldrh	r3, [r3, #2]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d10c      	bne.n	80072a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f910 	bl	80074b8 <USBD_CtlSendStatus>
      }
      break;
 8007298:	e004      	b.n	80072a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f840 	bl	8007322 <USBD_CtlError>
      break;
 80072a2:	e000      	b.n	80072a6 <USBD_ClrFeature+0x3c>
      break;
 80072a4:	bf00      	nop
  }
}
 80072a6:	bf00      	nop
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	781a      	ldrb	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3301      	adds	r3, #1
 80072c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	781a      	ldrb	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3301      	adds	r3, #1
 80072d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f7ff fa41 	bl	8006760 <SWAPBYTE>
 80072de:	4603      	mov	r3, r0
 80072e0:	461a      	mov	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	3301      	adds	r3, #1
 80072ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	3301      	adds	r3, #1
 80072f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f7ff fa34 	bl	8006760 <SWAPBYTE>
 80072f8:	4603      	mov	r3, r0
 80072fa:	461a      	mov	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	3301      	adds	r3, #1
 8007304:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3301      	adds	r3, #1
 800730a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f7ff fa27 	bl	8006760 <SWAPBYTE>
 8007312:	4603      	mov	r3, r0
 8007314:	461a      	mov	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	80da      	strh	r2, [r3, #6]
}
 800731a:	bf00      	nop
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800732c:	2180      	movs	r1, #128	; 0x80
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fcda 	bl	8007ce8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007334:	2100      	movs	r1, #0
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fcd6 	bl	8007ce8 <USBD_LL_StallEP>
}
 800733c:	bf00      	nop
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d036      	beq.n	80073c8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800735e:	6938      	ldr	r0, [r7, #16]
 8007360:	f000 f836 	bl	80073d0 <USBD_GetLen>
 8007364:	4603      	mov	r3, r0
 8007366:	3301      	adds	r3, #1
 8007368:	b29b      	uxth	r3, r3
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	b29a      	uxth	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007372:	7dfb      	ldrb	r3, [r7, #23]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	4413      	add	r3, r2
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	7812      	ldrb	r2, [r2, #0]
 800737c:	701a      	strb	r2, [r3, #0]
  idx++;
 800737e:	7dfb      	ldrb	r3, [r7, #23]
 8007380:	3301      	adds	r3, #1
 8007382:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007384:	7dfb      	ldrb	r3, [r7, #23]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	4413      	add	r3, r2
 800738a:	2203      	movs	r2, #3
 800738c:	701a      	strb	r2, [r3, #0]
  idx++;
 800738e:	7dfb      	ldrb	r3, [r7, #23]
 8007390:	3301      	adds	r3, #1
 8007392:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007394:	e013      	b.n	80073be <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	4413      	add	r3, r2
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	7812      	ldrb	r2, [r2, #0]
 80073a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	3301      	adds	r3, #1
 80073a6:	613b      	str	r3, [r7, #16]
    idx++;
 80073a8:	7dfb      	ldrb	r3, [r7, #23]
 80073aa:	3301      	adds	r3, #1
 80073ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	4413      	add	r3, r2
 80073b4:	2200      	movs	r2, #0
 80073b6:	701a      	strb	r2, [r3, #0]
    idx++;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	3301      	adds	r3, #1
 80073bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e7      	bne.n	8007396 <USBD_GetString+0x52>
 80073c6:	e000      	b.n	80073ca <USBD_GetString+0x86>
    return;
 80073c8:	bf00      	nop
  }
}
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073d8:	2300      	movs	r3, #0
 80073da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80073e0:	e005      	b.n	80073ee <USBD_GetLen+0x1e>
  {
    len++;
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
 80073e4:	3301      	adds	r3, #1
 80073e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	3301      	adds	r3, #1
 80073ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1f5      	bne.n	80073e2 <USBD_GetLen+0x12>
  }

  return len;
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2202      	movs	r2, #2
 8007414:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	2100      	movs	r1, #0
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f000 fce5 	bl	8007dfa <USBD_LL_Transmit>

  return USBD_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	2100      	movs	r1, #0
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 fcd4 	bl	8007dfa <USBD_LL_Transmit>

  return USBD_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2203      	movs	r2, #3
 800746c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	2100      	movs	r1, #0
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fcd8 	bl	8007e3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	60f8      	str	r0, [r7, #12]
 800749e:	60b9      	str	r1, [r7, #8]
 80074a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	2100      	movs	r1, #0
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 fcc7 	bl	8007e3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2204      	movs	r2, #4
 80074c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074c8:	2300      	movs	r3, #0
 80074ca:	2200      	movs	r2, #0
 80074cc:	2100      	movs	r1, #0
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fc93 	bl	8007dfa <USBD_LL_Transmit>

  return USBD_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b082      	sub	sp, #8
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2205      	movs	r2, #5
 80074ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074ee:	2300      	movs	r3, #0
 80074f0:	2200      	movs	r2, #0
 80074f2:	2100      	movs	r1, #0
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fca1 	bl	8007e3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007508:	2200      	movs	r2, #0
 800750a:	4912      	ldr	r1, [pc, #72]	; (8007554 <MX_USB_DEVICE_Init+0x50>)
 800750c:	4812      	ldr	r0, [pc, #72]	; (8007558 <MX_USB_DEVICE_Init+0x54>)
 800750e:	f7fe fd01 	bl	8005f14 <USBD_Init>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d001      	beq.n	800751c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007518:	f7fa f8ce 	bl	80016b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800751c:	490f      	ldr	r1, [pc, #60]	; (800755c <MX_USB_DEVICE_Init+0x58>)
 800751e:	480e      	ldr	r0, [pc, #56]	; (8007558 <MX_USB_DEVICE_Init+0x54>)
 8007520:	f7fe fd28 	bl	8005f74 <USBD_RegisterClass>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800752a:	f7fa f8c5 	bl	80016b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800752e:	490c      	ldr	r1, [pc, #48]	; (8007560 <MX_USB_DEVICE_Init+0x5c>)
 8007530:	4809      	ldr	r0, [pc, #36]	; (8007558 <MX_USB_DEVICE_Init+0x54>)
 8007532:	f7fe fc1f 	bl	8005d74 <USBD_CDC_RegisterInterface>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800753c:	f7fa f8bc 	bl	80016b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007540:	4805      	ldr	r0, [pc, #20]	; (8007558 <MX_USB_DEVICE_Init+0x54>)
 8007542:	f7fe fd4d 	bl	8005fe0 <USBD_Start>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800754c:	f7fa f8b4 	bl	80016b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007550:	bf00      	nop
 8007552:	bd80      	pop	{r7, pc}
 8007554:	200000ac 	.word	0x200000ac
 8007558:	200005a0 	.word	0x200005a0
 800755c:	20000018 	.word	0x20000018
 8007560:	20000098 	.word	0x20000098

08007564 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007568:	2200      	movs	r2, #0
 800756a:	4905      	ldr	r1, [pc, #20]	; (8007580 <CDC_Init_FS+0x1c>)
 800756c:	4805      	ldr	r0, [pc, #20]	; (8007584 <CDC_Init_FS+0x20>)
 800756e:	f7fe fc1b 	bl	8005da8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007572:	4905      	ldr	r1, [pc, #20]	; (8007588 <CDC_Init_FS+0x24>)
 8007574:	4803      	ldr	r0, [pc, #12]	; (8007584 <CDC_Init_FS+0x20>)
 8007576:	f7fe fc39 	bl	8005dec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800757a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800757c:	4618      	mov	r0, r3
 800757e:	bd80      	pop	{r7, pc}
 8007580:	2000107c 	.word	0x2000107c
 8007584:	200005a0 	.word	0x200005a0
 8007588:	2000087c 	.word	0x2000087c

0800758c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800758c:	b480      	push	{r7}
 800758e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007590:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007592:	4618      	mov	r0, r3
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	4603      	mov	r3, r0
 80075a4:	6039      	str	r1, [r7, #0]
 80075a6:	71fb      	strb	r3, [r7, #7]
 80075a8:	4613      	mov	r3, r2
 80075aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	2b23      	cmp	r3, #35	; 0x23
 80075b0:	d84a      	bhi.n	8007648 <CDC_Control_FS+0xac>
 80075b2:	a201      	add	r2, pc, #4	; (adr r2, 80075b8 <CDC_Control_FS+0x1c>)
 80075b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b8:	08007649 	.word	0x08007649
 80075bc:	08007649 	.word	0x08007649
 80075c0:	08007649 	.word	0x08007649
 80075c4:	08007649 	.word	0x08007649
 80075c8:	08007649 	.word	0x08007649
 80075cc:	08007649 	.word	0x08007649
 80075d0:	08007649 	.word	0x08007649
 80075d4:	08007649 	.word	0x08007649
 80075d8:	08007649 	.word	0x08007649
 80075dc:	08007649 	.word	0x08007649
 80075e0:	08007649 	.word	0x08007649
 80075e4:	08007649 	.word	0x08007649
 80075e8:	08007649 	.word	0x08007649
 80075ec:	08007649 	.word	0x08007649
 80075f0:	08007649 	.word	0x08007649
 80075f4:	08007649 	.word	0x08007649
 80075f8:	08007649 	.word	0x08007649
 80075fc:	08007649 	.word	0x08007649
 8007600:	08007649 	.word	0x08007649
 8007604:	08007649 	.word	0x08007649
 8007608:	08007649 	.word	0x08007649
 800760c:	08007649 	.word	0x08007649
 8007610:	08007649 	.word	0x08007649
 8007614:	08007649 	.word	0x08007649
 8007618:	08007649 	.word	0x08007649
 800761c:	08007649 	.word	0x08007649
 8007620:	08007649 	.word	0x08007649
 8007624:	08007649 	.word	0x08007649
 8007628:	08007649 	.word	0x08007649
 800762c:	08007649 	.word	0x08007649
 8007630:	08007649 	.word	0x08007649
 8007634:	08007649 	.word	0x08007649
 8007638:	08007649 	.word	0x08007649
 800763c:	08007649 	.word	0x08007649
 8007640:	08007649 	.word	0x08007649
 8007644:	08007649 	.word	0x08007649
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007648:	bf00      	nop
  }

  return (USBD_OK);
 800764a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800764c:	4618      	mov	r0, r3
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007662:	6879      	ldr	r1, [r7, #4]
 8007664:	4807      	ldr	r0, [pc, #28]	; (8007684 <CDC_Receive_FS+0x2c>)
 8007666:	f7fe fbc1 	bl	8005dec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800766a:	4806      	ldr	r0, [pc, #24]	; (8007684 <CDC_Receive_FS+0x2c>)
 800766c:	f7fe fc1c 	bl	8005ea8 <USBD_CDC_ReceivePacket>
  //CDC_Transmit_FS(Buf, *Len);
  USB_VCP_ReceiveCallback(Buf,Len);
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7f9 fd06 	bl	8001084 <USB_VCP_ReceiveCallback>
  return (USBD_OK);
 8007678:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800767a:	4618      	mov	r0, r3
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	200005a0 	.word	0x200005a0

08007688 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007698:	4b0d      	ldr	r3, [pc, #52]	; (80076d0 <CDC_Transmit_FS+0x48>)
 800769a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800769e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e00b      	b.n	80076c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80076ae:	887b      	ldrh	r3, [r7, #2]
 80076b0:	461a      	mov	r2, r3
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	4806      	ldr	r0, [pc, #24]	; (80076d0 <CDC_Transmit_FS+0x48>)
 80076b6:	f7fe fb77 	bl	8005da8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80076ba:	4805      	ldr	r0, [pc, #20]	; (80076d0 <CDC_Transmit_FS+0x48>)
 80076bc:	f7fe fbb4 	bl	8005e28 <USBD_CDC_TransmitPacket>
 80076c0:	4603      	mov	r3, r0
 80076c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	200005a0 	.word	0x200005a0

080076d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	4613      	mov	r3, r2
 80076e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	75fb      	strb	r3, [r7, #23]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  /* USER CODE END 13 */
  return result;
 80076e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	371c      	adds	r7, #28
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
	...

080076f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	4603      	mov	r3, r0
 8007700:	6039      	str	r1, [r7, #0]
 8007702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2212      	movs	r2, #18
 8007708:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800770a:	4b03      	ldr	r3, [pc, #12]	; (8007718 <USBD_FS_DeviceDescriptor+0x20>)
}
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	200000c8 	.word	0x200000c8

0800771c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	6039      	str	r1, [r7, #0]
 8007726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2204      	movs	r2, #4
 800772c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800772e:	4b03      	ldr	r3, [pc, #12]	; (800773c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	200000dc 	.word	0x200000dc

08007740 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	4603      	mov	r3, r0
 8007748:	6039      	str	r1, [r7, #0]
 800774a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800774c:	79fb      	ldrb	r3, [r7, #7]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d105      	bne.n	800775e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	4907      	ldr	r1, [pc, #28]	; (8007774 <USBD_FS_ProductStrDescriptor+0x34>)
 8007756:	4808      	ldr	r0, [pc, #32]	; (8007778 <USBD_FS_ProductStrDescriptor+0x38>)
 8007758:	f7ff fdf4 	bl	8007344 <USBD_GetString>
 800775c:	e004      	b.n	8007768 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	4904      	ldr	r1, [pc, #16]	; (8007774 <USBD_FS_ProductStrDescriptor+0x34>)
 8007762:	4805      	ldr	r0, [pc, #20]	; (8007778 <USBD_FS_ProductStrDescriptor+0x38>)
 8007764:	f7ff fdee 	bl	8007344 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007768:	4b02      	ldr	r3, [pc, #8]	; (8007774 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	2000187c 	.word	0x2000187c
 8007778:	0800c8bc 	.word	0x0800c8bc

0800777c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	6039      	str	r1, [r7, #0]
 8007786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	4904      	ldr	r1, [pc, #16]	; (800779c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800778c:	4804      	ldr	r0, [pc, #16]	; (80077a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800778e:	f7ff fdd9 	bl	8007344 <USBD_GetString>
  return USBD_StrDesc;
 8007792:	4b02      	ldr	r3, [pc, #8]	; (800779c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	2000187c 	.word	0x2000187c
 80077a0:	0800c8d4 	.word	0x0800c8d4

080077a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	6039      	str	r1, [r7, #0]
 80077ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	221a      	movs	r2, #26
 80077b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80077b6:	f000 f843 	bl	8007840 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80077ba:	4b02      	ldr	r3, [pc, #8]	; (80077c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	200000e0 	.word	0x200000e0

080077c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4603      	mov	r3, r0
 80077d0:	6039      	str	r1, [r7, #0]
 80077d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80077d4:	79fb      	ldrb	r3, [r7, #7]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d105      	bne.n	80077e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	4907      	ldr	r1, [pc, #28]	; (80077fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80077de:	4808      	ldr	r0, [pc, #32]	; (8007800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077e0:	f7ff fdb0 	bl	8007344 <USBD_GetString>
 80077e4:	e004      	b.n	80077f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	4904      	ldr	r1, [pc, #16]	; (80077fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80077ea:	4805      	ldr	r0, [pc, #20]	; (8007800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077ec:	f7ff fdaa 	bl	8007344 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077f0:	4b02      	ldr	r3, [pc, #8]	; (80077fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	2000187c 	.word	0x2000187c
 8007800:	0800c8e8 	.word	0x0800c8e8

08007804 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	4603      	mov	r3, r0
 800780c:	6039      	str	r1, [r7, #0]
 800780e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007810:	79fb      	ldrb	r3, [r7, #7]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d105      	bne.n	8007822 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	4907      	ldr	r1, [pc, #28]	; (8007838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800781a:	4808      	ldr	r0, [pc, #32]	; (800783c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800781c:	f7ff fd92 	bl	8007344 <USBD_GetString>
 8007820:	e004      	b.n	800782c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	4904      	ldr	r1, [pc, #16]	; (8007838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007826:	4805      	ldr	r0, [pc, #20]	; (800783c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007828:	f7ff fd8c 	bl	8007344 <USBD_GetString>
  }
  return USBD_StrDesc;
 800782c:	4b02      	ldr	r3, [pc, #8]	; (8007838 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	2000187c 	.word	0x2000187c
 800783c:	0800c8f4 	.word	0x0800c8f4

08007840 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007846:	4b0f      	ldr	r3, [pc, #60]	; (8007884 <Get_SerialNum+0x44>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800784c:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <Get_SerialNum+0x48>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007852:	4b0e      	ldr	r3, [pc, #56]	; (800788c <Get_SerialNum+0x4c>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4413      	add	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d009      	beq.n	800787a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007866:	2208      	movs	r2, #8
 8007868:	4909      	ldr	r1, [pc, #36]	; (8007890 <Get_SerialNum+0x50>)
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 f814 	bl	8007898 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007870:	2204      	movs	r2, #4
 8007872:	4908      	ldr	r1, [pc, #32]	; (8007894 <Get_SerialNum+0x54>)
 8007874:	68b8      	ldr	r0, [r7, #8]
 8007876:	f000 f80f 	bl	8007898 <IntToUnicode>
  }
}
 800787a:	bf00      	nop
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	1fff7a10 	.word	0x1fff7a10
 8007888:	1fff7a14 	.word	0x1fff7a14
 800788c:	1fff7a18 	.word	0x1fff7a18
 8007890:	200000e2 	.word	0x200000e2
 8007894:	200000f2 	.word	0x200000f2

08007898 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007898:	b480      	push	{r7}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	4613      	mov	r3, r2
 80078a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80078aa:	2300      	movs	r3, #0
 80078ac:	75fb      	strb	r3, [r7, #23]
 80078ae:	e027      	b.n	8007900 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	0f1b      	lsrs	r3, r3, #28
 80078b4:	2b09      	cmp	r3, #9
 80078b6:	d80b      	bhi.n	80078d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	0f1b      	lsrs	r3, r3, #28
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	7dfb      	ldrb	r3, [r7, #23]
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	4619      	mov	r1, r3
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	440b      	add	r3, r1
 80078c8:	3230      	adds	r2, #48	; 0x30
 80078ca:	b2d2      	uxtb	r2, r2
 80078cc:	701a      	strb	r2, [r3, #0]
 80078ce:	e00a      	b.n	80078e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	0f1b      	lsrs	r3, r3, #28
 80078d4:	b2da      	uxtb	r2, r3
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	4619      	mov	r1, r3
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	440b      	add	r3, r1
 80078e0:	3237      	adds	r2, #55	; 0x37
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	3301      	adds	r3, #1
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	4413      	add	r3, r2
 80078f6:	2200      	movs	r2, #0
 80078f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
 80078fc:	3301      	adds	r3, #1
 80078fe:	75fb      	strb	r3, [r7, #23]
 8007900:	7dfa      	ldrb	r2, [r7, #23]
 8007902:	79fb      	ldrb	r3, [r7, #7]
 8007904:	429a      	cmp	r2, r3
 8007906:	d3d3      	bcc.n	80078b0 <IntToUnicode+0x18>
  }
}
 8007908:	bf00      	nop
 800790a:	bf00      	nop
 800790c:	371c      	adds	r7, #28
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
	...

08007918 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08a      	sub	sp, #40	; 0x28
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007920:	f107 0314 	add.w	r3, r7, #20
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	605a      	str	r2, [r3, #4]
 800792a:	609a      	str	r2, [r3, #8]
 800792c:	60da      	str	r2, [r3, #12]
 800792e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007938:	d13a      	bne.n	80079b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800793a:	2300      	movs	r3, #0
 800793c:	613b      	str	r3, [r7, #16]
 800793e:	4b1e      	ldr	r3, [pc, #120]	; (80079b8 <HAL_PCD_MspInit+0xa0>)
 8007940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007942:	4a1d      	ldr	r2, [pc, #116]	; (80079b8 <HAL_PCD_MspInit+0xa0>)
 8007944:	f043 0301 	orr.w	r3, r3, #1
 8007948:	6313      	str	r3, [r2, #48]	; 0x30
 800794a:	4b1b      	ldr	r3, [pc, #108]	; (80079b8 <HAL_PCD_MspInit+0xa0>)
 800794c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	613b      	str	r3, [r7, #16]
 8007954:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007956:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800795a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800795c:	2302      	movs	r3, #2
 800795e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007960:	2300      	movs	r3, #0
 8007962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007964:	2303      	movs	r3, #3
 8007966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007968:	230a      	movs	r3, #10
 800796a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800796c:	f107 0314 	add.w	r3, r7, #20
 8007970:	4619      	mov	r1, r3
 8007972:	4812      	ldr	r0, [pc, #72]	; (80079bc <HAL_PCD_MspInit+0xa4>)
 8007974:	f7fa fa14 	bl	8001da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007978:	4b0f      	ldr	r3, [pc, #60]	; (80079b8 <HAL_PCD_MspInit+0xa0>)
 800797a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800797c:	4a0e      	ldr	r2, [pc, #56]	; (80079b8 <HAL_PCD_MspInit+0xa0>)
 800797e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007982:	6353      	str	r3, [r2, #52]	; 0x34
 8007984:	2300      	movs	r3, #0
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	4b0b      	ldr	r3, [pc, #44]	; (80079b8 <HAL_PCD_MspInit+0xa0>)
 800798a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798c:	4a0a      	ldr	r2, [pc, #40]	; (80079b8 <HAL_PCD_MspInit+0xa0>)
 800798e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007992:	6453      	str	r3, [r2, #68]	; 0x44
 8007994:	4b08      	ldr	r3, [pc, #32]	; (80079b8 <HAL_PCD_MspInit+0xa0>)
 8007996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80079a0:	2200      	movs	r2, #0
 80079a2:	2100      	movs	r1, #0
 80079a4:	2043      	movs	r0, #67	; 0x43
 80079a6:	f7fa f9c4 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80079aa:	2043      	movs	r0, #67	; 0x43
 80079ac:	f7fa f9dd 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80079b0:	bf00      	nop
 80079b2:	3728      	adds	r7, #40	; 0x28
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	40023800 	.word	0x40023800
 80079bc:	40020000 	.word	0x40020000

080079c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80079d4:	4619      	mov	r1, r3
 80079d6:	4610      	mov	r0, r2
 80079d8:	f7fe fb4f 	bl	800607a <USBD_LL_SetupStage>
}
 80079dc:	bf00      	nop
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	460b      	mov	r3, r1
 80079ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80079f6:	78fa      	ldrb	r2, [r7, #3]
 80079f8:	6879      	ldr	r1, [r7, #4]
 80079fa:	4613      	mov	r3, r2
 80079fc:	00db      	lsls	r3, r3, #3
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	440b      	add	r3, r1
 8007a04:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	f7fe fb89 	bl	8006124 <USBD_LL_DataOutStage>
}
 8007a12:	bf00      	nop
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	460b      	mov	r3, r1
 8007a24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007a2c:	78fa      	ldrb	r2, [r7, #3]
 8007a2e:	6879      	ldr	r1, [r7, #4]
 8007a30:	4613      	mov	r3, r2
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	4413      	add	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	440b      	add	r3, r1
 8007a3a:	3320      	adds	r3, #32
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	78fb      	ldrb	r3, [r7, #3]
 8007a40:	4619      	mov	r1, r3
 8007a42:	f7fe fc22 	bl	800628a <USBD_LL_DataInStage>
}
 8007a46:	bf00      	nop
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b082      	sub	sp, #8
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe fd5c 	bl	800651a <USBD_LL_SOF>
}
 8007a62:	bf00      	nop
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b084      	sub	sp, #16
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a72:	2301      	movs	r3, #1
 8007a74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	79db      	ldrb	r3, [r3, #7]
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d001      	beq.n	8007a82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007a7e:	f7f9 fe1b 	bl	80016b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007a88:	7bfa      	ldrb	r2, [r7, #15]
 8007a8a:	4611      	mov	r1, r2
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fe fd00 	bl	8006492 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fe fca8 	bl	80063ee <USBD_LL_Reset>
}
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
	...

08007aa8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fe fcfb 	bl	80064b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	6812      	ldr	r2, [r2, #0]
 8007aca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ace:	f043 0301 	orr.w	r3, r3, #1
 8007ad2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	7adb      	ldrb	r3, [r3, #11]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007adc:	4b04      	ldr	r3, [pc, #16]	; (8007af0 <HAL_PCD_SuspendCallback+0x48>)
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	4a03      	ldr	r2, [pc, #12]	; (8007af0 <HAL_PCD_SuspendCallback+0x48>)
 8007ae2:	f043 0306 	orr.w	r3, r3, #6
 8007ae6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ae8:	bf00      	nop
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	e000ed00 	.word	0xe000ed00

08007af4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fe fcf1 	bl	80064ea <USBD_LL_Resume>
}
 8007b08:	bf00      	nop
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b22:	78fa      	ldrb	r2, [r7, #3]
 8007b24:	4611      	mov	r1, r2
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe fd49 	bl	80065be <USBD_LL_IsoOUTIncomplete>
}
 8007b2c:	bf00      	nop
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b46:	78fa      	ldrb	r2, [r7, #3]
 8007b48:	4611      	mov	r1, r2
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fe fd05 	bl	800655a <USBD_LL_IsoINIncomplete>
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fe fd5b 	bl	8006622 <USBD_LL_DevConnected>
}
 8007b6c:	bf00      	nop
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fe fd58 	bl	8006638 <USBD_LL_DevDisconnected>
}
 8007b88:	bf00      	nop
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d13c      	bne.n	8007c1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007ba0:	4a20      	ldr	r2, [pc, #128]	; (8007c24 <USBD_LL_Init+0x94>)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a1e      	ldr	r2, [pc, #120]	; (8007c24 <USBD_LL_Init+0x94>)
 8007bac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007bb0:	4b1c      	ldr	r3, [pc, #112]	; (8007c24 <USBD_LL_Init+0x94>)
 8007bb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007bb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007bb8:	4b1a      	ldr	r3, [pc, #104]	; (8007c24 <USBD_LL_Init+0x94>)
 8007bba:	2204      	movs	r2, #4
 8007bbc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007bbe:	4b19      	ldr	r3, [pc, #100]	; (8007c24 <USBD_LL_Init+0x94>)
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007bc4:	4b17      	ldr	r3, [pc, #92]	; (8007c24 <USBD_LL_Init+0x94>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007bca:	4b16      	ldr	r3, [pc, #88]	; (8007c24 <USBD_LL_Init+0x94>)
 8007bcc:	2202      	movs	r2, #2
 8007bce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007bd0:	4b14      	ldr	r3, [pc, #80]	; (8007c24 <USBD_LL_Init+0x94>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007bd6:	4b13      	ldr	r3, [pc, #76]	; (8007c24 <USBD_LL_Init+0x94>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007bdc:	4b11      	ldr	r3, [pc, #68]	; (8007c24 <USBD_LL_Init+0x94>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007be2:	4b10      	ldr	r3, [pc, #64]	; (8007c24 <USBD_LL_Init+0x94>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007be8:	4b0e      	ldr	r3, [pc, #56]	; (8007c24 <USBD_LL_Init+0x94>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007bee:	480d      	ldr	r0, [pc, #52]	; (8007c24 <USBD_LL_Init+0x94>)
 8007bf0:	f7fa fa73 	bl	80020da <HAL_PCD_Init>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007bfa:	f7f9 fd5d 	bl	80016b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007bfe:	2180      	movs	r1, #128	; 0x80
 8007c00:	4808      	ldr	r0, [pc, #32]	; (8007c24 <USBD_LL_Init+0x94>)
 8007c02:	f7fb fc9e 	bl	8003542 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007c06:	2240      	movs	r2, #64	; 0x40
 8007c08:	2100      	movs	r1, #0
 8007c0a:	4806      	ldr	r0, [pc, #24]	; (8007c24 <USBD_LL_Init+0x94>)
 8007c0c:	f7fb fc52 	bl	80034b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007c10:	2280      	movs	r2, #128	; 0x80
 8007c12:	2101      	movs	r1, #1
 8007c14:	4803      	ldr	r0, [pc, #12]	; (8007c24 <USBD_LL_Init+0x94>)
 8007c16:	f7fb fc4d 	bl	80034b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	20001a7c 	.word	0x20001a7c

08007c28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fa fb5a 	bl	80022f8 <HAL_PCD_Start>
 8007c44:	4603      	mov	r3, r0
 8007c46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 f942 	bl	8007ed4 <USBD_Get_USB_Status>
 8007c50:	4603      	mov	r3, r0
 8007c52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c54:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	4608      	mov	r0, r1
 8007c68:	4611      	mov	r1, r2
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	70fb      	strb	r3, [r7, #3]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70bb      	strb	r3, [r7, #2]
 8007c74:	4613      	mov	r3, r2
 8007c76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c86:	78bb      	ldrb	r3, [r7, #2]
 8007c88:	883a      	ldrh	r2, [r7, #0]
 8007c8a:	78f9      	ldrb	r1, [r7, #3]
 8007c8c:	f7fb f82e 	bl	8002cec <HAL_PCD_EP_Open>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 f91c 	bl	8007ed4 <USBD_Get_USB_Status>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cc4:	78fa      	ldrb	r2, [r7, #3]
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fb f877 	bl	8002dbc <HAL_PCD_EP_Close>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 f8fd 	bl	8007ed4 <USBD_Get_USB_Status>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d02:	78fa      	ldrb	r2, [r7, #3]
 8007d04:	4611      	mov	r1, r2
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fb f92f 	bl	8002f6a <HAL_PCD_EP_SetStall>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 f8de 	bl	8007ed4 <USBD_Get_USB_Status>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d40:	78fa      	ldrb	r2, [r7, #3]
 8007d42:	4611      	mov	r1, r2
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fb f973 	bl	8003030 <HAL_PCD_EP_ClrStall>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 f8bf 	bl	8007ed4 <USBD_Get_USB_Status>
 8007d56:	4603      	mov	r3, r0
 8007d58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	da0b      	bge.n	8007d98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d80:	78fb      	ldrb	r3, [r7, #3]
 8007d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d86:	68f9      	ldr	r1, [r7, #12]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	00db      	lsls	r3, r3, #3
 8007d8c:	4413      	add	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	440b      	add	r3, r1
 8007d92:	3316      	adds	r3, #22
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	e00b      	b.n	8007db0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d9e:	68f9      	ldr	r1, [r7, #12]
 8007da0:	4613      	mov	r3, r2
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	4413      	add	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	440b      	add	r3, r1
 8007daa:	f203 2356 	addw	r3, r3, #598	; 0x256
 8007dae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007dd6:	78fa      	ldrb	r2, [r7, #3]
 8007dd8:	4611      	mov	r1, r2
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fa ff62 	bl	8002ca4 <HAL_PCD_SetAddress>
 8007de0:	4603      	mov	r3, r0
 8007de2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 f874 	bl	8007ed4 <USBD_Get_USB_Status>
 8007dec:	4603      	mov	r3, r0
 8007dee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b086      	sub	sp, #24
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	603b      	str	r3, [r7, #0]
 8007e06:	460b      	mov	r3, r1
 8007e08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e18:	7af9      	ldrb	r1, [r7, #11]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	f7fb f86a 	bl	8002ef6 <HAL_PCD_EP_Transmit>
 8007e22:	4603      	mov	r3, r0
 8007e24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 f853 	bl	8007ed4 <USBD_Get_USB_Status>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e32:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	607a      	str	r2, [r7, #4]
 8007e46:	603b      	str	r3, [r7, #0]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e5a:	7af9      	ldrb	r1, [r7, #11]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	f7fa fff6 	bl	8002e50 <HAL_PCD_EP_Receive>
 8007e64:	4603      	mov	r3, r0
 8007e66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e68:	7dfb      	ldrb	r3, [r7, #23]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 f832 	bl	8007ed4 <USBD_Get_USB_Status>
 8007e70:	4603      	mov	r3, r0
 8007e72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e74:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	460b      	mov	r3, r1
 8007e88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e90:	78fa      	ldrb	r2, [r7, #3]
 8007e92:	4611      	mov	r1, r2
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fb f816 	bl	8002ec6 <HAL_PCD_EP_GetRxCount>
 8007e9a:	4603      	mov	r3, r0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007eac:	4b03      	ldr	r3, [pc, #12]	; (8007ebc <USBD_static_malloc+0x18>)
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	20001f60 	.word	0x20001f60

08007ec0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]

}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	4603      	mov	r3, r0
 8007edc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ee2:	79fb      	ldrb	r3, [r7, #7]
 8007ee4:	2b03      	cmp	r3, #3
 8007ee6:	d817      	bhi.n	8007f18 <USBD_Get_USB_Status+0x44>
 8007ee8:	a201      	add	r2, pc, #4	; (adr r2, 8007ef0 <USBD_Get_USB_Status+0x1c>)
 8007eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eee:	bf00      	nop
 8007ef0:	08007f01 	.word	0x08007f01
 8007ef4:	08007f07 	.word	0x08007f07
 8007ef8:	08007f0d 	.word	0x08007f0d
 8007efc:	08007f13 	.word	0x08007f13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	73fb      	strb	r3, [r7, #15]
    break;
 8007f04:	e00b      	b.n	8007f1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f06:	2303      	movs	r3, #3
 8007f08:	73fb      	strb	r3, [r7, #15]
    break;
 8007f0a:	e008      	b.n	8007f1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f10:	e005      	b.n	8007f1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f12:	2303      	movs	r3, #3
 8007f14:	73fb      	strb	r3, [r7, #15]
    break;
 8007f16:	e002      	b.n	8007f1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f1c:	bf00      	nop
  }
  return usb_status;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <__cvt>:
 8007f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f30:	ec55 4b10 	vmov	r4, r5, d0
 8007f34:	2d00      	cmp	r5, #0
 8007f36:	460e      	mov	r6, r1
 8007f38:	4619      	mov	r1, r3
 8007f3a:	462b      	mov	r3, r5
 8007f3c:	bfbb      	ittet	lt
 8007f3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007f42:	461d      	movlt	r5, r3
 8007f44:	2300      	movge	r3, #0
 8007f46:	232d      	movlt	r3, #45	; 0x2d
 8007f48:	700b      	strb	r3, [r1, #0]
 8007f4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f50:	4691      	mov	r9, r2
 8007f52:	f023 0820 	bic.w	r8, r3, #32
 8007f56:	bfbc      	itt	lt
 8007f58:	4622      	movlt	r2, r4
 8007f5a:	4614      	movlt	r4, r2
 8007f5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f60:	d005      	beq.n	8007f6e <__cvt+0x42>
 8007f62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f66:	d100      	bne.n	8007f6a <__cvt+0x3e>
 8007f68:	3601      	adds	r6, #1
 8007f6a:	2102      	movs	r1, #2
 8007f6c:	e000      	b.n	8007f70 <__cvt+0x44>
 8007f6e:	2103      	movs	r1, #3
 8007f70:	ab03      	add	r3, sp, #12
 8007f72:	9301      	str	r3, [sp, #4]
 8007f74:	ab02      	add	r3, sp, #8
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	ec45 4b10 	vmov	d0, r4, r5
 8007f7c:	4653      	mov	r3, sl
 8007f7e:	4632      	mov	r2, r6
 8007f80:	f001 f982 	bl	8009288 <_dtoa_r>
 8007f84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f88:	4607      	mov	r7, r0
 8007f8a:	d102      	bne.n	8007f92 <__cvt+0x66>
 8007f8c:	f019 0f01 	tst.w	r9, #1
 8007f90:	d022      	beq.n	8007fd8 <__cvt+0xac>
 8007f92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f96:	eb07 0906 	add.w	r9, r7, r6
 8007f9a:	d110      	bne.n	8007fbe <__cvt+0x92>
 8007f9c:	783b      	ldrb	r3, [r7, #0]
 8007f9e:	2b30      	cmp	r3, #48	; 0x30
 8007fa0:	d10a      	bne.n	8007fb8 <__cvt+0x8c>
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	4629      	mov	r1, r5
 8007faa:	f7f8 fd95 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fae:	b918      	cbnz	r0, 8007fb8 <__cvt+0x8c>
 8007fb0:	f1c6 0601 	rsb	r6, r6, #1
 8007fb4:	f8ca 6000 	str.w	r6, [sl]
 8007fb8:	f8da 3000 	ldr.w	r3, [sl]
 8007fbc:	4499      	add	r9, r3
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	f7f8 fd87 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fca:	b108      	cbz	r0, 8007fd0 <__cvt+0xa4>
 8007fcc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007fd0:	2230      	movs	r2, #48	; 0x30
 8007fd2:	9b03      	ldr	r3, [sp, #12]
 8007fd4:	454b      	cmp	r3, r9
 8007fd6:	d307      	bcc.n	8007fe8 <__cvt+0xbc>
 8007fd8:	9b03      	ldr	r3, [sp, #12]
 8007fda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fdc:	1bdb      	subs	r3, r3, r7
 8007fde:	4638      	mov	r0, r7
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	b004      	add	sp, #16
 8007fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe8:	1c59      	adds	r1, r3, #1
 8007fea:	9103      	str	r1, [sp, #12]
 8007fec:	701a      	strb	r2, [r3, #0]
 8007fee:	e7f0      	b.n	8007fd2 <__cvt+0xa6>

08007ff0 <__exponent>:
 8007ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2900      	cmp	r1, #0
 8007ff6:	bfb8      	it	lt
 8007ff8:	4249      	neglt	r1, r1
 8007ffa:	f803 2b02 	strb.w	r2, [r3], #2
 8007ffe:	bfb4      	ite	lt
 8008000:	222d      	movlt	r2, #45	; 0x2d
 8008002:	222b      	movge	r2, #43	; 0x2b
 8008004:	2909      	cmp	r1, #9
 8008006:	7042      	strb	r2, [r0, #1]
 8008008:	dd2a      	ble.n	8008060 <__exponent+0x70>
 800800a:	f10d 0207 	add.w	r2, sp, #7
 800800e:	4617      	mov	r7, r2
 8008010:	260a      	movs	r6, #10
 8008012:	4694      	mov	ip, r2
 8008014:	fb91 f5f6 	sdiv	r5, r1, r6
 8008018:	fb06 1415 	mls	r4, r6, r5, r1
 800801c:	3430      	adds	r4, #48	; 0x30
 800801e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008022:	460c      	mov	r4, r1
 8008024:	2c63      	cmp	r4, #99	; 0x63
 8008026:	f102 32ff 	add.w	r2, r2, #4294967295
 800802a:	4629      	mov	r1, r5
 800802c:	dcf1      	bgt.n	8008012 <__exponent+0x22>
 800802e:	3130      	adds	r1, #48	; 0x30
 8008030:	f1ac 0402 	sub.w	r4, ip, #2
 8008034:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008038:	1c41      	adds	r1, r0, #1
 800803a:	4622      	mov	r2, r4
 800803c:	42ba      	cmp	r2, r7
 800803e:	d30a      	bcc.n	8008056 <__exponent+0x66>
 8008040:	f10d 0209 	add.w	r2, sp, #9
 8008044:	eba2 020c 	sub.w	r2, r2, ip
 8008048:	42bc      	cmp	r4, r7
 800804a:	bf88      	it	hi
 800804c:	2200      	movhi	r2, #0
 800804e:	4413      	add	r3, r2
 8008050:	1a18      	subs	r0, r3, r0
 8008052:	b003      	add	sp, #12
 8008054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008056:	f812 5b01 	ldrb.w	r5, [r2], #1
 800805a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800805e:	e7ed      	b.n	800803c <__exponent+0x4c>
 8008060:	2330      	movs	r3, #48	; 0x30
 8008062:	3130      	adds	r1, #48	; 0x30
 8008064:	7083      	strb	r3, [r0, #2]
 8008066:	70c1      	strb	r1, [r0, #3]
 8008068:	1d03      	adds	r3, r0, #4
 800806a:	e7f1      	b.n	8008050 <__exponent+0x60>

0800806c <_printf_float>:
 800806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008070:	ed2d 8b02 	vpush	{d8}
 8008074:	b08d      	sub	sp, #52	; 0x34
 8008076:	460c      	mov	r4, r1
 8008078:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800807c:	4616      	mov	r6, r2
 800807e:	461f      	mov	r7, r3
 8008080:	4605      	mov	r5, r0
 8008082:	f000 ffef 	bl	8009064 <_localeconv_r>
 8008086:	f8d0 a000 	ldr.w	sl, [r0]
 800808a:	4650      	mov	r0, sl
 800808c:	f7f8 f8f8 	bl	8000280 <strlen>
 8008090:	2300      	movs	r3, #0
 8008092:	930a      	str	r3, [sp, #40]	; 0x28
 8008094:	6823      	ldr	r3, [r4, #0]
 8008096:	9305      	str	r3, [sp, #20]
 8008098:	f8d8 3000 	ldr.w	r3, [r8]
 800809c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80080a0:	3307      	adds	r3, #7
 80080a2:	f023 0307 	bic.w	r3, r3, #7
 80080a6:	f103 0208 	add.w	r2, r3, #8
 80080aa:	f8c8 2000 	str.w	r2, [r8]
 80080ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080b6:	9307      	str	r3, [sp, #28]
 80080b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80080bc:	ee08 0a10 	vmov	s16, r0
 80080c0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80080c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080c8:	4b9e      	ldr	r3, [pc, #632]	; (8008344 <_printf_float+0x2d8>)
 80080ca:	f04f 32ff 	mov.w	r2, #4294967295
 80080ce:	f7f8 fd35 	bl	8000b3c <__aeabi_dcmpun>
 80080d2:	bb88      	cbnz	r0, 8008138 <_printf_float+0xcc>
 80080d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080d8:	4b9a      	ldr	r3, [pc, #616]	; (8008344 <_printf_float+0x2d8>)
 80080da:	f04f 32ff 	mov.w	r2, #4294967295
 80080de:	f7f8 fd0f 	bl	8000b00 <__aeabi_dcmple>
 80080e2:	bb48      	cbnz	r0, 8008138 <_printf_float+0xcc>
 80080e4:	2200      	movs	r2, #0
 80080e6:	2300      	movs	r3, #0
 80080e8:	4640      	mov	r0, r8
 80080ea:	4649      	mov	r1, r9
 80080ec:	f7f8 fcfe 	bl	8000aec <__aeabi_dcmplt>
 80080f0:	b110      	cbz	r0, 80080f8 <_printf_float+0x8c>
 80080f2:	232d      	movs	r3, #45	; 0x2d
 80080f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080f8:	4a93      	ldr	r2, [pc, #588]	; (8008348 <_printf_float+0x2dc>)
 80080fa:	4b94      	ldr	r3, [pc, #592]	; (800834c <_printf_float+0x2e0>)
 80080fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008100:	bf94      	ite	ls
 8008102:	4690      	movls	r8, r2
 8008104:	4698      	movhi	r8, r3
 8008106:	2303      	movs	r3, #3
 8008108:	6123      	str	r3, [r4, #16]
 800810a:	9b05      	ldr	r3, [sp, #20]
 800810c:	f023 0304 	bic.w	r3, r3, #4
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	f04f 0900 	mov.w	r9, #0
 8008116:	9700      	str	r7, [sp, #0]
 8008118:	4633      	mov	r3, r6
 800811a:	aa0b      	add	r2, sp, #44	; 0x2c
 800811c:	4621      	mov	r1, r4
 800811e:	4628      	mov	r0, r5
 8008120:	f000 f9da 	bl	80084d8 <_printf_common>
 8008124:	3001      	adds	r0, #1
 8008126:	f040 8090 	bne.w	800824a <_printf_float+0x1de>
 800812a:	f04f 30ff 	mov.w	r0, #4294967295
 800812e:	b00d      	add	sp, #52	; 0x34
 8008130:	ecbd 8b02 	vpop	{d8}
 8008134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008138:	4642      	mov	r2, r8
 800813a:	464b      	mov	r3, r9
 800813c:	4640      	mov	r0, r8
 800813e:	4649      	mov	r1, r9
 8008140:	f7f8 fcfc 	bl	8000b3c <__aeabi_dcmpun>
 8008144:	b140      	cbz	r0, 8008158 <_printf_float+0xec>
 8008146:	464b      	mov	r3, r9
 8008148:	2b00      	cmp	r3, #0
 800814a:	bfbc      	itt	lt
 800814c:	232d      	movlt	r3, #45	; 0x2d
 800814e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008152:	4a7f      	ldr	r2, [pc, #508]	; (8008350 <_printf_float+0x2e4>)
 8008154:	4b7f      	ldr	r3, [pc, #508]	; (8008354 <_printf_float+0x2e8>)
 8008156:	e7d1      	b.n	80080fc <_printf_float+0x90>
 8008158:	6863      	ldr	r3, [r4, #4]
 800815a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800815e:	9206      	str	r2, [sp, #24]
 8008160:	1c5a      	adds	r2, r3, #1
 8008162:	d13f      	bne.n	80081e4 <_printf_float+0x178>
 8008164:	2306      	movs	r3, #6
 8008166:	6063      	str	r3, [r4, #4]
 8008168:	9b05      	ldr	r3, [sp, #20]
 800816a:	6861      	ldr	r1, [r4, #4]
 800816c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008170:	2300      	movs	r3, #0
 8008172:	9303      	str	r3, [sp, #12]
 8008174:	ab0a      	add	r3, sp, #40	; 0x28
 8008176:	e9cd b301 	strd	fp, r3, [sp, #4]
 800817a:	ab09      	add	r3, sp, #36	; 0x24
 800817c:	ec49 8b10 	vmov	d0, r8, r9
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	6022      	str	r2, [r4, #0]
 8008184:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008188:	4628      	mov	r0, r5
 800818a:	f7ff fecf 	bl	8007f2c <__cvt>
 800818e:	9b06      	ldr	r3, [sp, #24]
 8008190:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008192:	2b47      	cmp	r3, #71	; 0x47
 8008194:	4680      	mov	r8, r0
 8008196:	d108      	bne.n	80081aa <_printf_float+0x13e>
 8008198:	1cc8      	adds	r0, r1, #3
 800819a:	db02      	blt.n	80081a2 <_printf_float+0x136>
 800819c:	6863      	ldr	r3, [r4, #4]
 800819e:	4299      	cmp	r1, r3
 80081a0:	dd41      	ble.n	8008226 <_printf_float+0x1ba>
 80081a2:	f1ab 0302 	sub.w	r3, fp, #2
 80081a6:	fa5f fb83 	uxtb.w	fp, r3
 80081aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80081ae:	d820      	bhi.n	80081f2 <_printf_float+0x186>
 80081b0:	3901      	subs	r1, #1
 80081b2:	465a      	mov	r2, fp
 80081b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80081b8:	9109      	str	r1, [sp, #36]	; 0x24
 80081ba:	f7ff ff19 	bl	8007ff0 <__exponent>
 80081be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081c0:	1813      	adds	r3, r2, r0
 80081c2:	2a01      	cmp	r2, #1
 80081c4:	4681      	mov	r9, r0
 80081c6:	6123      	str	r3, [r4, #16]
 80081c8:	dc02      	bgt.n	80081d0 <_printf_float+0x164>
 80081ca:	6822      	ldr	r2, [r4, #0]
 80081cc:	07d2      	lsls	r2, r2, #31
 80081ce:	d501      	bpl.n	80081d4 <_printf_float+0x168>
 80081d0:	3301      	adds	r3, #1
 80081d2:	6123      	str	r3, [r4, #16]
 80081d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d09c      	beq.n	8008116 <_printf_float+0xaa>
 80081dc:	232d      	movs	r3, #45	; 0x2d
 80081de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081e2:	e798      	b.n	8008116 <_printf_float+0xaa>
 80081e4:	9a06      	ldr	r2, [sp, #24]
 80081e6:	2a47      	cmp	r2, #71	; 0x47
 80081e8:	d1be      	bne.n	8008168 <_printf_float+0xfc>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1bc      	bne.n	8008168 <_printf_float+0xfc>
 80081ee:	2301      	movs	r3, #1
 80081f0:	e7b9      	b.n	8008166 <_printf_float+0xfa>
 80081f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80081f6:	d118      	bne.n	800822a <_printf_float+0x1be>
 80081f8:	2900      	cmp	r1, #0
 80081fa:	6863      	ldr	r3, [r4, #4]
 80081fc:	dd0b      	ble.n	8008216 <_printf_float+0x1aa>
 80081fe:	6121      	str	r1, [r4, #16]
 8008200:	b913      	cbnz	r3, 8008208 <_printf_float+0x19c>
 8008202:	6822      	ldr	r2, [r4, #0]
 8008204:	07d0      	lsls	r0, r2, #31
 8008206:	d502      	bpl.n	800820e <_printf_float+0x1a2>
 8008208:	3301      	adds	r3, #1
 800820a:	440b      	add	r3, r1
 800820c:	6123      	str	r3, [r4, #16]
 800820e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008210:	f04f 0900 	mov.w	r9, #0
 8008214:	e7de      	b.n	80081d4 <_printf_float+0x168>
 8008216:	b913      	cbnz	r3, 800821e <_printf_float+0x1b2>
 8008218:	6822      	ldr	r2, [r4, #0]
 800821a:	07d2      	lsls	r2, r2, #31
 800821c:	d501      	bpl.n	8008222 <_printf_float+0x1b6>
 800821e:	3302      	adds	r3, #2
 8008220:	e7f4      	b.n	800820c <_printf_float+0x1a0>
 8008222:	2301      	movs	r3, #1
 8008224:	e7f2      	b.n	800820c <_printf_float+0x1a0>
 8008226:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800822a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800822c:	4299      	cmp	r1, r3
 800822e:	db05      	blt.n	800823c <_printf_float+0x1d0>
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	6121      	str	r1, [r4, #16]
 8008234:	07d8      	lsls	r0, r3, #31
 8008236:	d5ea      	bpl.n	800820e <_printf_float+0x1a2>
 8008238:	1c4b      	adds	r3, r1, #1
 800823a:	e7e7      	b.n	800820c <_printf_float+0x1a0>
 800823c:	2900      	cmp	r1, #0
 800823e:	bfd4      	ite	le
 8008240:	f1c1 0202 	rsble	r2, r1, #2
 8008244:	2201      	movgt	r2, #1
 8008246:	4413      	add	r3, r2
 8008248:	e7e0      	b.n	800820c <_printf_float+0x1a0>
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	055a      	lsls	r2, r3, #21
 800824e:	d407      	bmi.n	8008260 <_printf_float+0x1f4>
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	4642      	mov	r2, r8
 8008254:	4631      	mov	r1, r6
 8008256:	4628      	mov	r0, r5
 8008258:	47b8      	blx	r7
 800825a:	3001      	adds	r0, #1
 800825c:	d12c      	bne.n	80082b8 <_printf_float+0x24c>
 800825e:	e764      	b.n	800812a <_printf_float+0xbe>
 8008260:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008264:	f240 80e0 	bls.w	8008428 <_printf_float+0x3bc>
 8008268:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800826c:	2200      	movs	r2, #0
 800826e:	2300      	movs	r3, #0
 8008270:	f7f8 fc32 	bl	8000ad8 <__aeabi_dcmpeq>
 8008274:	2800      	cmp	r0, #0
 8008276:	d034      	beq.n	80082e2 <_printf_float+0x276>
 8008278:	4a37      	ldr	r2, [pc, #220]	; (8008358 <_printf_float+0x2ec>)
 800827a:	2301      	movs	r3, #1
 800827c:	4631      	mov	r1, r6
 800827e:	4628      	mov	r0, r5
 8008280:	47b8      	blx	r7
 8008282:	3001      	adds	r0, #1
 8008284:	f43f af51 	beq.w	800812a <_printf_float+0xbe>
 8008288:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800828c:	429a      	cmp	r2, r3
 800828e:	db02      	blt.n	8008296 <_printf_float+0x22a>
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	07d8      	lsls	r0, r3, #31
 8008294:	d510      	bpl.n	80082b8 <_printf_float+0x24c>
 8008296:	ee18 3a10 	vmov	r3, s16
 800829a:	4652      	mov	r2, sl
 800829c:	4631      	mov	r1, r6
 800829e:	4628      	mov	r0, r5
 80082a0:	47b8      	blx	r7
 80082a2:	3001      	adds	r0, #1
 80082a4:	f43f af41 	beq.w	800812a <_printf_float+0xbe>
 80082a8:	f04f 0800 	mov.w	r8, #0
 80082ac:	f104 091a 	add.w	r9, r4, #26
 80082b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082b2:	3b01      	subs	r3, #1
 80082b4:	4543      	cmp	r3, r8
 80082b6:	dc09      	bgt.n	80082cc <_printf_float+0x260>
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	079b      	lsls	r3, r3, #30
 80082bc:	f100 8107 	bmi.w	80084ce <_printf_float+0x462>
 80082c0:	68e0      	ldr	r0, [r4, #12]
 80082c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082c4:	4298      	cmp	r0, r3
 80082c6:	bfb8      	it	lt
 80082c8:	4618      	movlt	r0, r3
 80082ca:	e730      	b.n	800812e <_printf_float+0xc2>
 80082cc:	2301      	movs	r3, #1
 80082ce:	464a      	mov	r2, r9
 80082d0:	4631      	mov	r1, r6
 80082d2:	4628      	mov	r0, r5
 80082d4:	47b8      	blx	r7
 80082d6:	3001      	adds	r0, #1
 80082d8:	f43f af27 	beq.w	800812a <_printf_float+0xbe>
 80082dc:	f108 0801 	add.w	r8, r8, #1
 80082e0:	e7e6      	b.n	80082b0 <_printf_float+0x244>
 80082e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	dc39      	bgt.n	800835c <_printf_float+0x2f0>
 80082e8:	4a1b      	ldr	r2, [pc, #108]	; (8008358 <_printf_float+0x2ec>)
 80082ea:	2301      	movs	r3, #1
 80082ec:	4631      	mov	r1, r6
 80082ee:	4628      	mov	r0, r5
 80082f0:	47b8      	blx	r7
 80082f2:	3001      	adds	r0, #1
 80082f4:	f43f af19 	beq.w	800812a <_printf_float+0xbe>
 80082f8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80082fc:	4313      	orrs	r3, r2
 80082fe:	d102      	bne.n	8008306 <_printf_float+0x29a>
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	07d9      	lsls	r1, r3, #31
 8008304:	d5d8      	bpl.n	80082b8 <_printf_float+0x24c>
 8008306:	ee18 3a10 	vmov	r3, s16
 800830a:	4652      	mov	r2, sl
 800830c:	4631      	mov	r1, r6
 800830e:	4628      	mov	r0, r5
 8008310:	47b8      	blx	r7
 8008312:	3001      	adds	r0, #1
 8008314:	f43f af09 	beq.w	800812a <_printf_float+0xbe>
 8008318:	f04f 0900 	mov.w	r9, #0
 800831c:	f104 0a1a 	add.w	sl, r4, #26
 8008320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008322:	425b      	negs	r3, r3
 8008324:	454b      	cmp	r3, r9
 8008326:	dc01      	bgt.n	800832c <_printf_float+0x2c0>
 8008328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800832a:	e792      	b.n	8008252 <_printf_float+0x1e6>
 800832c:	2301      	movs	r3, #1
 800832e:	4652      	mov	r2, sl
 8008330:	4631      	mov	r1, r6
 8008332:	4628      	mov	r0, r5
 8008334:	47b8      	blx	r7
 8008336:	3001      	adds	r0, #1
 8008338:	f43f aef7 	beq.w	800812a <_printf_float+0xbe>
 800833c:	f109 0901 	add.w	r9, r9, #1
 8008340:	e7ee      	b.n	8008320 <_printf_float+0x2b4>
 8008342:	bf00      	nop
 8008344:	7fefffff 	.word	0x7fefffff
 8008348:	0800c914 	.word	0x0800c914
 800834c:	0800c918 	.word	0x0800c918
 8008350:	0800c91c 	.word	0x0800c91c
 8008354:	0800c920 	.word	0x0800c920
 8008358:	0800c924 	.word	0x0800c924
 800835c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800835e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008360:	429a      	cmp	r2, r3
 8008362:	bfa8      	it	ge
 8008364:	461a      	movge	r2, r3
 8008366:	2a00      	cmp	r2, #0
 8008368:	4691      	mov	r9, r2
 800836a:	dc37      	bgt.n	80083dc <_printf_float+0x370>
 800836c:	f04f 0b00 	mov.w	fp, #0
 8008370:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008374:	f104 021a 	add.w	r2, r4, #26
 8008378:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800837a:	9305      	str	r3, [sp, #20]
 800837c:	eba3 0309 	sub.w	r3, r3, r9
 8008380:	455b      	cmp	r3, fp
 8008382:	dc33      	bgt.n	80083ec <_printf_float+0x380>
 8008384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008388:	429a      	cmp	r2, r3
 800838a:	db3b      	blt.n	8008404 <_printf_float+0x398>
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	07da      	lsls	r2, r3, #31
 8008390:	d438      	bmi.n	8008404 <_printf_float+0x398>
 8008392:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008396:	eba2 0903 	sub.w	r9, r2, r3
 800839a:	9b05      	ldr	r3, [sp, #20]
 800839c:	1ad2      	subs	r2, r2, r3
 800839e:	4591      	cmp	r9, r2
 80083a0:	bfa8      	it	ge
 80083a2:	4691      	movge	r9, r2
 80083a4:	f1b9 0f00 	cmp.w	r9, #0
 80083a8:	dc35      	bgt.n	8008416 <_printf_float+0x3aa>
 80083aa:	f04f 0800 	mov.w	r8, #0
 80083ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083b2:	f104 0a1a 	add.w	sl, r4, #26
 80083b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083ba:	1a9b      	subs	r3, r3, r2
 80083bc:	eba3 0309 	sub.w	r3, r3, r9
 80083c0:	4543      	cmp	r3, r8
 80083c2:	f77f af79 	ble.w	80082b8 <_printf_float+0x24c>
 80083c6:	2301      	movs	r3, #1
 80083c8:	4652      	mov	r2, sl
 80083ca:	4631      	mov	r1, r6
 80083cc:	4628      	mov	r0, r5
 80083ce:	47b8      	blx	r7
 80083d0:	3001      	adds	r0, #1
 80083d2:	f43f aeaa 	beq.w	800812a <_printf_float+0xbe>
 80083d6:	f108 0801 	add.w	r8, r8, #1
 80083da:	e7ec      	b.n	80083b6 <_printf_float+0x34a>
 80083dc:	4613      	mov	r3, r2
 80083de:	4631      	mov	r1, r6
 80083e0:	4642      	mov	r2, r8
 80083e2:	4628      	mov	r0, r5
 80083e4:	47b8      	blx	r7
 80083e6:	3001      	adds	r0, #1
 80083e8:	d1c0      	bne.n	800836c <_printf_float+0x300>
 80083ea:	e69e      	b.n	800812a <_printf_float+0xbe>
 80083ec:	2301      	movs	r3, #1
 80083ee:	4631      	mov	r1, r6
 80083f0:	4628      	mov	r0, r5
 80083f2:	9205      	str	r2, [sp, #20]
 80083f4:	47b8      	blx	r7
 80083f6:	3001      	adds	r0, #1
 80083f8:	f43f ae97 	beq.w	800812a <_printf_float+0xbe>
 80083fc:	9a05      	ldr	r2, [sp, #20]
 80083fe:	f10b 0b01 	add.w	fp, fp, #1
 8008402:	e7b9      	b.n	8008378 <_printf_float+0x30c>
 8008404:	ee18 3a10 	vmov	r3, s16
 8008408:	4652      	mov	r2, sl
 800840a:	4631      	mov	r1, r6
 800840c:	4628      	mov	r0, r5
 800840e:	47b8      	blx	r7
 8008410:	3001      	adds	r0, #1
 8008412:	d1be      	bne.n	8008392 <_printf_float+0x326>
 8008414:	e689      	b.n	800812a <_printf_float+0xbe>
 8008416:	9a05      	ldr	r2, [sp, #20]
 8008418:	464b      	mov	r3, r9
 800841a:	4442      	add	r2, r8
 800841c:	4631      	mov	r1, r6
 800841e:	4628      	mov	r0, r5
 8008420:	47b8      	blx	r7
 8008422:	3001      	adds	r0, #1
 8008424:	d1c1      	bne.n	80083aa <_printf_float+0x33e>
 8008426:	e680      	b.n	800812a <_printf_float+0xbe>
 8008428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800842a:	2a01      	cmp	r2, #1
 800842c:	dc01      	bgt.n	8008432 <_printf_float+0x3c6>
 800842e:	07db      	lsls	r3, r3, #31
 8008430:	d53a      	bpl.n	80084a8 <_printf_float+0x43c>
 8008432:	2301      	movs	r3, #1
 8008434:	4642      	mov	r2, r8
 8008436:	4631      	mov	r1, r6
 8008438:	4628      	mov	r0, r5
 800843a:	47b8      	blx	r7
 800843c:	3001      	adds	r0, #1
 800843e:	f43f ae74 	beq.w	800812a <_printf_float+0xbe>
 8008442:	ee18 3a10 	vmov	r3, s16
 8008446:	4652      	mov	r2, sl
 8008448:	4631      	mov	r1, r6
 800844a:	4628      	mov	r0, r5
 800844c:	47b8      	blx	r7
 800844e:	3001      	adds	r0, #1
 8008450:	f43f ae6b 	beq.w	800812a <_printf_float+0xbe>
 8008454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008458:	2200      	movs	r2, #0
 800845a:	2300      	movs	r3, #0
 800845c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008460:	f7f8 fb3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008464:	b9d8      	cbnz	r0, 800849e <_printf_float+0x432>
 8008466:	f10a 33ff 	add.w	r3, sl, #4294967295
 800846a:	f108 0201 	add.w	r2, r8, #1
 800846e:	4631      	mov	r1, r6
 8008470:	4628      	mov	r0, r5
 8008472:	47b8      	blx	r7
 8008474:	3001      	adds	r0, #1
 8008476:	d10e      	bne.n	8008496 <_printf_float+0x42a>
 8008478:	e657      	b.n	800812a <_printf_float+0xbe>
 800847a:	2301      	movs	r3, #1
 800847c:	4652      	mov	r2, sl
 800847e:	4631      	mov	r1, r6
 8008480:	4628      	mov	r0, r5
 8008482:	47b8      	blx	r7
 8008484:	3001      	adds	r0, #1
 8008486:	f43f ae50 	beq.w	800812a <_printf_float+0xbe>
 800848a:	f108 0801 	add.w	r8, r8, #1
 800848e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008490:	3b01      	subs	r3, #1
 8008492:	4543      	cmp	r3, r8
 8008494:	dcf1      	bgt.n	800847a <_printf_float+0x40e>
 8008496:	464b      	mov	r3, r9
 8008498:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800849c:	e6da      	b.n	8008254 <_printf_float+0x1e8>
 800849e:	f04f 0800 	mov.w	r8, #0
 80084a2:	f104 0a1a 	add.w	sl, r4, #26
 80084a6:	e7f2      	b.n	800848e <_printf_float+0x422>
 80084a8:	2301      	movs	r3, #1
 80084aa:	4642      	mov	r2, r8
 80084ac:	e7df      	b.n	800846e <_printf_float+0x402>
 80084ae:	2301      	movs	r3, #1
 80084b0:	464a      	mov	r2, r9
 80084b2:	4631      	mov	r1, r6
 80084b4:	4628      	mov	r0, r5
 80084b6:	47b8      	blx	r7
 80084b8:	3001      	adds	r0, #1
 80084ba:	f43f ae36 	beq.w	800812a <_printf_float+0xbe>
 80084be:	f108 0801 	add.w	r8, r8, #1
 80084c2:	68e3      	ldr	r3, [r4, #12]
 80084c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084c6:	1a5b      	subs	r3, r3, r1
 80084c8:	4543      	cmp	r3, r8
 80084ca:	dcf0      	bgt.n	80084ae <_printf_float+0x442>
 80084cc:	e6f8      	b.n	80082c0 <_printf_float+0x254>
 80084ce:	f04f 0800 	mov.w	r8, #0
 80084d2:	f104 0919 	add.w	r9, r4, #25
 80084d6:	e7f4      	b.n	80084c2 <_printf_float+0x456>

080084d8 <_printf_common>:
 80084d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084dc:	4616      	mov	r6, r2
 80084de:	4699      	mov	r9, r3
 80084e0:	688a      	ldr	r2, [r1, #8]
 80084e2:	690b      	ldr	r3, [r1, #16]
 80084e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084e8:	4293      	cmp	r3, r2
 80084ea:	bfb8      	it	lt
 80084ec:	4613      	movlt	r3, r2
 80084ee:	6033      	str	r3, [r6, #0]
 80084f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084f4:	4607      	mov	r7, r0
 80084f6:	460c      	mov	r4, r1
 80084f8:	b10a      	cbz	r2, 80084fe <_printf_common+0x26>
 80084fa:	3301      	adds	r3, #1
 80084fc:	6033      	str	r3, [r6, #0]
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	0699      	lsls	r1, r3, #26
 8008502:	bf42      	ittt	mi
 8008504:	6833      	ldrmi	r3, [r6, #0]
 8008506:	3302      	addmi	r3, #2
 8008508:	6033      	strmi	r3, [r6, #0]
 800850a:	6825      	ldr	r5, [r4, #0]
 800850c:	f015 0506 	ands.w	r5, r5, #6
 8008510:	d106      	bne.n	8008520 <_printf_common+0x48>
 8008512:	f104 0a19 	add.w	sl, r4, #25
 8008516:	68e3      	ldr	r3, [r4, #12]
 8008518:	6832      	ldr	r2, [r6, #0]
 800851a:	1a9b      	subs	r3, r3, r2
 800851c:	42ab      	cmp	r3, r5
 800851e:	dc26      	bgt.n	800856e <_printf_common+0x96>
 8008520:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008524:	1e13      	subs	r3, r2, #0
 8008526:	6822      	ldr	r2, [r4, #0]
 8008528:	bf18      	it	ne
 800852a:	2301      	movne	r3, #1
 800852c:	0692      	lsls	r2, r2, #26
 800852e:	d42b      	bmi.n	8008588 <_printf_common+0xb0>
 8008530:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008534:	4649      	mov	r1, r9
 8008536:	4638      	mov	r0, r7
 8008538:	47c0      	blx	r8
 800853a:	3001      	adds	r0, #1
 800853c:	d01e      	beq.n	800857c <_printf_common+0xa4>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	6922      	ldr	r2, [r4, #16]
 8008542:	f003 0306 	and.w	r3, r3, #6
 8008546:	2b04      	cmp	r3, #4
 8008548:	bf02      	ittt	eq
 800854a:	68e5      	ldreq	r5, [r4, #12]
 800854c:	6833      	ldreq	r3, [r6, #0]
 800854e:	1aed      	subeq	r5, r5, r3
 8008550:	68a3      	ldr	r3, [r4, #8]
 8008552:	bf0c      	ite	eq
 8008554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008558:	2500      	movne	r5, #0
 800855a:	4293      	cmp	r3, r2
 800855c:	bfc4      	itt	gt
 800855e:	1a9b      	subgt	r3, r3, r2
 8008560:	18ed      	addgt	r5, r5, r3
 8008562:	2600      	movs	r6, #0
 8008564:	341a      	adds	r4, #26
 8008566:	42b5      	cmp	r5, r6
 8008568:	d11a      	bne.n	80085a0 <_printf_common+0xc8>
 800856a:	2000      	movs	r0, #0
 800856c:	e008      	b.n	8008580 <_printf_common+0xa8>
 800856e:	2301      	movs	r3, #1
 8008570:	4652      	mov	r2, sl
 8008572:	4649      	mov	r1, r9
 8008574:	4638      	mov	r0, r7
 8008576:	47c0      	blx	r8
 8008578:	3001      	adds	r0, #1
 800857a:	d103      	bne.n	8008584 <_printf_common+0xac>
 800857c:	f04f 30ff 	mov.w	r0, #4294967295
 8008580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008584:	3501      	adds	r5, #1
 8008586:	e7c6      	b.n	8008516 <_printf_common+0x3e>
 8008588:	18e1      	adds	r1, r4, r3
 800858a:	1c5a      	adds	r2, r3, #1
 800858c:	2030      	movs	r0, #48	; 0x30
 800858e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008592:	4422      	add	r2, r4
 8008594:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008598:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800859c:	3302      	adds	r3, #2
 800859e:	e7c7      	b.n	8008530 <_printf_common+0x58>
 80085a0:	2301      	movs	r3, #1
 80085a2:	4622      	mov	r2, r4
 80085a4:	4649      	mov	r1, r9
 80085a6:	4638      	mov	r0, r7
 80085a8:	47c0      	blx	r8
 80085aa:	3001      	adds	r0, #1
 80085ac:	d0e6      	beq.n	800857c <_printf_common+0xa4>
 80085ae:	3601      	adds	r6, #1
 80085b0:	e7d9      	b.n	8008566 <_printf_common+0x8e>
	...

080085b4 <_printf_i>:
 80085b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085b8:	7e0f      	ldrb	r7, [r1, #24]
 80085ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085bc:	2f78      	cmp	r7, #120	; 0x78
 80085be:	4691      	mov	r9, r2
 80085c0:	4680      	mov	r8, r0
 80085c2:	460c      	mov	r4, r1
 80085c4:	469a      	mov	sl, r3
 80085c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085ca:	d807      	bhi.n	80085dc <_printf_i+0x28>
 80085cc:	2f62      	cmp	r7, #98	; 0x62
 80085ce:	d80a      	bhi.n	80085e6 <_printf_i+0x32>
 80085d0:	2f00      	cmp	r7, #0
 80085d2:	f000 80d4 	beq.w	800877e <_printf_i+0x1ca>
 80085d6:	2f58      	cmp	r7, #88	; 0x58
 80085d8:	f000 80c0 	beq.w	800875c <_printf_i+0x1a8>
 80085dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085e4:	e03a      	b.n	800865c <_printf_i+0xa8>
 80085e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085ea:	2b15      	cmp	r3, #21
 80085ec:	d8f6      	bhi.n	80085dc <_printf_i+0x28>
 80085ee:	a101      	add	r1, pc, #4	; (adr r1, 80085f4 <_printf_i+0x40>)
 80085f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085f4:	0800864d 	.word	0x0800864d
 80085f8:	08008661 	.word	0x08008661
 80085fc:	080085dd 	.word	0x080085dd
 8008600:	080085dd 	.word	0x080085dd
 8008604:	080085dd 	.word	0x080085dd
 8008608:	080085dd 	.word	0x080085dd
 800860c:	08008661 	.word	0x08008661
 8008610:	080085dd 	.word	0x080085dd
 8008614:	080085dd 	.word	0x080085dd
 8008618:	080085dd 	.word	0x080085dd
 800861c:	080085dd 	.word	0x080085dd
 8008620:	08008765 	.word	0x08008765
 8008624:	0800868d 	.word	0x0800868d
 8008628:	0800871f 	.word	0x0800871f
 800862c:	080085dd 	.word	0x080085dd
 8008630:	080085dd 	.word	0x080085dd
 8008634:	08008787 	.word	0x08008787
 8008638:	080085dd 	.word	0x080085dd
 800863c:	0800868d 	.word	0x0800868d
 8008640:	080085dd 	.word	0x080085dd
 8008644:	080085dd 	.word	0x080085dd
 8008648:	08008727 	.word	0x08008727
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	1d1a      	adds	r2, r3, #4
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	602a      	str	r2, [r5, #0]
 8008654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800865c:	2301      	movs	r3, #1
 800865e:	e09f      	b.n	80087a0 <_printf_i+0x1ec>
 8008660:	6820      	ldr	r0, [r4, #0]
 8008662:	682b      	ldr	r3, [r5, #0]
 8008664:	0607      	lsls	r7, r0, #24
 8008666:	f103 0104 	add.w	r1, r3, #4
 800866a:	6029      	str	r1, [r5, #0]
 800866c:	d501      	bpl.n	8008672 <_printf_i+0xbe>
 800866e:	681e      	ldr	r6, [r3, #0]
 8008670:	e003      	b.n	800867a <_printf_i+0xc6>
 8008672:	0646      	lsls	r6, r0, #25
 8008674:	d5fb      	bpl.n	800866e <_printf_i+0xba>
 8008676:	f9b3 6000 	ldrsh.w	r6, [r3]
 800867a:	2e00      	cmp	r6, #0
 800867c:	da03      	bge.n	8008686 <_printf_i+0xd2>
 800867e:	232d      	movs	r3, #45	; 0x2d
 8008680:	4276      	negs	r6, r6
 8008682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008686:	485a      	ldr	r0, [pc, #360]	; (80087f0 <_printf_i+0x23c>)
 8008688:	230a      	movs	r3, #10
 800868a:	e012      	b.n	80086b2 <_printf_i+0xfe>
 800868c:	682b      	ldr	r3, [r5, #0]
 800868e:	6820      	ldr	r0, [r4, #0]
 8008690:	1d19      	adds	r1, r3, #4
 8008692:	6029      	str	r1, [r5, #0]
 8008694:	0605      	lsls	r5, r0, #24
 8008696:	d501      	bpl.n	800869c <_printf_i+0xe8>
 8008698:	681e      	ldr	r6, [r3, #0]
 800869a:	e002      	b.n	80086a2 <_printf_i+0xee>
 800869c:	0641      	lsls	r1, r0, #25
 800869e:	d5fb      	bpl.n	8008698 <_printf_i+0xe4>
 80086a0:	881e      	ldrh	r6, [r3, #0]
 80086a2:	4853      	ldr	r0, [pc, #332]	; (80087f0 <_printf_i+0x23c>)
 80086a4:	2f6f      	cmp	r7, #111	; 0x6f
 80086a6:	bf0c      	ite	eq
 80086a8:	2308      	moveq	r3, #8
 80086aa:	230a      	movne	r3, #10
 80086ac:	2100      	movs	r1, #0
 80086ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086b2:	6865      	ldr	r5, [r4, #4]
 80086b4:	60a5      	str	r5, [r4, #8]
 80086b6:	2d00      	cmp	r5, #0
 80086b8:	bfa2      	ittt	ge
 80086ba:	6821      	ldrge	r1, [r4, #0]
 80086bc:	f021 0104 	bicge.w	r1, r1, #4
 80086c0:	6021      	strge	r1, [r4, #0]
 80086c2:	b90e      	cbnz	r6, 80086c8 <_printf_i+0x114>
 80086c4:	2d00      	cmp	r5, #0
 80086c6:	d04b      	beq.n	8008760 <_printf_i+0x1ac>
 80086c8:	4615      	mov	r5, r2
 80086ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80086ce:	fb03 6711 	mls	r7, r3, r1, r6
 80086d2:	5dc7      	ldrb	r7, [r0, r7]
 80086d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086d8:	4637      	mov	r7, r6
 80086da:	42bb      	cmp	r3, r7
 80086dc:	460e      	mov	r6, r1
 80086de:	d9f4      	bls.n	80086ca <_printf_i+0x116>
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d10b      	bne.n	80086fc <_printf_i+0x148>
 80086e4:	6823      	ldr	r3, [r4, #0]
 80086e6:	07de      	lsls	r6, r3, #31
 80086e8:	d508      	bpl.n	80086fc <_printf_i+0x148>
 80086ea:	6923      	ldr	r3, [r4, #16]
 80086ec:	6861      	ldr	r1, [r4, #4]
 80086ee:	4299      	cmp	r1, r3
 80086f0:	bfde      	ittt	le
 80086f2:	2330      	movle	r3, #48	; 0x30
 80086f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086fc:	1b52      	subs	r2, r2, r5
 80086fe:	6122      	str	r2, [r4, #16]
 8008700:	f8cd a000 	str.w	sl, [sp]
 8008704:	464b      	mov	r3, r9
 8008706:	aa03      	add	r2, sp, #12
 8008708:	4621      	mov	r1, r4
 800870a:	4640      	mov	r0, r8
 800870c:	f7ff fee4 	bl	80084d8 <_printf_common>
 8008710:	3001      	adds	r0, #1
 8008712:	d14a      	bne.n	80087aa <_printf_i+0x1f6>
 8008714:	f04f 30ff 	mov.w	r0, #4294967295
 8008718:	b004      	add	sp, #16
 800871a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	f043 0320 	orr.w	r3, r3, #32
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	4833      	ldr	r0, [pc, #204]	; (80087f4 <_printf_i+0x240>)
 8008728:	2778      	movs	r7, #120	; 0x78
 800872a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	6829      	ldr	r1, [r5, #0]
 8008732:	061f      	lsls	r7, r3, #24
 8008734:	f851 6b04 	ldr.w	r6, [r1], #4
 8008738:	d402      	bmi.n	8008740 <_printf_i+0x18c>
 800873a:	065f      	lsls	r7, r3, #25
 800873c:	bf48      	it	mi
 800873e:	b2b6      	uxthmi	r6, r6
 8008740:	07df      	lsls	r7, r3, #31
 8008742:	bf48      	it	mi
 8008744:	f043 0320 	orrmi.w	r3, r3, #32
 8008748:	6029      	str	r1, [r5, #0]
 800874a:	bf48      	it	mi
 800874c:	6023      	strmi	r3, [r4, #0]
 800874e:	b91e      	cbnz	r6, 8008758 <_printf_i+0x1a4>
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	f023 0320 	bic.w	r3, r3, #32
 8008756:	6023      	str	r3, [r4, #0]
 8008758:	2310      	movs	r3, #16
 800875a:	e7a7      	b.n	80086ac <_printf_i+0xf8>
 800875c:	4824      	ldr	r0, [pc, #144]	; (80087f0 <_printf_i+0x23c>)
 800875e:	e7e4      	b.n	800872a <_printf_i+0x176>
 8008760:	4615      	mov	r5, r2
 8008762:	e7bd      	b.n	80086e0 <_printf_i+0x12c>
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	6826      	ldr	r6, [r4, #0]
 8008768:	6961      	ldr	r1, [r4, #20]
 800876a:	1d18      	adds	r0, r3, #4
 800876c:	6028      	str	r0, [r5, #0]
 800876e:	0635      	lsls	r5, r6, #24
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	d501      	bpl.n	8008778 <_printf_i+0x1c4>
 8008774:	6019      	str	r1, [r3, #0]
 8008776:	e002      	b.n	800877e <_printf_i+0x1ca>
 8008778:	0670      	lsls	r0, r6, #25
 800877a:	d5fb      	bpl.n	8008774 <_printf_i+0x1c0>
 800877c:	8019      	strh	r1, [r3, #0]
 800877e:	2300      	movs	r3, #0
 8008780:	6123      	str	r3, [r4, #16]
 8008782:	4615      	mov	r5, r2
 8008784:	e7bc      	b.n	8008700 <_printf_i+0x14c>
 8008786:	682b      	ldr	r3, [r5, #0]
 8008788:	1d1a      	adds	r2, r3, #4
 800878a:	602a      	str	r2, [r5, #0]
 800878c:	681d      	ldr	r5, [r3, #0]
 800878e:	6862      	ldr	r2, [r4, #4]
 8008790:	2100      	movs	r1, #0
 8008792:	4628      	mov	r0, r5
 8008794:	f7f7 fd24 	bl	80001e0 <memchr>
 8008798:	b108      	cbz	r0, 800879e <_printf_i+0x1ea>
 800879a:	1b40      	subs	r0, r0, r5
 800879c:	6060      	str	r0, [r4, #4]
 800879e:	6863      	ldr	r3, [r4, #4]
 80087a0:	6123      	str	r3, [r4, #16]
 80087a2:	2300      	movs	r3, #0
 80087a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087a8:	e7aa      	b.n	8008700 <_printf_i+0x14c>
 80087aa:	6923      	ldr	r3, [r4, #16]
 80087ac:	462a      	mov	r2, r5
 80087ae:	4649      	mov	r1, r9
 80087b0:	4640      	mov	r0, r8
 80087b2:	47d0      	blx	sl
 80087b4:	3001      	adds	r0, #1
 80087b6:	d0ad      	beq.n	8008714 <_printf_i+0x160>
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	079b      	lsls	r3, r3, #30
 80087bc:	d413      	bmi.n	80087e6 <_printf_i+0x232>
 80087be:	68e0      	ldr	r0, [r4, #12]
 80087c0:	9b03      	ldr	r3, [sp, #12]
 80087c2:	4298      	cmp	r0, r3
 80087c4:	bfb8      	it	lt
 80087c6:	4618      	movlt	r0, r3
 80087c8:	e7a6      	b.n	8008718 <_printf_i+0x164>
 80087ca:	2301      	movs	r3, #1
 80087cc:	4632      	mov	r2, r6
 80087ce:	4649      	mov	r1, r9
 80087d0:	4640      	mov	r0, r8
 80087d2:	47d0      	blx	sl
 80087d4:	3001      	adds	r0, #1
 80087d6:	d09d      	beq.n	8008714 <_printf_i+0x160>
 80087d8:	3501      	adds	r5, #1
 80087da:	68e3      	ldr	r3, [r4, #12]
 80087dc:	9903      	ldr	r1, [sp, #12]
 80087de:	1a5b      	subs	r3, r3, r1
 80087e0:	42ab      	cmp	r3, r5
 80087e2:	dcf2      	bgt.n	80087ca <_printf_i+0x216>
 80087e4:	e7eb      	b.n	80087be <_printf_i+0x20a>
 80087e6:	2500      	movs	r5, #0
 80087e8:	f104 0619 	add.w	r6, r4, #25
 80087ec:	e7f5      	b.n	80087da <_printf_i+0x226>
 80087ee:	bf00      	nop
 80087f0:	0800c926 	.word	0x0800c926
 80087f4:	0800c937 	.word	0x0800c937

080087f8 <_scanf_float>:
 80087f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	b087      	sub	sp, #28
 80087fe:	4617      	mov	r7, r2
 8008800:	9303      	str	r3, [sp, #12]
 8008802:	688b      	ldr	r3, [r1, #8]
 8008804:	1e5a      	subs	r2, r3, #1
 8008806:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800880a:	bf83      	ittte	hi
 800880c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008810:	195b      	addhi	r3, r3, r5
 8008812:	9302      	strhi	r3, [sp, #8]
 8008814:	2300      	movls	r3, #0
 8008816:	bf86      	itte	hi
 8008818:	f240 135d 	movwhi	r3, #349	; 0x15d
 800881c:	608b      	strhi	r3, [r1, #8]
 800881e:	9302      	strls	r3, [sp, #8]
 8008820:	680b      	ldr	r3, [r1, #0]
 8008822:	468b      	mov	fp, r1
 8008824:	2500      	movs	r5, #0
 8008826:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800882a:	f84b 3b1c 	str.w	r3, [fp], #28
 800882e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008832:	4680      	mov	r8, r0
 8008834:	460c      	mov	r4, r1
 8008836:	465e      	mov	r6, fp
 8008838:	46aa      	mov	sl, r5
 800883a:	46a9      	mov	r9, r5
 800883c:	9501      	str	r5, [sp, #4]
 800883e:	68a2      	ldr	r2, [r4, #8]
 8008840:	b152      	cbz	r2, 8008858 <_scanf_float+0x60>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	2b4e      	cmp	r3, #78	; 0x4e
 8008848:	d864      	bhi.n	8008914 <_scanf_float+0x11c>
 800884a:	2b40      	cmp	r3, #64	; 0x40
 800884c:	d83c      	bhi.n	80088c8 <_scanf_float+0xd0>
 800884e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008852:	b2c8      	uxtb	r0, r1
 8008854:	280e      	cmp	r0, #14
 8008856:	d93a      	bls.n	80088ce <_scanf_float+0xd6>
 8008858:	f1b9 0f00 	cmp.w	r9, #0
 800885c:	d003      	beq.n	8008866 <_scanf_float+0x6e>
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008864:	6023      	str	r3, [r4, #0]
 8008866:	f10a 3aff 	add.w	sl, sl, #4294967295
 800886a:	f1ba 0f01 	cmp.w	sl, #1
 800886e:	f200 8113 	bhi.w	8008a98 <_scanf_float+0x2a0>
 8008872:	455e      	cmp	r6, fp
 8008874:	f200 8105 	bhi.w	8008a82 <_scanf_float+0x28a>
 8008878:	2501      	movs	r5, #1
 800887a:	4628      	mov	r0, r5
 800887c:	b007      	add	sp, #28
 800887e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008882:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008886:	2a0d      	cmp	r2, #13
 8008888:	d8e6      	bhi.n	8008858 <_scanf_float+0x60>
 800888a:	a101      	add	r1, pc, #4	; (adr r1, 8008890 <_scanf_float+0x98>)
 800888c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008890:	080089cf 	.word	0x080089cf
 8008894:	08008859 	.word	0x08008859
 8008898:	08008859 	.word	0x08008859
 800889c:	08008859 	.word	0x08008859
 80088a0:	08008a2f 	.word	0x08008a2f
 80088a4:	08008a07 	.word	0x08008a07
 80088a8:	08008859 	.word	0x08008859
 80088ac:	08008859 	.word	0x08008859
 80088b0:	080089dd 	.word	0x080089dd
 80088b4:	08008859 	.word	0x08008859
 80088b8:	08008859 	.word	0x08008859
 80088bc:	08008859 	.word	0x08008859
 80088c0:	08008859 	.word	0x08008859
 80088c4:	08008995 	.word	0x08008995
 80088c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80088cc:	e7db      	b.n	8008886 <_scanf_float+0x8e>
 80088ce:	290e      	cmp	r1, #14
 80088d0:	d8c2      	bhi.n	8008858 <_scanf_float+0x60>
 80088d2:	a001      	add	r0, pc, #4	; (adr r0, 80088d8 <_scanf_float+0xe0>)
 80088d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80088d8:	08008987 	.word	0x08008987
 80088dc:	08008859 	.word	0x08008859
 80088e0:	08008987 	.word	0x08008987
 80088e4:	08008a1b 	.word	0x08008a1b
 80088e8:	08008859 	.word	0x08008859
 80088ec:	08008935 	.word	0x08008935
 80088f0:	08008971 	.word	0x08008971
 80088f4:	08008971 	.word	0x08008971
 80088f8:	08008971 	.word	0x08008971
 80088fc:	08008971 	.word	0x08008971
 8008900:	08008971 	.word	0x08008971
 8008904:	08008971 	.word	0x08008971
 8008908:	08008971 	.word	0x08008971
 800890c:	08008971 	.word	0x08008971
 8008910:	08008971 	.word	0x08008971
 8008914:	2b6e      	cmp	r3, #110	; 0x6e
 8008916:	d809      	bhi.n	800892c <_scanf_float+0x134>
 8008918:	2b60      	cmp	r3, #96	; 0x60
 800891a:	d8b2      	bhi.n	8008882 <_scanf_float+0x8a>
 800891c:	2b54      	cmp	r3, #84	; 0x54
 800891e:	d077      	beq.n	8008a10 <_scanf_float+0x218>
 8008920:	2b59      	cmp	r3, #89	; 0x59
 8008922:	d199      	bne.n	8008858 <_scanf_float+0x60>
 8008924:	2d07      	cmp	r5, #7
 8008926:	d197      	bne.n	8008858 <_scanf_float+0x60>
 8008928:	2508      	movs	r5, #8
 800892a:	e029      	b.n	8008980 <_scanf_float+0x188>
 800892c:	2b74      	cmp	r3, #116	; 0x74
 800892e:	d06f      	beq.n	8008a10 <_scanf_float+0x218>
 8008930:	2b79      	cmp	r3, #121	; 0x79
 8008932:	e7f6      	b.n	8008922 <_scanf_float+0x12a>
 8008934:	6821      	ldr	r1, [r4, #0]
 8008936:	05c8      	lsls	r0, r1, #23
 8008938:	d51a      	bpl.n	8008970 <_scanf_float+0x178>
 800893a:	9b02      	ldr	r3, [sp, #8]
 800893c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008940:	6021      	str	r1, [r4, #0]
 8008942:	f109 0901 	add.w	r9, r9, #1
 8008946:	b11b      	cbz	r3, 8008950 <_scanf_float+0x158>
 8008948:	3b01      	subs	r3, #1
 800894a:	3201      	adds	r2, #1
 800894c:	9302      	str	r3, [sp, #8]
 800894e:	60a2      	str	r2, [r4, #8]
 8008950:	68a3      	ldr	r3, [r4, #8]
 8008952:	3b01      	subs	r3, #1
 8008954:	60a3      	str	r3, [r4, #8]
 8008956:	6923      	ldr	r3, [r4, #16]
 8008958:	3301      	adds	r3, #1
 800895a:	6123      	str	r3, [r4, #16]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	3b01      	subs	r3, #1
 8008960:	2b00      	cmp	r3, #0
 8008962:	607b      	str	r3, [r7, #4]
 8008964:	f340 8084 	ble.w	8008a70 <_scanf_float+0x278>
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	3301      	adds	r3, #1
 800896c:	603b      	str	r3, [r7, #0]
 800896e:	e766      	b.n	800883e <_scanf_float+0x46>
 8008970:	eb1a 0f05 	cmn.w	sl, r5
 8008974:	f47f af70 	bne.w	8008858 <_scanf_float+0x60>
 8008978:	6822      	ldr	r2, [r4, #0]
 800897a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800897e:	6022      	str	r2, [r4, #0]
 8008980:	f806 3b01 	strb.w	r3, [r6], #1
 8008984:	e7e4      	b.n	8008950 <_scanf_float+0x158>
 8008986:	6822      	ldr	r2, [r4, #0]
 8008988:	0610      	lsls	r0, r2, #24
 800898a:	f57f af65 	bpl.w	8008858 <_scanf_float+0x60>
 800898e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008992:	e7f4      	b.n	800897e <_scanf_float+0x186>
 8008994:	f1ba 0f00 	cmp.w	sl, #0
 8008998:	d10e      	bne.n	80089b8 <_scanf_float+0x1c0>
 800899a:	f1b9 0f00 	cmp.w	r9, #0
 800899e:	d10e      	bne.n	80089be <_scanf_float+0x1c6>
 80089a0:	6822      	ldr	r2, [r4, #0]
 80089a2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80089a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80089aa:	d108      	bne.n	80089be <_scanf_float+0x1c6>
 80089ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089b0:	6022      	str	r2, [r4, #0]
 80089b2:	f04f 0a01 	mov.w	sl, #1
 80089b6:	e7e3      	b.n	8008980 <_scanf_float+0x188>
 80089b8:	f1ba 0f02 	cmp.w	sl, #2
 80089bc:	d055      	beq.n	8008a6a <_scanf_float+0x272>
 80089be:	2d01      	cmp	r5, #1
 80089c0:	d002      	beq.n	80089c8 <_scanf_float+0x1d0>
 80089c2:	2d04      	cmp	r5, #4
 80089c4:	f47f af48 	bne.w	8008858 <_scanf_float+0x60>
 80089c8:	3501      	adds	r5, #1
 80089ca:	b2ed      	uxtb	r5, r5
 80089cc:	e7d8      	b.n	8008980 <_scanf_float+0x188>
 80089ce:	f1ba 0f01 	cmp.w	sl, #1
 80089d2:	f47f af41 	bne.w	8008858 <_scanf_float+0x60>
 80089d6:	f04f 0a02 	mov.w	sl, #2
 80089da:	e7d1      	b.n	8008980 <_scanf_float+0x188>
 80089dc:	b97d      	cbnz	r5, 80089fe <_scanf_float+0x206>
 80089de:	f1b9 0f00 	cmp.w	r9, #0
 80089e2:	f47f af3c 	bne.w	800885e <_scanf_float+0x66>
 80089e6:	6822      	ldr	r2, [r4, #0]
 80089e8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80089ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80089f0:	f47f af39 	bne.w	8008866 <_scanf_float+0x6e>
 80089f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089f8:	6022      	str	r2, [r4, #0]
 80089fa:	2501      	movs	r5, #1
 80089fc:	e7c0      	b.n	8008980 <_scanf_float+0x188>
 80089fe:	2d03      	cmp	r5, #3
 8008a00:	d0e2      	beq.n	80089c8 <_scanf_float+0x1d0>
 8008a02:	2d05      	cmp	r5, #5
 8008a04:	e7de      	b.n	80089c4 <_scanf_float+0x1cc>
 8008a06:	2d02      	cmp	r5, #2
 8008a08:	f47f af26 	bne.w	8008858 <_scanf_float+0x60>
 8008a0c:	2503      	movs	r5, #3
 8008a0e:	e7b7      	b.n	8008980 <_scanf_float+0x188>
 8008a10:	2d06      	cmp	r5, #6
 8008a12:	f47f af21 	bne.w	8008858 <_scanf_float+0x60>
 8008a16:	2507      	movs	r5, #7
 8008a18:	e7b2      	b.n	8008980 <_scanf_float+0x188>
 8008a1a:	6822      	ldr	r2, [r4, #0]
 8008a1c:	0591      	lsls	r1, r2, #22
 8008a1e:	f57f af1b 	bpl.w	8008858 <_scanf_float+0x60>
 8008a22:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008a26:	6022      	str	r2, [r4, #0]
 8008a28:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a2c:	e7a8      	b.n	8008980 <_scanf_float+0x188>
 8008a2e:	6822      	ldr	r2, [r4, #0]
 8008a30:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008a34:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008a38:	d006      	beq.n	8008a48 <_scanf_float+0x250>
 8008a3a:	0550      	lsls	r0, r2, #21
 8008a3c:	f57f af0c 	bpl.w	8008858 <_scanf_float+0x60>
 8008a40:	f1b9 0f00 	cmp.w	r9, #0
 8008a44:	f43f af0f 	beq.w	8008866 <_scanf_float+0x6e>
 8008a48:	0591      	lsls	r1, r2, #22
 8008a4a:	bf58      	it	pl
 8008a4c:	9901      	ldrpl	r1, [sp, #4]
 8008a4e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a52:	bf58      	it	pl
 8008a54:	eba9 0101 	subpl.w	r1, r9, r1
 8008a58:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008a5c:	bf58      	it	pl
 8008a5e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a62:	6022      	str	r2, [r4, #0]
 8008a64:	f04f 0900 	mov.w	r9, #0
 8008a68:	e78a      	b.n	8008980 <_scanf_float+0x188>
 8008a6a:	f04f 0a03 	mov.w	sl, #3
 8008a6e:	e787      	b.n	8008980 <_scanf_float+0x188>
 8008a70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a74:	4639      	mov	r1, r7
 8008a76:	4640      	mov	r0, r8
 8008a78:	4798      	blx	r3
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	f43f aedf 	beq.w	800883e <_scanf_float+0x46>
 8008a80:	e6ea      	b.n	8008858 <_scanf_float+0x60>
 8008a82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a8a:	463a      	mov	r2, r7
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	4798      	blx	r3
 8008a90:	6923      	ldr	r3, [r4, #16]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	6123      	str	r3, [r4, #16]
 8008a96:	e6ec      	b.n	8008872 <_scanf_float+0x7a>
 8008a98:	1e6b      	subs	r3, r5, #1
 8008a9a:	2b06      	cmp	r3, #6
 8008a9c:	d825      	bhi.n	8008aea <_scanf_float+0x2f2>
 8008a9e:	2d02      	cmp	r5, #2
 8008aa0:	d836      	bhi.n	8008b10 <_scanf_float+0x318>
 8008aa2:	455e      	cmp	r6, fp
 8008aa4:	f67f aee8 	bls.w	8008878 <_scanf_float+0x80>
 8008aa8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008aac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ab0:	463a      	mov	r2, r7
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	4798      	blx	r3
 8008ab6:	6923      	ldr	r3, [r4, #16]
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	6123      	str	r3, [r4, #16]
 8008abc:	e7f1      	b.n	8008aa2 <_scanf_float+0x2aa>
 8008abe:	9802      	ldr	r0, [sp, #8]
 8008ac0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ac4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008ac8:	9002      	str	r0, [sp, #8]
 8008aca:	463a      	mov	r2, r7
 8008acc:	4640      	mov	r0, r8
 8008ace:	4798      	blx	r3
 8008ad0:	6923      	ldr	r3, [r4, #16]
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	6123      	str	r3, [r4, #16]
 8008ad6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ada:	fa5f fa8a 	uxtb.w	sl, sl
 8008ade:	f1ba 0f02 	cmp.w	sl, #2
 8008ae2:	d1ec      	bne.n	8008abe <_scanf_float+0x2c6>
 8008ae4:	3d03      	subs	r5, #3
 8008ae6:	b2ed      	uxtb	r5, r5
 8008ae8:	1b76      	subs	r6, r6, r5
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	05da      	lsls	r2, r3, #23
 8008aee:	d52f      	bpl.n	8008b50 <_scanf_float+0x358>
 8008af0:	055b      	lsls	r3, r3, #21
 8008af2:	d510      	bpl.n	8008b16 <_scanf_float+0x31e>
 8008af4:	455e      	cmp	r6, fp
 8008af6:	f67f aebf 	bls.w	8008878 <_scanf_float+0x80>
 8008afa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008afe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b02:	463a      	mov	r2, r7
 8008b04:	4640      	mov	r0, r8
 8008b06:	4798      	blx	r3
 8008b08:	6923      	ldr	r3, [r4, #16]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	6123      	str	r3, [r4, #16]
 8008b0e:	e7f1      	b.n	8008af4 <_scanf_float+0x2fc>
 8008b10:	46aa      	mov	sl, r5
 8008b12:	9602      	str	r6, [sp, #8]
 8008b14:	e7df      	b.n	8008ad6 <_scanf_float+0x2de>
 8008b16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008b1a:	6923      	ldr	r3, [r4, #16]
 8008b1c:	2965      	cmp	r1, #101	; 0x65
 8008b1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b22:	f106 35ff 	add.w	r5, r6, #4294967295
 8008b26:	6123      	str	r3, [r4, #16]
 8008b28:	d00c      	beq.n	8008b44 <_scanf_float+0x34c>
 8008b2a:	2945      	cmp	r1, #69	; 0x45
 8008b2c:	d00a      	beq.n	8008b44 <_scanf_float+0x34c>
 8008b2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b32:	463a      	mov	r2, r7
 8008b34:	4640      	mov	r0, r8
 8008b36:	4798      	blx	r3
 8008b38:	6923      	ldr	r3, [r4, #16]
 8008b3a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	1eb5      	subs	r5, r6, #2
 8008b42:	6123      	str	r3, [r4, #16]
 8008b44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b48:	463a      	mov	r2, r7
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	4798      	blx	r3
 8008b4e:	462e      	mov	r6, r5
 8008b50:	6825      	ldr	r5, [r4, #0]
 8008b52:	f015 0510 	ands.w	r5, r5, #16
 8008b56:	d158      	bne.n	8008c0a <_scanf_float+0x412>
 8008b58:	7035      	strb	r5, [r6, #0]
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b64:	d11c      	bne.n	8008ba0 <_scanf_float+0x3a8>
 8008b66:	9b01      	ldr	r3, [sp, #4]
 8008b68:	454b      	cmp	r3, r9
 8008b6a:	eba3 0209 	sub.w	r2, r3, r9
 8008b6e:	d124      	bne.n	8008bba <_scanf_float+0x3c2>
 8008b70:	2200      	movs	r2, #0
 8008b72:	4659      	mov	r1, fp
 8008b74:	4640      	mov	r0, r8
 8008b76:	f002 fd33 	bl	800b5e0 <_strtod_r>
 8008b7a:	9b03      	ldr	r3, [sp, #12]
 8008b7c:	6821      	ldr	r1, [r4, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f011 0f02 	tst.w	r1, #2
 8008b84:	ec57 6b10 	vmov	r6, r7, d0
 8008b88:	f103 0204 	add.w	r2, r3, #4
 8008b8c:	d020      	beq.n	8008bd0 <_scanf_float+0x3d8>
 8008b8e:	9903      	ldr	r1, [sp, #12]
 8008b90:	600a      	str	r2, [r1, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	e9c3 6700 	strd	r6, r7, [r3]
 8008b98:	68e3      	ldr	r3, [r4, #12]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	60e3      	str	r3, [r4, #12]
 8008b9e:	e66c      	b.n	800887a <_scanf_float+0x82>
 8008ba0:	9b04      	ldr	r3, [sp, #16]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0e4      	beq.n	8008b70 <_scanf_float+0x378>
 8008ba6:	9905      	ldr	r1, [sp, #20]
 8008ba8:	230a      	movs	r3, #10
 8008baa:	462a      	mov	r2, r5
 8008bac:	3101      	adds	r1, #1
 8008bae:	4640      	mov	r0, r8
 8008bb0:	f002 fd9e 	bl	800b6f0 <_strtol_r>
 8008bb4:	9b04      	ldr	r3, [sp, #16]
 8008bb6:	9e05      	ldr	r6, [sp, #20]
 8008bb8:	1ac2      	subs	r2, r0, r3
 8008bba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008bbe:	429e      	cmp	r6, r3
 8008bc0:	bf28      	it	cs
 8008bc2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008bc6:	4912      	ldr	r1, [pc, #72]	; (8008c10 <_scanf_float+0x418>)
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f000 f94b 	bl	8008e64 <siprintf>
 8008bce:	e7cf      	b.n	8008b70 <_scanf_float+0x378>
 8008bd0:	f011 0f04 	tst.w	r1, #4
 8008bd4:	9903      	ldr	r1, [sp, #12]
 8008bd6:	600a      	str	r2, [r1, #0]
 8008bd8:	d1db      	bne.n	8008b92 <_scanf_float+0x39a>
 8008bda:	f8d3 8000 	ldr.w	r8, [r3]
 8008bde:	ee10 2a10 	vmov	r2, s0
 8008be2:	ee10 0a10 	vmov	r0, s0
 8008be6:	463b      	mov	r3, r7
 8008be8:	4639      	mov	r1, r7
 8008bea:	f7f7 ffa7 	bl	8000b3c <__aeabi_dcmpun>
 8008bee:	b128      	cbz	r0, 8008bfc <_scanf_float+0x404>
 8008bf0:	4808      	ldr	r0, [pc, #32]	; (8008c14 <_scanf_float+0x41c>)
 8008bf2:	f000 fabb 	bl	800916c <nanf>
 8008bf6:	ed88 0a00 	vstr	s0, [r8]
 8008bfa:	e7cd      	b.n	8008b98 <_scanf_float+0x3a0>
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	4639      	mov	r1, r7
 8008c00:	f7f7 fffa 	bl	8000bf8 <__aeabi_d2f>
 8008c04:	f8c8 0000 	str.w	r0, [r8]
 8008c08:	e7c6      	b.n	8008b98 <_scanf_float+0x3a0>
 8008c0a:	2500      	movs	r5, #0
 8008c0c:	e635      	b.n	800887a <_scanf_float+0x82>
 8008c0e:	bf00      	nop
 8008c10:	0800c948 	.word	0x0800c948
 8008c14:	0800ccdd 	.word	0x0800ccdd

08008c18 <std>:
 8008c18:	2300      	movs	r3, #0
 8008c1a:	b510      	push	{r4, lr}
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c26:	6083      	str	r3, [r0, #8]
 8008c28:	8181      	strh	r1, [r0, #12]
 8008c2a:	6643      	str	r3, [r0, #100]	; 0x64
 8008c2c:	81c2      	strh	r2, [r0, #14]
 8008c2e:	6183      	str	r3, [r0, #24]
 8008c30:	4619      	mov	r1, r3
 8008c32:	2208      	movs	r2, #8
 8008c34:	305c      	adds	r0, #92	; 0x5c
 8008c36:	f000 fa0d 	bl	8009054 <memset>
 8008c3a:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <std+0x38>)
 8008c3c:	6263      	str	r3, [r4, #36]	; 0x24
 8008c3e:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <std+0x3c>)
 8008c40:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c42:	4b05      	ldr	r3, [pc, #20]	; (8008c58 <std+0x40>)
 8008c44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c46:	4b05      	ldr	r3, [pc, #20]	; (8008c5c <std+0x44>)
 8008c48:	6224      	str	r4, [r4, #32]
 8008c4a:	6323      	str	r3, [r4, #48]	; 0x30
 8008c4c:	bd10      	pop	{r4, pc}
 8008c4e:	bf00      	nop
 8008c50:	08008ea5 	.word	0x08008ea5
 8008c54:	08008ec7 	.word	0x08008ec7
 8008c58:	08008eff 	.word	0x08008eff
 8008c5c:	08008f23 	.word	0x08008f23

08008c60 <stdio_exit_handler>:
 8008c60:	4a02      	ldr	r2, [pc, #8]	; (8008c6c <stdio_exit_handler+0xc>)
 8008c62:	4903      	ldr	r1, [pc, #12]	; (8008c70 <stdio_exit_handler+0x10>)
 8008c64:	4803      	ldr	r0, [pc, #12]	; (8008c74 <stdio_exit_handler+0x14>)
 8008c66:	f000 b869 	b.w	8008d3c <_fwalk_sglue>
 8008c6a:	bf00      	nop
 8008c6c:	200000fc 	.word	0x200000fc
 8008c70:	0800bd39 	.word	0x0800bd39
 8008c74:	20000108 	.word	0x20000108

08008c78 <cleanup_stdio>:
 8008c78:	6841      	ldr	r1, [r0, #4]
 8008c7a:	4b0c      	ldr	r3, [pc, #48]	; (8008cac <cleanup_stdio+0x34>)
 8008c7c:	4299      	cmp	r1, r3
 8008c7e:	b510      	push	{r4, lr}
 8008c80:	4604      	mov	r4, r0
 8008c82:	d001      	beq.n	8008c88 <cleanup_stdio+0x10>
 8008c84:	f003 f858 	bl	800bd38 <_fflush_r>
 8008c88:	68a1      	ldr	r1, [r4, #8]
 8008c8a:	4b09      	ldr	r3, [pc, #36]	; (8008cb0 <cleanup_stdio+0x38>)
 8008c8c:	4299      	cmp	r1, r3
 8008c8e:	d002      	beq.n	8008c96 <cleanup_stdio+0x1e>
 8008c90:	4620      	mov	r0, r4
 8008c92:	f003 f851 	bl	800bd38 <_fflush_r>
 8008c96:	68e1      	ldr	r1, [r4, #12]
 8008c98:	4b06      	ldr	r3, [pc, #24]	; (8008cb4 <cleanup_stdio+0x3c>)
 8008c9a:	4299      	cmp	r1, r3
 8008c9c:	d004      	beq.n	8008ca8 <cleanup_stdio+0x30>
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ca4:	f003 b848 	b.w	800bd38 <_fflush_r>
 8008ca8:	bd10      	pop	{r4, pc}
 8008caa:	bf00      	nop
 8008cac:	20002180 	.word	0x20002180
 8008cb0:	200021e8 	.word	0x200021e8
 8008cb4:	20002250 	.word	0x20002250

08008cb8 <global_stdio_init.part.0>:
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	4b0b      	ldr	r3, [pc, #44]	; (8008ce8 <global_stdio_init.part.0+0x30>)
 8008cbc:	4c0b      	ldr	r4, [pc, #44]	; (8008cec <global_stdio_init.part.0+0x34>)
 8008cbe:	4a0c      	ldr	r2, [pc, #48]	; (8008cf0 <global_stdio_init.part.0+0x38>)
 8008cc0:	601a      	str	r2, [r3, #0]
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	2104      	movs	r1, #4
 8008cc8:	f7ff ffa6 	bl	8008c18 <std>
 8008ccc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	2109      	movs	r1, #9
 8008cd4:	f7ff ffa0 	bl	8008c18 <std>
 8008cd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008cdc:	2202      	movs	r2, #2
 8008cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ce2:	2112      	movs	r1, #18
 8008ce4:	f7ff bf98 	b.w	8008c18 <std>
 8008ce8:	200022b8 	.word	0x200022b8
 8008cec:	20002180 	.word	0x20002180
 8008cf0:	08008c61 	.word	0x08008c61

08008cf4 <__sfp_lock_acquire>:
 8008cf4:	4801      	ldr	r0, [pc, #4]	; (8008cfc <__sfp_lock_acquire+0x8>)
 8008cf6:	f000 ba29 	b.w	800914c <__retarget_lock_acquire_recursive>
 8008cfa:	bf00      	nop
 8008cfc:	200022c1 	.word	0x200022c1

08008d00 <__sfp_lock_release>:
 8008d00:	4801      	ldr	r0, [pc, #4]	; (8008d08 <__sfp_lock_release+0x8>)
 8008d02:	f000 ba24 	b.w	800914e <__retarget_lock_release_recursive>
 8008d06:	bf00      	nop
 8008d08:	200022c1 	.word	0x200022c1

08008d0c <__sinit>:
 8008d0c:	b510      	push	{r4, lr}
 8008d0e:	4604      	mov	r4, r0
 8008d10:	f7ff fff0 	bl	8008cf4 <__sfp_lock_acquire>
 8008d14:	6a23      	ldr	r3, [r4, #32]
 8008d16:	b11b      	cbz	r3, 8008d20 <__sinit+0x14>
 8008d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d1c:	f7ff bff0 	b.w	8008d00 <__sfp_lock_release>
 8008d20:	4b04      	ldr	r3, [pc, #16]	; (8008d34 <__sinit+0x28>)
 8008d22:	6223      	str	r3, [r4, #32]
 8008d24:	4b04      	ldr	r3, [pc, #16]	; (8008d38 <__sinit+0x2c>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1f5      	bne.n	8008d18 <__sinit+0xc>
 8008d2c:	f7ff ffc4 	bl	8008cb8 <global_stdio_init.part.0>
 8008d30:	e7f2      	b.n	8008d18 <__sinit+0xc>
 8008d32:	bf00      	nop
 8008d34:	08008c79 	.word	0x08008c79
 8008d38:	200022b8 	.word	0x200022b8

08008d3c <_fwalk_sglue>:
 8008d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d40:	4607      	mov	r7, r0
 8008d42:	4688      	mov	r8, r1
 8008d44:	4614      	mov	r4, r2
 8008d46:	2600      	movs	r6, #0
 8008d48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d4c:	f1b9 0901 	subs.w	r9, r9, #1
 8008d50:	d505      	bpl.n	8008d5e <_fwalk_sglue+0x22>
 8008d52:	6824      	ldr	r4, [r4, #0]
 8008d54:	2c00      	cmp	r4, #0
 8008d56:	d1f7      	bne.n	8008d48 <_fwalk_sglue+0xc>
 8008d58:	4630      	mov	r0, r6
 8008d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d5e:	89ab      	ldrh	r3, [r5, #12]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d907      	bls.n	8008d74 <_fwalk_sglue+0x38>
 8008d64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	d003      	beq.n	8008d74 <_fwalk_sglue+0x38>
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	4638      	mov	r0, r7
 8008d70:	47c0      	blx	r8
 8008d72:	4306      	orrs	r6, r0
 8008d74:	3568      	adds	r5, #104	; 0x68
 8008d76:	e7e9      	b.n	8008d4c <_fwalk_sglue+0x10>

08008d78 <iprintf>:
 8008d78:	b40f      	push	{r0, r1, r2, r3}
 8008d7a:	b507      	push	{r0, r1, r2, lr}
 8008d7c:	4906      	ldr	r1, [pc, #24]	; (8008d98 <iprintf+0x20>)
 8008d7e:	ab04      	add	r3, sp, #16
 8008d80:	6808      	ldr	r0, [r1, #0]
 8008d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d86:	6881      	ldr	r1, [r0, #8]
 8008d88:	9301      	str	r3, [sp, #4]
 8008d8a:	f002 fe35 	bl	800b9f8 <_vfiprintf_r>
 8008d8e:	b003      	add	sp, #12
 8008d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d94:	b004      	add	sp, #16
 8008d96:	4770      	bx	lr
 8008d98:	20000154 	.word	0x20000154

08008d9c <putchar>:
 8008d9c:	4b02      	ldr	r3, [pc, #8]	; (8008da8 <putchar+0xc>)
 8008d9e:	4601      	mov	r1, r0
 8008da0:	6818      	ldr	r0, [r3, #0]
 8008da2:	6882      	ldr	r2, [r0, #8]
 8008da4:	f003 b852 	b.w	800be4c <_putc_r>
 8008da8:	20000154 	.word	0x20000154

08008dac <_puts_r>:
 8008dac:	6a03      	ldr	r3, [r0, #32]
 8008dae:	b570      	push	{r4, r5, r6, lr}
 8008db0:	6884      	ldr	r4, [r0, #8]
 8008db2:	4605      	mov	r5, r0
 8008db4:	460e      	mov	r6, r1
 8008db6:	b90b      	cbnz	r3, 8008dbc <_puts_r+0x10>
 8008db8:	f7ff ffa8 	bl	8008d0c <__sinit>
 8008dbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dbe:	07db      	lsls	r3, r3, #31
 8008dc0:	d405      	bmi.n	8008dce <_puts_r+0x22>
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	0598      	lsls	r0, r3, #22
 8008dc6:	d402      	bmi.n	8008dce <_puts_r+0x22>
 8008dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dca:	f000 f9bf 	bl	800914c <__retarget_lock_acquire_recursive>
 8008dce:	89a3      	ldrh	r3, [r4, #12]
 8008dd0:	0719      	lsls	r1, r3, #28
 8008dd2:	d513      	bpl.n	8008dfc <_puts_r+0x50>
 8008dd4:	6923      	ldr	r3, [r4, #16]
 8008dd6:	b18b      	cbz	r3, 8008dfc <_puts_r+0x50>
 8008dd8:	3e01      	subs	r6, #1
 8008dda:	68a3      	ldr	r3, [r4, #8]
 8008ddc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008de0:	3b01      	subs	r3, #1
 8008de2:	60a3      	str	r3, [r4, #8]
 8008de4:	b9e9      	cbnz	r1, 8008e22 <_puts_r+0x76>
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	da2e      	bge.n	8008e48 <_puts_r+0x9c>
 8008dea:	4622      	mov	r2, r4
 8008dec:	210a      	movs	r1, #10
 8008dee:	4628      	mov	r0, r5
 8008df0:	f000 f89b 	bl	8008f2a <__swbuf_r>
 8008df4:	3001      	adds	r0, #1
 8008df6:	d007      	beq.n	8008e08 <_puts_r+0x5c>
 8008df8:	250a      	movs	r5, #10
 8008dfa:	e007      	b.n	8008e0c <_puts_r+0x60>
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f000 f8d0 	bl	8008fa4 <__swsetup_r>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d0e7      	beq.n	8008dd8 <_puts_r+0x2c>
 8008e08:	f04f 35ff 	mov.w	r5, #4294967295
 8008e0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e0e:	07da      	lsls	r2, r3, #31
 8008e10:	d405      	bmi.n	8008e1e <_puts_r+0x72>
 8008e12:	89a3      	ldrh	r3, [r4, #12]
 8008e14:	059b      	lsls	r3, r3, #22
 8008e16:	d402      	bmi.n	8008e1e <_puts_r+0x72>
 8008e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e1a:	f000 f998 	bl	800914e <__retarget_lock_release_recursive>
 8008e1e:	4628      	mov	r0, r5
 8008e20:	bd70      	pop	{r4, r5, r6, pc}
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	da04      	bge.n	8008e30 <_puts_r+0x84>
 8008e26:	69a2      	ldr	r2, [r4, #24]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	dc06      	bgt.n	8008e3a <_puts_r+0x8e>
 8008e2c:	290a      	cmp	r1, #10
 8008e2e:	d004      	beq.n	8008e3a <_puts_r+0x8e>
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	1c5a      	adds	r2, r3, #1
 8008e34:	6022      	str	r2, [r4, #0]
 8008e36:	7019      	strb	r1, [r3, #0]
 8008e38:	e7cf      	b.n	8008dda <_puts_r+0x2e>
 8008e3a:	4622      	mov	r2, r4
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	f000 f874 	bl	8008f2a <__swbuf_r>
 8008e42:	3001      	adds	r0, #1
 8008e44:	d1c9      	bne.n	8008dda <_puts_r+0x2e>
 8008e46:	e7df      	b.n	8008e08 <_puts_r+0x5c>
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	250a      	movs	r5, #10
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	6022      	str	r2, [r4, #0]
 8008e50:	701d      	strb	r5, [r3, #0]
 8008e52:	e7db      	b.n	8008e0c <_puts_r+0x60>

08008e54 <puts>:
 8008e54:	4b02      	ldr	r3, [pc, #8]	; (8008e60 <puts+0xc>)
 8008e56:	4601      	mov	r1, r0
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	f7ff bfa7 	b.w	8008dac <_puts_r>
 8008e5e:	bf00      	nop
 8008e60:	20000154 	.word	0x20000154

08008e64 <siprintf>:
 8008e64:	b40e      	push	{r1, r2, r3}
 8008e66:	b500      	push	{lr}
 8008e68:	b09c      	sub	sp, #112	; 0x70
 8008e6a:	ab1d      	add	r3, sp, #116	; 0x74
 8008e6c:	9002      	str	r0, [sp, #8]
 8008e6e:	9006      	str	r0, [sp, #24]
 8008e70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e74:	4809      	ldr	r0, [pc, #36]	; (8008e9c <siprintf+0x38>)
 8008e76:	9107      	str	r1, [sp, #28]
 8008e78:	9104      	str	r1, [sp, #16]
 8008e7a:	4909      	ldr	r1, [pc, #36]	; (8008ea0 <siprintf+0x3c>)
 8008e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e80:	9105      	str	r1, [sp, #20]
 8008e82:	6800      	ldr	r0, [r0, #0]
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	a902      	add	r1, sp, #8
 8008e88:	f002 fc8e 	bl	800b7a8 <_svfiprintf_r>
 8008e8c:	9b02      	ldr	r3, [sp, #8]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	701a      	strb	r2, [r3, #0]
 8008e92:	b01c      	add	sp, #112	; 0x70
 8008e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e98:	b003      	add	sp, #12
 8008e9a:	4770      	bx	lr
 8008e9c:	20000154 	.word	0x20000154
 8008ea0:	ffff0208 	.word	0xffff0208

08008ea4 <__sread>:
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eac:	f000 f900 	bl	80090b0 <_read_r>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	bfab      	itete	ge
 8008eb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8008eb8:	181b      	addge	r3, r3, r0
 8008eba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ebe:	bfac      	ite	ge
 8008ec0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ec2:	81a3      	strhlt	r3, [r4, #12]
 8008ec4:	bd10      	pop	{r4, pc}

08008ec6 <__swrite>:
 8008ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eca:	461f      	mov	r7, r3
 8008ecc:	898b      	ldrh	r3, [r1, #12]
 8008ece:	05db      	lsls	r3, r3, #23
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	4616      	mov	r6, r2
 8008ed6:	d505      	bpl.n	8008ee4 <__swrite+0x1e>
 8008ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008edc:	2302      	movs	r3, #2
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f000 f8d4 	bl	800908c <_lseek_r>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eee:	81a3      	strh	r3, [r4, #12]
 8008ef0:	4632      	mov	r2, r6
 8008ef2:	463b      	mov	r3, r7
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008efa:	f000 b8eb 	b.w	80090d4 <_write_r>

08008efe <__sseek>:
 8008efe:	b510      	push	{r4, lr}
 8008f00:	460c      	mov	r4, r1
 8008f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f06:	f000 f8c1 	bl	800908c <_lseek_r>
 8008f0a:	1c43      	adds	r3, r0, #1
 8008f0c:	89a3      	ldrh	r3, [r4, #12]
 8008f0e:	bf15      	itete	ne
 8008f10:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f1a:	81a3      	strheq	r3, [r4, #12]
 8008f1c:	bf18      	it	ne
 8008f1e:	81a3      	strhne	r3, [r4, #12]
 8008f20:	bd10      	pop	{r4, pc}

08008f22 <__sclose>:
 8008f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f26:	f000 b8a1 	b.w	800906c <_close_r>

08008f2a <__swbuf_r>:
 8008f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2c:	460e      	mov	r6, r1
 8008f2e:	4614      	mov	r4, r2
 8008f30:	4605      	mov	r5, r0
 8008f32:	b118      	cbz	r0, 8008f3c <__swbuf_r+0x12>
 8008f34:	6a03      	ldr	r3, [r0, #32]
 8008f36:	b90b      	cbnz	r3, 8008f3c <__swbuf_r+0x12>
 8008f38:	f7ff fee8 	bl	8008d0c <__sinit>
 8008f3c:	69a3      	ldr	r3, [r4, #24]
 8008f3e:	60a3      	str	r3, [r4, #8]
 8008f40:	89a3      	ldrh	r3, [r4, #12]
 8008f42:	071a      	lsls	r2, r3, #28
 8008f44:	d525      	bpl.n	8008f92 <__swbuf_r+0x68>
 8008f46:	6923      	ldr	r3, [r4, #16]
 8008f48:	b31b      	cbz	r3, 8008f92 <__swbuf_r+0x68>
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	6922      	ldr	r2, [r4, #16]
 8008f4e:	1a98      	subs	r0, r3, r2
 8008f50:	6963      	ldr	r3, [r4, #20]
 8008f52:	b2f6      	uxtb	r6, r6
 8008f54:	4283      	cmp	r3, r0
 8008f56:	4637      	mov	r7, r6
 8008f58:	dc04      	bgt.n	8008f64 <__swbuf_r+0x3a>
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	f002 feeb 	bl	800bd38 <_fflush_r>
 8008f62:	b9e0      	cbnz	r0, 8008f9e <__swbuf_r+0x74>
 8008f64:	68a3      	ldr	r3, [r4, #8]
 8008f66:	3b01      	subs	r3, #1
 8008f68:	60a3      	str	r3, [r4, #8]
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	6022      	str	r2, [r4, #0]
 8008f70:	701e      	strb	r6, [r3, #0]
 8008f72:	6962      	ldr	r2, [r4, #20]
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d004      	beq.n	8008f84 <__swbuf_r+0x5a>
 8008f7a:	89a3      	ldrh	r3, [r4, #12]
 8008f7c:	07db      	lsls	r3, r3, #31
 8008f7e:	d506      	bpl.n	8008f8e <__swbuf_r+0x64>
 8008f80:	2e0a      	cmp	r6, #10
 8008f82:	d104      	bne.n	8008f8e <__swbuf_r+0x64>
 8008f84:	4621      	mov	r1, r4
 8008f86:	4628      	mov	r0, r5
 8008f88:	f002 fed6 	bl	800bd38 <_fflush_r>
 8008f8c:	b938      	cbnz	r0, 8008f9e <__swbuf_r+0x74>
 8008f8e:	4638      	mov	r0, r7
 8008f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f92:	4621      	mov	r1, r4
 8008f94:	4628      	mov	r0, r5
 8008f96:	f000 f805 	bl	8008fa4 <__swsetup_r>
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	d0d5      	beq.n	8008f4a <__swbuf_r+0x20>
 8008f9e:	f04f 37ff 	mov.w	r7, #4294967295
 8008fa2:	e7f4      	b.n	8008f8e <__swbuf_r+0x64>

08008fa4 <__swsetup_r>:
 8008fa4:	b538      	push	{r3, r4, r5, lr}
 8008fa6:	4b2a      	ldr	r3, [pc, #168]	; (8009050 <__swsetup_r+0xac>)
 8008fa8:	4605      	mov	r5, r0
 8008faa:	6818      	ldr	r0, [r3, #0]
 8008fac:	460c      	mov	r4, r1
 8008fae:	b118      	cbz	r0, 8008fb8 <__swsetup_r+0x14>
 8008fb0:	6a03      	ldr	r3, [r0, #32]
 8008fb2:	b90b      	cbnz	r3, 8008fb8 <__swsetup_r+0x14>
 8008fb4:	f7ff feaa 	bl	8008d0c <__sinit>
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fbe:	0718      	lsls	r0, r3, #28
 8008fc0:	d422      	bmi.n	8009008 <__swsetup_r+0x64>
 8008fc2:	06d9      	lsls	r1, r3, #27
 8008fc4:	d407      	bmi.n	8008fd6 <__swsetup_r+0x32>
 8008fc6:	2309      	movs	r3, #9
 8008fc8:	602b      	str	r3, [r5, #0]
 8008fca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fce:	81a3      	strh	r3, [r4, #12]
 8008fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd4:	e034      	b.n	8009040 <__swsetup_r+0x9c>
 8008fd6:	0758      	lsls	r0, r3, #29
 8008fd8:	d512      	bpl.n	8009000 <__swsetup_r+0x5c>
 8008fda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fdc:	b141      	cbz	r1, 8008ff0 <__swsetup_r+0x4c>
 8008fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fe2:	4299      	cmp	r1, r3
 8008fe4:	d002      	beq.n	8008fec <__swsetup_r+0x48>
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	f000 ff40 	bl	8009e6c <_free_r>
 8008fec:	2300      	movs	r3, #0
 8008fee:	6363      	str	r3, [r4, #52]	; 0x34
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ff6:	81a3      	strh	r3, [r4, #12]
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	6063      	str	r3, [r4, #4]
 8008ffc:	6923      	ldr	r3, [r4, #16]
 8008ffe:	6023      	str	r3, [r4, #0]
 8009000:	89a3      	ldrh	r3, [r4, #12]
 8009002:	f043 0308 	orr.w	r3, r3, #8
 8009006:	81a3      	strh	r3, [r4, #12]
 8009008:	6923      	ldr	r3, [r4, #16]
 800900a:	b94b      	cbnz	r3, 8009020 <__swsetup_r+0x7c>
 800900c:	89a3      	ldrh	r3, [r4, #12]
 800900e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009016:	d003      	beq.n	8009020 <__swsetup_r+0x7c>
 8009018:	4621      	mov	r1, r4
 800901a:	4628      	mov	r0, r5
 800901c:	f002 feda 	bl	800bdd4 <__smakebuf_r>
 8009020:	89a0      	ldrh	r0, [r4, #12]
 8009022:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009026:	f010 0301 	ands.w	r3, r0, #1
 800902a:	d00a      	beq.n	8009042 <__swsetup_r+0x9e>
 800902c:	2300      	movs	r3, #0
 800902e:	60a3      	str	r3, [r4, #8]
 8009030:	6963      	ldr	r3, [r4, #20]
 8009032:	425b      	negs	r3, r3
 8009034:	61a3      	str	r3, [r4, #24]
 8009036:	6923      	ldr	r3, [r4, #16]
 8009038:	b943      	cbnz	r3, 800904c <__swsetup_r+0xa8>
 800903a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800903e:	d1c4      	bne.n	8008fca <__swsetup_r+0x26>
 8009040:	bd38      	pop	{r3, r4, r5, pc}
 8009042:	0781      	lsls	r1, r0, #30
 8009044:	bf58      	it	pl
 8009046:	6963      	ldrpl	r3, [r4, #20]
 8009048:	60a3      	str	r3, [r4, #8]
 800904a:	e7f4      	b.n	8009036 <__swsetup_r+0x92>
 800904c:	2000      	movs	r0, #0
 800904e:	e7f7      	b.n	8009040 <__swsetup_r+0x9c>
 8009050:	20000154 	.word	0x20000154

08009054 <memset>:
 8009054:	4402      	add	r2, r0
 8009056:	4603      	mov	r3, r0
 8009058:	4293      	cmp	r3, r2
 800905a:	d100      	bne.n	800905e <memset+0xa>
 800905c:	4770      	bx	lr
 800905e:	f803 1b01 	strb.w	r1, [r3], #1
 8009062:	e7f9      	b.n	8009058 <memset+0x4>

08009064 <_localeconv_r>:
 8009064:	4800      	ldr	r0, [pc, #0]	; (8009068 <_localeconv_r+0x4>)
 8009066:	4770      	bx	lr
 8009068:	20000248 	.word	0x20000248

0800906c <_close_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4d06      	ldr	r5, [pc, #24]	; (8009088 <_close_r+0x1c>)
 8009070:	2300      	movs	r3, #0
 8009072:	4604      	mov	r4, r0
 8009074:	4608      	mov	r0, r1
 8009076:	602b      	str	r3, [r5, #0]
 8009078:	f7f8 fc43 	bl	8001902 <_close>
 800907c:	1c43      	adds	r3, r0, #1
 800907e:	d102      	bne.n	8009086 <_close_r+0x1a>
 8009080:	682b      	ldr	r3, [r5, #0]
 8009082:	b103      	cbz	r3, 8009086 <_close_r+0x1a>
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	bd38      	pop	{r3, r4, r5, pc}
 8009088:	200022bc 	.word	0x200022bc

0800908c <_lseek_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4d07      	ldr	r5, [pc, #28]	; (80090ac <_lseek_r+0x20>)
 8009090:	4604      	mov	r4, r0
 8009092:	4608      	mov	r0, r1
 8009094:	4611      	mov	r1, r2
 8009096:	2200      	movs	r2, #0
 8009098:	602a      	str	r2, [r5, #0]
 800909a:	461a      	mov	r2, r3
 800909c:	f7f8 fc58 	bl	8001950 <_lseek>
 80090a0:	1c43      	adds	r3, r0, #1
 80090a2:	d102      	bne.n	80090aa <_lseek_r+0x1e>
 80090a4:	682b      	ldr	r3, [r5, #0]
 80090a6:	b103      	cbz	r3, 80090aa <_lseek_r+0x1e>
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	bd38      	pop	{r3, r4, r5, pc}
 80090ac:	200022bc 	.word	0x200022bc

080090b0 <_read_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4d07      	ldr	r5, [pc, #28]	; (80090d0 <_read_r+0x20>)
 80090b4:	4604      	mov	r4, r0
 80090b6:	4608      	mov	r0, r1
 80090b8:	4611      	mov	r1, r2
 80090ba:	2200      	movs	r2, #0
 80090bc:	602a      	str	r2, [r5, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	f7f8 fbe6 	bl	8001890 <_read>
 80090c4:	1c43      	adds	r3, r0, #1
 80090c6:	d102      	bne.n	80090ce <_read_r+0x1e>
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	b103      	cbz	r3, 80090ce <_read_r+0x1e>
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	bd38      	pop	{r3, r4, r5, pc}
 80090d0:	200022bc 	.word	0x200022bc

080090d4 <_write_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	4d07      	ldr	r5, [pc, #28]	; (80090f4 <_write_r+0x20>)
 80090d8:	4604      	mov	r4, r0
 80090da:	4608      	mov	r0, r1
 80090dc:	4611      	mov	r1, r2
 80090de:	2200      	movs	r2, #0
 80090e0:	602a      	str	r2, [r5, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	f7f8 fbf1 	bl	80018ca <_write>
 80090e8:	1c43      	adds	r3, r0, #1
 80090ea:	d102      	bne.n	80090f2 <_write_r+0x1e>
 80090ec:	682b      	ldr	r3, [r5, #0]
 80090ee:	b103      	cbz	r3, 80090f2 <_write_r+0x1e>
 80090f0:	6023      	str	r3, [r4, #0]
 80090f2:	bd38      	pop	{r3, r4, r5, pc}
 80090f4:	200022bc 	.word	0x200022bc

080090f8 <__errno>:
 80090f8:	4b01      	ldr	r3, [pc, #4]	; (8009100 <__errno+0x8>)
 80090fa:	6818      	ldr	r0, [r3, #0]
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	20000154 	.word	0x20000154

08009104 <__libc_init_array>:
 8009104:	b570      	push	{r4, r5, r6, lr}
 8009106:	4d0d      	ldr	r5, [pc, #52]	; (800913c <__libc_init_array+0x38>)
 8009108:	4c0d      	ldr	r4, [pc, #52]	; (8009140 <__libc_init_array+0x3c>)
 800910a:	1b64      	subs	r4, r4, r5
 800910c:	10a4      	asrs	r4, r4, #2
 800910e:	2600      	movs	r6, #0
 8009110:	42a6      	cmp	r6, r4
 8009112:	d109      	bne.n	8009128 <__libc_init_array+0x24>
 8009114:	4d0b      	ldr	r5, [pc, #44]	; (8009144 <__libc_init_array+0x40>)
 8009116:	4c0c      	ldr	r4, [pc, #48]	; (8009148 <__libc_init_array+0x44>)
 8009118:	f003 fb72 	bl	800c800 <_init>
 800911c:	1b64      	subs	r4, r4, r5
 800911e:	10a4      	asrs	r4, r4, #2
 8009120:	2600      	movs	r6, #0
 8009122:	42a6      	cmp	r6, r4
 8009124:	d105      	bne.n	8009132 <__libc_init_array+0x2e>
 8009126:	bd70      	pop	{r4, r5, r6, pc}
 8009128:	f855 3b04 	ldr.w	r3, [r5], #4
 800912c:	4798      	blx	r3
 800912e:	3601      	adds	r6, #1
 8009130:	e7ee      	b.n	8009110 <__libc_init_array+0xc>
 8009132:	f855 3b04 	ldr.w	r3, [r5], #4
 8009136:	4798      	blx	r3
 8009138:	3601      	adds	r6, #1
 800913a:	e7f2      	b.n	8009122 <__libc_init_array+0x1e>
 800913c:	0800cd48 	.word	0x0800cd48
 8009140:	0800cd48 	.word	0x0800cd48
 8009144:	0800cd48 	.word	0x0800cd48
 8009148:	0800cd4c 	.word	0x0800cd4c

0800914c <__retarget_lock_acquire_recursive>:
 800914c:	4770      	bx	lr

0800914e <__retarget_lock_release_recursive>:
 800914e:	4770      	bx	lr

08009150 <memcpy>:
 8009150:	440a      	add	r2, r1
 8009152:	4291      	cmp	r1, r2
 8009154:	f100 33ff 	add.w	r3, r0, #4294967295
 8009158:	d100      	bne.n	800915c <memcpy+0xc>
 800915a:	4770      	bx	lr
 800915c:	b510      	push	{r4, lr}
 800915e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009162:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009166:	4291      	cmp	r1, r2
 8009168:	d1f9      	bne.n	800915e <memcpy+0xe>
 800916a:	bd10      	pop	{r4, pc}

0800916c <nanf>:
 800916c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009174 <nanf+0x8>
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	7fc00000 	.word	0x7fc00000

08009178 <quorem>:
 8009178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	6903      	ldr	r3, [r0, #16]
 800917e:	690c      	ldr	r4, [r1, #16]
 8009180:	42a3      	cmp	r3, r4
 8009182:	4607      	mov	r7, r0
 8009184:	db7e      	blt.n	8009284 <quorem+0x10c>
 8009186:	3c01      	subs	r4, #1
 8009188:	f101 0814 	add.w	r8, r1, #20
 800918c:	f100 0514 	add.w	r5, r0, #20
 8009190:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009194:	9301      	str	r3, [sp, #4]
 8009196:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800919a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800919e:	3301      	adds	r3, #1
 80091a0:	429a      	cmp	r2, r3
 80091a2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80091a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80091aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80091ae:	d331      	bcc.n	8009214 <quorem+0x9c>
 80091b0:	f04f 0e00 	mov.w	lr, #0
 80091b4:	4640      	mov	r0, r8
 80091b6:	46ac      	mov	ip, r5
 80091b8:	46f2      	mov	sl, lr
 80091ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80091be:	b293      	uxth	r3, r2
 80091c0:	fb06 e303 	mla	r3, r6, r3, lr
 80091c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80091c8:	0c1a      	lsrs	r2, r3, #16
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	ebaa 0303 	sub.w	r3, sl, r3
 80091d0:	f8dc a000 	ldr.w	sl, [ip]
 80091d4:	fa13 f38a 	uxtah	r3, r3, sl
 80091d8:	fb06 220e 	mla	r2, r6, lr, r2
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	9b00      	ldr	r3, [sp, #0]
 80091e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80091e4:	b292      	uxth	r2, r2
 80091e6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80091ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091ee:	f8bd 3000 	ldrh.w	r3, [sp]
 80091f2:	4581      	cmp	r9, r0
 80091f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091f8:	f84c 3b04 	str.w	r3, [ip], #4
 80091fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009200:	d2db      	bcs.n	80091ba <quorem+0x42>
 8009202:	f855 300b 	ldr.w	r3, [r5, fp]
 8009206:	b92b      	cbnz	r3, 8009214 <quorem+0x9c>
 8009208:	9b01      	ldr	r3, [sp, #4]
 800920a:	3b04      	subs	r3, #4
 800920c:	429d      	cmp	r5, r3
 800920e:	461a      	mov	r2, r3
 8009210:	d32c      	bcc.n	800926c <quorem+0xf4>
 8009212:	613c      	str	r4, [r7, #16]
 8009214:	4638      	mov	r0, r7
 8009216:	f001 f9ef 	bl	800a5f8 <__mcmp>
 800921a:	2800      	cmp	r0, #0
 800921c:	db22      	blt.n	8009264 <quorem+0xec>
 800921e:	3601      	adds	r6, #1
 8009220:	4629      	mov	r1, r5
 8009222:	2000      	movs	r0, #0
 8009224:	f858 2b04 	ldr.w	r2, [r8], #4
 8009228:	f8d1 c000 	ldr.w	ip, [r1]
 800922c:	b293      	uxth	r3, r2
 800922e:	1ac3      	subs	r3, r0, r3
 8009230:	0c12      	lsrs	r2, r2, #16
 8009232:	fa13 f38c 	uxtah	r3, r3, ip
 8009236:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800923a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800923e:	b29b      	uxth	r3, r3
 8009240:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009244:	45c1      	cmp	r9, r8
 8009246:	f841 3b04 	str.w	r3, [r1], #4
 800924a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800924e:	d2e9      	bcs.n	8009224 <quorem+0xac>
 8009250:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009254:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009258:	b922      	cbnz	r2, 8009264 <quorem+0xec>
 800925a:	3b04      	subs	r3, #4
 800925c:	429d      	cmp	r5, r3
 800925e:	461a      	mov	r2, r3
 8009260:	d30a      	bcc.n	8009278 <quorem+0x100>
 8009262:	613c      	str	r4, [r7, #16]
 8009264:	4630      	mov	r0, r6
 8009266:	b003      	add	sp, #12
 8009268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926c:	6812      	ldr	r2, [r2, #0]
 800926e:	3b04      	subs	r3, #4
 8009270:	2a00      	cmp	r2, #0
 8009272:	d1ce      	bne.n	8009212 <quorem+0x9a>
 8009274:	3c01      	subs	r4, #1
 8009276:	e7c9      	b.n	800920c <quorem+0x94>
 8009278:	6812      	ldr	r2, [r2, #0]
 800927a:	3b04      	subs	r3, #4
 800927c:	2a00      	cmp	r2, #0
 800927e:	d1f0      	bne.n	8009262 <quorem+0xea>
 8009280:	3c01      	subs	r4, #1
 8009282:	e7eb      	b.n	800925c <quorem+0xe4>
 8009284:	2000      	movs	r0, #0
 8009286:	e7ee      	b.n	8009266 <quorem+0xee>

08009288 <_dtoa_r>:
 8009288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928c:	ed2d 8b04 	vpush	{d8-d9}
 8009290:	69c5      	ldr	r5, [r0, #28]
 8009292:	b093      	sub	sp, #76	; 0x4c
 8009294:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009298:	ec57 6b10 	vmov	r6, r7, d0
 800929c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80092a0:	9107      	str	r1, [sp, #28]
 80092a2:	4604      	mov	r4, r0
 80092a4:	920a      	str	r2, [sp, #40]	; 0x28
 80092a6:	930d      	str	r3, [sp, #52]	; 0x34
 80092a8:	b975      	cbnz	r5, 80092c8 <_dtoa_r+0x40>
 80092aa:	2010      	movs	r0, #16
 80092ac:	f000 fe2a 	bl	8009f04 <malloc>
 80092b0:	4602      	mov	r2, r0
 80092b2:	61e0      	str	r0, [r4, #28]
 80092b4:	b920      	cbnz	r0, 80092c0 <_dtoa_r+0x38>
 80092b6:	4bae      	ldr	r3, [pc, #696]	; (8009570 <_dtoa_r+0x2e8>)
 80092b8:	21ef      	movs	r1, #239	; 0xef
 80092ba:	48ae      	ldr	r0, [pc, #696]	; (8009574 <_dtoa_r+0x2ec>)
 80092bc:	f002 fe60 	bl	800bf80 <__assert_func>
 80092c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80092c4:	6005      	str	r5, [r0, #0]
 80092c6:	60c5      	str	r5, [r0, #12]
 80092c8:	69e3      	ldr	r3, [r4, #28]
 80092ca:	6819      	ldr	r1, [r3, #0]
 80092cc:	b151      	cbz	r1, 80092e4 <_dtoa_r+0x5c>
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	604a      	str	r2, [r1, #4]
 80092d2:	2301      	movs	r3, #1
 80092d4:	4093      	lsls	r3, r2
 80092d6:	608b      	str	r3, [r1, #8]
 80092d8:	4620      	mov	r0, r4
 80092da:	f000 ff07 	bl	800a0ec <_Bfree>
 80092de:	69e3      	ldr	r3, [r4, #28]
 80092e0:	2200      	movs	r2, #0
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	1e3b      	subs	r3, r7, #0
 80092e6:	bfbb      	ittet	lt
 80092e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80092ec:	9303      	strlt	r3, [sp, #12]
 80092ee:	2300      	movge	r3, #0
 80092f0:	2201      	movlt	r2, #1
 80092f2:	bfac      	ite	ge
 80092f4:	f8c8 3000 	strge.w	r3, [r8]
 80092f8:	f8c8 2000 	strlt.w	r2, [r8]
 80092fc:	4b9e      	ldr	r3, [pc, #632]	; (8009578 <_dtoa_r+0x2f0>)
 80092fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009302:	ea33 0308 	bics.w	r3, r3, r8
 8009306:	d11b      	bne.n	8009340 <_dtoa_r+0xb8>
 8009308:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800930a:	f242 730f 	movw	r3, #9999	; 0x270f
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009314:	4333      	orrs	r3, r6
 8009316:	f000 8593 	beq.w	8009e40 <_dtoa_r+0xbb8>
 800931a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800931c:	b963      	cbnz	r3, 8009338 <_dtoa_r+0xb0>
 800931e:	4b97      	ldr	r3, [pc, #604]	; (800957c <_dtoa_r+0x2f4>)
 8009320:	e027      	b.n	8009372 <_dtoa_r+0xea>
 8009322:	4b97      	ldr	r3, [pc, #604]	; (8009580 <_dtoa_r+0x2f8>)
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	3308      	adds	r3, #8
 8009328:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800932a:	6013      	str	r3, [r2, #0]
 800932c:	9800      	ldr	r0, [sp, #0]
 800932e:	b013      	add	sp, #76	; 0x4c
 8009330:	ecbd 8b04 	vpop	{d8-d9}
 8009334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009338:	4b90      	ldr	r3, [pc, #576]	; (800957c <_dtoa_r+0x2f4>)
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	3303      	adds	r3, #3
 800933e:	e7f3      	b.n	8009328 <_dtoa_r+0xa0>
 8009340:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009344:	2200      	movs	r2, #0
 8009346:	ec51 0b17 	vmov	r0, r1, d7
 800934a:	eeb0 8a47 	vmov.f32	s16, s14
 800934e:	eef0 8a67 	vmov.f32	s17, s15
 8009352:	2300      	movs	r3, #0
 8009354:	f7f7 fbc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009358:	4681      	mov	r9, r0
 800935a:	b160      	cbz	r0, 8009376 <_dtoa_r+0xee>
 800935c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800935e:	2301      	movs	r3, #1
 8009360:	6013      	str	r3, [r2, #0]
 8009362:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 8568 	beq.w	8009e3a <_dtoa_r+0xbb2>
 800936a:	4b86      	ldr	r3, [pc, #536]	; (8009584 <_dtoa_r+0x2fc>)
 800936c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800936e:	6013      	str	r3, [r2, #0]
 8009370:	3b01      	subs	r3, #1
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	e7da      	b.n	800932c <_dtoa_r+0xa4>
 8009376:	aa10      	add	r2, sp, #64	; 0x40
 8009378:	a911      	add	r1, sp, #68	; 0x44
 800937a:	4620      	mov	r0, r4
 800937c:	eeb0 0a48 	vmov.f32	s0, s16
 8009380:	eef0 0a68 	vmov.f32	s1, s17
 8009384:	f001 fa4e 	bl	800a824 <__d2b>
 8009388:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800938c:	4682      	mov	sl, r0
 800938e:	2d00      	cmp	r5, #0
 8009390:	d07f      	beq.n	8009492 <_dtoa_r+0x20a>
 8009392:	ee18 3a90 	vmov	r3, s17
 8009396:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800939a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800939e:	ec51 0b18 	vmov	r0, r1, d8
 80093a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80093a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80093aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80093ae:	4619      	mov	r1, r3
 80093b0:	2200      	movs	r2, #0
 80093b2:	4b75      	ldr	r3, [pc, #468]	; (8009588 <_dtoa_r+0x300>)
 80093b4:	f7f6 ff70 	bl	8000298 <__aeabi_dsub>
 80093b8:	a367      	add	r3, pc, #412	; (adr r3, 8009558 <_dtoa_r+0x2d0>)
 80093ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093be:	f7f7 f923 	bl	8000608 <__aeabi_dmul>
 80093c2:	a367      	add	r3, pc, #412	; (adr r3, 8009560 <_dtoa_r+0x2d8>)
 80093c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c8:	f7f6 ff68 	bl	800029c <__adddf3>
 80093cc:	4606      	mov	r6, r0
 80093ce:	4628      	mov	r0, r5
 80093d0:	460f      	mov	r7, r1
 80093d2:	f7f7 f8af 	bl	8000534 <__aeabi_i2d>
 80093d6:	a364      	add	r3, pc, #400	; (adr r3, 8009568 <_dtoa_r+0x2e0>)
 80093d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093dc:	f7f7 f914 	bl	8000608 <__aeabi_dmul>
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	4630      	mov	r0, r6
 80093e6:	4639      	mov	r1, r7
 80093e8:	f7f6 ff58 	bl	800029c <__adddf3>
 80093ec:	4606      	mov	r6, r0
 80093ee:	460f      	mov	r7, r1
 80093f0:	f7f7 fbba 	bl	8000b68 <__aeabi_d2iz>
 80093f4:	2200      	movs	r2, #0
 80093f6:	4683      	mov	fp, r0
 80093f8:	2300      	movs	r3, #0
 80093fa:	4630      	mov	r0, r6
 80093fc:	4639      	mov	r1, r7
 80093fe:	f7f7 fb75 	bl	8000aec <__aeabi_dcmplt>
 8009402:	b148      	cbz	r0, 8009418 <_dtoa_r+0x190>
 8009404:	4658      	mov	r0, fp
 8009406:	f7f7 f895 	bl	8000534 <__aeabi_i2d>
 800940a:	4632      	mov	r2, r6
 800940c:	463b      	mov	r3, r7
 800940e:	f7f7 fb63 	bl	8000ad8 <__aeabi_dcmpeq>
 8009412:	b908      	cbnz	r0, 8009418 <_dtoa_r+0x190>
 8009414:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009418:	f1bb 0f16 	cmp.w	fp, #22
 800941c:	d857      	bhi.n	80094ce <_dtoa_r+0x246>
 800941e:	4b5b      	ldr	r3, [pc, #364]	; (800958c <_dtoa_r+0x304>)
 8009420:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	ec51 0b18 	vmov	r0, r1, d8
 800942c:	f7f7 fb5e 	bl	8000aec <__aeabi_dcmplt>
 8009430:	2800      	cmp	r0, #0
 8009432:	d04e      	beq.n	80094d2 <_dtoa_r+0x24a>
 8009434:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009438:	2300      	movs	r3, #0
 800943a:	930c      	str	r3, [sp, #48]	; 0x30
 800943c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800943e:	1b5b      	subs	r3, r3, r5
 8009440:	1e5a      	subs	r2, r3, #1
 8009442:	bf45      	ittet	mi
 8009444:	f1c3 0301 	rsbmi	r3, r3, #1
 8009448:	9305      	strmi	r3, [sp, #20]
 800944a:	2300      	movpl	r3, #0
 800944c:	2300      	movmi	r3, #0
 800944e:	9206      	str	r2, [sp, #24]
 8009450:	bf54      	ite	pl
 8009452:	9305      	strpl	r3, [sp, #20]
 8009454:	9306      	strmi	r3, [sp, #24]
 8009456:	f1bb 0f00 	cmp.w	fp, #0
 800945a:	db3c      	blt.n	80094d6 <_dtoa_r+0x24e>
 800945c:	9b06      	ldr	r3, [sp, #24]
 800945e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009462:	445b      	add	r3, fp
 8009464:	9306      	str	r3, [sp, #24]
 8009466:	2300      	movs	r3, #0
 8009468:	9308      	str	r3, [sp, #32]
 800946a:	9b07      	ldr	r3, [sp, #28]
 800946c:	2b09      	cmp	r3, #9
 800946e:	d868      	bhi.n	8009542 <_dtoa_r+0x2ba>
 8009470:	2b05      	cmp	r3, #5
 8009472:	bfc4      	itt	gt
 8009474:	3b04      	subgt	r3, #4
 8009476:	9307      	strgt	r3, [sp, #28]
 8009478:	9b07      	ldr	r3, [sp, #28]
 800947a:	f1a3 0302 	sub.w	r3, r3, #2
 800947e:	bfcc      	ite	gt
 8009480:	2500      	movgt	r5, #0
 8009482:	2501      	movle	r5, #1
 8009484:	2b03      	cmp	r3, #3
 8009486:	f200 8085 	bhi.w	8009594 <_dtoa_r+0x30c>
 800948a:	e8df f003 	tbb	[pc, r3]
 800948e:	3b2e      	.short	0x3b2e
 8009490:	5839      	.short	0x5839
 8009492:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009496:	441d      	add	r5, r3
 8009498:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800949c:	2b20      	cmp	r3, #32
 800949e:	bfc1      	itttt	gt
 80094a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80094a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80094a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80094ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80094b0:	bfd6      	itet	le
 80094b2:	f1c3 0320 	rsble	r3, r3, #32
 80094b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80094ba:	fa06 f003 	lslle.w	r0, r6, r3
 80094be:	f7f7 f829 	bl	8000514 <__aeabi_ui2d>
 80094c2:	2201      	movs	r2, #1
 80094c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80094c8:	3d01      	subs	r5, #1
 80094ca:	920e      	str	r2, [sp, #56]	; 0x38
 80094cc:	e76f      	b.n	80093ae <_dtoa_r+0x126>
 80094ce:	2301      	movs	r3, #1
 80094d0:	e7b3      	b.n	800943a <_dtoa_r+0x1b2>
 80094d2:	900c      	str	r0, [sp, #48]	; 0x30
 80094d4:	e7b2      	b.n	800943c <_dtoa_r+0x1b4>
 80094d6:	9b05      	ldr	r3, [sp, #20]
 80094d8:	eba3 030b 	sub.w	r3, r3, fp
 80094dc:	9305      	str	r3, [sp, #20]
 80094de:	f1cb 0300 	rsb	r3, fp, #0
 80094e2:	9308      	str	r3, [sp, #32]
 80094e4:	2300      	movs	r3, #0
 80094e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80094e8:	e7bf      	b.n	800946a <_dtoa_r+0x1e2>
 80094ea:	2300      	movs	r3, #0
 80094ec:	9309      	str	r3, [sp, #36]	; 0x24
 80094ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	dc52      	bgt.n	800959a <_dtoa_r+0x312>
 80094f4:	2301      	movs	r3, #1
 80094f6:	9301      	str	r3, [sp, #4]
 80094f8:	9304      	str	r3, [sp, #16]
 80094fa:	461a      	mov	r2, r3
 80094fc:	920a      	str	r2, [sp, #40]	; 0x28
 80094fe:	e00b      	b.n	8009518 <_dtoa_r+0x290>
 8009500:	2301      	movs	r3, #1
 8009502:	e7f3      	b.n	80094ec <_dtoa_r+0x264>
 8009504:	2300      	movs	r3, #0
 8009506:	9309      	str	r3, [sp, #36]	; 0x24
 8009508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800950a:	445b      	add	r3, fp
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	3301      	adds	r3, #1
 8009510:	2b01      	cmp	r3, #1
 8009512:	9304      	str	r3, [sp, #16]
 8009514:	bfb8      	it	lt
 8009516:	2301      	movlt	r3, #1
 8009518:	69e0      	ldr	r0, [r4, #28]
 800951a:	2100      	movs	r1, #0
 800951c:	2204      	movs	r2, #4
 800951e:	f102 0614 	add.w	r6, r2, #20
 8009522:	429e      	cmp	r6, r3
 8009524:	d93d      	bls.n	80095a2 <_dtoa_r+0x31a>
 8009526:	6041      	str	r1, [r0, #4]
 8009528:	4620      	mov	r0, r4
 800952a:	f000 fd9f 	bl	800a06c <_Balloc>
 800952e:	9000      	str	r0, [sp, #0]
 8009530:	2800      	cmp	r0, #0
 8009532:	d139      	bne.n	80095a8 <_dtoa_r+0x320>
 8009534:	4b16      	ldr	r3, [pc, #88]	; (8009590 <_dtoa_r+0x308>)
 8009536:	4602      	mov	r2, r0
 8009538:	f240 11af 	movw	r1, #431	; 0x1af
 800953c:	e6bd      	b.n	80092ba <_dtoa_r+0x32>
 800953e:	2301      	movs	r3, #1
 8009540:	e7e1      	b.n	8009506 <_dtoa_r+0x27e>
 8009542:	2501      	movs	r5, #1
 8009544:	2300      	movs	r3, #0
 8009546:	9307      	str	r3, [sp, #28]
 8009548:	9509      	str	r5, [sp, #36]	; 0x24
 800954a:	f04f 33ff 	mov.w	r3, #4294967295
 800954e:	9301      	str	r3, [sp, #4]
 8009550:	9304      	str	r3, [sp, #16]
 8009552:	2200      	movs	r2, #0
 8009554:	2312      	movs	r3, #18
 8009556:	e7d1      	b.n	80094fc <_dtoa_r+0x274>
 8009558:	636f4361 	.word	0x636f4361
 800955c:	3fd287a7 	.word	0x3fd287a7
 8009560:	8b60c8b3 	.word	0x8b60c8b3
 8009564:	3fc68a28 	.word	0x3fc68a28
 8009568:	509f79fb 	.word	0x509f79fb
 800956c:	3fd34413 	.word	0x3fd34413
 8009570:	0800c95a 	.word	0x0800c95a
 8009574:	0800c971 	.word	0x0800c971
 8009578:	7ff00000 	.word	0x7ff00000
 800957c:	0800c956 	.word	0x0800c956
 8009580:	0800c94d 	.word	0x0800c94d
 8009584:	0800c925 	.word	0x0800c925
 8009588:	3ff80000 	.word	0x3ff80000
 800958c:	0800ca60 	.word	0x0800ca60
 8009590:	0800c9c9 	.word	0x0800c9c9
 8009594:	2301      	movs	r3, #1
 8009596:	9309      	str	r3, [sp, #36]	; 0x24
 8009598:	e7d7      	b.n	800954a <_dtoa_r+0x2c2>
 800959a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	9304      	str	r3, [sp, #16]
 80095a0:	e7ba      	b.n	8009518 <_dtoa_r+0x290>
 80095a2:	3101      	adds	r1, #1
 80095a4:	0052      	lsls	r2, r2, #1
 80095a6:	e7ba      	b.n	800951e <_dtoa_r+0x296>
 80095a8:	69e3      	ldr	r3, [r4, #28]
 80095aa:	9a00      	ldr	r2, [sp, #0]
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	9b04      	ldr	r3, [sp, #16]
 80095b0:	2b0e      	cmp	r3, #14
 80095b2:	f200 80a8 	bhi.w	8009706 <_dtoa_r+0x47e>
 80095b6:	2d00      	cmp	r5, #0
 80095b8:	f000 80a5 	beq.w	8009706 <_dtoa_r+0x47e>
 80095bc:	f1bb 0f00 	cmp.w	fp, #0
 80095c0:	dd38      	ble.n	8009634 <_dtoa_r+0x3ac>
 80095c2:	4bc0      	ldr	r3, [pc, #768]	; (80098c4 <_dtoa_r+0x63c>)
 80095c4:	f00b 020f 	and.w	r2, fp, #15
 80095c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80095d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80095d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80095d8:	d019      	beq.n	800960e <_dtoa_r+0x386>
 80095da:	4bbb      	ldr	r3, [pc, #748]	; (80098c8 <_dtoa_r+0x640>)
 80095dc:	ec51 0b18 	vmov	r0, r1, d8
 80095e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80095e4:	f7f7 f93a 	bl	800085c <__aeabi_ddiv>
 80095e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095ec:	f008 080f 	and.w	r8, r8, #15
 80095f0:	2503      	movs	r5, #3
 80095f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80098c8 <_dtoa_r+0x640>
 80095f6:	f1b8 0f00 	cmp.w	r8, #0
 80095fa:	d10a      	bne.n	8009612 <_dtoa_r+0x38a>
 80095fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009600:	4632      	mov	r2, r6
 8009602:	463b      	mov	r3, r7
 8009604:	f7f7 f92a 	bl	800085c <__aeabi_ddiv>
 8009608:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800960c:	e02b      	b.n	8009666 <_dtoa_r+0x3de>
 800960e:	2502      	movs	r5, #2
 8009610:	e7ef      	b.n	80095f2 <_dtoa_r+0x36a>
 8009612:	f018 0f01 	tst.w	r8, #1
 8009616:	d008      	beq.n	800962a <_dtoa_r+0x3a2>
 8009618:	4630      	mov	r0, r6
 800961a:	4639      	mov	r1, r7
 800961c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009620:	f7f6 fff2 	bl	8000608 <__aeabi_dmul>
 8009624:	3501      	adds	r5, #1
 8009626:	4606      	mov	r6, r0
 8009628:	460f      	mov	r7, r1
 800962a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800962e:	f109 0908 	add.w	r9, r9, #8
 8009632:	e7e0      	b.n	80095f6 <_dtoa_r+0x36e>
 8009634:	f000 809f 	beq.w	8009776 <_dtoa_r+0x4ee>
 8009638:	f1cb 0600 	rsb	r6, fp, #0
 800963c:	4ba1      	ldr	r3, [pc, #644]	; (80098c4 <_dtoa_r+0x63c>)
 800963e:	4fa2      	ldr	r7, [pc, #648]	; (80098c8 <_dtoa_r+0x640>)
 8009640:	f006 020f 	and.w	r2, r6, #15
 8009644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964c:	ec51 0b18 	vmov	r0, r1, d8
 8009650:	f7f6 ffda 	bl	8000608 <__aeabi_dmul>
 8009654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009658:	1136      	asrs	r6, r6, #4
 800965a:	2300      	movs	r3, #0
 800965c:	2502      	movs	r5, #2
 800965e:	2e00      	cmp	r6, #0
 8009660:	d17e      	bne.n	8009760 <_dtoa_r+0x4d8>
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1d0      	bne.n	8009608 <_dtoa_r+0x380>
 8009666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009668:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800966c:	2b00      	cmp	r3, #0
 800966e:	f000 8084 	beq.w	800977a <_dtoa_r+0x4f2>
 8009672:	4b96      	ldr	r3, [pc, #600]	; (80098cc <_dtoa_r+0x644>)
 8009674:	2200      	movs	r2, #0
 8009676:	4640      	mov	r0, r8
 8009678:	4649      	mov	r1, r9
 800967a:	f7f7 fa37 	bl	8000aec <__aeabi_dcmplt>
 800967e:	2800      	cmp	r0, #0
 8009680:	d07b      	beq.n	800977a <_dtoa_r+0x4f2>
 8009682:	9b04      	ldr	r3, [sp, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d078      	beq.n	800977a <_dtoa_r+0x4f2>
 8009688:	9b01      	ldr	r3, [sp, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	dd39      	ble.n	8009702 <_dtoa_r+0x47a>
 800968e:	4b90      	ldr	r3, [pc, #576]	; (80098d0 <_dtoa_r+0x648>)
 8009690:	2200      	movs	r2, #0
 8009692:	4640      	mov	r0, r8
 8009694:	4649      	mov	r1, r9
 8009696:	f7f6 ffb7 	bl	8000608 <__aeabi_dmul>
 800969a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800969e:	9e01      	ldr	r6, [sp, #4]
 80096a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80096a4:	3501      	adds	r5, #1
 80096a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80096aa:	4628      	mov	r0, r5
 80096ac:	f7f6 ff42 	bl	8000534 <__aeabi_i2d>
 80096b0:	4642      	mov	r2, r8
 80096b2:	464b      	mov	r3, r9
 80096b4:	f7f6 ffa8 	bl	8000608 <__aeabi_dmul>
 80096b8:	4b86      	ldr	r3, [pc, #536]	; (80098d4 <_dtoa_r+0x64c>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	f7f6 fdee 	bl	800029c <__adddf3>
 80096c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80096c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096c8:	9303      	str	r3, [sp, #12]
 80096ca:	2e00      	cmp	r6, #0
 80096cc:	d158      	bne.n	8009780 <_dtoa_r+0x4f8>
 80096ce:	4b82      	ldr	r3, [pc, #520]	; (80098d8 <_dtoa_r+0x650>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	4640      	mov	r0, r8
 80096d4:	4649      	mov	r1, r9
 80096d6:	f7f6 fddf 	bl	8000298 <__aeabi_dsub>
 80096da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096de:	4680      	mov	r8, r0
 80096e0:	4689      	mov	r9, r1
 80096e2:	f7f7 fa21 	bl	8000b28 <__aeabi_dcmpgt>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	f040 8296 	bne.w	8009c18 <_dtoa_r+0x990>
 80096ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80096f0:	4640      	mov	r0, r8
 80096f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096f6:	4649      	mov	r1, r9
 80096f8:	f7f7 f9f8 	bl	8000aec <__aeabi_dcmplt>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	f040 8289 	bne.w	8009c14 <_dtoa_r+0x98c>
 8009702:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009706:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009708:	2b00      	cmp	r3, #0
 800970a:	f2c0 814e 	blt.w	80099aa <_dtoa_r+0x722>
 800970e:	f1bb 0f0e 	cmp.w	fp, #14
 8009712:	f300 814a 	bgt.w	80099aa <_dtoa_r+0x722>
 8009716:	4b6b      	ldr	r3, [pc, #428]	; (80098c4 <_dtoa_r+0x63c>)
 8009718:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800971c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009722:	2b00      	cmp	r3, #0
 8009724:	f280 80dc 	bge.w	80098e0 <_dtoa_r+0x658>
 8009728:	9b04      	ldr	r3, [sp, #16]
 800972a:	2b00      	cmp	r3, #0
 800972c:	f300 80d8 	bgt.w	80098e0 <_dtoa_r+0x658>
 8009730:	f040 826f 	bne.w	8009c12 <_dtoa_r+0x98a>
 8009734:	4b68      	ldr	r3, [pc, #416]	; (80098d8 <_dtoa_r+0x650>)
 8009736:	2200      	movs	r2, #0
 8009738:	4640      	mov	r0, r8
 800973a:	4649      	mov	r1, r9
 800973c:	f7f6 ff64 	bl	8000608 <__aeabi_dmul>
 8009740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009744:	f7f7 f9e6 	bl	8000b14 <__aeabi_dcmpge>
 8009748:	9e04      	ldr	r6, [sp, #16]
 800974a:	4637      	mov	r7, r6
 800974c:	2800      	cmp	r0, #0
 800974e:	f040 8245 	bne.w	8009bdc <_dtoa_r+0x954>
 8009752:	9d00      	ldr	r5, [sp, #0]
 8009754:	2331      	movs	r3, #49	; 0x31
 8009756:	f805 3b01 	strb.w	r3, [r5], #1
 800975a:	f10b 0b01 	add.w	fp, fp, #1
 800975e:	e241      	b.n	8009be4 <_dtoa_r+0x95c>
 8009760:	07f2      	lsls	r2, r6, #31
 8009762:	d505      	bpl.n	8009770 <_dtoa_r+0x4e8>
 8009764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009768:	f7f6 ff4e 	bl	8000608 <__aeabi_dmul>
 800976c:	3501      	adds	r5, #1
 800976e:	2301      	movs	r3, #1
 8009770:	1076      	asrs	r6, r6, #1
 8009772:	3708      	adds	r7, #8
 8009774:	e773      	b.n	800965e <_dtoa_r+0x3d6>
 8009776:	2502      	movs	r5, #2
 8009778:	e775      	b.n	8009666 <_dtoa_r+0x3de>
 800977a:	9e04      	ldr	r6, [sp, #16]
 800977c:	465f      	mov	r7, fp
 800977e:	e792      	b.n	80096a6 <_dtoa_r+0x41e>
 8009780:	9900      	ldr	r1, [sp, #0]
 8009782:	4b50      	ldr	r3, [pc, #320]	; (80098c4 <_dtoa_r+0x63c>)
 8009784:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009788:	4431      	add	r1, r6
 800978a:	9102      	str	r1, [sp, #8]
 800978c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800978e:	eeb0 9a47 	vmov.f32	s18, s14
 8009792:	eef0 9a67 	vmov.f32	s19, s15
 8009796:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800979a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800979e:	2900      	cmp	r1, #0
 80097a0:	d044      	beq.n	800982c <_dtoa_r+0x5a4>
 80097a2:	494e      	ldr	r1, [pc, #312]	; (80098dc <_dtoa_r+0x654>)
 80097a4:	2000      	movs	r0, #0
 80097a6:	f7f7 f859 	bl	800085c <__aeabi_ddiv>
 80097aa:	ec53 2b19 	vmov	r2, r3, d9
 80097ae:	f7f6 fd73 	bl	8000298 <__aeabi_dsub>
 80097b2:	9d00      	ldr	r5, [sp, #0]
 80097b4:	ec41 0b19 	vmov	d9, r0, r1
 80097b8:	4649      	mov	r1, r9
 80097ba:	4640      	mov	r0, r8
 80097bc:	f7f7 f9d4 	bl	8000b68 <__aeabi_d2iz>
 80097c0:	4606      	mov	r6, r0
 80097c2:	f7f6 feb7 	bl	8000534 <__aeabi_i2d>
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	4640      	mov	r0, r8
 80097cc:	4649      	mov	r1, r9
 80097ce:	f7f6 fd63 	bl	8000298 <__aeabi_dsub>
 80097d2:	3630      	adds	r6, #48	; 0x30
 80097d4:	f805 6b01 	strb.w	r6, [r5], #1
 80097d8:	ec53 2b19 	vmov	r2, r3, d9
 80097dc:	4680      	mov	r8, r0
 80097de:	4689      	mov	r9, r1
 80097e0:	f7f7 f984 	bl	8000aec <__aeabi_dcmplt>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d164      	bne.n	80098b2 <_dtoa_r+0x62a>
 80097e8:	4642      	mov	r2, r8
 80097ea:	464b      	mov	r3, r9
 80097ec:	4937      	ldr	r1, [pc, #220]	; (80098cc <_dtoa_r+0x644>)
 80097ee:	2000      	movs	r0, #0
 80097f0:	f7f6 fd52 	bl	8000298 <__aeabi_dsub>
 80097f4:	ec53 2b19 	vmov	r2, r3, d9
 80097f8:	f7f7 f978 	bl	8000aec <__aeabi_dcmplt>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	f040 80b6 	bne.w	800996e <_dtoa_r+0x6e6>
 8009802:	9b02      	ldr	r3, [sp, #8]
 8009804:	429d      	cmp	r5, r3
 8009806:	f43f af7c 	beq.w	8009702 <_dtoa_r+0x47a>
 800980a:	4b31      	ldr	r3, [pc, #196]	; (80098d0 <_dtoa_r+0x648>)
 800980c:	ec51 0b19 	vmov	r0, r1, d9
 8009810:	2200      	movs	r2, #0
 8009812:	f7f6 fef9 	bl	8000608 <__aeabi_dmul>
 8009816:	4b2e      	ldr	r3, [pc, #184]	; (80098d0 <_dtoa_r+0x648>)
 8009818:	ec41 0b19 	vmov	d9, r0, r1
 800981c:	2200      	movs	r2, #0
 800981e:	4640      	mov	r0, r8
 8009820:	4649      	mov	r1, r9
 8009822:	f7f6 fef1 	bl	8000608 <__aeabi_dmul>
 8009826:	4680      	mov	r8, r0
 8009828:	4689      	mov	r9, r1
 800982a:	e7c5      	b.n	80097b8 <_dtoa_r+0x530>
 800982c:	ec51 0b17 	vmov	r0, r1, d7
 8009830:	f7f6 feea 	bl	8000608 <__aeabi_dmul>
 8009834:	9b02      	ldr	r3, [sp, #8]
 8009836:	9d00      	ldr	r5, [sp, #0]
 8009838:	930f      	str	r3, [sp, #60]	; 0x3c
 800983a:	ec41 0b19 	vmov	d9, r0, r1
 800983e:	4649      	mov	r1, r9
 8009840:	4640      	mov	r0, r8
 8009842:	f7f7 f991 	bl	8000b68 <__aeabi_d2iz>
 8009846:	4606      	mov	r6, r0
 8009848:	f7f6 fe74 	bl	8000534 <__aeabi_i2d>
 800984c:	3630      	adds	r6, #48	; 0x30
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	4640      	mov	r0, r8
 8009854:	4649      	mov	r1, r9
 8009856:	f7f6 fd1f 	bl	8000298 <__aeabi_dsub>
 800985a:	f805 6b01 	strb.w	r6, [r5], #1
 800985e:	9b02      	ldr	r3, [sp, #8]
 8009860:	429d      	cmp	r5, r3
 8009862:	4680      	mov	r8, r0
 8009864:	4689      	mov	r9, r1
 8009866:	f04f 0200 	mov.w	r2, #0
 800986a:	d124      	bne.n	80098b6 <_dtoa_r+0x62e>
 800986c:	4b1b      	ldr	r3, [pc, #108]	; (80098dc <_dtoa_r+0x654>)
 800986e:	ec51 0b19 	vmov	r0, r1, d9
 8009872:	f7f6 fd13 	bl	800029c <__adddf3>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	4640      	mov	r0, r8
 800987c:	4649      	mov	r1, r9
 800987e:	f7f7 f953 	bl	8000b28 <__aeabi_dcmpgt>
 8009882:	2800      	cmp	r0, #0
 8009884:	d173      	bne.n	800996e <_dtoa_r+0x6e6>
 8009886:	ec53 2b19 	vmov	r2, r3, d9
 800988a:	4914      	ldr	r1, [pc, #80]	; (80098dc <_dtoa_r+0x654>)
 800988c:	2000      	movs	r0, #0
 800988e:	f7f6 fd03 	bl	8000298 <__aeabi_dsub>
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	4640      	mov	r0, r8
 8009898:	4649      	mov	r1, r9
 800989a:	f7f7 f927 	bl	8000aec <__aeabi_dcmplt>
 800989e:	2800      	cmp	r0, #0
 80098a0:	f43f af2f 	beq.w	8009702 <_dtoa_r+0x47a>
 80098a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80098a6:	1e6b      	subs	r3, r5, #1
 80098a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80098aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80098ae:	2b30      	cmp	r3, #48	; 0x30
 80098b0:	d0f8      	beq.n	80098a4 <_dtoa_r+0x61c>
 80098b2:	46bb      	mov	fp, r7
 80098b4:	e04a      	b.n	800994c <_dtoa_r+0x6c4>
 80098b6:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <_dtoa_r+0x648>)
 80098b8:	f7f6 fea6 	bl	8000608 <__aeabi_dmul>
 80098bc:	4680      	mov	r8, r0
 80098be:	4689      	mov	r9, r1
 80098c0:	e7bd      	b.n	800983e <_dtoa_r+0x5b6>
 80098c2:	bf00      	nop
 80098c4:	0800ca60 	.word	0x0800ca60
 80098c8:	0800ca38 	.word	0x0800ca38
 80098cc:	3ff00000 	.word	0x3ff00000
 80098d0:	40240000 	.word	0x40240000
 80098d4:	401c0000 	.word	0x401c0000
 80098d8:	40140000 	.word	0x40140000
 80098dc:	3fe00000 	.word	0x3fe00000
 80098e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80098e4:	9d00      	ldr	r5, [sp, #0]
 80098e6:	4642      	mov	r2, r8
 80098e8:	464b      	mov	r3, r9
 80098ea:	4630      	mov	r0, r6
 80098ec:	4639      	mov	r1, r7
 80098ee:	f7f6 ffb5 	bl	800085c <__aeabi_ddiv>
 80098f2:	f7f7 f939 	bl	8000b68 <__aeabi_d2iz>
 80098f6:	9001      	str	r0, [sp, #4]
 80098f8:	f7f6 fe1c 	bl	8000534 <__aeabi_i2d>
 80098fc:	4642      	mov	r2, r8
 80098fe:	464b      	mov	r3, r9
 8009900:	f7f6 fe82 	bl	8000608 <__aeabi_dmul>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4630      	mov	r0, r6
 800990a:	4639      	mov	r1, r7
 800990c:	f7f6 fcc4 	bl	8000298 <__aeabi_dsub>
 8009910:	9e01      	ldr	r6, [sp, #4]
 8009912:	9f04      	ldr	r7, [sp, #16]
 8009914:	3630      	adds	r6, #48	; 0x30
 8009916:	f805 6b01 	strb.w	r6, [r5], #1
 800991a:	9e00      	ldr	r6, [sp, #0]
 800991c:	1bae      	subs	r6, r5, r6
 800991e:	42b7      	cmp	r7, r6
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	d134      	bne.n	8009990 <_dtoa_r+0x708>
 8009926:	f7f6 fcb9 	bl	800029c <__adddf3>
 800992a:	4642      	mov	r2, r8
 800992c:	464b      	mov	r3, r9
 800992e:	4606      	mov	r6, r0
 8009930:	460f      	mov	r7, r1
 8009932:	f7f7 f8f9 	bl	8000b28 <__aeabi_dcmpgt>
 8009936:	b9c8      	cbnz	r0, 800996c <_dtoa_r+0x6e4>
 8009938:	4642      	mov	r2, r8
 800993a:	464b      	mov	r3, r9
 800993c:	4630      	mov	r0, r6
 800993e:	4639      	mov	r1, r7
 8009940:	f7f7 f8ca 	bl	8000ad8 <__aeabi_dcmpeq>
 8009944:	b110      	cbz	r0, 800994c <_dtoa_r+0x6c4>
 8009946:	9b01      	ldr	r3, [sp, #4]
 8009948:	07db      	lsls	r3, r3, #31
 800994a:	d40f      	bmi.n	800996c <_dtoa_r+0x6e4>
 800994c:	4651      	mov	r1, sl
 800994e:	4620      	mov	r0, r4
 8009950:	f000 fbcc 	bl	800a0ec <_Bfree>
 8009954:	2300      	movs	r3, #0
 8009956:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009958:	702b      	strb	r3, [r5, #0]
 800995a:	f10b 0301 	add.w	r3, fp, #1
 800995e:	6013      	str	r3, [r2, #0]
 8009960:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009962:	2b00      	cmp	r3, #0
 8009964:	f43f ace2 	beq.w	800932c <_dtoa_r+0xa4>
 8009968:	601d      	str	r5, [r3, #0]
 800996a:	e4df      	b.n	800932c <_dtoa_r+0xa4>
 800996c:	465f      	mov	r7, fp
 800996e:	462b      	mov	r3, r5
 8009970:	461d      	mov	r5, r3
 8009972:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009976:	2a39      	cmp	r2, #57	; 0x39
 8009978:	d106      	bne.n	8009988 <_dtoa_r+0x700>
 800997a:	9a00      	ldr	r2, [sp, #0]
 800997c:	429a      	cmp	r2, r3
 800997e:	d1f7      	bne.n	8009970 <_dtoa_r+0x6e8>
 8009980:	9900      	ldr	r1, [sp, #0]
 8009982:	2230      	movs	r2, #48	; 0x30
 8009984:	3701      	adds	r7, #1
 8009986:	700a      	strb	r2, [r1, #0]
 8009988:	781a      	ldrb	r2, [r3, #0]
 800998a:	3201      	adds	r2, #1
 800998c:	701a      	strb	r2, [r3, #0]
 800998e:	e790      	b.n	80098b2 <_dtoa_r+0x62a>
 8009990:	4ba3      	ldr	r3, [pc, #652]	; (8009c20 <_dtoa_r+0x998>)
 8009992:	2200      	movs	r2, #0
 8009994:	f7f6 fe38 	bl	8000608 <__aeabi_dmul>
 8009998:	2200      	movs	r2, #0
 800999a:	2300      	movs	r3, #0
 800999c:	4606      	mov	r6, r0
 800999e:	460f      	mov	r7, r1
 80099a0:	f7f7 f89a 	bl	8000ad8 <__aeabi_dcmpeq>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d09e      	beq.n	80098e6 <_dtoa_r+0x65e>
 80099a8:	e7d0      	b.n	800994c <_dtoa_r+0x6c4>
 80099aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099ac:	2a00      	cmp	r2, #0
 80099ae:	f000 80ca 	beq.w	8009b46 <_dtoa_r+0x8be>
 80099b2:	9a07      	ldr	r2, [sp, #28]
 80099b4:	2a01      	cmp	r2, #1
 80099b6:	f300 80ad 	bgt.w	8009b14 <_dtoa_r+0x88c>
 80099ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099bc:	2a00      	cmp	r2, #0
 80099be:	f000 80a5 	beq.w	8009b0c <_dtoa_r+0x884>
 80099c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80099c6:	9e08      	ldr	r6, [sp, #32]
 80099c8:	9d05      	ldr	r5, [sp, #20]
 80099ca:	9a05      	ldr	r2, [sp, #20]
 80099cc:	441a      	add	r2, r3
 80099ce:	9205      	str	r2, [sp, #20]
 80099d0:	9a06      	ldr	r2, [sp, #24]
 80099d2:	2101      	movs	r1, #1
 80099d4:	441a      	add	r2, r3
 80099d6:	4620      	mov	r0, r4
 80099d8:	9206      	str	r2, [sp, #24]
 80099da:	f000 fc87 	bl	800a2ec <__i2b>
 80099de:	4607      	mov	r7, r0
 80099e0:	b165      	cbz	r5, 80099fc <_dtoa_r+0x774>
 80099e2:	9b06      	ldr	r3, [sp, #24]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	dd09      	ble.n	80099fc <_dtoa_r+0x774>
 80099e8:	42ab      	cmp	r3, r5
 80099ea:	9a05      	ldr	r2, [sp, #20]
 80099ec:	bfa8      	it	ge
 80099ee:	462b      	movge	r3, r5
 80099f0:	1ad2      	subs	r2, r2, r3
 80099f2:	9205      	str	r2, [sp, #20]
 80099f4:	9a06      	ldr	r2, [sp, #24]
 80099f6:	1aed      	subs	r5, r5, r3
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	9306      	str	r3, [sp, #24]
 80099fc:	9b08      	ldr	r3, [sp, #32]
 80099fe:	b1f3      	cbz	r3, 8009a3e <_dtoa_r+0x7b6>
 8009a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 80a3 	beq.w	8009b4e <_dtoa_r+0x8c6>
 8009a08:	2e00      	cmp	r6, #0
 8009a0a:	dd10      	ble.n	8009a2e <_dtoa_r+0x7a6>
 8009a0c:	4639      	mov	r1, r7
 8009a0e:	4632      	mov	r2, r6
 8009a10:	4620      	mov	r0, r4
 8009a12:	f000 fd2b 	bl	800a46c <__pow5mult>
 8009a16:	4652      	mov	r2, sl
 8009a18:	4601      	mov	r1, r0
 8009a1a:	4607      	mov	r7, r0
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f000 fc7b 	bl	800a318 <__multiply>
 8009a22:	4651      	mov	r1, sl
 8009a24:	4680      	mov	r8, r0
 8009a26:	4620      	mov	r0, r4
 8009a28:	f000 fb60 	bl	800a0ec <_Bfree>
 8009a2c:	46c2      	mov	sl, r8
 8009a2e:	9b08      	ldr	r3, [sp, #32]
 8009a30:	1b9a      	subs	r2, r3, r6
 8009a32:	d004      	beq.n	8009a3e <_dtoa_r+0x7b6>
 8009a34:	4651      	mov	r1, sl
 8009a36:	4620      	mov	r0, r4
 8009a38:	f000 fd18 	bl	800a46c <__pow5mult>
 8009a3c:	4682      	mov	sl, r0
 8009a3e:	2101      	movs	r1, #1
 8009a40:	4620      	mov	r0, r4
 8009a42:	f000 fc53 	bl	800a2ec <__i2b>
 8009a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	f340 8081 	ble.w	8009b52 <_dtoa_r+0x8ca>
 8009a50:	461a      	mov	r2, r3
 8009a52:	4601      	mov	r1, r0
 8009a54:	4620      	mov	r0, r4
 8009a56:	f000 fd09 	bl	800a46c <__pow5mult>
 8009a5a:	9b07      	ldr	r3, [sp, #28]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	4606      	mov	r6, r0
 8009a60:	dd7a      	ble.n	8009b58 <_dtoa_r+0x8d0>
 8009a62:	f04f 0800 	mov.w	r8, #0
 8009a66:	6933      	ldr	r3, [r6, #16]
 8009a68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009a6c:	6918      	ldr	r0, [r3, #16]
 8009a6e:	f000 fbef 	bl	800a250 <__hi0bits>
 8009a72:	f1c0 0020 	rsb	r0, r0, #32
 8009a76:	9b06      	ldr	r3, [sp, #24]
 8009a78:	4418      	add	r0, r3
 8009a7a:	f010 001f 	ands.w	r0, r0, #31
 8009a7e:	f000 8094 	beq.w	8009baa <_dtoa_r+0x922>
 8009a82:	f1c0 0320 	rsb	r3, r0, #32
 8009a86:	2b04      	cmp	r3, #4
 8009a88:	f340 8085 	ble.w	8009b96 <_dtoa_r+0x90e>
 8009a8c:	9b05      	ldr	r3, [sp, #20]
 8009a8e:	f1c0 001c 	rsb	r0, r0, #28
 8009a92:	4403      	add	r3, r0
 8009a94:	9305      	str	r3, [sp, #20]
 8009a96:	9b06      	ldr	r3, [sp, #24]
 8009a98:	4403      	add	r3, r0
 8009a9a:	4405      	add	r5, r0
 8009a9c:	9306      	str	r3, [sp, #24]
 8009a9e:	9b05      	ldr	r3, [sp, #20]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	dd05      	ble.n	8009ab0 <_dtoa_r+0x828>
 8009aa4:	4651      	mov	r1, sl
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f000 fd39 	bl	800a520 <__lshift>
 8009aae:	4682      	mov	sl, r0
 8009ab0:	9b06      	ldr	r3, [sp, #24]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	dd05      	ble.n	8009ac2 <_dtoa_r+0x83a>
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	461a      	mov	r2, r3
 8009aba:	4620      	mov	r0, r4
 8009abc:	f000 fd30 	bl	800a520 <__lshift>
 8009ac0:	4606      	mov	r6, r0
 8009ac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d072      	beq.n	8009bae <_dtoa_r+0x926>
 8009ac8:	4631      	mov	r1, r6
 8009aca:	4650      	mov	r0, sl
 8009acc:	f000 fd94 	bl	800a5f8 <__mcmp>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	da6c      	bge.n	8009bae <_dtoa_r+0x926>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	4651      	mov	r1, sl
 8009ad8:	220a      	movs	r2, #10
 8009ada:	4620      	mov	r0, r4
 8009adc:	f000 fb28 	bl	800a130 <__multadd>
 8009ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ae6:	4682      	mov	sl, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 81b0 	beq.w	8009e4e <_dtoa_r+0xbc6>
 8009aee:	2300      	movs	r3, #0
 8009af0:	4639      	mov	r1, r7
 8009af2:	220a      	movs	r2, #10
 8009af4:	4620      	mov	r0, r4
 8009af6:	f000 fb1b 	bl	800a130 <__multadd>
 8009afa:	9b01      	ldr	r3, [sp, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	4607      	mov	r7, r0
 8009b00:	f300 8096 	bgt.w	8009c30 <_dtoa_r+0x9a8>
 8009b04:	9b07      	ldr	r3, [sp, #28]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	dc59      	bgt.n	8009bbe <_dtoa_r+0x936>
 8009b0a:	e091      	b.n	8009c30 <_dtoa_r+0x9a8>
 8009b0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b12:	e758      	b.n	80099c6 <_dtoa_r+0x73e>
 8009b14:	9b04      	ldr	r3, [sp, #16]
 8009b16:	1e5e      	subs	r6, r3, #1
 8009b18:	9b08      	ldr	r3, [sp, #32]
 8009b1a:	42b3      	cmp	r3, r6
 8009b1c:	bfbf      	itttt	lt
 8009b1e:	9b08      	ldrlt	r3, [sp, #32]
 8009b20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009b22:	9608      	strlt	r6, [sp, #32]
 8009b24:	1af3      	sublt	r3, r6, r3
 8009b26:	bfb4      	ite	lt
 8009b28:	18d2      	addlt	r2, r2, r3
 8009b2a:	1b9e      	subge	r6, r3, r6
 8009b2c:	9b04      	ldr	r3, [sp, #16]
 8009b2e:	bfbc      	itt	lt
 8009b30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009b32:	2600      	movlt	r6, #0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	bfb7      	itett	lt
 8009b38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009b3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009b40:	1a9d      	sublt	r5, r3, r2
 8009b42:	2300      	movlt	r3, #0
 8009b44:	e741      	b.n	80099ca <_dtoa_r+0x742>
 8009b46:	9e08      	ldr	r6, [sp, #32]
 8009b48:	9d05      	ldr	r5, [sp, #20]
 8009b4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009b4c:	e748      	b.n	80099e0 <_dtoa_r+0x758>
 8009b4e:	9a08      	ldr	r2, [sp, #32]
 8009b50:	e770      	b.n	8009a34 <_dtoa_r+0x7ac>
 8009b52:	9b07      	ldr	r3, [sp, #28]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	dc19      	bgt.n	8009b8c <_dtoa_r+0x904>
 8009b58:	9b02      	ldr	r3, [sp, #8]
 8009b5a:	b9bb      	cbnz	r3, 8009b8c <_dtoa_r+0x904>
 8009b5c:	9b03      	ldr	r3, [sp, #12]
 8009b5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b62:	b99b      	cbnz	r3, 8009b8c <_dtoa_r+0x904>
 8009b64:	9b03      	ldr	r3, [sp, #12]
 8009b66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b6a:	0d1b      	lsrs	r3, r3, #20
 8009b6c:	051b      	lsls	r3, r3, #20
 8009b6e:	b183      	cbz	r3, 8009b92 <_dtoa_r+0x90a>
 8009b70:	9b05      	ldr	r3, [sp, #20]
 8009b72:	3301      	adds	r3, #1
 8009b74:	9305      	str	r3, [sp, #20]
 8009b76:	9b06      	ldr	r3, [sp, #24]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	9306      	str	r3, [sp, #24]
 8009b7c:	f04f 0801 	mov.w	r8, #1
 8009b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f47f af6f 	bne.w	8009a66 <_dtoa_r+0x7de>
 8009b88:	2001      	movs	r0, #1
 8009b8a:	e774      	b.n	8009a76 <_dtoa_r+0x7ee>
 8009b8c:	f04f 0800 	mov.w	r8, #0
 8009b90:	e7f6      	b.n	8009b80 <_dtoa_r+0x8f8>
 8009b92:	4698      	mov	r8, r3
 8009b94:	e7f4      	b.n	8009b80 <_dtoa_r+0x8f8>
 8009b96:	d082      	beq.n	8009a9e <_dtoa_r+0x816>
 8009b98:	9a05      	ldr	r2, [sp, #20]
 8009b9a:	331c      	adds	r3, #28
 8009b9c:	441a      	add	r2, r3
 8009b9e:	9205      	str	r2, [sp, #20]
 8009ba0:	9a06      	ldr	r2, [sp, #24]
 8009ba2:	441a      	add	r2, r3
 8009ba4:	441d      	add	r5, r3
 8009ba6:	9206      	str	r2, [sp, #24]
 8009ba8:	e779      	b.n	8009a9e <_dtoa_r+0x816>
 8009baa:	4603      	mov	r3, r0
 8009bac:	e7f4      	b.n	8009b98 <_dtoa_r+0x910>
 8009bae:	9b04      	ldr	r3, [sp, #16]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	dc37      	bgt.n	8009c24 <_dtoa_r+0x99c>
 8009bb4:	9b07      	ldr	r3, [sp, #28]
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	dd34      	ble.n	8009c24 <_dtoa_r+0x99c>
 8009bba:	9b04      	ldr	r3, [sp, #16]
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	9b01      	ldr	r3, [sp, #4]
 8009bc0:	b963      	cbnz	r3, 8009bdc <_dtoa_r+0x954>
 8009bc2:	4631      	mov	r1, r6
 8009bc4:	2205      	movs	r2, #5
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f000 fab2 	bl	800a130 <__multadd>
 8009bcc:	4601      	mov	r1, r0
 8009bce:	4606      	mov	r6, r0
 8009bd0:	4650      	mov	r0, sl
 8009bd2:	f000 fd11 	bl	800a5f8 <__mcmp>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	f73f adbb 	bgt.w	8009752 <_dtoa_r+0x4ca>
 8009bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bde:	9d00      	ldr	r5, [sp, #0]
 8009be0:	ea6f 0b03 	mvn.w	fp, r3
 8009be4:	f04f 0800 	mov.w	r8, #0
 8009be8:	4631      	mov	r1, r6
 8009bea:	4620      	mov	r0, r4
 8009bec:	f000 fa7e 	bl	800a0ec <_Bfree>
 8009bf0:	2f00      	cmp	r7, #0
 8009bf2:	f43f aeab 	beq.w	800994c <_dtoa_r+0x6c4>
 8009bf6:	f1b8 0f00 	cmp.w	r8, #0
 8009bfa:	d005      	beq.n	8009c08 <_dtoa_r+0x980>
 8009bfc:	45b8      	cmp	r8, r7
 8009bfe:	d003      	beq.n	8009c08 <_dtoa_r+0x980>
 8009c00:	4641      	mov	r1, r8
 8009c02:	4620      	mov	r0, r4
 8009c04:	f000 fa72 	bl	800a0ec <_Bfree>
 8009c08:	4639      	mov	r1, r7
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f000 fa6e 	bl	800a0ec <_Bfree>
 8009c10:	e69c      	b.n	800994c <_dtoa_r+0x6c4>
 8009c12:	2600      	movs	r6, #0
 8009c14:	4637      	mov	r7, r6
 8009c16:	e7e1      	b.n	8009bdc <_dtoa_r+0x954>
 8009c18:	46bb      	mov	fp, r7
 8009c1a:	4637      	mov	r7, r6
 8009c1c:	e599      	b.n	8009752 <_dtoa_r+0x4ca>
 8009c1e:	bf00      	nop
 8009c20:	40240000 	.word	0x40240000
 8009c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 80c8 	beq.w	8009dbc <_dtoa_r+0xb34>
 8009c2c:	9b04      	ldr	r3, [sp, #16]
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	2d00      	cmp	r5, #0
 8009c32:	dd05      	ble.n	8009c40 <_dtoa_r+0x9b8>
 8009c34:	4639      	mov	r1, r7
 8009c36:	462a      	mov	r2, r5
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f000 fc71 	bl	800a520 <__lshift>
 8009c3e:	4607      	mov	r7, r0
 8009c40:	f1b8 0f00 	cmp.w	r8, #0
 8009c44:	d05b      	beq.n	8009cfe <_dtoa_r+0xa76>
 8009c46:	6879      	ldr	r1, [r7, #4]
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f000 fa0f 	bl	800a06c <_Balloc>
 8009c4e:	4605      	mov	r5, r0
 8009c50:	b928      	cbnz	r0, 8009c5e <_dtoa_r+0x9d6>
 8009c52:	4b83      	ldr	r3, [pc, #524]	; (8009e60 <_dtoa_r+0xbd8>)
 8009c54:	4602      	mov	r2, r0
 8009c56:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009c5a:	f7ff bb2e 	b.w	80092ba <_dtoa_r+0x32>
 8009c5e:	693a      	ldr	r2, [r7, #16]
 8009c60:	3202      	adds	r2, #2
 8009c62:	0092      	lsls	r2, r2, #2
 8009c64:	f107 010c 	add.w	r1, r7, #12
 8009c68:	300c      	adds	r0, #12
 8009c6a:	f7ff fa71 	bl	8009150 <memcpy>
 8009c6e:	2201      	movs	r2, #1
 8009c70:	4629      	mov	r1, r5
 8009c72:	4620      	mov	r0, r4
 8009c74:	f000 fc54 	bl	800a520 <__lshift>
 8009c78:	9b00      	ldr	r3, [sp, #0]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	9304      	str	r3, [sp, #16]
 8009c7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c82:	4413      	add	r3, r2
 8009c84:	9308      	str	r3, [sp, #32]
 8009c86:	9b02      	ldr	r3, [sp, #8]
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	46b8      	mov	r8, r7
 8009c8e:	9306      	str	r3, [sp, #24]
 8009c90:	4607      	mov	r7, r0
 8009c92:	9b04      	ldr	r3, [sp, #16]
 8009c94:	4631      	mov	r1, r6
 8009c96:	3b01      	subs	r3, #1
 8009c98:	4650      	mov	r0, sl
 8009c9a:	9301      	str	r3, [sp, #4]
 8009c9c:	f7ff fa6c 	bl	8009178 <quorem>
 8009ca0:	4641      	mov	r1, r8
 8009ca2:	9002      	str	r0, [sp, #8]
 8009ca4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009ca8:	4650      	mov	r0, sl
 8009caa:	f000 fca5 	bl	800a5f8 <__mcmp>
 8009cae:	463a      	mov	r2, r7
 8009cb0:	9005      	str	r0, [sp, #20]
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f000 fcbb 	bl	800a630 <__mdiff>
 8009cba:	68c2      	ldr	r2, [r0, #12]
 8009cbc:	4605      	mov	r5, r0
 8009cbe:	bb02      	cbnz	r2, 8009d02 <_dtoa_r+0xa7a>
 8009cc0:	4601      	mov	r1, r0
 8009cc2:	4650      	mov	r0, sl
 8009cc4:	f000 fc98 	bl	800a5f8 <__mcmp>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	4629      	mov	r1, r5
 8009ccc:	4620      	mov	r0, r4
 8009cce:	9209      	str	r2, [sp, #36]	; 0x24
 8009cd0:	f000 fa0c 	bl	800a0ec <_Bfree>
 8009cd4:	9b07      	ldr	r3, [sp, #28]
 8009cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cd8:	9d04      	ldr	r5, [sp, #16]
 8009cda:	ea43 0102 	orr.w	r1, r3, r2
 8009cde:	9b06      	ldr	r3, [sp, #24]
 8009ce0:	4319      	orrs	r1, r3
 8009ce2:	d110      	bne.n	8009d06 <_dtoa_r+0xa7e>
 8009ce4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ce8:	d029      	beq.n	8009d3e <_dtoa_r+0xab6>
 8009cea:	9b05      	ldr	r3, [sp, #20]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	dd02      	ble.n	8009cf6 <_dtoa_r+0xa6e>
 8009cf0:	9b02      	ldr	r3, [sp, #8]
 8009cf2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009cf6:	9b01      	ldr	r3, [sp, #4]
 8009cf8:	f883 9000 	strb.w	r9, [r3]
 8009cfc:	e774      	b.n	8009be8 <_dtoa_r+0x960>
 8009cfe:	4638      	mov	r0, r7
 8009d00:	e7ba      	b.n	8009c78 <_dtoa_r+0x9f0>
 8009d02:	2201      	movs	r2, #1
 8009d04:	e7e1      	b.n	8009cca <_dtoa_r+0xa42>
 8009d06:	9b05      	ldr	r3, [sp, #20]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	db04      	blt.n	8009d16 <_dtoa_r+0xa8e>
 8009d0c:	9907      	ldr	r1, [sp, #28]
 8009d0e:	430b      	orrs	r3, r1
 8009d10:	9906      	ldr	r1, [sp, #24]
 8009d12:	430b      	orrs	r3, r1
 8009d14:	d120      	bne.n	8009d58 <_dtoa_r+0xad0>
 8009d16:	2a00      	cmp	r2, #0
 8009d18:	dded      	ble.n	8009cf6 <_dtoa_r+0xa6e>
 8009d1a:	4651      	mov	r1, sl
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f000 fbfe 	bl	800a520 <__lshift>
 8009d24:	4631      	mov	r1, r6
 8009d26:	4682      	mov	sl, r0
 8009d28:	f000 fc66 	bl	800a5f8 <__mcmp>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	dc03      	bgt.n	8009d38 <_dtoa_r+0xab0>
 8009d30:	d1e1      	bne.n	8009cf6 <_dtoa_r+0xa6e>
 8009d32:	f019 0f01 	tst.w	r9, #1
 8009d36:	d0de      	beq.n	8009cf6 <_dtoa_r+0xa6e>
 8009d38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009d3c:	d1d8      	bne.n	8009cf0 <_dtoa_r+0xa68>
 8009d3e:	9a01      	ldr	r2, [sp, #4]
 8009d40:	2339      	movs	r3, #57	; 0x39
 8009d42:	7013      	strb	r3, [r2, #0]
 8009d44:	462b      	mov	r3, r5
 8009d46:	461d      	mov	r5, r3
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009d4e:	2a39      	cmp	r2, #57	; 0x39
 8009d50:	d06c      	beq.n	8009e2c <_dtoa_r+0xba4>
 8009d52:	3201      	adds	r2, #1
 8009d54:	701a      	strb	r2, [r3, #0]
 8009d56:	e747      	b.n	8009be8 <_dtoa_r+0x960>
 8009d58:	2a00      	cmp	r2, #0
 8009d5a:	dd07      	ble.n	8009d6c <_dtoa_r+0xae4>
 8009d5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009d60:	d0ed      	beq.n	8009d3e <_dtoa_r+0xab6>
 8009d62:	9a01      	ldr	r2, [sp, #4]
 8009d64:	f109 0301 	add.w	r3, r9, #1
 8009d68:	7013      	strb	r3, [r2, #0]
 8009d6a:	e73d      	b.n	8009be8 <_dtoa_r+0x960>
 8009d6c:	9b04      	ldr	r3, [sp, #16]
 8009d6e:	9a08      	ldr	r2, [sp, #32]
 8009d70:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d043      	beq.n	8009e00 <_dtoa_r+0xb78>
 8009d78:	4651      	mov	r1, sl
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	220a      	movs	r2, #10
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f000 f9d6 	bl	800a130 <__multadd>
 8009d84:	45b8      	cmp	r8, r7
 8009d86:	4682      	mov	sl, r0
 8009d88:	f04f 0300 	mov.w	r3, #0
 8009d8c:	f04f 020a 	mov.w	r2, #10
 8009d90:	4641      	mov	r1, r8
 8009d92:	4620      	mov	r0, r4
 8009d94:	d107      	bne.n	8009da6 <_dtoa_r+0xb1e>
 8009d96:	f000 f9cb 	bl	800a130 <__multadd>
 8009d9a:	4680      	mov	r8, r0
 8009d9c:	4607      	mov	r7, r0
 8009d9e:	9b04      	ldr	r3, [sp, #16]
 8009da0:	3301      	adds	r3, #1
 8009da2:	9304      	str	r3, [sp, #16]
 8009da4:	e775      	b.n	8009c92 <_dtoa_r+0xa0a>
 8009da6:	f000 f9c3 	bl	800a130 <__multadd>
 8009daa:	4639      	mov	r1, r7
 8009dac:	4680      	mov	r8, r0
 8009dae:	2300      	movs	r3, #0
 8009db0:	220a      	movs	r2, #10
 8009db2:	4620      	mov	r0, r4
 8009db4:	f000 f9bc 	bl	800a130 <__multadd>
 8009db8:	4607      	mov	r7, r0
 8009dba:	e7f0      	b.n	8009d9e <_dtoa_r+0xb16>
 8009dbc:	9b04      	ldr	r3, [sp, #16]
 8009dbe:	9301      	str	r3, [sp, #4]
 8009dc0:	9d00      	ldr	r5, [sp, #0]
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	f7ff f9d7 	bl	8009178 <quorem>
 8009dca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009dce:	9b00      	ldr	r3, [sp, #0]
 8009dd0:	f805 9b01 	strb.w	r9, [r5], #1
 8009dd4:	1aea      	subs	r2, r5, r3
 8009dd6:	9b01      	ldr	r3, [sp, #4]
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	dd07      	ble.n	8009dec <_dtoa_r+0xb64>
 8009ddc:	4651      	mov	r1, sl
 8009dde:	2300      	movs	r3, #0
 8009de0:	220a      	movs	r2, #10
 8009de2:	4620      	mov	r0, r4
 8009de4:	f000 f9a4 	bl	800a130 <__multadd>
 8009de8:	4682      	mov	sl, r0
 8009dea:	e7ea      	b.n	8009dc2 <_dtoa_r+0xb3a>
 8009dec:	9b01      	ldr	r3, [sp, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	bfc8      	it	gt
 8009df2:	461d      	movgt	r5, r3
 8009df4:	9b00      	ldr	r3, [sp, #0]
 8009df6:	bfd8      	it	le
 8009df8:	2501      	movle	r5, #1
 8009dfa:	441d      	add	r5, r3
 8009dfc:	f04f 0800 	mov.w	r8, #0
 8009e00:	4651      	mov	r1, sl
 8009e02:	2201      	movs	r2, #1
 8009e04:	4620      	mov	r0, r4
 8009e06:	f000 fb8b 	bl	800a520 <__lshift>
 8009e0a:	4631      	mov	r1, r6
 8009e0c:	4682      	mov	sl, r0
 8009e0e:	f000 fbf3 	bl	800a5f8 <__mcmp>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	dc96      	bgt.n	8009d44 <_dtoa_r+0xabc>
 8009e16:	d102      	bne.n	8009e1e <_dtoa_r+0xb96>
 8009e18:	f019 0f01 	tst.w	r9, #1
 8009e1c:	d192      	bne.n	8009d44 <_dtoa_r+0xabc>
 8009e1e:	462b      	mov	r3, r5
 8009e20:	461d      	mov	r5, r3
 8009e22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e26:	2a30      	cmp	r2, #48	; 0x30
 8009e28:	d0fa      	beq.n	8009e20 <_dtoa_r+0xb98>
 8009e2a:	e6dd      	b.n	8009be8 <_dtoa_r+0x960>
 8009e2c:	9a00      	ldr	r2, [sp, #0]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d189      	bne.n	8009d46 <_dtoa_r+0xabe>
 8009e32:	f10b 0b01 	add.w	fp, fp, #1
 8009e36:	2331      	movs	r3, #49	; 0x31
 8009e38:	e796      	b.n	8009d68 <_dtoa_r+0xae0>
 8009e3a:	4b0a      	ldr	r3, [pc, #40]	; (8009e64 <_dtoa_r+0xbdc>)
 8009e3c:	f7ff ba99 	b.w	8009372 <_dtoa_r+0xea>
 8009e40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f47f aa6d 	bne.w	8009322 <_dtoa_r+0x9a>
 8009e48:	4b07      	ldr	r3, [pc, #28]	; (8009e68 <_dtoa_r+0xbe0>)
 8009e4a:	f7ff ba92 	b.w	8009372 <_dtoa_r+0xea>
 8009e4e:	9b01      	ldr	r3, [sp, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	dcb5      	bgt.n	8009dc0 <_dtoa_r+0xb38>
 8009e54:	9b07      	ldr	r3, [sp, #28]
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	f73f aeb1 	bgt.w	8009bbe <_dtoa_r+0x936>
 8009e5c:	e7b0      	b.n	8009dc0 <_dtoa_r+0xb38>
 8009e5e:	bf00      	nop
 8009e60:	0800c9c9 	.word	0x0800c9c9
 8009e64:	0800c924 	.word	0x0800c924
 8009e68:	0800c94d 	.word	0x0800c94d

08009e6c <_free_r>:
 8009e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e6e:	2900      	cmp	r1, #0
 8009e70:	d044      	beq.n	8009efc <_free_r+0x90>
 8009e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e76:	9001      	str	r0, [sp, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f1a1 0404 	sub.w	r4, r1, #4
 8009e7e:	bfb8      	it	lt
 8009e80:	18e4      	addlt	r4, r4, r3
 8009e82:	f000 f8e7 	bl	800a054 <__malloc_lock>
 8009e86:	4a1e      	ldr	r2, [pc, #120]	; (8009f00 <_free_r+0x94>)
 8009e88:	9801      	ldr	r0, [sp, #4]
 8009e8a:	6813      	ldr	r3, [r2, #0]
 8009e8c:	b933      	cbnz	r3, 8009e9c <_free_r+0x30>
 8009e8e:	6063      	str	r3, [r4, #4]
 8009e90:	6014      	str	r4, [r2, #0]
 8009e92:	b003      	add	sp, #12
 8009e94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e98:	f000 b8e2 	b.w	800a060 <__malloc_unlock>
 8009e9c:	42a3      	cmp	r3, r4
 8009e9e:	d908      	bls.n	8009eb2 <_free_r+0x46>
 8009ea0:	6825      	ldr	r5, [r4, #0]
 8009ea2:	1961      	adds	r1, r4, r5
 8009ea4:	428b      	cmp	r3, r1
 8009ea6:	bf01      	itttt	eq
 8009ea8:	6819      	ldreq	r1, [r3, #0]
 8009eaa:	685b      	ldreq	r3, [r3, #4]
 8009eac:	1949      	addeq	r1, r1, r5
 8009eae:	6021      	streq	r1, [r4, #0]
 8009eb0:	e7ed      	b.n	8009e8e <_free_r+0x22>
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	b10b      	cbz	r3, 8009ebc <_free_r+0x50>
 8009eb8:	42a3      	cmp	r3, r4
 8009eba:	d9fa      	bls.n	8009eb2 <_free_r+0x46>
 8009ebc:	6811      	ldr	r1, [r2, #0]
 8009ebe:	1855      	adds	r5, r2, r1
 8009ec0:	42a5      	cmp	r5, r4
 8009ec2:	d10b      	bne.n	8009edc <_free_r+0x70>
 8009ec4:	6824      	ldr	r4, [r4, #0]
 8009ec6:	4421      	add	r1, r4
 8009ec8:	1854      	adds	r4, r2, r1
 8009eca:	42a3      	cmp	r3, r4
 8009ecc:	6011      	str	r1, [r2, #0]
 8009ece:	d1e0      	bne.n	8009e92 <_free_r+0x26>
 8009ed0:	681c      	ldr	r4, [r3, #0]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	6053      	str	r3, [r2, #4]
 8009ed6:	440c      	add	r4, r1
 8009ed8:	6014      	str	r4, [r2, #0]
 8009eda:	e7da      	b.n	8009e92 <_free_r+0x26>
 8009edc:	d902      	bls.n	8009ee4 <_free_r+0x78>
 8009ede:	230c      	movs	r3, #12
 8009ee0:	6003      	str	r3, [r0, #0]
 8009ee2:	e7d6      	b.n	8009e92 <_free_r+0x26>
 8009ee4:	6825      	ldr	r5, [r4, #0]
 8009ee6:	1961      	adds	r1, r4, r5
 8009ee8:	428b      	cmp	r3, r1
 8009eea:	bf04      	itt	eq
 8009eec:	6819      	ldreq	r1, [r3, #0]
 8009eee:	685b      	ldreq	r3, [r3, #4]
 8009ef0:	6063      	str	r3, [r4, #4]
 8009ef2:	bf04      	itt	eq
 8009ef4:	1949      	addeq	r1, r1, r5
 8009ef6:	6021      	streq	r1, [r4, #0]
 8009ef8:	6054      	str	r4, [r2, #4]
 8009efa:	e7ca      	b.n	8009e92 <_free_r+0x26>
 8009efc:	b003      	add	sp, #12
 8009efe:	bd30      	pop	{r4, r5, pc}
 8009f00:	200022c4 	.word	0x200022c4

08009f04 <malloc>:
 8009f04:	4b02      	ldr	r3, [pc, #8]	; (8009f10 <malloc+0xc>)
 8009f06:	4601      	mov	r1, r0
 8009f08:	6818      	ldr	r0, [r3, #0]
 8009f0a:	f000 b823 	b.w	8009f54 <_malloc_r>
 8009f0e:	bf00      	nop
 8009f10:	20000154 	.word	0x20000154

08009f14 <sbrk_aligned>:
 8009f14:	b570      	push	{r4, r5, r6, lr}
 8009f16:	4e0e      	ldr	r6, [pc, #56]	; (8009f50 <sbrk_aligned+0x3c>)
 8009f18:	460c      	mov	r4, r1
 8009f1a:	6831      	ldr	r1, [r6, #0]
 8009f1c:	4605      	mov	r5, r0
 8009f1e:	b911      	cbnz	r1, 8009f26 <sbrk_aligned+0x12>
 8009f20:	f002 f816 	bl	800bf50 <_sbrk_r>
 8009f24:	6030      	str	r0, [r6, #0]
 8009f26:	4621      	mov	r1, r4
 8009f28:	4628      	mov	r0, r5
 8009f2a:	f002 f811 	bl	800bf50 <_sbrk_r>
 8009f2e:	1c43      	adds	r3, r0, #1
 8009f30:	d00a      	beq.n	8009f48 <sbrk_aligned+0x34>
 8009f32:	1cc4      	adds	r4, r0, #3
 8009f34:	f024 0403 	bic.w	r4, r4, #3
 8009f38:	42a0      	cmp	r0, r4
 8009f3a:	d007      	beq.n	8009f4c <sbrk_aligned+0x38>
 8009f3c:	1a21      	subs	r1, r4, r0
 8009f3e:	4628      	mov	r0, r5
 8009f40:	f002 f806 	bl	800bf50 <_sbrk_r>
 8009f44:	3001      	adds	r0, #1
 8009f46:	d101      	bne.n	8009f4c <sbrk_aligned+0x38>
 8009f48:	f04f 34ff 	mov.w	r4, #4294967295
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	bd70      	pop	{r4, r5, r6, pc}
 8009f50:	200022c8 	.word	0x200022c8

08009f54 <_malloc_r>:
 8009f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f58:	1ccd      	adds	r5, r1, #3
 8009f5a:	f025 0503 	bic.w	r5, r5, #3
 8009f5e:	3508      	adds	r5, #8
 8009f60:	2d0c      	cmp	r5, #12
 8009f62:	bf38      	it	cc
 8009f64:	250c      	movcc	r5, #12
 8009f66:	2d00      	cmp	r5, #0
 8009f68:	4607      	mov	r7, r0
 8009f6a:	db01      	blt.n	8009f70 <_malloc_r+0x1c>
 8009f6c:	42a9      	cmp	r1, r5
 8009f6e:	d905      	bls.n	8009f7c <_malloc_r+0x28>
 8009f70:	230c      	movs	r3, #12
 8009f72:	603b      	str	r3, [r7, #0]
 8009f74:	2600      	movs	r6, #0
 8009f76:	4630      	mov	r0, r6
 8009f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a050 <_malloc_r+0xfc>
 8009f80:	f000 f868 	bl	800a054 <__malloc_lock>
 8009f84:	f8d8 3000 	ldr.w	r3, [r8]
 8009f88:	461c      	mov	r4, r3
 8009f8a:	bb5c      	cbnz	r4, 8009fe4 <_malloc_r+0x90>
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	4638      	mov	r0, r7
 8009f90:	f7ff ffc0 	bl	8009f14 <sbrk_aligned>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	4604      	mov	r4, r0
 8009f98:	d155      	bne.n	800a046 <_malloc_r+0xf2>
 8009f9a:	f8d8 4000 	ldr.w	r4, [r8]
 8009f9e:	4626      	mov	r6, r4
 8009fa0:	2e00      	cmp	r6, #0
 8009fa2:	d145      	bne.n	800a030 <_malloc_r+0xdc>
 8009fa4:	2c00      	cmp	r4, #0
 8009fa6:	d048      	beq.n	800a03a <_malloc_r+0xe6>
 8009fa8:	6823      	ldr	r3, [r4, #0]
 8009faa:	4631      	mov	r1, r6
 8009fac:	4638      	mov	r0, r7
 8009fae:	eb04 0903 	add.w	r9, r4, r3
 8009fb2:	f001 ffcd 	bl	800bf50 <_sbrk_r>
 8009fb6:	4581      	cmp	r9, r0
 8009fb8:	d13f      	bne.n	800a03a <_malloc_r+0xe6>
 8009fba:	6821      	ldr	r1, [r4, #0]
 8009fbc:	1a6d      	subs	r5, r5, r1
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	f7ff ffa7 	bl	8009f14 <sbrk_aligned>
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	d037      	beq.n	800a03a <_malloc_r+0xe6>
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	442b      	add	r3, r5
 8009fce:	6023      	str	r3, [r4, #0]
 8009fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d038      	beq.n	800a04a <_malloc_r+0xf6>
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	42a2      	cmp	r2, r4
 8009fdc:	d12b      	bne.n	800a036 <_malloc_r+0xe2>
 8009fde:	2200      	movs	r2, #0
 8009fe0:	605a      	str	r2, [r3, #4]
 8009fe2:	e00f      	b.n	800a004 <_malloc_r+0xb0>
 8009fe4:	6822      	ldr	r2, [r4, #0]
 8009fe6:	1b52      	subs	r2, r2, r5
 8009fe8:	d41f      	bmi.n	800a02a <_malloc_r+0xd6>
 8009fea:	2a0b      	cmp	r2, #11
 8009fec:	d917      	bls.n	800a01e <_malloc_r+0xca>
 8009fee:	1961      	adds	r1, r4, r5
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	6025      	str	r5, [r4, #0]
 8009ff4:	bf18      	it	ne
 8009ff6:	6059      	strne	r1, [r3, #4]
 8009ff8:	6863      	ldr	r3, [r4, #4]
 8009ffa:	bf08      	it	eq
 8009ffc:	f8c8 1000 	streq.w	r1, [r8]
 800a000:	5162      	str	r2, [r4, r5]
 800a002:	604b      	str	r3, [r1, #4]
 800a004:	4638      	mov	r0, r7
 800a006:	f104 060b 	add.w	r6, r4, #11
 800a00a:	f000 f829 	bl	800a060 <__malloc_unlock>
 800a00e:	f026 0607 	bic.w	r6, r6, #7
 800a012:	1d23      	adds	r3, r4, #4
 800a014:	1af2      	subs	r2, r6, r3
 800a016:	d0ae      	beq.n	8009f76 <_malloc_r+0x22>
 800a018:	1b9b      	subs	r3, r3, r6
 800a01a:	50a3      	str	r3, [r4, r2]
 800a01c:	e7ab      	b.n	8009f76 <_malloc_r+0x22>
 800a01e:	42a3      	cmp	r3, r4
 800a020:	6862      	ldr	r2, [r4, #4]
 800a022:	d1dd      	bne.n	8009fe0 <_malloc_r+0x8c>
 800a024:	f8c8 2000 	str.w	r2, [r8]
 800a028:	e7ec      	b.n	800a004 <_malloc_r+0xb0>
 800a02a:	4623      	mov	r3, r4
 800a02c:	6864      	ldr	r4, [r4, #4]
 800a02e:	e7ac      	b.n	8009f8a <_malloc_r+0x36>
 800a030:	4634      	mov	r4, r6
 800a032:	6876      	ldr	r6, [r6, #4]
 800a034:	e7b4      	b.n	8009fa0 <_malloc_r+0x4c>
 800a036:	4613      	mov	r3, r2
 800a038:	e7cc      	b.n	8009fd4 <_malloc_r+0x80>
 800a03a:	230c      	movs	r3, #12
 800a03c:	603b      	str	r3, [r7, #0]
 800a03e:	4638      	mov	r0, r7
 800a040:	f000 f80e 	bl	800a060 <__malloc_unlock>
 800a044:	e797      	b.n	8009f76 <_malloc_r+0x22>
 800a046:	6025      	str	r5, [r4, #0]
 800a048:	e7dc      	b.n	800a004 <_malloc_r+0xb0>
 800a04a:	605b      	str	r3, [r3, #4]
 800a04c:	deff      	udf	#255	; 0xff
 800a04e:	bf00      	nop
 800a050:	200022c4 	.word	0x200022c4

0800a054 <__malloc_lock>:
 800a054:	4801      	ldr	r0, [pc, #4]	; (800a05c <__malloc_lock+0x8>)
 800a056:	f7ff b879 	b.w	800914c <__retarget_lock_acquire_recursive>
 800a05a:	bf00      	nop
 800a05c:	200022c0 	.word	0x200022c0

0800a060 <__malloc_unlock>:
 800a060:	4801      	ldr	r0, [pc, #4]	; (800a068 <__malloc_unlock+0x8>)
 800a062:	f7ff b874 	b.w	800914e <__retarget_lock_release_recursive>
 800a066:	bf00      	nop
 800a068:	200022c0 	.word	0x200022c0

0800a06c <_Balloc>:
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	69c6      	ldr	r6, [r0, #28]
 800a070:	4604      	mov	r4, r0
 800a072:	460d      	mov	r5, r1
 800a074:	b976      	cbnz	r6, 800a094 <_Balloc+0x28>
 800a076:	2010      	movs	r0, #16
 800a078:	f7ff ff44 	bl	8009f04 <malloc>
 800a07c:	4602      	mov	r2, r0
 800a07e:	61e0      	str	r0, [r4, #28]
 800a080:	b920      	cbnz	r0, 800a08c <_Balloc+0x20>
 800a082:	4b18      	ldr	r3, [pc, #96]	; (800a0e4 <_Balloc+0x78>)
 800a084:	4818      	ldr	r0, [pc, #96]	; (800a0e8 <_Balloc+0x7c>)
 800a086:	216b      	movs	r1, #107	; 0x6b
 800a088:	f001 ff7a 	bl	800bf80 <__assert_func>
 800a08c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a090:	6006      	str	r6, [r0, #0]
 800a092:	60c6      	str	r6, [r0, #12]
 800a094:	69e6      	ldr	r6, [r4, #28]
 800a096:	68f3      	ldr	r3, [r6, #12]
 800a098:	b183      	cbz	r3, 800a0bc <_Balloc+0x50>
 800a09a:	69e3      	ldr	r3, [r4, #28]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0a2:	b9b8      	cbnz	r0, 800a0d4 <_Balloc+0x68>
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	fa01 f605 	lsl.w	r6, r1, r5
 800a0aa:	1d72      	adds	r2, r6, #5
 800a0ac:	0092      	lsls	r2, r2, #2
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f001 ff84 	bl	800bfbc <_calloc_r>
 800a0b4:	b160      	cbz	r0, 800a0d0 <_Balloc+0x64>
 800a0b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0ba:	e00e      	b.n	800a0da <_Balloc+0x6e>
 800a0bc:	2221      	movs	r2, #33	; 0x21
 800a0be:	2104      	movs	r1, #4
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f001 ff7b 	bl	800bfbc <_calloc_r>
 800a0c6:	69e3      	ldr	r3, [r4, #28]
 800a0c8:	60f0      	str	r0, [r6, #12]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1e4      	bne.n	800a09a <_Balloc+0x2e>
 800a0d0:	2000      	movs	r0, #0
 800a0d2:	bd70      	pop	{r4, r5, r6, pc}
 800a0d4:	6802      	ldr	r2, [r0, #0]
 800a0d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0da:	2300      	movs	r3, #0
 800a0dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0e0:	e7f7      	b.n	800a0d2 <_Balloc+0x66>
 800a0e2:	bf00      	nop
 800a0e4:	0800c95a 	.word	0x0800c95a
 800a0e8:	0800c9da 	.word	0x0800c9da

0800a0ec <_Bfree>:
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	69c6      	ldr	r6, [r0, #28]
 800a0f0:	4605      	mov	r5, r0
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	b976      	cbnz	r6, 800a114 <_Bfree+0x28>
 800a0f6:	2010      	movs	r0, #16
 800a0f8:	f7ff ff04 	bl	8009f04 <malloc>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	61e8      	str	r0, [r5, #28]
 800a100:	b920      	cbnz	r0, 800a10c <_Bfree+0x20>
 800a102:	4b09      	ldr	r3, [pc, #36]	; (800a128 <_Bfree+0x3c>)
 800a104:	4809      	ldr	r0, [pc, #36]	; (800a12c <_Bfree+0x40>)
 800a106:	218f      	movs	r1, #143	; 0x8f
 800a108:	f001 ff3a 	bl	800bf80 <__assert_func>
 800a10c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a110:	6006      	str	r6, [r0, #0]
 800a112:	60c6      	str	r6, [r0, #12]
 800a114:	b13c      	cbz	r4, 800a126 <_Bfree+0x3a>
 800a116:	69eb      	ldr	r3, [r5, #28]
 800a118:	6862      	ldr	r2, [r4, #4]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a120:	6021      	str	r1, [r4, #0]
 800a122:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a126:	bd70      	pop	{r4, r5, r6, pc}
 800a128:	0800c95a 	.word	0x0800c95a
 800a12c:	0800c9da 	.word	0x0800c9da

0800a130 <__multadd>:
 800a130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a134:	690d      	ldr	r5, [r1, #16]
 800a136:	4607      	mov	r7, r0
 800a138:	460c      	mov	r4, r1
 800a13a:	461e      	mov	r6, r3
 800a13c:	f101 0c14 	add.w	ip, r1, #20
 800a140:	2000      	movs	r0, #0
 800a142:	f8dc 3000 	ldr.w	r3, [ip]
 800a146:	b299      	uxth	r1, r3
 800a148:	fb02 6101 	mla	r1, r2, r1, r6
 800a14c:	0c1e      	lsrs	r6, r3, #16
 800a14e:	0c0b      	lsrs	r3, r1, #16
 800a150:	fb02 3306 	mla	r3, r2, r6, r3
 800a154:	b289      	uxth	r1, r1
 800a156:	3001      	adds	r0, #1
 800a158:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a15c:	4285      	cmp	r5, r0
 800a15e:	f84c 1b04 	str.w	r1, [ip], #4
 800a162:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a166:	dcec      	bgt.n	800a142 <__multadd+0x12>
 800a168:	b30e      	cbz	r6, 800a1ae <__multadd+0x7e>
 800a16a:	68a3      	ldr	r3, [r4, #8]
 800a16c:	42ab      	cmp	r3, r5
 800a16e:	dc19      	bgt.n	800a1a4 <__multadd+0x74>
 800a170:	6861      	ldr	r1, [r4, #4]
 800a172:	4638      	mov	r0, r7
 800a174:	3101      	adds	r1, #1
 800a176:	f7ff ff79 	bl	800a06c <_Balloc>
 800a17a:	4680      	mov	r8, r0
 800a17c:	b928      	cbnz	r0, 800a18a <__multadd+0x5a>
 800a17e:	4602      	mov	r2, r0
 800a180:	4b0c      	ldr	r3, [pc, #48]	; (800a1b4 <__multadd+0x84>)
 800a182:	480d      	ldr	r0, [pc, #52]	; (800a1b8 <__multadd+0x88>)
 800a184:	21ba      	movs	r1, #186	; 0xba
 800a186:	f001 fefb 	bl	800bf80 <__assert_func>
 800a18a:	6922      	ldr	r2, [r4, #16]
 800a18c:	3202      	adds	r2, #2
 800a18e:	f104 010c 	add.w	r1, r4, #12
 800a192:	0092      	lsls	r2, r2, #2
 800a194:	300c      	adds	r0, #12
 800a196:	f7fe ffdb 	bl	8009150 <memcpy>
 800a19a:	4621      	mov	r1, r4
 800a19c:	4638      	mov	r0, r7
 800a19e:	f7ff ffa5 	bl	800a0ec <_Bfree>
 800a1a2:	4644      	mov	r4, r8
 800a1a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1a8:	3501      	adds	r5, #1
 800a1aa:	615e      	str	r6, [r3, #20]
 800a1ac:	6125      	str	r5, [r4, #16]
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1b4:	0800c9c9 	.word	0x0800c9c9
 800a1b8:	0800c9da 	.word	0x0800c9da

0800a1bc <__s2b>:
 800a1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	4615      	mov	r5, r2
 800a1c4:	461f      	mov	r7, r3
 800a1c6:	2209      	movs	r2, #9
 800a1c8:	3308      	adds	r3, #8
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	db09      	blt.n	800a1ec <__s2b+0x30>
 800a1d8:	4630      	mov	r0, r6
 800a1da:	f7ff ff47 	bl	800a06c <_Balloc>
 800a1de:	b940      	cbnz	r0, 800a1f2 <__s2b+0x36>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	4b19      	ldr	r3, [pc, #100]	; (800a248 <__s2b+0x8c>)
 800a1e4:	4819      	ldr	r0, [pc, #100]	; (800a24c <__s2b+0x90>)
 800a1e6:	21d3      	movs	r1, #211	; 0xd3
 800a1e8:	f001 feca 	bl	800bf80 <__assert_func>
 800a1ec:	0052      	lsls	r2, r2, #1
 800a1ee:	3101      	adds	r1, #1
 800a1f0:	e7f0      	b.n	800a1d4 <__s2b+0x18>
 800a1f2:	9b08      	ldr	r3, [sp, #32]
 800a1f4:	6143      	str	r3, [r0, #20]
 800a1f6:	2d09      	cmp	r5, #9
 800a1f8:	f04f 0301 	mov.w	r3, #1
 800a1fc:	6103      	str	r3, [r0, #16]
 800a1fe:	dd16      	ble.n	800a22e <__s2b+0x72>
 800a200:	f104 0909 	add.w	r9, r4, #9
 800a204:	46c8      	mov	r8, r9
 800a206:	442c      	add	r4, r5
 800a208:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a20c:	4601      	mov	r1, r0
 800a20e:	3b30      	subs	r3, #48	; 0x30
 800a210:	220a      	movs	r2, #10
 800a212:	4630      	mov	r0, r6
 800a214:	f7ff ff8c 	bl	800a130 <__multadd>
 800a218:	45a0      	cmp	r8, r4
 800a21a:	d1f5      	bne.n	800a208 <__s2b+0x4c>
 800a21c:	f1a5 0408 	sub.w	r4, r5, #8
 800a220:	444c      	add	r4, r9
 800a222:	1b2d      	subs	r5, r5, r4
 800a224:	1963      	adds	r3, r4, r5
 800a226:	42bb      	cmp	r3, r7
 800a228:	db04      	blt.n	800a234 <__s2b+0x78>
 800a22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a22e:	340a      	adds	r4, #10
 800a230:	2509      	movs	r5, #9
 800a232:	e7f6      	b.n	800a222 <__s2b+0x66>
 800a234:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a238:	4601      	mov	r1, r0
 800a23a:	3b30      	subs	r3, #48	; 0x30
 800a23c:	220a      	movs	r2, #10
 800a23e:	4630      	mov	r0, r6
 800a240:	f7ff ff76 	bl	800a130 <__multadd>
 800a244:	e7ee      	b.n	800a224 <__s2b+0x68>
 800a246:	bf00      	nop
 800a248:	0800c9c9 	.word	0x0800c9c9
 800a24c:	0800c9da 	.word	0x0800c9da

0800a250 <__hi0bits>:
 800a250:	0c03      	lsrs	r3, r0, #16
 800a252:	041b      	lsls	r3, r3, #16
 800a254:	b9d3      	cbnz	r3, 800a28c <__hi0bits+0x3c>
 800a256:	0400      	lsls	r0, r0, #16
 800a258:	2310      	movs	r3, #16
 800a25a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a25e:	bf04      	itt	eq
 800a260:	0200      	lsleq	r0, r0, #8
 800a262:	3308      	addeq	r3, #8
 800a264:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a268:	bf04      	itt	eq
 800a26a:	0100      	lsleq	r0, r0, #4
 800a26c:	3304      	addeq	r3, #4
 800a26e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a272:	bf04      	itt	eq
 800a274:	0080      	lsleq	r0, r0, #2
 800a276:	3302      	addeq	r3, #2
 800a278:	2800      	cmp	r0, #0
 800a27a:	db05      	blt.n	800a288 <__hi0bits+0x38>
 800a27c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a280:	f103 0301 	add.w	r3, r3, #1
 800a284:	bf08      	it	eq
 800a286:	2320      	moveq	r3, #32
 800a288:	4618      	mov	r0, r3
 800a28a:	4770      	bx	lr
 800a28c:	2300      	movs	r3, #0
 800a28e:	e7e4      	b.n	800a25a <__hi0bits+0xa>

0800a290 <__lo0bits>:
 800a290:	6803      	ldr	r3, [r0, #0]
 800a292:	f013 0207 	ands.w	r2, r3, #7
 800a296:	d00c      	beq.n	800a2b2 <__lo0bits+0x22>
 800a298:	07d9      	lsls	r1, r3, #31
 800a29a:	d422      	bmi.n	800a2e2 <__lo0bits+0x52>
 800a29c:	079a      	lsls	r2, r3, #30
 800a29e:	bf49      	itett	mi
 800a2a0:	085b      	lsrmi	r3, r3, #1
 800a2a2:	089b      	lsrpl	r3, r3, #2
 800a2a4:	6003      	strmi	r3, [r0, #0]
 800a2a6:	2201      	movmi	r2, #1
 800a2a8:	bf5c      	itt	pl
 800a2aa:	6003      	strpl	r3, [r0, #0]
 800a2ac:	2202      	movpl	r2, #2
 800a2ae:	4610      	mov	r0, r2
 800a2b0:	4770      	bx	lr
 800a2b2:	b299      	uxth	r1, r3
 800a2b4:	b909      	cbnz	r1, 800a2ba <__lo0bits+0x2a>
 800a2b6:	0c1b      	lsrs	r3, r3, #16
 800a2b8:	2210      	movs	r2, #16
 800a2ba:	b2d9      	uxtb	r1, r3
 800a2bc:	b909      	cbnz	r1, 800a2c2 <__lo0bits+0x32>
 800a2be:	3208      	adds	r2, #8
 800a2c0:	0a1b      	lsrs	r3, r3, #8
 800a2c2:	0719      	lsls	r1, r3, #28
 800a2c4:	bf04      	itt	eq
 800a2c6:	091b      	lsreq	r3, r3, #4
 800a2c8:	3204      	addeq	r2, #4
 800a2ca:	0799      	lsls	r1, r3, #30
 800a2cc:	bf04      	itt	eq
 800a2ce:	089b      	lsreq	r3, r3, #2
 800a2d0:	3202      	addeq	r2, #2
 800a2d2:	07d9      	lsls	r1, r3, #31
 800a2d4:	d403      	bmi.n	800a2de <__lo0bits+0x4e>
 800a2d6:	085b      	lsrs	r3, r3, #1
 800a2d8:	f102 0201 	add.w	r2, r2, #1
 800a2dc:	d003      	beq.n	800a2e6 <__lo0bits+0x56>
 800a2de:	6003      	str	r3, [r0, #0]
 800a2e0:	e7e5      	b.n	800a2ae <__lo0bits+0x1e>
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	e7e3      	b.n	800a2ae <__lo0bits+0x1e>
 800a2e6:	2220      	movs	r2, #32
 800a2e8:	e7e1      	b.n	800a2ae <__lo0bits+0x1e>
	...

0800a2ec <__i2b>:
 800a2ec:	b510      	push	{r4, lr}
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	f7ff febb 	bl	800a06c <_Balloc>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	b928      	cbnz	r0, 800a306 <__i2b+0x1a>
 800a2fa:	4b05      	ldr	r3, [pc, #20]	; (800a310 <__i2b+0x24>)
 800a2fc:	4805      	ldr	r0, [pc, #20]	; (800a314 <__i2b+0x28>)
 800a2fe:	f240 1145 	movw	r1, #325	; 0x145
 800a302:	f001 fe3d 	bl	800bf80 <__assert_func>
 800a306:	2301      	movs	r3, #1
 800a308:	6144      	str	r4, [r0, #20]
 800a30a:	6103      	str	r3, [r0, #16]
 800a30c:	bd10      	pop	{r4, pc}
 800a30e:	bf00      	nop
 800a310:	0800c9c9 	.word	0x0800c9c9
 800a314:	0800c9da 	.word	0x0800c9da

0800a318 <__multiply>:
 800a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31c:	4691      	mov	r9, r2
 800a31e:	690a      	ldr	r2, [r1, #16]
 800a320:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a324:	429a      	cmp	r2, r3
 800a326:	bfb8      	it	lt
 800a328:	460b      	movlt	r3, r1
 800a32a:	460c      	mov	r4, r1
 800a32c:	bfbc      	itt	lt
 800a32e:	464c      	movlt	r4, r9
 800a330:	4699      	movlt	r9, r3
 800a332:	6927      	ldr	r7, [r4, #16]
 800a334:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a338:	68a3      	ldr	r3, [r4, #8]
 800a33a:	6861      	ldr	r1, [r4, #4]
 800a33c:	eb07 060a 	add.w	r6, r7, sl
 800a340:	42b3      	cmp	r3, r6
 800a342:	b085      	sub	sp, #20
 800a344:	bfb8      	it	lt
 800a346:	3101      	addlt	r1, #1
 800a348:	f7ff fe90 	bl	800a06c <_Balloc>
 800a34c:	b930      	cbnz	r0, 800a35c <__multiply+0x44>
 800a34e:	4602      	mov	r2, r0
 800a350:	4b44      	ldr	r3, [pc, #272]	; (800a464 <__multiply+0x14c>)
 800a352:	4845      	ldr	r0, [pc, #276]	; (800a468 <__multiply+0x150>)
 800a354:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a358:	f001 fe12 	bl	800bf80 <__assert_func>
 800a35c:	f100 0514 	add.w	r5, r0, #20
 800a360:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a364:	462b      	mov	r3, r5
 800a366:	2200      	movs	r2, #0
 800a368:	4543      	cmp	r3, r8
 800a36a:	d321      	bcc.n	800a3b0 <__multiply+0x98>
 800a36c:	f104 0314 	add.w	r3, r4, #20
 800a370:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a374:	f109 0314 	add.w	r3, r9, #20
 800a378:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a37c:	9202      	str	r2, [sp, #8]
 800a37e:	1b3a      	subs	r2, r7, r4
 800a380:	3a15      	subs	r2, #21
 800a382:	f022 0203 	bic.w	r2, r2, #3
 800a386:	3204      	adds	r2, #4
 800a388:	f104 0115 	add.w	r1, r4, #21
 800a38c:	428f      	cmp	r7, r1
 800a38e:	bf38      	it	cc
 800a390:	2204      	movcc	r2, #4
 800a392:	9201      	str	r2, [sp, #4]
 800a394:	9a02      	ldr	r2, [sp, #8]
 800a396:	9303      	str	r3, [sp, #12]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d80c      	bhi.n	800a3b6 <__multiply+0x9e>
 800a39c:	2e00      	cmp	r6, #0
 800a39e:	dd03      	ble.n	800a3a8 <__multiply+0x90>
 800a3a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d05b      	beq.n	800a460 <__multiply+0x148>
 800a3a8:	6106      	str	r6, [r0, #16]
 800a3aa:	b005      	add	sp, #20
 800a3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b0:	f843 2b04 	str.w	r2, [r3], #4
 800a3b4:	e7d8      	b.n	800a368 <__multiply+0x50>
 800a3b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a3ba:	f1ba 0f00 	cmp.w	sl, #0
 800a3be:	d024      	beq.n	800a40a <__multiply+0xf2>
 800a3c0:	f104 0e14 	add.w	lr, r4, #20
 800a3c4:	46a9      	mov	r9, r5
 800a3c6:	f04f 0c00 	mov.w	ip, #0
 800a3ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a3ce:	f8d9 1000 	ldr.w	r1, [r9]
 800a3d2:	fa1f fb82 	uxth.w	fp, r2
 800a3d6:	b289      	uxth	r1, r1
 800a3d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a3dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a3e0:	f8d9 2000 	ldr.w	r2, [r9]
 800a3e4:	4461      	add	r1, ip
 800a3e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800a3ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3f2:	b289      	uxth	r1, r1
 800a3f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3f8:	4577      	cmp	r7, lr
 800a3fa:	f849 1b04 	str.w	r1, [r9], #4
 800a3fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a402:	d8e2      	bhi.n	800a3ca <__multiply+0xb2>
 800a404:	9a01      	ldr	r2, [sp, #4]
 800a406:	f845 c002 	str.w	ip, [r5, r2]
 800a40a:	9a03      	ldr	r2, [sp, #12]
 800a40c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a410:	3304      	adds	r3, #4
 800a412:	f1b9 0f00 	cmp.w	r9, #0
 800a416:	d021      	beq.n	800a45c <__multiply+0x144>
 800a418:	6829      	ldr	r1, [r5, #0]
 800a41a:	f104 0c14 	add.w	ip, r4, #20
 800a41e:	46ae      	mov	lr, r5
 800a420:	f04f 0a00 	mov.w	sl, #0
 800a424:	f8bc b000 	ldrh.w	fp, [ip]
 800a428:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a42c:	fb09 220b 	mla	r2, r9, fp, r2
 800a430:	4452      	add	r2, sl
 800a432:	b289      	uxth	r1, r1
 800a434:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a438:	f84e 1b04 	str.w	r1, [lr], #4
 800a43c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a440:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a444:	f8be 1000 	ldrh.w	r1, [lr]
 800a448:	fb09 110a 	mla	r1, r9, sl, r1
 800a44c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a450:	4567      	cmp	r7, ip
 800a452:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a456:	d8e5      	bhi.n	800a424 <__multiply+0x10c>
 800a458:	9a01      	ldr	r2, [sp, #4]
 800a45a:	50a9      	str	r1, [r5, r2]
 800a45c:	3504      	adds	r5, #4
 800a45e:	e799      	b.n	800a394 <__multiply+0x7c>
 800a460:	3e01      	subs	r6, #1
 800a462:	e79b      	b.n	800a39c <__multiply+0x84>
 800a464:	0800c9c9 	.word	0x0800c9c9
 800a468:	0800c9da 	.word	0x0800c9da

0800a46c <__pow5mult>:
 800a46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a470:	4615      	mov	r5, r2
 800a472:	f012 0203 	ands.w	r2, r2, #3
 800a476:	4606      	mov	r6, r0
 800a478:	460f      	mov	r7, r1
 800a47a:	d007      	beq.n	800a48c <__pow5mult+0x20>
 800a47c:	4c25      	ldr	r4, [pc, #148]	; (800a514 <__pow5mult+0xa8>)
 800a47e:	3a01      	subs	r2, #1
 800a480:	2300      	movs	r3, #0
 800a482:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a486:	f7ff fe53 	bl	800a130 <__multadd>
 800a48a:	4607      	mov	r7, r0
 800a48c:	10ad      	asrs	r5, r5, #2
 800a48e:	d03d      	beq.n	800a50c <__pow5mult+0xa0>
 800a490:	69f4      	ldr	r4, [r6, #28]
 800a492:	b97c      	cbnz	r4, 800a4b4 <__pow5mult+0x48>
 800a494:	2010      	movs	r0, #16
 800a496:	f7ff fd35 	bl	8009f04 <malloc>
 800a49a:	4602      	mov	r2, r0
 800a49c:	61f0      	str	r0, [r6, #28]
 800a49e:	b928      	cbnz	r0, 800a4ac <__pow5mult+0x40>
 800a4a0:	4b1d      	ldr	r3, [pc, #116]	; (800a518 <__pow5mult+0xac>)
 800a4a2:	481e      	ldr	r0, [pc, #120]	; (800a51c <__pow5mult+0xb0>)
 800a4a4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a4a8:	f001 fd6a 	bl	800bf80 <__assert_func>
 800a4ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4b0:	6004      	str	r4, [r0, #0]
 800a4b2:	60c4      	str	r4, [r0, #12]
 800a4b4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a4b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4bc:	b94c      	cbnz	r4, 800a4d2 <__pow5mult+0x66>
 800a4be:	f240 2171 	movw	r1, #625	; 0x271
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	f7ff ff12 	bl	800a2ec <__i2b>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	6003      	str	r3, [r0, #0]
 800a4d2:	f04f 0900 	mov.w	r9, #0
 800a4d6:	07eb      	lsls	r3, r5, #31
 800a4d8:	d50a      	bpl.n	800a4f0 <__pow5mult+0x84>
 800a4da:	4639      	mov	r1, r7
 800a4dc:	4622      	mov	r2, r4
 800a4de:	4630      	mov	r0, r6
 800a4e0:	f7ff ff1a 	bl	800a318 <__multiply>
 800a4e4:	4639      	mov	r1, r7
 800a4e6:	4680      	mov	r8, r0
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f7ff fdff 	bl	800a0ec <_Bfree>
 800a4ee:	4647      	mov	r7, r8
 800a4f0:	106d      	asrs	r5, r5, #1
 800a4f2:	d00b      	beq.n	800a50c <__pow5mult+0xa0>
 800a4f4:	6820      	ldr	r0, [r4, #0]
 800a4f6:	b938      	cbnz	r0, 800a508 <__pow5mult+0x9c>
 800a4f8:	4622      	mov	r2, r4
 800a4fa:	4621      	mov	r1, r4
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	f7ff ff0b 	bl	800a318 <__multiply>
 800a502:	6020      	str	r0, [r4, #0]
 800a504:	f8c0 9000 	str.w	r9, [r0]
 800a508:	4604      	mov	r4, r0
 800a50a:	e7e4      	b.n	800a4d6 <__pow5mult+0x6a>
 800a50c:	4638      	mov	r0, r7
 800a50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a512:	bf00      	nop
 800a514:	0800cb28 	.word	0x0800cb28
 800a518:	0800c95a 	.word	0x0800c95a
 800a51c:	0800c9da 	.word	0x0800c9da

0800a520 <__lshift>:
 800a520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a524:	460c      	mov	r4, r1
 800a526:	6849      	ldr	r1, [r1, #4]
 800a528:	6923      	ldr	r3, [r4, #16]
 800a52a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a52e:	68a3      	ldr	r3, [r4, #8]
 800a530:	4607      	mov	r7, r0
 800a532:	4691      	mov	r9, r2
 800a534:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a538:	f108 0601 	add.w	r6, r8, #1
 800a53c:	42b3      	cmp	r3, r6
 800a53e:	db0b      	blt.n	800a558 <__lshift+0x38>
 800a540:	4638      	mov	r0, r7
 800a542:	f7ff fd93 	bl	800a06c <_Balloc>
 800a546:	4605      	mov	r5, r0
 800a548:	b948      	cbnz	r0, 800a55e <__lshift+0x3e>
 800a54a:	4602      	mov	r2, r0
 800a54c:	4b28      	ldr	r3, [pc, #160]	; (800a5f0 <__lshift+0xd0>)
 800a54e:	4829      	ldr	r0, [pc, #164]	; (800a5f4 <__lshift+0xd4>)
 800a550:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a554:	f001 fd14 	bl	800bf80 <__assert_func>
 800a558:	3101      	adds	r1, #1
 800a55a:	005b      	lsls	r3, r3, #1
 800a55c:	e7ee      	b.n	800a53c <__lshift+0x1c>
 800a55e:	2300      	movs	r3, #0
 800a560:	f100 0114 	add.w	r1, r0, #20
 800a564:	f100 0210 	add.w	r2, r0, #16
 800a568:	4618      	mov	r0, r3
 800a56a:	4553      	cmp	r3, sl
 800a56c:	db33      	blt.n	800a5d6 <__lshift+0xb6>
 800a56e:	6920      	ldr	r0, [r4, #16]
 800a570:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a574:	f104 0314 	add.w	r3, r4, #20
 800a578:	f019 091f 	ands.w	r9, r9, #31
 800a57c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a580:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a584:	d02b      	beq.n	800a5de <__lshift+0xbe>
 800a586:	f1c9 0e20 	rsb	lr, r9, #32
 800a58a:	468a      	mov	sl, r1
 800a58c:	2200      	movs	r2, #0
 800a58e:	6818      	ldr	r0, [r3, #0]
 800a590:	fa00 f009 	lsl.w	r0, r0, r9
 800a594:	4310      	orrs	r0, r2
 800a596:	f84a 0b04 	str.w	r0, [sl], #4
 800a59a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a59e:	459c      	cmp	ip, r3
 800a5a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5a4:	d8f3      	bhi.n	800a58e <__lshift+0x6e>
 800a5a6:	ebac 0304 	sub.w	r3, ip, r4
 800a5aa:	3b15      	subs	r3, #21
 800a5ac:	f023 0303 	bic.w	r3, r3, #3
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	f104 0015 	add.w	r0, r4, #21
 800a5b6:	4584      	cmp	ip, r0
 800a5b8:	bf38      	it	cc
 800a5ba:	2304      	movcc	r3, #4
 800a5bc:	50ca      	str	r2, [r1, r3]
 800a5be:	b10a      	cbz	r2, 800a5c4 <__lshift+0xa4>
 800a5c0:	f108 0602 	add.w	r6, r8, #2
 800a5c4:	3e01      	subs	r6, #1
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	612e      	str	r6, [r5, #16]
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	f7ff fd8e 	bl	800a0ec <_Bfree>
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5da:	3301      	adds	r3, #1
 800a5dc:	e7c5      	b.n	800a56a <__lshift+0x4a>
 800a5de:	3904      	subs	r1, #4
 800a5e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5e8:	459c      	cmp	ip, r3
 800a5ea:	d8f9      	bhi.n	800a5e0 <__lshift+0xc0>
 800a5ec:	e7ea      	b.n	800a5c4 <__lshift+0xa4>
 800a5ee:	bf00      	nop
 800a5f0:	0800c9c9 	.word	0x0800c9c9
 800a5f4:	0800c9da 	.word	0x0800c9da

0800a5f8 <__mcmp>:
 800a5f8:	b530      	push	{r4, r5, lr}
 800a5fa:	6902      	ldr	r2, [r0, #16]
 800a5fc:	690c      	ldr	r4, [r1, #16]
 800a5fe:	1b12      	subs	r2, r2, r4
 800a600:	d10e      	bne.n	800a620 <__mcmp+0x28>
 800a602:	f100 0314 	add.w	r3, r0, #20
 800a606:	3114      	adds	r1, #20
 800a608:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a60c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a610:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a614:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a618:	42a5      	cmp	r5, r4
 800a61a:	d003      	beq.n	800a624 <__mcmp+0x2c>
 800a61c:	d305      	bcc.n	800a62a <__mcmp+0x32>
 800a61e:	2201      	movs	r2, #1
 800a620:	4610      	mov	r0, r2
 800a622:	bd30      	pop	{r4, r5, pc}
 800a624:	4283      	cmp	r3, r0
 800a626:	d3f3      	bcc.n	800a610 <__mcmp+0x18>
 800a628:	e7fa      	b.n	800a620 <__mcmp+0x28>
 800a62a:	f04f 32ff 	mov.w	r2, #4294967295
 800a62e:	e7f7      	b.n	800a620 <__mcmp+0x28>

0800a630 <__mdiff>:
 800a630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a634:	460c      	mov	r4, r1
 800a636:	4606      	mov	r6, r0
 800a638:	4611      	mov	r1, r2
 800a63a:	4620      	mov	r0, r4
 800a63c:	4690      	mov	r8, r2
 800a63e:	f7ff ffdb 	bl	800a5f8 <__mcmp>
 800a642:	1e05      	subs	r5, r0, #0
 800a644:	d110      	bne.n	800a668 <__mdiff+0x38>
 800a646:	4629      	mov	r1, r5
 800a648:	4630      	mov	r0, r6
 800a64a:	f7ff fd0f 	bl	800a06c <_Balloc>
 800a64e:	b930      	cbnz	r0, 800a65e <__mdiff+0x2e>
 800a650:	4b3a      	ldr	r3, [pc, #232]	; (800a73c <__mdiff+0x10c>)
 800a652:	4602      	mov	r2, r0
 800a654:	f240 2137 	movw	r1, #567	; 0x237
 800a658:	4839      	ldr	r0, [pc, #228]	; (800a740 <__mdiff+0x110>)
 800a65a:	f001 fc91 	bl	800bf80 <__assert_func>
 800a65e:	2301      	movs	r3, #1
 800a660:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a668:	bfa4      	itt	ge
 800a66a:	4643      	movge	r3, r8
 800a66c:	46a0      	movge	r8, r4
 800a66e:	4630      	mov	r0, r6
 800a670:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a674:	bfa6      	itte	ge
 800a676:	461c      	movge	r4, r3
 800a678:	2500      	movge	r5, #0
 800a67a:	2501      	movlt	r5, #1
 800a67c:	f7ff fcf6 	bl	800a06c <_Balloc>
 800a680:	b920      	cbnz	r0, 800a68c <__mdiff+0x5c>
 800a682:	4b2e      	ldr	r3, [pc, #184]	; (800a73c <__mdiff+0x10c>)
 800a684:	4602      	mov	r2, r0
 800a686:	f240 2145 	movw	r1, #581	; 0x245
 800a68a:	e7e5      	b.n	800a658 <__mdiff+0x28>
 800a68c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a690:	6926      	ldr	r6, [r4, #16]
 800a692:	60c5      	str	r5, [r0, #12]
 800a694:	f104 0914 	add.w	r9, r4, #20
 800a698:	f108 0514 	add.w	r5, r8, #20
 800a69c:	f100 0e14 	add.w	lr, r0, #20
 800a6a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a6a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a6a8:	f108 0210 	add.w	r2, r8, #16
 800a6ac:	46f2      	mov	sl, lr
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a6b8:	fa11 f88b 	uxtah	r8, r1, fp
 800a6bc:	b299      	uxth	r1, r3
 800a6be:	0c1b      	lsrs	r3, r3, #16
 800a6c0:	eba8 0801 	sub.w	r8, r8, r1
 800a6c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a6c8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a6cc:	fa1f f888 	uxth.w	r8, r8
 800a6d0:	1419      	asrs	r1, r3, #16
 800a6d2:	454e      	cmp	r6, r9
 800a6d4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6d8:	f84a 3b04 	str.w	r3, [sl], #4
 800a6dc:	d8e8      	bhi.n	800a6b0 <__mdiff+0x80>
 800a6de:	1b33      	subs	r3, r6, r4
 800a6e0:	3b15      	subs	r3, #21
 800a6e2:	f023 0303 	bic.w	r3, r3, #3
 800a6e6:	3304      	adds	r3, #4
 800a6e8:	3415      	adds	r4, #21
 800a6ea:	42a6      	cmp	r6, r4
 800a6ec:	bf38      	it	cc
 800a6ee:	2304      	movcc	r3, #4
 800a6f0:	441d      	add	r5, r3
 800a6f2:	4473      	add	r3, lr
 800a6f4:	469e      	mov	lr, r3
 800a6f6:	462e      	mov	r6, r5
 800a6f8:	4566      	cmp	r6, ip
 800a6fa:	d30e      	bcc.n	800a71a <__mdiff+0xea>
 800a6fc:	f10c 0203 	add.w	r2, ip, #3
 800a700:	1b52      	subs	r2, r2, r5
 800a702:	f022 0203 	bic.w	r2, r2, #3
 800a706:	3d03      	subs	r5, #3
 800a708:	45ac      	cmp	ip, r5
 800a70a:	bf38      	it	cc
 800a70c:	2200      	movcc	r2, #0
 800a70e:	4413      	add	r3, r2
 800a710:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a714:	b17a      	cbz	r2, 800a736 <__mdiff+0x106>
 800a716:	6107      	str	r7, [r0, #16]
 800a718:	e7a4      	b.n	800a664 <__mdiff+0x34>
 800a71a:	f856 8b04 	ldr.w	r8, [r6], #4
 800a71e:	fa11 f288 	uxtah	r2, r1, r8
 800a722:	1414      	asrs	r4, r2, #16
 800a724:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a728:	b292      	uxth	r2, r2
 800a72a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a72e:	f84e 2b04 	str.w	r2, [lr], #4
 800a732:	1421      	asrs	r1, r4, #16
 800a734:	e7e0      	b.n	800a6f8 <__mdiff+0xc8>
 800a736:	3f01      	subs	r7, #1
 800a738:	e7ea      	b.n	800a710 <__mdiff+0xe0>
 800a73a:	bf00      	nop
 800a73c:	0800c9c9 	.word	0x0800c9c9
 800a740:	0800c9da 	.word	0x0800c9da

0800a744 <__ulp>:
 800a744:	b082      	sub	sp, #8
 800a746:	ed8d 0b00 	vstr	d0, [sp]
 800a74a:	9a01      	ldr	r2, [sp, #4]
 800a74c:	4b0f      	ldr	r3, [pc, #60]	; (800a78c <__ulp+0x48>)
 800a74e:	4013      	ands	r3, r2
 800a750:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a754:	2b00      	cmp	r3, #0
 800a756:	dc08      	bgt.n	800a76a <__ulp+0x26>
 800a758:	425b      	negs	r3, r3
 800a75a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a75e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a762:	da04      	bge.n	800a76e <__ulp+0x2a>
 800a764:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a768:	4113      	asrs	r3, r2
 800a76a:	2200      	movs	r2, #0
 800a76c:	e008      	b.n	800a780 <__ulp+0x3c>
 800a76e:	f1a2 0314 	sub.w	r3, r2, #20
 800a772:	2b1e      	cmp	r3, #30
 800a774:	bfda      	itte	le
 800a776:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a77a:	40da      	lsrle	r2, r3
 800a77c:	2201      	movgt	r2, #1
 800a77e:	2300      	movs	r3, #0
 800a780:	4619      	mov	r1, r3
 800a782:	4610      	mov	r0, r2
 800a784:	ec41 0b10 	vmov	d0, r0, r1
 800a788:	b002      	add	sp, #8
 800a78a:	4770      	bx	lr
 800a78c:	7ff00000 	.word	0x7ff00000

0800a790 <__b2d>:
 800a790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a794:	6906      	ldr	r6, [r0, #16]
 800a796:	f100 0814 	add.w	r8, r0, #20
 800a79a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a79e:	1f37      	subs	r7, r6, #4
 800a7a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	f7ff fd53 	bl	800a250 <__hi0bits>
 800a7aa:	f1c0 0320 	rsb	r3, r0, #32
 800a7ae:	280a      	cmp	r0, #10
 800a7b0:	600b      	str	r3, [r1, #0]
 800a7b2:	491b      	ldr	r1, [pc, #108]	; (800a820 <__b2d+0x90>)
 800a7b4:	dc15      	bgt.n	800a7e2 <__b2d+0x52>
 800a7b6:	f1c0 0c0b 	rsb	ip, r0, #11
 800a7ba:	fa22 f30c 	lsr.w	r3, r2, ip
 800a7be:	45b8      	cmp	r8, r7
 800a7c0:	ea43 0501 	orr.w	r5, r3, r1
 800a7c4:	bf34      	ite	cc
 800a7c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a7ca:	2300      	movcs	r3, #0
 800a7cc:	3015      	adds	r0, #21
 800a7ce:	fa02 f000 	lsl.w	r0, r2, r0
 800a7d2:	fa23 f30c 	lsr.w	r3, r3, ip
 800a7d6:	4303      	orrs	r3, r0
 800a7d8:	461c      	mov	r4, r3
 800a7da:	ec45 4b10 	vmov	d0, r4, r5
 800a7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7e2:	45b8      	cmp	r8, r7
 800a7e4:	bf3a      	itte	cc
 800a7e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a7ea:	f1a6 0708 	subcc.w	r7, r6, #8
 800a7ee:	2300      	movcs	r3, #0
 800a7f0:	380b      	subs	r0, #11
 800a7f2:	d012      	beq.n	800a81a <__b2d+0x8a>
 800a7f4:	f1c0 0120 	rsb	r1, r0, #32
 800a7f8:	fa23 f401 	lsr.w	r4, r3, r1
 800a7fc:	4082      	lsls	r2, r0
 800a7fe:	4322      	orrs	r2, r4
 800a800:	4547      	cmp	r7, r8
 800a802:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a806:	bf8c      	ite	hi
 800a808:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a80c:	2200      	movls	r2, #0
 800a80e:	4083      	lsls	r3, r0
 800a810:	40ca      	lsrs	r2, r1
 800a812:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a816:	4313      	orrs	r3, r2
 800a818:	e7de      	b.n	800a7d8 <__b2d+0x48>
 800a81a:	ea42 0501 	orr.w	r5, r2, r1
 800a81e:	e7db      	b.n	800a7d8 <__b2d+0x48>
 800a820:	3ff00000 	.word	0x3ff00000

0800a824 <__d2b>:
 800a824:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a828:	460f      	mov	r7, r1
 800a82a:	2101      	movs	r1, #1
 800a82c:	ec59 8b10 	vmov	r8, r9, d0
 800a830:	4616      	mov	r6, r2
 800a832:	f7ff fc1b 	bl	800a06c <_Balloc>
 800a836:	4604      	mov	r4, r0
 800a838:	b930      	cbnz	r0, 800a848 <__d2b+0x24>
 800a83a:	4602      	mov	r2, r0
 800a83c:	4b24      	ldr	r3, [pc, #144]	; (800a8d0 <__d2b+0xac>)
 800a83e:	4825      	ldr	r0, [pc, #148]	; (800a8d4 <__d2b+0xb0>)
 800a840:	f240 310f 	movw	r1, #783	; 0x30f
 800a844:	f001 fb9c 	bl	800bf80 <__assert_func>
 800a848:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a84c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a850:	bb2d      	cbnz	r5, 800a89e <__d2b+0x7a>
 800a852:	9301      	str	r3, [sp, #4]
 800a854:	f1b8 0300 	subs.w	r3, r8, #0
 800a858:	d026      	beq.n	800a8a8 <__d2b+0x84>
 800a85a:	4668      	mov	r0, sp
 800a85c:	9300      	str	r3, [sp, #0]
 800a85e:	f7ff fd17 	bl	800a290 <__lo0bits>
 800a862:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a866:	b1e8      	cbz	r0, 800a8a4 <__d2b+0x80>
 800a868:	f1c0 0320 	rsb	r3, r0, #32
 800a86c:	fa02 f303 	lsl.w	r3, r2, r3
 800a870:	430b      	orrs	r3, r1
 800a872:	40c2      	lsrs	r2, r0
 800a874:	6163      	str	r3, [r4, #20]
 800a876:	9201      	str	r2, [sp, #4]
 800a878:	9b01      	ldr	r3, [sp, #4]
 800a87a:	61a3      	str	r3, [r4, #24]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	bf14      	ite	ne
 800a880:	2202      	movne	r2, #2
 800a882:	2201      	moveq	r2, #1
 800a884:	6122      	str	r2, [r4, #16]
 800a886:	b1bd      	cbz	r5, 800a8b8 <__d2b+0x94>
 800a888:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a88c:	4405      	add	r5, r0
 800a88e:	603d      	str	r5, [r7, #0]
 800a890:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a894:	6030      	str	r0, [r6, #0]
 800a896:	4620      	mov	r0, r4
 800a898:	b003      	add	sp, #12
 800a89a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a89e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8a2:	e7d6      	b.n	800a852 <__d2b+0x2e>
 800a8a4:	6161      	str	r1, [r4, #20]
 800a8a6:	e7e7      	b.n	800a878 <__d2b+0x54>
 800a8a8:	a801      	add	r0, sp, #4
 800a8aa:	f7ff fcf1 	bl	800a290 <__lo0bits>
 800a8ae:	9b01      	ldr	r3, [sp, #4]
 800a8b0:	6163      	str	r3, [r4, #20]
 800a8b2:	3020      	adds	r0, #32
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	e7e5      	b.n	800a884 <__d2b+0x60>
 800a8b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8c0:	6038      	str	r0, [r7, #0]
 800a8c2:	6918      	ldr	r0, [r3, #16]
 800a8c4:	f7ff fcc4 	bl	800a250 <__hi0bits>
 800a8c8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8cc:	e7e2      	b.n	800a894 <__d2b+0x70>
 800a8ce:	bf00      	nop
 800a8d0:	0800c9c9 	.word	0x0800c9c9
 800a8d4:	0800c9da 	.word	0x0800c9da

0800a8d8 <__ratio>:
 800a8d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8dc:	4688      	mov	r8, r1
 800a8de:	4669      	mov	r1, sp
 800a8e0:	4681      	mov	r9, r0
 800a8e2:	f7ff ff55 	bl	800a790 <__b2d>
 800a8e6:	a901      	add	r1, sp, #4
 800a8e8:	4640      	mov	r0, r8
 800a8ea:	ec55 4b10 	vmov	r4, r5, d0
 800a8ee:	f7ff ff4f 	bl	800a790 <__b2d>
 800a8f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a8fa:	eba3 0c02 	sub.w	ip, r3, r2
 800a8fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a902:	1a9b      	subs	r3, r3, r2
 800a904:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a908:	ec51 0b10 	vmov	r0, r1, d0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	bfd6      	itet	le
 800a910:	460a      	movle	r2, r1
 800a912:	462a      	movgt	r2, r5
 800a914:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a918:	468b      	mov	fp, r1
 800a91a:	462f      	mov	r7, r5
 800a91c:	bfd4      	ite	le
 800a91e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a922:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a926:	4620      	mov	r0, r4
 800a928:	ee10 2a10 	vmov	r2, s0
 800a92c:	465b      	mov	r3, fp
 800a92e:	4639      	mov	r1, r7
 800a930:	f7f5 ff94 	bl	800085c <__aeabi_ddiv>
 800a934:	ec41 0b10 	vmov	d0, r0, r1
 800a938:	b003      	add	sp, #12
 800a93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a93e <__copybits>:
 800a93e:	3901      	subs	r1, #1
 800a940:	b570      	push	{r4, r5, r6, lr}
 800a942:	1149      	asrs	r1, r1, #5
 800a944:	6914      	ldr	r4, [r2, #16]
 800a946:	3101      	adds	r1, #1
 800a948:	f102 0314 	add.w	r3, r2, #20
 800a94c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a950:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a954:	1f05      	subs	r5, r0, #4
 800a956:	42a3      	cmp	r3, r4
 800a958:	d30c      	bcc.n	800a974 <__copybits+0x36>
 800a95a:	1aa3      	subs	r3, r4, r2
 800a95c:	3b11      	subs	r3, #17
 800a95e:	f023 0303 	bic.w	r3, r3, #3
 800a962:	3211      	adds	r2, #17
 800a964:	42a2      	cmp	r2, r4
 800a966:	bf88      	it	hi
 800a968:	2300      	movhi	r3, #0
 800a96a:	4418      	add	r0, r3
 800a96c:	2300      	movs	r3, #0
 800a96e:	4288      	cmp	r0, r1
 800a970:	d305      	bcc.n	800a97e <__copybits+0x40>
 800a972:	bd70      	pop	{r4, r5, r6, pc}
 800a974:	f853 6b04 	ldr.w	r6, [r3], #4
 800a978:	f845 6f04 	str.w	r6, [r5, #4]!
 800a97c:	e7eb      	b.n	800a956 <__copybits+0x18>
 800a97e:	f840 3b04 	str.w	r3, [r0], #4
 800a982:	e7f4      	b.n	800a96e <__copybits+0x30>

0800a984 <__any_on>:
 800a984:	f100 0214 	add.w	r2, r0, #20
 800a988:	6900      	ldr	r0, [r0, #16]
 800a98a:	114b      	asrs	r3, r1, #5
 800a98c:	4298      	cmp	r0, r3
 800a98e:	b510      	push	{r4, lr}
 800a990:	db11      	blt.n	800a9b6 <__any_on+0x32>
 800a992:	dd0a      	ble.n	800a9aa <__any_on+0x26>
 800a994:	f011 011f 	ands.w	r1, r1, #31
 800a998:	d007      	beq.n	800a9aa <__any_on+0x26>
 800a99a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a99e:	fa24 f001 	lsr.w	r0, r4, r1
 800a9a2:	fa00 f101 	lsl.w	r1, r0, r1
 800a9a6:	428c      	cmp	r4, r1
 800a9a8:	d10b      	bne.n	800a9c2 <__any_on+0x3e>
 800a9aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d803      	bhi.n	800a9ba <__any_on+0x36>
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	bd10      	pop	{r4, pc}
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	e7f7      	b.n	800a9aa <__any_on+0x26>
 800a9ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9be:	2900      	cmp	r1, #0
 800a9c0:	d0f5      	beq.n	800a9ae <__any_on+0x2a>
 800a9c2:	2001      	movs	r0, #1
 800a9c4:	e7f6      	b.n	800a9b4 <__any_on+0x30>

0800a9c6 <sulp>:
 800a9c6:	b570      	push	{r4, r5, r6, lr}
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	460d      	mov	r5, r1
 800a9cc:	ec45 4b10 	vmov	d0, r4, r5
 800a9d0:	4616      	mov	r6, r2
 800a9d2:	f7ff feb7 	bl	800a744 <__ulp>
 800a9d6:	ec51 0b10 	vmov	r0, r1, d0
 800a9da:	b17e      	cbz	r6, 800a9fc <sulp+0x36>
 800a9dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a9e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	dd09      	ble.n	800a9fc <sulp+0x36>
 800a9e8:	051b      	lsls	r3, r3, #20
 800a9ea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a9ee:	2400      	movs	r4, #0
 800a9f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a9f4:	4622      	mov	r2, r4
 800a9f6:	462b      	mov	r3, r5
 800a9f8:	f7f5 fe06 	bl	8000608 <__aeabi_dmul>
 800a9fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa00 <_strtod_l>:
 800aa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa04:	ed2d 8b02 	vpush	{d8}
 800aa08:	b09b      	sub	sp, #108	; 0x6c
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	9213      	str	r2, [sp, #76]	; 0x4c
 800aa0e:	2200      	movs	r2, #0
 800aa10:	9216      	str	r2, [sp, #88]	; 0x58
 800aa12:	460d      	mov	r5, r1
 800aa14:	f04f 0800 	mov.w	r8, #0
 800aa18:	f04f 0900 	mov.w	r9, #0
 800aa1c:	460a      	mov	r2, r1
 800aa1e:	9215      	str	r2, [sp, #84]	; 0x54
 800aa20:	7811      	ldrb	r1, [r2, #0]
 800aa22:	292b      	cmp	r1, #43	; 0x2b
 800aa24:	d04c      	beq.n	800aac0 <_strtod_l+0xc0>
 800aa26:	d83a      	bhi.n	800aa9e <_strtod_l+0x9e>
 800aa28:	290d      	cmp	r1, #13
 800aa2a:	d834      	bhi.n	800aa96 <_strtod_l+0x96>
 800aa2c:	2908      	cmp	r1, #8
 800aa2e:	d834      	bhi.n	800aa9a <_strtod_l+0x9a>
 800aa30:	2900      	cmp	r1, #0
 800aa32:	d03d      	beq.n	800aab0 <_strtod_l+0xb0>
 800aa34:	2200      	movs	r2, #0
 800aa36:	920a      	str	r2, [sp, #40]	; 0x28
 800aa38:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800aa3a:	7832      	ldrb	r2, [r6, #0]
 800aa3c:	2a30      	cmp	r2, #48	; 0x30
 800aa3e:	f040 80b4 	bne.w	800abaa <_strtod_l+0x1aa>
 800aa42:	7872      	ldrb	r2, [r6, #1]
 800aa44:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800aa48:	2a58      	cmp	r2, #88	; 0x58
 800aa4a:	d170      	bne.n	800ab2e <_strtod_l+0x12e>
 800aa4c:	9302      	str	r3, [sp, #8]
 800aa4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa50:	9301      	str	r3, [sp, #4]
 800aa52:	ab16      	add	r3, sp, #88	; 0x58
 800aa54:	9300      	str	r3, [sp, #0]
 800aa56:	4a8e      	ldr	r2, [pc, #568]	; (800ac90 <_strtod_l+0x290>)
 800aa58:	ab17      	add	r3, sp, #92	; 0x5c
 800aa5a:	a915      	add	r1, sp, #84	; 0x54
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f001 fb2b 	bl	800c0b8 <__gethex>
 800aa62:	f010 070f 	ands.w	r7, r0, #15
 800aa66:	4605      	mov	r5, r0
 800aa68:	d005      	beq.n	800aa76 <_strtod_l+0x76>
 800aa6a:	2f06      	cmp	r7, #6
 800aa6c:	d12a      	bne.n	800aac4 <_strtod_l+0xc4>
 800aa6e:	3601      	adds	r6, #1
 800aa70:	2300      	movs	r3, #0
 800aa72:	9615      	str	r6, [sp, #84]	; 0x54
 800aa74:	930a      	str	r3, [sp, #40]	; 0x28
 800aa76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f040 857f 	bne.w	800b57c <_strtod_l+0xb7c>
 800aa7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa80:	b1db      	cbz	r3, 800aaba <_strtod_l+0xba>
 800aa82:	4642      	mov	r2, r8
 800aa84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aa88:	ec43 2b10 	vmov	d0, r2, r3
 800aa8c:	b01b      	add	sp, #108	; 0x6c
 800aa8e:	ecbd 8b02 	vpop	{d8}
 800aa92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa96:	2920      	cmp	r1, #32
 800aa98:	d1cc      	bne.n	800aa34 <_strtod_l+0x34>
 800aa9a:	3201      	adds	r2, #1
 800aa9c:	e7bf      	b.n	800aa1e <_strtod_l+0x1e>
 800aa9e:	292d      	cmp	r1, #45	; 0x2d
 800aaa0:	d1c8      	bne.n	800aa34 <_strtod_l+0x34>
 800aaa2:	2101      	movs	r1, #1
 800aaa4:	910a      	str	r1, [sp, #40]	; 0x28
 800aaa6:	1c51      	adds	r1, r2, #1
 800aaa8:	9115      	str	r1, [sp, #84]	; 0x54
 800aaaa:	7852      	ldrb	r2, [r2, #1]
 800aaac:	2a00      	cmp	r2, #0
 800aaae:	d1c3      	bne.n	800aa38 <_strtod_l+0x38>
 800aab0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aab2:	9515      	str	r5, [sp, #84]	; 0x54
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f040 855f 	bne.w	800b578 <_strtod_l+0xb78>
 800aaba:	4642      	mov	r2, r8
 800aabc:	464b      	mov	r3, r9
 800aabe:	e7e3      	b.n	800aa88 <_strtod_l+0x88>
 800aac0:	2100      	movs	r1, #0
 800aac2:	e7ef      	b.n	800aaa4 <_strtod_l+0xa4>
 800aac4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aac6:	b13a      	cbz	r2, 800aad8 <_strtod_l+0xd8>
 800aac8:	2135      	movs	r1, #53	; 0x35
 800aaca:	a818      	add	r0, sp, #96	; 0x60
 800aacc:	f7ff ff37 	bl	800a93e <__copybits>
 800aad0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aad2:	4620      	mov	r0, r4
 800aad4:	f7ff fb0a 	bl	800a0ec <_Bfree>
 800aad8:	3f01      	subs	r7, #1
 800aada:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aadc:	2f04      	cmp	r7, #4
 800aade:	d806      	bhi.n	800aaee <_strtod_l+0xee>
 800aae0:	e8df f007 	tbb	[pc, r7]
 800aae4:	201d0314 	.word	0x201d0314
 800aae8:	14          	.byte	0x14
 800aae9:	00          	.byte	0x00
 800aaea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800aaee:	05e9      	lsls	r1, r5, #23
 800aaf0:	bf48      	it	mi
 800aaf2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800aaf6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aafa:	0d1b      	lsrs	r3, r3, #20
 800aafc:	051b      	lsls	r3, r3, #20
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1b9      	bne.n	800aa76 <_strtod_l+0x76>
 800ab02:	f7fe faf9 	bl	80090f8 <__errno>
 800ab06:	2322      	movs	r3, #34	; 0x22
 800ab08:	6003      	str	r3, [r0, #0]
 800ab0a:	e7b4      	b.n	800aa76 <_strtod_l+0x76>
 800ab0c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ab10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ab14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ab18:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ab1c:	e7e7      	b.n	800aaee <_strtod_l+0xee>
 800ab1e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ac98 <_strtod_l+0x298>
 800ab22:	e7e4      	b.n	800aaee <_strtod_l+0xee>
 800ab24:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ab28:	f04f 38ff 	mov.w	r8, #4294967295
 800ab2c:	e7df      	b.n	800aaee <_strtod_l+0xee>
 800ab2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab30:	1c5a      	adds	r2, r3, #1
 800ab32:	9215      	str	r2, [sp, #84]	; 0x54
 800ab34:	785b      	ldrb	r3, [r3, #1]
 800ab36:	2b30      	cmp	r3, #48	; 0x30
 800ab38:	d0f9      	beq.n	800ab2e <_strtod_l+0x12e>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d09b      	beq.n	800aa76 <_strtod_l+0x76>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	f04f 0a00 	mov.w	sl, #0
 800ab44:	9304      	str	r3, [sp, #16]
 800ab46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab48:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab4a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ab4e:	46d3      	mov	fp, sl
 800ab50:	220a      	movs	r2, #10
 800ab52:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ab54:	7806      	ldrb	r6, [r0, #0]
 800ab56:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ab5a:	b2d9      	uxtb	r1, r3
 800ab5c:	2909      	cmp	r1, #9
 800ab5e:	d926      	bls.n	800abae <_strtod_l+0x1ae>
 800ab60:	494c      	ldr	r1, [pc, #304]	; (800ac94 <_strtod_l+0x294>)
 800ab62:	2201      	movs	r2, #1
 800ab64:	f001 f9c0 	bl	800bee8 <strncmp>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	d030      	beq.n	800abce <_strtod_l+0x1ce>
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	4632      	mov	r2, r6
 800ab70:	9005      	str	r0, [sp, #20]
 800ab72:	465e      	mov	r6, fp
 800ab74:	4603      	mov	r3, r0
 800ab76:	2a65      	cmp	r2, #101	; 0x65
 800ab78:	d001      	beq.n	800ab7e <_strtod_l+0x17e>
 800ab7a:	2a45      	cmp	r2, #69	; 0x45
 800ab7c:	d113      	bne.n	800aba6 <_strtod_l+0x1a6>
 800ab7e:	b91e      	cbnz	r6, 800ab88 <_strtod_l+0x188>
 800ab80:	9a04      	ldr	r2, [sp, #16]
 800ab82:	4302      	orrs	r2, r0
 800ab84:	d094      	beq.n	800aab0 <_strtod_l+0xb0>
 800ab86:	2600      	movs	r6, #0
 800ab88:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ab8a:	1c6a      	adds	r2, r5, #1
 800ab8c:	9215      	str	r2, [sp, #84]	; 0x54
 800ab8e:	786a      	ldrb	r2, [r5, #1]
 800ab90:	2a2b      	cmp	r2, #43	; 0x2b
 800ab92:	d074      	beq.n	800ac7e <_strtod_l+0x27e>
 800ab94:	2a2d      	cmp	r2, #45	; 0x2d
 800ab96:	d078      	beq.n	800ac8a <_strtod_l+0x28a>
 800ab98:	f04f 0c00 	mov.w	ip, #0
 800ab9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aba0:	2909      	cmp	r1, #9
 800aba2:	d97f      	bls.n	800aca4 <_strtod_l+0x2a4>
 800aba4:	9515      	str	r5, [sp, #84]	; 0x54
 800aba6:	2700      	movs	r7, #0
 800aba8:	e09e      	b.n	800ace8 <_strtod_l+0x2e8>
 800abaa:	2300      	movs	r3, #0
 800abac:	e7c8      	b.n	800ab40 <_strtod_l+0x140>
 800abae:	f1bb 0f08 	cmp.w	fp, #8
 800abb2:	bfd8      	it	le
 800abb4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800abb6:	f100 0001 	add.w	r0, r0, #1
 800abba:	bfda      	itte	le
 800abbc:	fb02 3301 	mlale	r3, r2, r1, r3
 800abc0:	9309      	strle	r3, [sp, #36]	; 0x24
 800abc2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800abc6:	f10b 0b01 	add.w	fp, fp, #1
 800abca:	9015      	str	r0, [sp, #84]	; 0x54
 800abcc:	e7c1      	b.n	800ab52 <_strtod_l+0x152>
 800abce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abd0:	1c5a      	adds	r2, r3, #1
 800abd2:	9215      	str	r2, [sp, #84]	; 0x54
 800abd4:	785a      	ldrb	r2, [r3, #1]
 800abd6:	f1bb 0f00 	cmp.w	fp, #0
 800abda:	d037      	beq.n	800ac4c <_strtod_l+0x24c>
 800abdc:	9005      	str	r0, [sp, #20]
 800abde:	465e      	mov	r6, fp
 800abe0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800abe4:	2b09      	cmp	r3, #9
 800abe6:	d912      	bls.n	800ac0e <_strtod_l+0x20e>
 800abe8:	2301      	movs	r3, #1
 800abea:	e7c4      	b.n	800ab76 <_strtod_l+0x176>
 800abec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abee:	1c5a      	adds	r2, r3, #1
 800abf0:	9215      	str	r2, [sp, #84]	; 0x54
 800abf2:	785a      	ldrb	r2, [r3, #1]
 800abf4:	3001      	adds	r0, #1
 800abf6:	2a30      	cmp	r2, #48	; 0x30
 800abf8:	d0f8      	beq.n	800abec <_strtod_l+0x1ec>
 800abfa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800abfe:	2b08      	cmp	r3, #8
 800ac00:	f200 84c1 	bhi.w	800b586 <_strtod_l+0xb86>
 800ac04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac06:	9005      	str	r0, [sp, #20]
 800ac08:	2000      	movs	r0, #0
 800ac0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac0c:	4606      	mov	r6, r0
 800ac0e:	3a30      	subs	r2, #48	; 0x30
 800ac10:	f100 0301 	add.w	r3, r0, #1
 800ac14:	d014      	beq.n	800ac40 <_strtod_l+0x240>
 800ac16:	9905      	ldr	r1, [sp, #20]
 800ac18:	4419      	add	r1, r3
 800ac1a:	9105      	str	r1, [sp, #20]
 800ac1c:	4633      	mov	r3, r6
 800ac1e:	eb00 0c06 	add.w	ip, r0, r6
 800ac22:	210a      	movs	r1, #10
 800ac24:	4563      	cmp	r3, ip
 800ac26:	d113      	bne.n	800ac50 <_strtod_l+0x250>
 800ac28:	1833      	adds	r3, r6, r0
 800ac2a:	2b08      	cmp	r3, #8
 800ac2c:	f106 0601 	add.w	r6, r6, #1
 800ac30:	4406      	add	r6, r0
 800ac32:	dc1a      	bgt.n	800ac6a <_strtod_l+0x26a>
 800ac34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac36:	230a      	movs	r3, #10
 800ac38:	fb03 2301 	mla	r3, r3, r1, r2
 800ac3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac3e:	2300      	movs	r3, #0
 800ac40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ac42:	1c51      	adds	r1, r2, #1
 800ac44:	9115      	str	r1, [sp, #84]	; 0x54
 800ac46:	7852      	ldrb	r2, [r2, #1]
 800ac48:	4618      	mov	r0, r3
 800ac4a:	e7c9      	b.n	800abe0 <_strtod_l+0x1e0>
 800ac4c:	4658      	mov	r0, fp
 800ac4e:	e7d2      	b.n	800abf6 <_strtod_l+0x1f6>
 800ac50:	2b08      	cmp	r3, #8
 800ac52:	f103 0301 	add.w	r3, r3, #1
 800ac56:	dc03      	bgt.n	800ac60 <_strtod_l+0x260>
 800ac58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ac5a:	434f      	muls	r7, r1
 800ac5c:	9709      	str	r7, [sp, #36]	; 0x24
 800ac5e:	e7e1      	b.n	800ac24 <_strtod_l+0x224>
 800ac60:	2b10      	cmp	r3, #16
 800ac62:	bfd8      	it	le
 800ac64:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ac68:	e7dc      	b.n	800ac24 <_strtod_l+0x224>
 800ac6a:	2e10      	cmp	r6, #16
 800ac6c:	bfdc      	itt	le
 800ac6e:	230a      	movle	r3, #10
 800ac70:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ac74:	e7e3      	b.n	800ac3e <_strtod_l+0x23e>
 800ac76:	2300      	movs	r3, #0
 800ac78:	9305      	str	r3, [sp, #20]
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e780      	b.n	800ab80 <_strtod_l+0x180>
 800ac7e:	f04f 0c00 	mov.w	ip, #0
 800ac82:	1caa      	adds	r2, r5, #2
 800ac84:	9215      	str	r2, [sp, #84]	; 0x54
 800ac86:	78aa      	ldrb	r2, [r5, #2]
 800ac88:	e788      	b.n	800ab9c <_strtod_l+0x19c>
 800ac8a:	f04f 0c01 	mov.w	ip, #1
 800ac8e:	e7f8      	b.n	800ac82 <_strtod_l+0x282>
 800ac90:	0800cb38 	.word	0x0800cb38
 800ac94:	0800cb34 	.word	0x0800cb34
 800ac98:	7ff00000 	.word	0x7ff00000
 800ac9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ac9e:	1c51      	adds	r1, r2, #1
 800aca0:	9115      	str	r1, [sp, #84]	; 0x54
 800aca2:	7852      	ldrb	r2, [r2, #1]
 800aca4:	2a30      	cmp	r2, #48	; 0x30
 800aca6:	d0f9      	beq.n	800ac9c <_strtod_l+0x29c>
 800aca8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800acac:	2908      	cmp	r1, #8
 800acae:	f63f af7a 	bhi.w	800aba6 <_strtod_l+0x1a6>
 800acb2:	3a30      	subs	r2, #48	; 0x30
 800acb4:	9208      	str	r2, [sp, #32]
 800acb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800acb8:	920c      	str	r2, [sp, #48]	; 0x30
 800acba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800acbc:	1c57      	adds	r7, r2, #1
 800acbe:	9715      	str	r7, [sp, #84]	; 0x54
 800acc0:	7852      	ldrb	r2, [r2, #1]
 800acc2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800acc6:	f1be 0f09 	cmp.w	lr, #9
 800acca:	d938      	bls.n	800ad3e <_strtod_l+0x33e>
 800accc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800acce:	1a7f      	subs	r7, r7, r1
 800acd0:	2f08      	cmp	r7, #8
 800acd2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800acd6:	dc03      	bgt.n	800ace0 <_strtod_l+0x2e0>
 800acd8:	9908      	ldr	r1, [sp, #32]
 800acda:	428f      	cmp	r7, r1
 800acdc:	bfa8      	it	ge
 800acde:	460f      	movge	r7, r1
 800ace0:	f1bc 0f00 	cmp.w	ip, #0
 800ace4:	d000      	beq.n	800ace8 <_strtod_l+0x2e8>
 800ace6:	427f      	negs	r7, r7
 800ace8:	2e00      	cmp	r6, #0
 800acea:	d14f      	bne.n	800ad8c <_strtod_l+0x38c>
 800acec:	9904      	ldr	r1, [sp, #16]
 800acee:	4301      	orrs	r1, r0
 800acf0:	f47f aec1 	bne.w	800aa76 <_strtod_l+0x76>
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f47f aedb 	bne.w	800aab0 <_strtod_l+0xb0>
 800acfa:	2a69      	cmp	r2, #105	; 0x69
 800acfc:	d029      	beq.n	800ad52 <_strtod_l+0x352>
 800acfe:	dc26      	bgt.n	800ad4e <_strtod_l+0x34e>
 800ad00:	2a49      	cmp	r2, #73	; 0x49
 800ad02:	d026      	beq.n	800ad52 <_strtod_l+0x352>
 800ad04:	2a4e      	cmp	r2, #78	; 0x4e
 800ad06:	f47f aed3 	bne.w	800aab0 <_strtod_l+0xb0>
 800ad0a:	499b      	ldr	r1, [pc, #620]	; (800af78 <_strtod_l+0x578>)
 800ad0c:	a815      	add	r0, sp, #84	; 0x54
 800ad0e:	f001 fc13 	bl	800c538 <__match>
 800ad12:	2800      	cmp	r0, #0
 800ad14:	f43f aecc 	beq.w	800aab0 <_strtod_l+0xb0>
 800ad18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	2b28      	cmp	r3, #40	; 0x28
 800ad1e:	d12f      	bne.n	800ad80 <_strtod_l+0x380>
 800ad20:	4996      	ldr	r1, [pc, #600]	; (800af7c <_strtod_l+0x57c>)
 800ad22:	aa18      	add	r2, sp, #96	; 0x60
 800ad24:	a815      	add	r0, sp, #84	; 0x54
 800ad26:	f001 fc1b 	bl	800c560 <__hexnan>
 800ad2a:	2805      	cmp	r0, #5
 800ad2c:	d128      	bne.n	800ad80 <_strtod_l+0x380>
 800ad2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ad34:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ad38:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ad3c:	e69b      	b.n	800aa76 <_strtod_l+0x76>
 800ad3e:	9f08      	ldr	r7, [sp, #32]
 800ad40:	210a      	movs	r1, #10
 800ad42:	fb01 2107 	mla	r1, r1, r7, r2
 800ad46:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ad4a:	9208      	str	r2, [sp, #32]
 800ad4c:	e7b5      	b.n	800acba <_strtod_l+0x2ba>
 800ad4e:	2a6e      	cmp	r2, #110	; 0x6e
 800ad50:	e7d9      	b.n	800ad06 <_strtod_l+0x306>
 800ad52:	498b      	ldr	r1, [pc, #556]	; (800af80 <_strtod_l+0x580>)
 800ad54:	a815      	add	r0, sp, #84	; 0x54
 800ad56:	f001 fbef 	bl	800c538 <__match>
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	f43f aea8 	beq.w	800aab0 <_strtod_l+0xb0>
 800ad60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad62:	4988      	ldr	r1, [pc, #544]	; (800af84 <_strtod_l+0x584>)
 800ad64:	3b01      	subs	r3, #1
 800ad66:	a815      	add	r0, sp, #84	; 0x54
 800ad68:	9315      	str	r3, [sp, #84]	; 0x54
 800ad6a:	f001 fbe5 	bl	800c538 <__match>
 800ad6e:	b910      	cbnz	r0, 800ad76 <_strtod_l+0x376>
 800ad70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad72:	3301      	adds	r3, #1
 800ad74:	9315      	str	r3, [sp, #84]	; 0x54
 800ad76:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800af94 <_strtod_l+0x594>
 800ad7a:	f04f 0800 	mov.w	r8, #0
 800ad7e:	e67a      	b.n	800aa76 <_strtod_l+0x76>
 800ad80:	4881      	ldr	r0, [pc, #516]	; (800af88 <_strtod_l+0x588>)
 800ad82:	f001 f8f5 	bl	800bf70 <nan>
 800ad86:	ec59 8b10 	vmov	r8, r9, d0
 800ad8a:	e674      	b.n	800aa76 <_strtod_l+0x76>
 800ad8c:	9b05      	ldr	r3, [sp, #20]
 800ad8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad90:	1afb      	subs	r3, r7, r3
 800ad92:	f1bb 0f00 	cmp.w	fp, #0
 800ad96:	bf08      	it	eq
 800ad98:	46b3      	moveq	fp, r6
 800ad9a:	2e10      	cmp	r6, #16
 800ad9c:	9308      	str	r3, [sp, #32]
 800ad9e:	4635      	mov	r5, r6
 800ada0:	bfa8      	it	ge
 800ada2:	2510      	movge	r5, #16
 800ada4:	f7f5 fbb6 	bl	8000514 <__aeabi_ui2d>
 800ada8:	2e09      	cmp	r6, #9
 800adaa:	4680      	mov	r8, r0
 800adac:	4689      	mov	r9, r1
 800adae:	dd13      	ble.n	800add8 <_strtod_l+0x3d8>
 800adb0:	4b76      	ldr	r3, [pc, #472]	; (800af8c <_strtod_l+0x58c>)
 800adb2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800adb6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800adba:	f7f5 fc25 	bl	8000608 <__aeabi_dmul>
 800adbe:	4680      	mov	r8, r0
 800adc0:	4650      	mov	r0, sl
 800adc2:	4689      	mov	r9, r1
 800adc4:	f7f5 fba6 	bl	8000514 <__aeabi_ui2d>
 800adc8:	4602      	mov	r2, r0
 800adca:	460b      	mov	r3, r1
 800adcc:	4640      	mov	r0, r8
 800adce:	4649      	mov	r1, r9
 800add0:	f7f5 fa64 	bl	800029c <__adddf3>
 800add4:	4680      	mov	r8, r0
 800add6:	4689      	mov	r9, r1
 800add8:	2e0f      	cmp	r6, #15
 800adda:	dc38      	bgt.n	800ae4e <_strtod_l+0x44e>
 800addc:	9b08      	ldr	r3, [sp, #32]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	f43f ae49 	beq.w	800aa76 <_strtod_l+0x76>
 800ade4:	dd24      	ble.n	800ae30 <_strtod_l+0x430>
 800ade6:	2b16      	cmp	r3, #22
 800ade8:	dc0b      	bgt.n	800ae02 <_strtod_l+0x402>
 800adea:	4968      	ldr	r1, [pc, #416]	; (800af8c <_strtod_l+0x58c>)
 800adec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800adf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adf4:	4642      	mov	r2, r8
 800adf6:	464b      	mov	r3, r9
 800adf8:	f7f5 fc06 	bl	8000608 <__aeabi_dmul>
 800adfc:	4680      	mov	r8, r0
 800adfe:	4689      	mov	r9, r1
 800ae00:	e639      	b.n	800aa76 <_strtod_l+0x76>
 800ae02:	9a08      	ldr	r2, [sp, #32]
 800ae04:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	db20      	blt.n	800ae4e <_strtod_l+0x44e>
 800ae0c:	4c5f      	ldr	r4, [pc, #380]	; (800af8c <_strtod_l+0x58c>)
 800ae0e:	f1c6 060f 	rsb	r6, r6, #15
 800ae12:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ae16:	4642      	mov	r2, r8
 800ae18:	464b      	mov	r3, r9
 800ae1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae1e:	f7f5 fbf3 	bl	8000608 <__aeabi_dmul>
 800ae22:	9b08      	ldr	r3, [sp, #32]
 800ae24:	1b9e      	subs	r6, r3, r6
 800ae26:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ae2a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ae2e:	e7e3      	b.n	800adf8 <_strtod_l+0x3f8>
 800ae30:	9b08      	ldr	r3, [sp, #32]
 800ae32:	3316      	adds	r3, #22
 800ae34:	db0b      	blt.n	800ae4e <_strtod_l+0x44e>
 800ae36:	9b05      	ldr	r3, [sp, #20]
 800ae38:	1bdf      	subs	r7, r3, r7
 800ae3a:	4b54      	ldr	r3, [pc, #336]	; (800af8c <_strtod_l+0x58c>)
 800ae3c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ae40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae44:	4640      	mov	r0, r8
 800ae46:	4649      	mov	r1, r9
 800ae48:	f7f5 fd08 	bl	800085c <__aeabi_ddiv>
 800ae4c:	e7d6      	b.n	800adfc <_strtod_l+0x3fc>
 800ae4e:	9b08      	ldr	r3, [sp, #32]
 800ae50:	1b75      	subs	r5, r6, r5
 800ae52:	441d      	add	r5, r3
 800ae54:	2d00      	cmp	r5, #0
 800ae56:	dd70      	ble.n	800af3a <_strtod_l+0x53a>
 800ae58:	f015 030f 	ands.w	r3, r5, #15
 800ae5c:	d00a      	beq.n	800ae74 <_strtod_l+0x474>
 800ae5e:	494b      	ldr	r1, [pc, #300]	; (800af8c <_strtod_l+0x58c>)
 800ae60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae64:	4642      	mov	r2, r8
 800ae66:	464b      	mov	r3, r9
 800ae68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae6c:	f7f5 fbcc 	bl	8000608 <__aeabi_dmul>
 800ae70:	4680      	mov	r8, r0
 800ae72:	4689      	mov	r9, r1
 800ae74:	f035 050f 	bics.w	r5, r5, #15
 800ae78:	d04d      	beq.n	800af16 <_strtod_l+0x516>
 800ae7a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ae7e:	dd22      	ble.n	800aec6 <_strtod_l+0x4c6>
 800ae80:	2500      	movs	r5, #0
 800ae82:	46ab      	mov	fp, r5
 800ae84:	9509      	str	r5, [sp, #36]	; 0x24
 800ae86:	9505      	str	r5, [sp, #20]
 800ae88:	2322      	movs	r3, #34	; 0x22
 800ae8a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800af94 <_strtod_l+0x594>
 800ae8e:	6023      	str	r3, [r4, #0]
 800ae90:	f04f 0800 	mov.w	r8, #0
 800ae94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	f43f aded 	beq.w	800aa76 <_strtod_l+0x76>
 800ae9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f7ff f924 	bl	800a0ec <_Bfree>
 800aea4:	9905      	ldr	r1, [sp, #20]
 800aea6:	4620      	mov	r0, r4
 800aea8:	f7ff f920 	bl	800a0ec <_Bfree>
 800aeac:	4659      	mov	r1, fp
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f7ff f91c 	bl	800a0ec <_Bfree>
 800aeb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f7ff f918 	bl	800a0ec <_Bfree>
 800aebc:	4629      	mov	r1, r5
 800aebe:	4620      	mov	r0, r4
 800aec0:	f7ff f914 	bl	800a0ec <_Bfree>
 800aec4:	e5d7      	b.n	800aa76 <_strtod_l+0x76>
 800aec6:	4b32      	ldr	r3, [pc, #200]	; (800af90 <_strtod_l+0x590>)
 800aec8:	9304      	str	r3, [sp, #16]
 800aeca:	2300      	movs	r3, #0
 800aecc:	112d      	asrs	r5, r5, #4
 800aece:	4640      	mov	r0, r8
 800aed0:	4649      	mov	r1, r9
 800aed2:	469a      	mov	sl, r3
 800aed4:	2d01      	cmp	r5, #1
 800aed6:	dc21      	bgt.n	800af1c <_strtod_l+0x51c>
 800aed8:	b10b      	cbz	r3, 800aede <_strtod_l+0x4de>
 800aeda:	4680      	mov	r8, r0
 800aedc:	4689      	mov	r9, r1
 800aede:	492c      	ldr	r1, [pc, #176]	; (800af90 <_strtod_l+0x590>)
 800aee0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800aee4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800aee8:	4642      	mov	r2, r8
 800aeea:	464b      	mov	r3, r9
 800aeec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aef0:	f7f5 fb8a 	bl	8000608 <__aeabi_dmul>
 800aef4:	4b27      	ldr	r3, [pc, #156]	; (800af94 <_strtod_l+0x594>)
 800aef6:	460a      	mov	r2, r1
 800aef8:	400b      	ands	r3, r1
 800aefa:	4927      	ldr	r1, [pc, #156]	; (800af98 <_strtod_l+0x598>)
 800aefc:	428b      	cmp	r3, r1
 800aefe:	4680      	mov	r8, r0
 800af00:	d8be      	bhi.n	800ae80 <_strtod_l+0x480>
 800af02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800af06:	428b      	cmp	r3, r1
 800af08:	bf86      	itte	hi
 800af0a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800af9c <_strtod_l+0x59c>
 800af0e:	f04f 38ff 	movhi.w	r8, #4294967295
 800af12:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800af16:	2300      	movs	r3, #0
 800af18:	9304      	str	r3, [sp, #16]
 800af1a:	e07b      	b.n	800b014 <_strtod_l+0x614>
 800af1c:	07ea      	lsls	r2, r5, #31
 800af1e:	d505      	bpl.n	800af2c <_strtod_l+0x52c>
 800af20:	9b04      	ldr	r3, [sp, #16]
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	f7f5 fb6f 	bl	8000608 <__aeabi_dmul>
 800af2a:	2301      	movs	r3, #1
 800af2c:	9a04      	ldr	r2, [sp, #16]
 800af2e:	3208      	adds	r2, #8
 800af30:	f10a 0a01 	add.w	sl, sl, #1
 800af34:	106d      	asrs	r5, r5, #1
 800af36:	9204      	str	r2, [sp, #16]
 800af38:	e7cc      	b.n	800aed4 <_strtod_l+0x4d4>
 800af3a:	d0ec      	beq.n	800af16 <_strtod_l+0x516>
 800af3c:	426d      	negs	r5, r5
 800af3e:	f015 020f 	ands.w	r2, r5, #15
 800af42:	d00a      	beq.n	800af5a <_strtod_l+0x55a>
 800af44:	4b11      	ldr	r3, [pc, #68]	; (800af8c <_strtod_l+0x58c>)
 800af46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af4a:	4640      	mov	r0, r8
 800af4c:	4649      	mov	r1, r9
 800af4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af52:	f7f5 fc83 	bl	800085c <__aeabi_ddiv>
 800af56:	4680      	mov	r8, r0
 800af58:	4689      	mov	r9, r1
 800af5a:	112d      	asrs	r5, r5, #4
 800af5c:	d0db      	beq.n	800af16 <_strtod_l+0x516>
 800af5e:	2d1f      	cmp	r5, #31
 800af60:	dd1e      	ble.n	800afa0 <_strtod_l+0x5a0>
 800af62:	2500      	movs	r5, #0
 800af64:	46ab      	mov	fp, r5
 800af66:	9509      	str	r5, [sp, #36]	; 0x24
 800af68:	9505      	str	r5, [sp, #20]
 800af6a:	2322      	movs	r3, #34	; 0x22
 800af6c:	f04f 0800 	mov.w	r8, #0
 800af70:	f04f 0900 	mov.w	r9, #0
 800af74:	6023      	str	r3, [r4, #0]
 800af76:	e78d      	b.n	800ae94 <_strtod_l+0x494>
 800af78:	0800c921 	.word	0x0800c921
 800af7c:	0800cb4c 	.word	0x0800cb4c
 800af80:	0800c919 	.word	0x0800c919
 800af84:	0800c950 	.word	0x0800c950
 800af88:	0800ccdd 	.word	0x0800ccdd
 800af8c:	0800ca60 	.word	0x0800ca60
 800af90:	0800ca38 	.word	0x0800ca38
 800af94:	7ff00000 	.word	0x7ff00000
 800af98:	7ca00000 	.word	0x7ca00000
 800af9c:	7fefffff 	.word	0x7fefffff
 800afa0:	f015 0310 	ands.w	r3, r5, #16
 800afa4:	bf18      	it	ne
 800afa6:	236a      	movne	r3, #106	; 0x6a
 800afa8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b34c <_strtod_l+0x94c>
 800afac:	9304      	str	r3, [sp, #16]
 800afae:	4640      	mov	r0, r8
 800afb0:	4649      	mov	r1, r9
 800afb2:	2300      	movs	r3, #0
 800afb4:	07ea      	lsls	r2, r5, #31
 800afb6:	d504      	bpl.n	800afc2 <_strtod_l+0x5c2>
 800afb8:	e9da 2300 	ldrd	r2, r3, [sl]
 800afbc:	f7f5 fb24 	bl	8000608 <__aeabi_dmul>
 800afc0:	2301      	movs	r3, #1
 800afc2:	106d      	asrs	r5, r5, #1
 800afc4:	f10a 0a08 	add.w	sl, sl, #8
 800afc8:	d1f4      	bne.n	800afb4 <_strtod_l+0x5b4>
 800afca:	b10b      	cbz	r3, 800afd0 <_strtod_l+0x5d0>
 800afcc:	4680      	mov	r8, r0
 800afce:	4689      	mov	r9, r1
 800afd0:	9b04      	ldr	r3, [sp, #16]
 800afd2:	b1bb      	cbz	r3, 800b004 <_strtod_l+0x604>
 800afd4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800afd8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800afdc:	2b00      	cmp	r3, #0
 800afde:	4649      	mov	r1, r9
 800afe0:	dd10      	ble.n	800b004 <_strtod_l+0x604>
 800afe2:	2b1f      	cmp	r3, #31
 800afe4:	f340 811e 	ble.w	800b224 <_strtod_l+0x824>
 800afe8:	2b34      	cmp	r3, #52	; 0x34
 800afea:	bfde      	ittt	le
 800afec:	f04f 33ff 	movle.w	r3, #4294967295
 800aff0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aff4:	4093      	lslle	r3, r2
 800aff6:	f04f 0800 	mov.w	r8, #0
 800affa:	bfcc      	ite	gt
 800affc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b000:	ea03 0901 	andle.w	r9, r3, r1
 800b004:	2200      	movs	r2, #0
 800b006:	2300      	movs	r3, #0
 800b008:	4640      	mov	r0, r8
 800b00a:	4649      	mov	r1, r9
 800b00c:	f7f5 fd64 	bl	8000ad8 <__aeabi_dcmpeq>
 800b010:	2800      	cmp	r0, #0
 800b012:	d1a6      	bne.n	800af62 <_strtod_l+0x562>
 800b014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b01a:	4633      	mov	r3, r6
 800b01c:	465a      	mov	r2, fp
 800b01e:	4620      	mov	r0, r4
 800b020:	f7ff f8cc 	bl	800a1bc <__s2b>
 800b024:	9009      	str	r0, [sp, #36]	; 0x24
 800b026:	2800      	cmp	r0, #0
 800b028:	f43f af2a 	beq.w	800ae80 <_strtod_l+0x480>
 800b02c:	9a08      	ldr	r2, [sp, #32]
 800b02e:	9b05      	ldr	r3, [sp, #20]
 800b030:	2a00      	cmp	r2, #0
 800b032:	eba3 0307 	sub.w	r3, r3, r7
 800b036:	bfa8      	it	ge
 800b038:	2300      	movge	r3, #0
 800b03a:	930c      	str	r3, [sp, #48]	; 0x30
 800b03c:	2500      	movs	r5, #0
 800b03e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b042:	9312      	str	r3, [sp, #72]	; 0x48
 800b044:	46ab      	mov	fp, r5
 800b046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b048:	4620      	mov	r0, r4
 800b04a:	6859      	ldr	r1, [r3, #4]
 800b04c:	f7ff f80e 	bl	800a06c <_Balloc>
 800b050:	9005      	str	r0, [sp, #20]
 800b052:	2800      	cmp	r0, #0
 800b054:	f43f af18 	beq.w	800ae88 <_strtod_l+0x488>
 800b058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b05a:	691a      	ldr	r2, [r3, #16]
 800b05c:	3202      	adds	r2, #2
 800b05e:	f103 010c 	add.w	r1, r3, #12
 800b062:	0092      	lsls	r2, r2, #2
 800b064:	300c      	adds	r0, #12
 800b066:	f7fe f873 	bl	8009150 <memcpy>
 800b06a:	ec49 8b10 	vmov	d0, r8, r9
 800b06e:	aa18      	add	r2, sp, #96	; 0x60
 800b070:	a917      	add	r1, sp, #92	; 0x5c
 800b072:	4620      	mov	r0, r4
 800b074:	f7ff fbd6 	bl	800a824 <__d2b>
 800b078:	ec49 8b18 	vmov	d8, r8, r9
 800b07c:	9016      	str	r0, [sp, #88]	; 0x58
 800b07e:	2800      	cmp	r0, #0
 800b080:	f43f af02 	beq.w	800ae88 <_strtod_l+0x488>
 800b084:	2101      	movs	r1, #1
 800b086:	4620      	mov	r0, r4
 800b088:	f7ff f930 	bl	800a2ec <__i2b>
 800b08c:	4683      	mov	fp, r0
 800b08e:	2800      	cmp	r0, #0
 800b090:	f43f aefa 	beq.w	800ae88 <_strtod_l+0x488>
 800b094:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b096:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b098:	2e00      	cmp	r6, #0
 800b09a:	bfab      	itete	ge
 800b09c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b09e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b0a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b0a2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b0a6:	bfac      	ite	ge
 800b0a8:	eb06 0a03 	addge.w	sl, r6, r3
 800b0ac:	1b9f      	sublt	r7, r3, r6
 800b0ae:	9b04      	ldr	r3, [sp, #16]
 800b0b0:	1af6      	subs	r6, r6, r3
 800b0b2:	4416      	add	r6, r2
 800b0b4:	4ba0      	ldr	r3, [pc, #640]	; (800b338 <_strtod_l+0x938>)
 800b0b6:	3e01      	subs	r6, #1
 800b0b8:	429e      	cmp	r6, r3
 800b0ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b0be:	f280 80c4 	bge.w	800b24a <_strtod_l+0x84a>
 800b0c2:	1b9b      	subs	r3, r3, r6
 800b0c4:	2b1f      	cmp	r3, #31
 800b0c6:	eba2 0203 	sub.w	r2, r2, r3
 800b0ca:	f04f 0101 	mov.w	r1, #1
 800b0ce:	f300 80b0 	bgt.w	800b232 <_strtod_l+0x832>
 800b0d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b0d6:	930e      	str	r3, [sp, #56]	; 0x38
 800b0d8:	2300      	movs	r3, #0
 800b0da:	930d      	str	r3, [sp, #52]	; 0x34
 800b0dc:	eb0a 0602 	add.w	r6, sl, r2
 800b0e0:	9b04      	ldr	r3, [sp, #16]
 800b0e2:	45b2      	cmp	sl, r6
 800b0e4:	4417      	add	r7, r2
 800b0e6:	441f      	add	r7, r3
 800b0e8:	4653      	mov	r3, sl
 800b0ea:	bfa8      	it	ge
 800b0ec:	4633      	movge	r3, r6
 800b0ee:	42bb      	cmp	r3, r7
 800b0f0:	bfa8      	it	ge
 800b0f2:	463b      	movge	r3, r7
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	bfc2      	ittt	gt
 800b0f8:	1af6      	subgt	r6, r6, r3
 800b0fa:	1aff      	subgt	r7, r7, r3
 800b0fc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b102:	2b00      	cmp	r3, #0
 800b104:	dd17      	ble.n	800b136 <_strtod_l+0x736>
 800b106:	4659      	mov	r1, fp
 800b108:	461a      	mov	r2, r3
 800b10a:	4620      	mov	r0, r4
 800b10c:	f7ff f9ae 	bl	800a46c <__pow5mult>
 800b110:	4683      	mov	fp, r0
 800b112:	2800      	cmp	r0, #0
 800b114:	f43f aeb8 	beq.w	800ae88 <_strtod_l+0x488>
 800b118:	4601      	mov	r1, r0
 800b11a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b11c:	4620      	mov	r0, r4
 800b11e:	f7ff f8fb 	bl	800a318 <__multiply>
 800b122:	900b      	str	r0, [sp, #44]	; 0x2c
 800b124:	2800      	cmp	r0, #0
 800b126:	f43f aeaf 	beq.w	800ae88 <_strtod_l+0x488>
 800b12a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b12c:	4620      	mov	r0, r4
 800b12e:	f7fe ffdd 	bl	800a0ec <_Bfree>
 800b132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b134:	9316      	str	r3, [sp, #88]	; 0x58
 800b136:	2e00      	cmp	r6, #0
 800b138:	f300 808c 	bgt.w	800b254 <_strtod_l+0x854>
 800b13c:	9b08      	ldr	r3, [sp, #32]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	dd08      	ble.n	800b154 <_strtod_l+0x754>
 800b142:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b144:	9905      	ldr	r1, [sp, #20]
 800b146:	4620      	mov	r0, r4
 800b148:	f7ff f990 	bl	800a46c <__pow5mult>
 800b14c:	9005      	str	r0, [sp, #20]
 800b14e:	2800      	cmp	r0, #0
 800b150:	f43f ae9a 	beq.w	800ae88 <_strtod_l+0x488>
 800b154:	2f00      	cmp	r7, #0
 800b156:	dd08      	ble.n	800b16a <_strtod_l+0x76a>
 800b158:	9905      	ldr	r1, [sp, #20]
 800b15a:	463a      	mov	r2, r7
 800b15c:	4620      	mov	r0, r4
 800b15e:	f7ff f9df 	bl	800a520 <__lshift>
 800b162:	9005      	str	r0, [sp, #20]
 800b164:	2800      	cmp	r0, #0
 800b166:	f43f ae8f 	beq.w	800ae88 <_strtod_l+0x488>
 800b16a:	f1ba 0f00 	cmp.w	sl, #0
 800b16e:	dd08      	ble.n	800b182 <_strtod_l+0x782>
 800b170:	4659      	mov	r1, fp
 800b172:	4652      	mov	r2, sl
 800b174:	4620      	mov	r0, r4
 800b176:	f7ff f9d3 	bl	800a520 <__lshift>
 800b17a:	4683      	mov	fp, r0
 800b17c:	2800      	cmp	r0, #0
 800b17e:	f43f ae83 	beq.w	800ae88 <_strtod_l+0x488>
 800b182:	9a05      	ldr	r2, [sp, #20]
 800b184:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b186:	4620      	mov	r0, r4
 800b188:	f7ff fa52 	bl	800a630 <__mdiff>
 800b18c:	4605      	mov	r5, r0
 800b18e:	2800      	cmp	r0, #0
 800b190:	f43f ae7a 	beq.w	800ae88 <_strtod_l+0x488>
 800b194:	68c3      	ldr	r3, [r0, #12]
 800b196:	930b      	str	r3, [sp, #44]	; 0x2c
 800b198:	2300      	movs	r3, #0
 800b19a:	60c3      	str	r3, [r0, #12]
 800b19c:	4659      	mov	r1, fp
 800b19e:	f7ff fa2b 	bl	800a5f8 <__mcmp>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	da60      	bge.n	800b268 <_strtod_l+0x868>
 800b1a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1a8:	ea53 0308 	orrs.w	r3, r3, r8
 800b1ac:	f040 8084 	bne.w	800b2b8 <_strtod_l+0x8b8>
 800b1b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d17f      	bne.n	800b2b8 <_strtod_l+0x8b8>
 800b1b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1bc:	0d1b      	lsrs	r3, r3, #20
 800b1be:	051b      	lsls	r3, r3, #20
 800b1c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b1c4:	d978      	bls.n	800b2b8 <_strtod_l+0x8b8>
 800b1c6:	696b      	ldr	r3, [r5, #20]
 800b1c8:	b913      	cbnz	r3, 800b1d0 <_strtod_l+0x7d0>
 800b1ca:	692b      	ldr	r3, [r5, #16]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	dd73      	ble.n	800b2b8 <_strtod_l+0x8b8>
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f7ff f9a3 	bl	800a520 <__lshift>
 800b1da:	4659      	mov	r1, fp
 800b1dc:	4605      	mov	r5, r0
 800b1de:	f7ff fa0b 	bl	800a5f8 <__mcmp>
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	dd68      	ble.n	800b2b8 <_strtod_l+0x8b8>
 800b1e6:	9904      	ldr	r1, [sp, #16]
 800b1e8:	4a54      	ldr	r2, [pc, #336]	; (800b33c <_strtod_l+0x93c>)
 800b1ea:	464b      	mov	r3, r9
 800b1ec:	2900      	cmp	r1, #0
 800b1ee:	f000 8084 	beq.w	800b2fa <_strtod_l+0x8fa>
 800b1f2:	ea02 0109 	and.w	r1, r2, r9
 800b1f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b1fa:	dc7e      	bgt.n	800b2fa <_strtod_l+0x8fa>
 800b1fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b200:	f77f aeb3 	ble.w	800af6a <_strtod_l+0x56a>
 800b204:	4b4e      	ldr	r3, [pc, #312]	; (800b340 <_strtod_l+0x940>)
 800b206:	4640      	mov	r0, r8
 800b208:	4649      	mov	r1, r9
 800b20a:	2200      	movs	r2, #0
 800b20c:	f7f5 f9fc 	bl	8000608 <__aeabi_dmul>
 800b210:	4b4a      	ldr	r3, [pc, #296]	; (800b33c <_strtod_l+0x93c>)
 800b212:	400b      	ands	r3, r1
 800b214:	4680      	mov	r8, r0
 800b216:	4689      	mov	r9, r1
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f47f ae3f 	bne.w	800ae9c <_strtod_l+0x49c>
 800b21e:	2322      	movs	r3, #34	; 0x22
 800b220:	6023      	str	r3, [r4, #0]
 800b222:	e63b      	b.n	800ae9c <_strtod_l+0x49c>
 800b224:	f04f 32ff 	mov.w	r2, #4294967295
 800b228:	fa02 f303 	lsl.w	r3, r2, r3
 800b22c:	ea03 0808 	and.w	r8, r3, r8
 800b230:	e6e8      	b.n	800b004 <_strtod_l+0x604>
 800b232:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b236:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b23a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b23e:	36e2      	adds	r6, #226	; 0xe2
 800b240:	fa01 f306 	lsl.w	r3, r1, r6
 800b244:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b248:	e748      	b.n	800b0dc <_strtod_l+0x6dc>
 800b24a:	2100      	movs	r1, #0
 800b24c:	2301      	movs	r3, #1
 800b24e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b252:	e743      	b.n	800b0dc <_strtod_l+0x6dc>
 800b254:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b256:	4632      	mov	r2, r6
 800b258:	4620      	mov	r0, r4
 800b25a:	f7ff f961 	bl	800a520 <__lshift>
 800b25e:	9016      	str	r0, [sp, #88]	; 0x58
 800b260:	2800      	cmp	r0, #0
 800b262:	f47f af6b 	bne.w	800b13c <_strtod_l+0x73c>
 800b266:	e60f      	b.n	800ae88 <_strtod_l+0x488>
 800b268:	46ca      	mov	sl, r9
 800b26a:	d171      	bne.n	800b350 <_strtod_l+0x950>
 800b26c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b26e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b272:	b352      	cbz	r2, 800b2ca <_strtod_l+0x8ca>
 800b274:	4a33      	ldr	r2, [pc, #204]	; (800b344 <_strtod_l+0x944>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d12a      	bne.n	800b2d0 <_strtod_l+0x8d0>
 800b27a:	9b04      	ldr	r3, [sp, #16]
 800b27c:	4641      	mov	r1, r8
 800b27e:	b1fb      	cbz	r3, 800b2c0 <_strtod_l+0x8c0>
 800b280:	4b2e      	ldr	r3, [pc, #184]	; (800b33c <_strtod_l+0x93c>)
 800b282:	ea09 0303 	and.w	r3, r9, r3
 800b286:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b28a:	f04f 32ff 	mov.w	r2, #4294967295
 800b28e:	d81a      	bhi.n	800b2c6 <_strtod_l+0x8c6>
 800b290:	0d1b      	lsrs	r3, r3, #20
 800b292:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b296:	fa02 f303 	lsl.w	r3, r2, r3
 800b29a:	4299      	cmp	r1, r3
 800b29c:	d118      	bne.n	800b2d0 <_strtod_l+0x8d0>
 800b29e:	4b2a      	ldr	r3, [pc, #168]	; (800b348 <_strtod_l+0x948>)
 800b2a0:	459a      	cmp	sl, r3
 800b2a2:	d102      	bne.n	800b2aa <_strtod_l+0x8aa>
 800b2a4:	3101      	adds	r1, #1
 800b2a6:	f43f adef 	beq.w	800ae88 <_strtod_l+0x488>
 800b2aa:	4b24      	ldr	r3, [pc, #144]	; (800b33c <_strtod_l+0x93c>)
 800b2ac:	ea0a 0303 	and.w	r3, sl, r3
 800b2b0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b2b4:	f04f 0800 	mov.w	r8, #0
 800b2b8:	9b04      	ldr	r3, [sp, #16]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1a2      	bne.n	800b204 <_strtod_l+0x804>
 800b2be:	e5ed      	b.n	800ae9c <_strtod_l+0x49c>
 800b2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c4:	e7e9      	b.n	800b29a <_strtod_l+0x89a>
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	e7e7      	b.n	800b29a <_strtod_l+0x89a>
 800b2ca:	ea53 0308 	orrs.w	r3, r3, r8
 800b2ce:	d08a      	beq.n	800b1e6 <_strtod_l+0x7e6>
 800b2d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2d2:	b1e3      	cbz	r3, 800b30e <_strtod_l+0x90e>
 800b2d4:	ea13 0f0a 	tst.w	r3, sl
 800b2d8:	d0ee      	beq.n	800b2b8 <_strtod_l+0x8b8>
 800b2da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2dc:	9a04      	ldr	r2, [sp, #16]
 800b2de:	4640      	mov	r0, r8
 800b2e0:	4649      	mov	r1, r9
 800b2e2:	b1c3      	cbz	r3, 800b316 <_strtod_l+0x916>
 800b2e4:	f7ff fb6f 	bl	800a9c6 <sulp>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	ec51 0b18 	vmov	r0, r1, d8
 800b2f0:	f7f4 ffd4 	bl	800029c <__adddf3>
 800b2f4:	4680      	mov	r8, r0
 800b2f6:	4689      	mov	r9, r1
 800b2f8:	e7de      	b.n	800b2b8 <_strtod_l+0x8b8>
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b300:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b304:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b308:	f04f 38ff 	mov.w	r8, #4294967295
 800b30c:	e7d4      	b.n	800b2b8 <_strtod_l+0x8b8>
 800b30e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b310:	ea13 0f08 	tst.w	r3, r8
 800b314:	e7e0      	b.n	800b2d8 <_strtod_l+0x8d8>
 800b316:	f7ff fb56 	bl	800a9c6 <sulp>
 800b31a:	4602      	mov	r2, r0
 800b31c:	460b      	mov	r3, r1
 800b31e:	ec51 0b18 	vmov	r0, r1, d8
 800b322:	f7f4 ffb9 	bl	8000298 <__aeabi_dsub>
 800b326:	2200      	movs	r2, #0
 800b328:	2300      	movs	r3, #0
 800b32a:	4680      	mov	r8, r0
 800b32c:	4689      	mov	r9, r1
 800b32e:	f7f5 fbd3 	bl	8000ad8 <__aeabi_dcmpeq>
 800b332:	2800      	cmp	r0, #0
 800b334:	d0c0      	beq.n	800b2b8 <_strtod_l+0x8b8>
 800b336:	e618      	b.n	800af6a <_strtod_l+0x56a>
 800b338:	fffffc02 	.word	0xfffffc02
 800b33c:	7ff00000 	.word	0x7ff00000
 800b340:	39500000 	.word	0x39500000
 800b344:	000fffff 	.word	0x000fffff
 800b348:	7fefffff 	.word	0x7fefffff
 800b34c:	0800cb60 	.word	0x0800cb60
 800b350:	4659      	mov	r1, fp
 800b352:	4628      	mov	r0, r5
 800b354:	f7ff fac0 	bl	800a8d8 <__ratio>
 800b358:	ec57 6b10 	vmov	r6, r7, d0
 800b35c:	ee10 0a10 	vmov	r0, s0
 800b360:	2200      	movs	r2, #0
 800b362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b366:	4639      	mov	r1, r7
 800b368:	f7f5 fbca 	bl	8000b00 <__aeabi_dcmple>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d071      	beq.n	800b454 <_strtod_l+0xa54>
 800b370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b372:	2b00      	cmp	r3, #0
 800b374:	d17c      	bne.n	800b470 <_strtod_l+0xa70>
 800b376:	f1b8 0f00 	cmp.w	r8, #0
 800b37a:	d15a      	bne.n	800b432 <_strtod_l+0xa32>
 800b37c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b380:	2b00      	cmp	r3, #0
 800b382:	d15d      	bne.n	800b440 <_strtod_l+0xa40>
 800b384:	4b90      	ldr	r3, [pc, #576]	; (800b5c8 <_strtod_l+0xbc8>)
 800b386:	2200      	movs	r2, #0
 800b388:	4630      	mov	r0, r6
 800b38a:	4639      	mov	r1, r7
 800b38c:	f7f5 fbae 	bl	8000aec <__aeabi_dcmplt>
 800b390:	2800      	cmp	r0, #0
 800b392:	d15c      	bne.n	800b44e <_strtod_l+0xa4e>
 800b394:	4630      	mov	r0, r6
 800b396:	4639      	mov	r1, r7
 800b398:	4b8c      	ldr	r3, [pc, #560]	; (800b5cc <_strtod_l+0xbcc>)
 800b39a:	2200      	movs	r2, #0
 800b39c:	f7f5 f934 	bl	8000608 <__aeabi_dmul>
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	460f      	mov	r7, r1
 800b3a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b3a8:	9606      	str	r6, [sp, #24]
 800b3aa:	9307      	str	r3, [sp, #28]
 800b3ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b3b4:	4b86      	ldr	r3, [pc, #536]	; (800b5d0 <_strtod_l+0xbd0>)
 800b3b6:	ea0a 0303 	and.w	r3, sl, r3
 800b3ba:	930d      	str	r3, [sp, #52]	; 0x34
 800b3bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3be:	4b85      	ldr	r3, [pc, #532]	; (800b5d4 <_strtod_l+0xbd4>)
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	f040 8090 	bne.w	800b4e6 <_strtod_l+0xae6>
 800b3c6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b3ca:	ec49 8b10 	vmov	d0, r8, r9
 800b3ce:	f7ff f9b9 	bl	800a744 <__ulp>
 800b3d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3d6:	ec51 0b10 	vmov	r0, r1, d0
 800b3da:	f7f5 f915 	bl	8000608 <__aeabi_dmul>
 800b3de:	4642      	mov	r2, r8
 800b3e0:	464b      	mov	r3, r9
 800b3e2:	f7f4 ff5b 	bl	800029c <__adddf3>
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	4979      	ldr	r1, [pc, #484]	; (800b5d0 <_strtod_l+0xbd0>)
 800b3ea:	4a7b      	ldr	r2, [pc, #492]	; (800b5d8 <_strtod_l+0xbd8>)
 800b3ec:	4019      	ands	r1, r3
 800b3ee:	4291      	cmp	r1, r2
 800b3f0:	4680      	mov	r8, r0
 800b3f2:	d944      	bls.n	800b47e <_strtod_l+0xa7e>
 800b3f4:	ee18 2a90 	vmov	r2, s17
 800b3f8:	4b78      	ldr	r3, [pc, #480]	; (800b5dc <_strtod_l+0xbdc>)
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d104      	bne.n	800b408 <_strtod_l+0xa08>
 800b3fe:	ee18 3a10 	vmov	r3, s16
 800b402:	3301      	adds	r3, #1
 800b404:	f43f ad40 	beq.w	800ae88 <_strtod_l+0x488>
 800b408:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b5dc <_strtod_l+0xbdc>
 800b40c:	f04f 38ff 	mov.w	r8, #4294967295
 800b410:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b412:	4620      	mov	r0, r4
 800b414:	f7fe fe6a 	bl	800a0ec <_Bfree>
 800b418:	9905      	ldr	r1, [sp, #20]
 800b41a:	4620      	mov	r0, r4
 800b41c:	f7fe fe66 	bl	800a0ec <_Bfree>
 800b420:	4659      	mov	r1, fp
 800b422:	4620      	mov	r0, r4
 800b424:	f7fe fe62 	bl	800a0ec <_Bfree>
 800b428:	4629      	mov	r1, r5
 800b42a:	4620      	mov	r0, r4
 800b42c:	f7fe fe5e 	bl	800a0ec <_Bfree>
 800b430:	e609      	b.n	800b046 <_strtod_l+0x646>
 800b432:	f1b8 0f01 	cmp.w	r8, #1
 800b436:	d103      	bne.n	800b440 <_strtod_l+0xa40>
 800b438:	f1b9 0f00 	cmp.w	r9, #0
 800b43c:	f43f ad95 	beq.w	800af6a <_strtod_l+0x56a>
 800b440:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b598 <_strtod_l+0xb98>
 800b444:	4f60      	ldr	r7, [pc, #384]	; (800b5c8 <_strtod_l+0xbc8>)
 800b446:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b44a:	2600      	movs	r6, #0
 800b44c:	e7ae      	b.n	800b3ac <_strtod_l+0x9ac>
 800b44e:	4f5f      	ldr	r7, [pc, #380]	; (800b5cc <_strtod_l+0xbcc>)
 800b450:	2600      	movs	r6, #0
 800b452:	e7a7      	b.n	800b3a4 <_strtod_l+0x9a4>
 800b454:	4b5d      	ldr	r3, [pc, #372]	; (800b5cc <_strtod_l+0xbcc>)
 800b456:	4630      	mov	r0, r6
 800b458:	4639      	mov	r1, r7
 800b45a:	2200      	movs	r2, #0
 800b45c:	f7f5 f8d4 	bl	8000608 <__aeabi_dmul>
 800b460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b462:	4606      	mov	r6, r0
 800b464:	460f      	mov	r7, r1
 800b466:	2b00      	cmp	r3, #0
 800b468:	d09c      	beq.n	800b3a4 <_strtod_l+0x9a4>
 800b46a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b46e:	e79d      	b.n	800b3ac <_strtod_l+0x9ac>
 800b470:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b5a0 <_strtod_l+0xba0>
 800b474:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b478:	ec57 6b17 	vmov	r6, r7, d7
 800b47c:	e796      	b.n	800b3ac <_strtod_l+0x9ac>
 800b47e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b482:	9b04      	ldr	r3, [sp, #16]
 800b484:	46ca      	mov	sl, r9
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1c2      	bne.n	800b410 <_strtod_l+0xa10>
 800b48a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b48e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b490:	0d1b      	lsrs	r3, r3, #20
 800b492:	051b      	lsls	r3, r3, #20
 800b494:	429a      	cmp	r2, r3
 800b496:	d1bb      	bne.n	800b410 <_strtod_l+0xa10>
 800b498:	4630      	mov	r0, r6
 800b49a:	4639      	mov	r1, r7
 800b49c:	f7f5 fc14 	bl	8000cc8 <__aeabi_d2lz>
 800b4a0:	f7f5 f884 	bl	80005ac <__aeabi_l2d>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	4639      	mov	r1, r7
 800b4ac:	f7f4 fef4 	bl	8000298 <__aeabi_dsub>
 800b4b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4b6:	ea43 0308 	orr.w	r3, r3, r8
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	4606      	mov	r6, r0
 800b4be:	460f      	mov	r7, r1
 800b4c0:	d054      	beq.n	800b56c <_strtod_l+0xb6c>
 800b4c2:	a339      	add	r3, pc, #228	; (adr r3, 800b5a8 <_strtod_l+0xba8>)
 800b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c8:	f7f5 fb10 	bl	8000aec <__aeabi_dcmplt>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	f47f ace5 	bne.w	800ae9c <_strtod_l+0x49c>
 800b4d2:	a337      	add	r3, pc, #220	; (adr r3, 800b5b0 <_strtod_l+0xbb0>)
 800b4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d8:	4630      	mov	r0, r6
 800b4da:	4639      	mov	r1, r7
 800b4dc:	f7f5 fb24 	bl	8000b28 <__aeabi_dcmpgt>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d095      	beq.n	800b410 <_strtod_l+0xa10>
 800b4e4:	e4da      	b.n	800ae9c <_strtod_l+0x49c>
 800b4e6:	9b04      	ldr	r3, [sp, #16]
 800b4e8:	b333      	cbz	r3, 800b538 <_strtod_l+0xb38>
 800b4ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b4f0:	d822      	bhi.n	800b538 <_strtod_l+0xb38>
 800b4f2:	a331      	add	r3, pc, #196	; (adr r3, 800b5b8 <_strtod_l+0xbb8>)
 800b4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	4639      	mov	r1, r7
 800b4fc:	f7f5 fb00 	bl	8000b00 <__aeabi_dcmple>
 800b500:	b1a0      	cbz	r0, 800b52c <_strtod_l+0xb2c>
 800b502:	4639      	mov	r1, r7
 800b504:	4630      	mov	r0, r6
 800b506:	f7f5 fb57 	bl	8000bb8 <__aeabi_d2uiz>
 800b50a:	2801      	cmp	r0, #1
 800b50c:	bf38      	it	cc
 800b50e:	2001      	movcc	r0, #1
 800b510:	f7f5 f800 	bl	8000514 <__aeabi_ui2d>
 800b514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b516:	4606      	mov	r6, r0
 800b518:	460f      	mov	r7, r1
 800b51a:	bb23      	cbnz	r3, 800b566 <_strtod_l+0xb66>
 800b51c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b520:	9010      	str	r0, [sp, #64]	; 0x40
 800b522:	9311      	str	r3, [sp, #68]	; 0x44
 800b524:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b528:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b52c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b52e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b530:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b534:	1a9b      	subs	r3, r3, r2
 800b536:	930f      	str	r3, [sp, #60]	; 0x3c
 800b538:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b53c:	eeb0 0a48 	vmov.f32	s0, s16
 800b540:	eef0 0a68 	vmov.f32	s1, s17
 800b544:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b548:	f7ff f8fc 	bl	800a744 <__ulp>
 800b54c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b550:	ec53 2b10 	vmov	r2, r3, d0
 800b554:	f7f5 f858 	bl	8000608 <__aeabi_dmul>
 800b558:	ec53 2b18 	vmov	r2, r3, d8
 800b55c:	f7f4 fe9e 	bl	800029c <__adddf3>
 800b560:	4680      	mov	r8, r0
 800b562:	4689      	mov	r9, r1
 800b564:	e78d      	b.n	800b482 <_strtod_l+0xa82>
 800b566:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b56a:	e7db      	b.n	800b524 <_strtod_l+0xb24>
 800b56c:	a314      	add	r3, pc, #80	; (adr r3, 800b5c0 <_strtod_l+0xbc0>)
 800b56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b572:	f7f5 fabb 	bl	8000aec <__aeabi_dcmplt>
 800b576:	e7b3      	b.n	800b4e0 <_strtod_l+0xae0>
 800b578:	2300      	movs	r3, #0
 800b57a:	930a      	str	r3, [sp, #40]	; 0x28
 800b57c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b57e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b580:	6013      	str	r3, [r2, #0]
 800b582:	f7ff ba7c 	b.w	800aa7e <_strtod_l+0x7e>
 800b586:	2a65      	cmp	r2, #101	; 0x65
 800b588:	f43f ab75 	beq.w	800ac76 <_strtod_l+0x276>
 800b58c:	2a45      	cmp	r2, #69	; 0x45
 800b58e:	f43f ab72 	beq.w	800ac76 <_strtod_l+0x276>
 800b592:	2301      	movs	r3, #1
 800b594:	f7ff bbaa 	b.w	800acec <_strtod_l+0x2ec>
 800b598:	00000000 	.word	0x00000000
 800b59c:	bff00000 	.word	0xbff00000
 800b5a0:	00000000 	.word	0x00000000
 800b5a4:	3ff00000 	.word	0x3ff00000
 800b5a8:	94a03595 	.word	0x94a03595
 800b5ac:	3fdfffff 	.word	0x3fdfffff
 800b5b0:	35afe535 	.word	0x35afe535
 800b5b4:	3fe00000 	.word	0x3fe00000
 800b5b8:	ffc00000 	.word	0xffc00000
 800b5bc:	41dfffff 	.word	0x41dfffff
 800b5c0:	94a03595 	.word	0x94a03595
 800b5c4:	3fcfffff 	.word	0x3fcfffff
 800b5c8:	3ff00000 	.word	0x3ff00000
 800b5cc:	3fe00000 	.word	0x3fe00000
 800b5d0:	7ff00000 	.word	0x7ff00000
 800b5d4:	7fe00000 	.word	0x7fe00000
 800b5d8:	7c9fffff 	.word	0x7c9fffff
 800b5dc:	7fefffff 	.word	0x7fefffff

0800b5e0 <_strtod_r>:
 800b5e0:	4b01      	ldr	r3, [pc, #4]	; (800b5e8 <_strtod_r+0x8>)
 800b5e2:	f7ff ba0d 	b.w	800aa00 <_strtod_l>
 800b5e6:	bf00      	nop
 800b5e8:	20000158 	.word	0x20000158

0800b5ec <_strtol_l.constprop.0>:
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f2:	d001      	beq.n	800b5f8 <_strtol_l.constprop.0+0xc>
 800b5f4:	2b24      	cmp	r3, #36	; 0x24
 800b5f6:	d906      	bls.n	800b606 <_strtol_l.constprop.0+0x1a>
 800b5f8:	f7fd fd7e 	bl	80090f8 <__errno>
 800b5fc:	2316      	movs	r3, #22
 800b5fe:	6003      	str	r3, [r0, #0]
 800b600:	2000      	movs	r0, #0
 800b602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b606:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b6ec <_strtol_l.constprop.0+0x100>
 800b60a:	460d      	mov	r5, r1
 800b60c:	462e      	mov	r6, r5
 800b60e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b612:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b616:	f017 0708 	ands.w	r7, r7, #8
 800b61a:	d1f7      	bne.n	800b60c <_strtol_l.constprop.0+0x20>
 800b61c:	2c2d      	cmp	r4, #45	; 0x2d
 800b61e:	d132      	bne.n	800b686 <_strtol_l.constprop.0+0x9a>
 800b620:	782c      	ldrb	r4, [r5, #0]
 800b622:	2701      	movs	r7, #1
 800b624:	1cb5      	adds	r5, r6, #2
 800b626:	2b00      	cmp	r3, #0
 800b628:	d05b      	beq.n	800b6e2 <_strtol_l.constprop.0+0xf6>
 800b62a:	2b10      	cmp	r3, #16
 800b62c:	d109      	bne.n	800b642 <_strtol_l.constprop.0+0x56>
 800b62e:	2c30      	cmp	r4, #48	; 0x30
 800b630:	d107      	bne.n	800b642 <_strtol_l.constprop.0+0x56>
 800b632:	782c      	ldrb	r4, [r5, #0]
 800b634:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b638:	2c58      	cmp	r4, #88	; 0x58
 800b63a:	d14d      	bne.n	800b6d8 <_strtol_l.constprop.0+0xec>
 800b63c:	786c      	ldrb	r4, [r5, #1]
 800b63e:	2310      	movs	r3, #16
 800b640:	3502      	adds	r5, #2
 800b642:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b646:	f108 38ff 	add.w	r8, r8, #4294967295
 800b64a:	f04f 0e00 	mov.w	lr, #0
 800b64e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b652:	4676      	mov	r6, lr
 800b654:	fb03 8a19 	mls	sl, r3, r9, r8
 800b658:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b65c:	f1bc 0f09 	cmp.w	ip, #9
 800b660:	d816      	bhi.n	800b690 <_strtol_l.constprop.0+0xa4>
 800b662:	4664      	mov	r4, ip
 800b664:	42a3      	cmp	r3, r4
 800b666:	dd24      	ble.n	800b6b2 <_strtol_l.constprop.0+0xc6>
 800b668:	f1be 3fff 	cmp.w	lr, #4294967295
 800b66c:	d008      	beq.n	800b680 <_strtol_l.constprop.0+0x94>
 800b66e:	45b1      	cmp	r9, r6
 800b670:	d31c      	bcc.n	800b6ac <_strtol_l.constprop.0+0xc0>
 800b672:	d101      	bne.n	800b678 <_strtol_l.constprop.0+0x8c>
 800b674:	45a2      	cmp	sl, r4
 800b676:	db19      	blt.n	800b6ac <_strtol_l.constprop.0+0xc0>
 800b678:	fb06 4603 	mla	r6, r6, r3, r4
 800b67c:	f04f 0e01 	mov.w	lr, #1
 800b680:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b684:	e7e8      	b.n	800b658 <_strtol_l.constprop.0+0x6c>
 800b686:	2c2b      	cmp	r4, #43	; 0x2b
 800b688:	bf04      	itt	eq
 800b68a:	782c      	ldrbeq	r4, [r5, #0]
 800b68c:	1cb5      	addeq	r5, r6, #2
 800b68e:	e7ca      	b.n	800b626 <_strtol_l.constprop.0+0x3a>
 800b690:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b694:	f1bc 0f19 	cmp.w	ip, #25
 800b698:	d801      	bhi.n	800b69e <_strtol_l.constprop.0+0xb2>
 800b69a:	3c37      	subs	r4, #55	; 0x37
 800b69c:	e7e2      	b.n	800b664 <_strtol_l.constprop.0+0x78>
 800b69e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b6a2:	f1bc 0f19 	cmp.w	ip, #25
 800b6a6:	d804      	bhi.n	800b6b2 <_strtol_l.constprop.0+0xc6>
 800b6a8:	3c57      	subs	r4, #87	; 0x57
 800b6aa:	e7db      	b.n	800b664 <_strtol_l.constprop.0+0x78>
 800b6ac:	f04f 3eff 	mov.w	lr, #4294967295
 800b6b0:	e7e6      	b.n	800b680 <_strtol_l.constprop.0+0x94>
 800b6b2:	f1be 3fff 	cmp.w	lr, #4294967295
 800b6b6:	d105      	bne.n	800b6c4 <_strtol_l.constprop.0+0xd8>
 800b6b8:	2322      	movs	r3, #34	; 0x22
 800b6ba:	6003      	str	r3, [r0, #0]
 800b6bc:	4646      	mov	r6, r8
 800b6be:	b942      	cbnz	r2, 800b6d2 <_strtol_l.constprop.0+0xe6>
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	e79e      	b.n	800b602 <_strtol_l.constprop.0+0x16>
 800b6c4:	b107      	cbz	r7, 800b6c8 <_strtol_l.constprop.0+0xdc>
 800b6c6:	4276      	negs	r6, r6
 800b6c8:	2a00      	cmp	r2, #0
 800b6ca:	d0f9      	beq.n	800b6c0 <_strtol_l.constprop.0+0xd4>
 800b6cc:	f1be 0f00 	cmp.w	lr, #0
 800b6d0:	d000      	beq.n	800b6d4 <_strtol_l.constprop.0+0xe8>
 800b6d2:	1e69      	subs	r1, r5, #1
 800b6d4:	6011      	str	r1, [r2, #0]
 800b6d6:	e7f3      	b.n	800b6c0 <_strtol_l.constprop.0+0xd4>
 800b6d8:	2430      	movs	r4, #48	; 0x30
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1b1      	bne.n	800b642 <_strtol_l.constprop.0+0x56>
 800b6de:	2308      	movs	r3, #8
 800b6e0:	e7af      	b.n	800b642 <_strtol_l.constprop.0+0x56>
 800b6e2:	2c30      	cmp	r4, #48	; 0x30
 800b6e4:	d0a5      	beq.n	800b632 <_strtol_l.constprop.0+0x46>
 800b6e6:	230a      	movs	r3, #10
 800b6e8:	e7ab      	b.n	800b642 <_strtol_l.constprop.0+0x56>
 800b6ea:	bf00      	nop
 800b6ec:	0800cb89 	.word	0x0800cb89

0800b6f0 <_strtol_r>:
 800b6f0:	f7ff bf7c 	b.w	800b5ec <_strtol_l.constprop.0>

0800b6f4 <__ssputs_r>:
 800b6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f8:	688e      	ldr	r6, [r1, #8]
 800b6fa:	461f      	mov	r7, r3
 800b6fc:	42be      	cmp	r6, r7
 800b6fe:	680b      	ldr	r3, [r1, #0]
 800b700:	4682      	mov	sl, r0
 800b702:	460c      	mov	r4, r1
 800b704:	4690      	mov	r8, r2
 800b706:	d82c      	bhi.n	800b762 <__ssputs_r+0x6e>
 800b708:	898a      	ldrh	r2, [r1, #12]
 800b70a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b70e:	d026      	beq.n	800b75e <__ssputs_r+0x6a>
 800b710:	6965      	ldr	r5, [r4, #20]
 800b712:	6909      	ldr	r1, [r1, #16]
 800b714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b718:	eba3 0901 	sub.w	r9, r3, r1
 800b71c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b720:	1c7b      	adds	r3, r7, #1
 800b722:	444b      	add	r3, r9
 800b724:	106d      	asrs	r5, r5, #1
 800b726:	429d      	cmp	r5, r3
 800b728:	bf38      	it	cc
 800b72a:	461d      	movcc	r5, r3
 800b72c:	0553      	lsls	r3, r2, #21
 800b72e:	d527      	bpl.n	800b780 <__ssputs_r+0x8c>
 800b730:	4629      	mov	r1, r5
 800b732:	f7fe fc0f 	bl	8009f54 <_malloc_r>
 800b736:	4606      	mov	r6, r0
 800b738:	b360      	cbz	r0, 800b794 <__ssputs_r+0xa0>
 800b73a:	6921      	ldr	r1, [r4, #16]
 800b73c:	464a      	mov	r2, r9
 800b73e:	f7fd fd07 	bl	8009150 <memcpy>
 800b742:	89a3      	ldrh	r3, [r4, #12]
 800b744:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b74c:	81a3      	strh	r3, [r4, #12]
 800b74e:	6126      	str	r6, [r4, #16]
 800b750:	6165      	str	r5, [r4, #20]
 800b752:	444e      	add	r6, r9
 800b754:	eba5 0509 	sub.w	r5, r5, r9
 800b758:	6026      	str	r6, [r4, #0]
 800b75a:	60a5      	str	r5, [r4, #8]
 800b75c:	463e      	mov	r6, r7
 800b75e:	42be      	cmp	r6, r7
 800b760:	d900      	bls.n	800b764 <__ssputs_r+0x70>
 800b762:	463e      	mov	r6, r7
 800b764:	6820      	ldr	r0, [r4, #0]
 800b766:	4632      	mov	r2, r6
 800b768:	4641      	mov	r1, r8
 800b76a:	f000 fba3 	bl	800beb4 <memmove>
 800b76e:	68a3      	ldr	r3, [r4, #8]
 800b770:	1b9b      	subs	r3, r3, r6
 800b772:	60a3      	str	r3, [r4, #8]
 800b774:	6823      	ldr	r3, [r4, #0]
 800b776:	4433      	add	r3, r6
 800b778:	6023      	str	r3, [r4, #0]
 800b77a:	2000      	movs	r0, #0
 800b77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b780:	462a      	mov	r2, r5
 800b782:	f000 ff9a 	bl	800c6ba <_realloc_r>
 800b786:	4606      	mov	r6, r0
 800b788:	2800      	cmp	r0, #0
 800b78a:	d1e0      	bne.n	800b74e <__ssputs_r+0x5a>
 800b78c:	6921      	ldr	r1, [r4, #16]
 800b78e:	4650      	mov	r0, sl
 800b790:	f7fe fb6c 	bl	8009e6c <_free_r>
 800b794:	230c      	movs	r3, #12
 800b796:	f8ca 3000 	str.w	r3, [sl]
 800b79a:	89a3      	ldrh	r3, [r4, #12]
 800b79c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7a0:	81a3      	strh	r3, [r4, #12]
 800b7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a6:	e7e9      	b.n	800b77c <__ssputs_r+0x88>

0800b7a8 <_svfiprintf_r>:
 800b7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ac:	4698      	mov	r8, r3
 800b7ae:	898b      	ldrh	r3, [r1, #12]
 800b7b0:	061b      	lsls	r3, r3, #24
 800b7b2:	b09d      	sub	sp, #116	; 0x74
 800b7b4:	4607      	mov	r7, r0
 800b7b6:	460d      	mov	r5, r1
 800b7b8:	4614      	mov	r4, r2
 800b7ba:	d50e      	bpl.n	800b7da <_svfiprintf_r+0x32>
 800b7bc:	690b      	ldr	r3, [r1, #16]
 800b7be:	b963      	cbnz	r3, 800b7da <_svfiprintf_r+0x32>
 800b7c0:	2140      	movs	r1, #64	; 0x40
 800b7c2:	f7fe fbc7 	bl	8009f54 <_malloc_r>
 800b7c6:	6028      	str	r0, [r5, #0]
 800b7c8:	6128      	str	r0, [r5, #16]
 800b7ca:	b920      	cbnz	r0, 800b7d6 <_svfiprintf_r+0x2e>
 800b7cc:	230c      	movs	r3, #12
 800b7ce:	603b      	str	r3, [r7, #0]
 800b7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d4:	e0d0      	b.n	800b978 <_svfiprintf_r+0x1d0>
 800b7d6:	2340      	movs	r3, #64	; 0x40
 800b7d8:	616b      	str	r3, [r5, #20]
 800b7da:	2300      	movs	r3, #0
 800b7dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b7de:	2320      	movs	r3, #32
 800b7e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7e8:	2330      	movs	r3, #48	; 0x30
 800b7ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b990 <_svfiprintf_r+0x1e8>
 800b7ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7f2:	f04f 0901 	mov.w	r9, #1
 800b7f6:	4623      	mov	r3, r4
 800b7f8:	469a      	mov	sl, r3
 800b7fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7fe:	b10a      	cbz	r2, 800b804 <_svfiprintf_r+0x5c>
 800b800:	2a25      	cmp	r2, #37	; 0x25
 800b802:	d1f9      	bne.n	800b7f8 <_svfiprintf_r+0x50>
 800b804:	ebba 0b04 	subs.w	fp, sl, r4
 800b808:	d00b      	beq.n	800b822 <_svfiprintf_r+0x7a>
 800b80a:	465b      	mov	r3, fp
 800b80c:	4622      	mov	r2, r4
 800b80e:	4629      	mov	r1, r5
 800b810:	4638      	mov	r0, r7
 800b812:	f7ff ff6f 	bl	800b6f4 <__ssputs_r>
 800b816:	3001      	adds	r0, #1
 800b818:	f000 80a9 	beq.w	800b96e <_svfiprintf_r+0x1c6>
 800b81c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b81e:	445a      	add	r2, fp
 800b820:	9209      	str	r2, [sp, #36]	; 0x24
 800b822:	f89a 3000 	ldrb.w	r3, [sl]
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 80a1 	beq.w	800b96e <_svfiprintf_r+0x1c6>
 800b82c:	2300      	movs	r3, #0
 800b82e:	f04f 32ff 	mov.w	r2, #4294967295
 800b832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b836:	f10a 0a01 	add.w	sl, sl, #1
 800b83a:	9304      	str	r3, [sp, #16]
 800b83c:	9307      	str	r3, [sp, #28]
 800b83e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b842:	931a      	str	r3, [sp, #104]	; 0x68
 800b844:	4654      	mov	r4, sl
 800b846:	2205      	movs	r2, #5
 800b848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b84c:	4850      	ldr	r0, [pc, #320]	; (800b990 <_svfiprintf_r+0x1e8>)
 800b84e:	f7f4 fcc7 	bl	80001e0 <memchr>
 800b852:	9a04      	ldr	r2, [sp, #16]
 800b854:	b9d8      	cbnz	r0, 800b88e <_svfiprintf_r+0xe6>
 800b856:	06d0      	lsls	r0, r2, #27
 800b858:	bf44      	itt	mi
 800b85a:	2320      	movmi	r3, #32
 800b85c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b860:	0711      	lsls	r1, r2, #28
 800b862:	bf44      	itt	mi
 800b864:	232b      	movmi	r3, #43	; 0x2b
 800b866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b86a:	f89a 3000 	ldrb.w	r3, [sl]
 800b86e:	2b2a      	cmp	r3, #42	; 0x2a
 800b870:	d015      	beq.n	800b89e <_svfiprintf_r+0xf6>
 800b872:	9a07      	ldr	r2, [sp, #28]
 800b874:	4654      	mov	r4, sl
 800b876:	2000      	movs	r0, #0
 800b878:	f04f 0c0a 	mov.w	ip, #10
 800b87c:	4621      	mov	r1, r4
 800b87e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b882:	3b30      	subs	r3, #48	; 0x30
 800b884:	2b09      	cmp	r3, #9
 800b886:	d94d      	bls.n	800b924 <_svfiprintf_r+0x17c>
 800b888:	b1b0      	cbz	r0, 800b8b8 <_svfiprintf_r+0x110>
 800b88a:	9207      	str	r2, [sp, #28]
 800b88c:	e014      	b.n	800b8b8 <_svfiprintf_r+0x110>
 800b88e:	eba0 0308 	sub.w	r3, r0, r8
 800b892:	fa09 f303 	lsl.w	r3, r9, r3
 800b896:	4313      	orrs	r3, r2
 800b898:	9304      	str	r3, [sp, #16]
 800b89a:	46a2      	mov	sl, r4
 800b89c:	e7d2      	b.n	800b844 <_svfiprintf_r+0x9c>
 800b89e:	9b03      	ldr	r3, [sp, #12]
 800b8a0:	1d19      	adds	r1, r3, #4
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	9103      	str	r1, [sp, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	bfbb      	ittet	lt
 800b8aa:	425b      	neglt	r3, r3
 800b8ac:	f042 0202 	orrlt.w	r2, r2, #2
 800b8b0:	9307      	strge	r3, [sp, #28]
 800b8b2:	9307      	strlt	r3, [sp, #28]
 800b8b4:	bfb8      	it	lt
 800b8b6:	9204      	strlt	r2, [sp, #16]
 800b8b8:	7823      	ldrb	r3, [r4, #0]
 800b8ba:	2b2e      	cmp	r3, #46	; 0x2e
 800b8bc:	d10c      	bne.n	800b8d8 <_svfiprintf_r+0x130>
 800b8be:	7863      	ldrb	r3, [r4, #1]
 800b8c0:	2b2a      	cmp	r3, #42	; 0x2a
 800b8c2:	d134      	bne.n	800b92e <_svfiprintf_r+0x186>
 800b8c4:	9b03      	ldr	r3, [sp, #12]
 800b8c6:	1d1a      	adds	r2, r3, #4
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	9203      	str	r2, [sp, #12]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	bfb8      	it	lt
 800b8d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8d4:	3402      	adds	r4, #2
 800b8d6:	9305      	str	r3, [sp, #20]
 800b8d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b9a0 <_svfiprintf_r+0x1f8>
 800b8dc:	7821      	ldrb	r1, [r4, #0]
 800b8de:	2203      	movs	r2, #3
 800b8e0:	4650      	mov	r0, sl
 800b8e2:	f7f4 fc7d 	bl	80001e0 <memchr>
 800b8e6:	b138      	cbz	r0, 800b8f8 <_svfiprintf_r+0x150>
 800b8e8:	9b04      	ldr	r3, [sp, #16]
 800b8ea:	eba0 000a 	sub.w	r0, r0, sl
 800b8ee:	2240      	movs	r2, #64	; 0x40
 800b8f0:	4082      	lsls	r2, r0
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	3401      	adds	r4, #1
 800b8f6:	9304      	str	r3, [sp, #16]
 800b8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8fc:	4825      	ldr	r0, [pc, #148]	; (800b994 <_svfiprintf_r+0x1ec>)
 800b8fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b902:	2206      	movs	r2, #6
 800b904:	f7f4 fc6c 	bl	80001e0 <memchr>
 800b908:	2800      	cmp	r0, #0
 800b90a:	d038      	beq.n	800b97e <_svfiprintf_r+0x1d6>
 800b90c:	4b22      	ldr	r3, [pc, #136]	; (800b998 <_svfiprintf_r+0x1f0>)
 800b90e:	bb1b      	cbnz	r3, 800b958 <_svfiprintf_r+0x1b0>
 800b910:	9b03      	ldr	r3, [sp, #12]
 800b912:	3307      	adds	r3, #7
 800b914:	f023 0307 	bic.w	r3, r3, #7
 800b918:	3308      	adds	r3, #8
 800b91a:	9303      	str	r3, [sp, #12]
 800b91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b91e:	4433      	add	r3, r6
 800b920:	9309      	str	r3, [sp, #36]	; 0x24
 800b922:	e768      	b.n	800b7f6 <_svfiprintf_r+0x4e>
 800b924:	fb0c 3202 	mla	r2, ip, r2, r3
 800b928:	460c      	mov	r4, r1
 800b92a:	2001      	movs	r0, #1
 800b92c:	e7a6      	b.n	800b87c <_svfiprintf_r+0xd4>
 800b92e:	2300      	movs	r3, #0
 800b930:	3401      	adds	r4, #1
 800b932:	9305      	str	r3, [sp, #20]
 800b934:	4619      	mov	r1, r3
 800b936:	f04f 0c0a 	mov.w	ip, #10
 800b93a:	4620      	mov	r0, r4
 800b93c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b940:	3a30      	subs	r2, #48	; 0x30
 800b942:	2a09      	cmp	r2, #9
 800b944:	d903      	bls.n	800b94e <_svfiprintf_r+0x1a6>
 800b946:	2b00      	cmp	r3, #0
 800b948:	d0c6      	beq.n	800b8d8 <_svfiprintf_r+0x130>
 800b94a:	9105      	str	r1, [sp, #20]
 800b94c:	e7c4      	b.n	800b8d8 <_svfiprintf_r+0x130>
 800b94e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b952:	4604      	mov	r4, r0
 800b954:	2301      	movs	r3, #1
 800b956:	e7f0      	b.n	800b93a <_svfiprintf_r+0x192>
 800b958:	ab03      	add	r3, sp, #12
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	462a      	mov	r2, r5
 800b95e:	4b0f      	ldr	r3, [pc, #60]	; (800b99c <_svfiprintf_r+0x1f4>)
 800b960:	a904      	add	r1, sp, #16
 800b962:	4638      	mov	r0, r7
 800b964:	f7fc fb82 	bl	800806c <_printf_float>
 800b968:	1c42      	adds	r2, r0, #1
 800b96a:	4606      	mov	r6, r0
 800b96c:	d1d6      	bne.n	800b91c <_svfiprintf_r+0x174>
 800b96e:	89ab      	ldrh	r3, [r5, #12]
 800b970:	065b      	lsls	r3, r3, #25
 800b972:	f53f af2d 	bmi.w	800b7d0 <_svfiprintf_r+0x28>
 800b976:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b978:	b01d      	add	sp, #116	; 0x74
 800b97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b97e:	ab03      	add	r3, sp, #12
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	462a      	mov	r2, r5
 800b984:	4b05      	ldr	r3, [pc, #20]	; (800b99c <_svfiprintf_r+0x1f4>)
 800b986:	a904      	add	r1, sp, #16
 800b988:	4638      	mov	r0, r7
 800b98a:	f7fc fe13 	bl	80085b4 <_printf_i>
 800b98e:	e7eb      	b.n	800b968 <_svfiprintf_r+0x1c0>
 800b990:	0800cc89 	.word	0x0800cc89
 800b994:	0800cc93 	.word	0x0800cc93
 800b998:	0800806d 	.word	0x0800806d
 800b99c:	0800b6f5 	.word	0x0800b6f5
 800b9a0:	0800cc8f 	.word	0x0800cc8f

0800b9a4 <__sfputc_r>:
 800b9a4:	6893      	ldr	r3, [r2, #8]
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	b410      	push	{r4}
 800b9ac:	6093      	str	r3, [r2, #8]
 800b9ae:	da08      	bge.n	800b9c2 <__sfputc_r+0x1e>
 800b9b0:	6994      	ldr	r4, [r2, #24]
 800b9b2:	42a3      	cmp	r3, r4
 800b9b4:	db01      	blt.n	800b9ba <__sfputc_r+0x16>
 800b9b6:	290a      	cmp	r1, #10
 800b9b8:	d103      	bne.n	800b9c2 <__sfputc_r+0x1e>
 800b9ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9be:	f7fd bab4 	b.w	8008f2a <__swbuf_r>
 800b9c2:	6813      	ldr	r3, [r2, #0]
 800b9c4:	1c58      	adds	r0, r3, #1
 800b9c6:	6010      	str	r0, [r2, #0]
 800b9c8:	7019      	strb	r1, [r3, #0]
 800b9ca:	4608      	mov	r0, r1
 800b9cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9d0:	4770      	bx	lr

0800b9d2 <__sfputs_r>:
 800b9d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d4:	4606      	mov	r6, r0
 800b9d6:	460f      	mov	r7, r1
 800b9d8:	4614      	mov	r4, r2
 800b9da:	18d5      	adds	r5, r2, r3
 800b9dc:	42ac      	cmp	r4, r5
 800b9de:	d101      	bne.n	800b9e4 <__sfputs_r+0x12>
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	e007      	b.n	800b9f4 <__sfputs_r+0x22>
 800b9e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9e8:	463a      	mov	r2, r7
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	f7ff ffda 	bl	800b9a4 <__sfputc_r>
 800b9f0:	1c43      	adds	r3, r0, #1
 800b9f2:	d1f3      	bne.n	800b9dc <__sfputs_r+0xa>
 800b9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9f8 <_vfiprintf_r>:
 800b9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9fc:	460d      	mov	r5, r1
 800b9fe:	b09d      	sub	sp, #116	; 0x74
 800ba00:	4614      	mov	r4, r2
 800ba02:	4698      	mov	r8, r3
 800ba04:	4606      	mov	r6, r0
 800ba06:	b118      	cbz	r0, 800ba10 <_vfiprintf_r+0x18>
 800ba08:	6a03      	ldr	r3, [r0, #32]
 800ba0a:	b90b      	cbnz	r3, 800ba10 <_vfiprintf_r+0x18>
 800ba0c:	f7fd f97e 	bl	8008d0c <__sinit>
 800ba10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba12:	07d9      	lsls	r1, r3, #31
 800ba14:	d405      	bmi.n	800ba22 <_vfiprintf_r+0x2a>
 800ba16:	89ab      	ldrh	r3, [r5, #12]
 800ba18:	059a      	lsls	r2, r3, #22
 800ba1a:	d402      	bmi.n	800ba22 <_vfiprintf_r+0x2a>
 800ba1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba1e:	f7fd fb95 	bl	800914c <__retarget_lock_acquire_recursive>
 800ba22:	89ab      	ldrh	r3, [r5, #12]
 800ba24:	071b      	lsls	r3, r3, #28
 800ba26:	d501      	bpl.n	800ba2c <_vfiprintf_r+0x34>
 800ba28:	692b      	ldr	r3, [r5, #16]
 800ba2a:	b99b      	cbnz	r3, 800ba54 <_vfiprintf_r+0x5c>
 800ba2c:	4629      	mov	r1, r5
 800ba2e:	4630      	mov	r0, r6
 800ba30:	f7fd fab8 	bl	8008fa4 <__swsetup_r>
 800ba34:	b170      	cbz	r0, 800ba54 <_vfiprintf_r+0x5c>
 800ba36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba38:	07dc      	lsls	r4, r3, #31
 800ba3a:	d504      	bpl.n	800ba46 <_vfiprintf_r+0x4e>
 800ba3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba40:	b01d      	add	sp, #116	; 0x74
 800ba42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba46:	89ab      	ldrh	r3, [r5, #12]
 800ba48:	0598      	lsls	r0, r3, #22
 800ba4a:	d4f7      	bmi.n	800ba3c <_vfiprintf_r+0x44>
 800ba4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba4e:	f7fd fb7e 	bl	800914e <__retarget_lock_release_recursive>
 800ba52:	e7f3      	b.n	800ba3c <_vfiprintf_r+0x44>
 800ba54:	2300      	movs	r3, #0
 800ba56:	9309      	str	r3, [sp, #36]	; 0x24
 800ba58:	2320      	movs	r3, #32
 800ba5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba62:	2330      	movs	r3, #48	; 0x30
 800ba64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bc18 <_vfiprintf_r+0x220>
 800ba68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba6c:	f04f 0901 	mov.w	r9, #1
 800ba70:	4623      	mov	r3, r4
 800ba72:	469a      	mov	sl, r3
 800ba74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba78:	b10a      	cbz	r2, 800ba7e <_vfiprintf_r+0x86>
 800ba7a:	2a25      	cmp	r2, #37	; 0x25
 800ba7c:	d1f9      	bne.n	800ba72 <_vfiprintf_r+0x7a>
 800ba7e:	ebba 0b04 	subs.w	fp, sl, r4
 800ba82:	d00b      	beq.n	800ba9c <_vfiprintf_r+0xa4>
 800ba84:	465b      	mov	r3, fp
 800ba86:	4622      	mov	r2, r4
 800ba88:	4629      	mov	r1, r5
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	f7ff ffa1 	bl	800b9d2 <__sfputs_r>
 800ba90:	3001      	adds	r0, #1
 800ba92:	f000 80a9 	beq.w	800bbe8 <_vfiprintf_r+0x1f0>
 800ba96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba98:	445a      	add	r2, fp
 800ba9a:	9209      	str	r2, [sp, #36]	; 0x24
 800ba9c:	f89a 3000 	ldrb.w	r3, [sl]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 80a1 	beq.w	800bbe8 <_vfiprintf_r+0x1f0>
 800baa6:	2300      	movs	r3, #0
 800baa8:	f04f 32ff 	mov.w	r2, #4294967295
 800baac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bab0:	f10a 0a01 	add.w	sl, sl, #1
 800bab4:	9304      	str	r3, [sp, #16]
 800bab6:	9307      	str	r3, [sp, #28]
 800bab8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800babc:	931a      	str	r3, [sp, #104]	; 0x68
 800babe:	4654      	mov	r4, sl
 800bac0:	2205      	movs	r2, #5
 800bac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bac6:	4854      	ldr	r0, [pc, #336]	; (800bc18 <_vfiprintf_r+0x220>)
 800bac8:	f7f4 fb8a 	bl	80001e0 <memchr>
 800bacc:	9a04      	ldr	r2, [sp, #16]
 800bace:	b9d8      	cbnz	r0, 800bb08 <_vfiprintf_r+0x110>
 800bad0:	06d1      	lsls	r1, r2, #27
 800bad2:	bf44      	itt	mi
 800bad4:	2320      	movmi	r3, #32
 800bad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bada:	0713      	lsls	r3, r2, #28
 800badc:	bf44      	itt	mi
 800bade:	232b      	movmi	r3, #43	; 0x2b
 800bae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bae4:	f89a 3000 	ldrb.w	r3, [sl]
 800bae8:	2b2a      	cmp	r3, #42	; 0x2a
 800baea:	d015      	beq.n	800bb18 <_vfiprintf_r+0x120>
 800baec:	9a07      	ldr	r2, [sp, #28]
 800baee:	4654      	mov	r4, sl
 800baf0:	2000      	movs	r0, #0
 800baf2:	f04f 0c0a 	mov.w	ip, #10
 800baf6:	4621      	mov	r1, r4
 800baf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bafc:	3b30      	subs	r3, #48	; 0x30
 800bafe:	2b09      	cmp	r3, #9
 800bb00:	d94d      	bls.n	800bb9e <_vfiprintf_r+0x1a6>
 800bb02:	b1b0      	cbz	r0, 800bb32 <_vfiprintf_r+0x13a>
 800bb04:	9207      	str	r2, [sp, #28]
 800bb06:	e014      	b.n	800bb32 <_vfiprintf_r+0x13a>
 800bb08:	eba0 0308 	sub.w	r3, r0, r8
 800bb0c:	fa09 f303 	lsl.w	r3, r9, r3
 800bb10:	4313      	orrs	r3, r2
 800bb12:	9304      	str	r3, [sp, #16]
 800bb14:	46a2      	mov	sl, r4
 800bb16:	e7d2      	b.n	800babe <_vfiprintf_r+0xc6>
 800bb18:	9b03      	ldr	r3, [sp, #12]
 800bb1a:	1d19      	adds	r1, r3, #4
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	9103      	str	r1, [sp, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	bfbb      	ittet	lt
 800bb24:	425b      	neglt	r3, r3
 800bb26:	f042 0202 	orrlt.w	r2, r2, #2
 800bb2a:	9307      	strge	r3, [sp, #28]
 800bb2c:	9307      	strlt	r3, [sp, #28]
 800bb2e:	bfb8      	it	lt
 800bb30:	9204      	strlt	r2, [sp, #16]
 800bb32:	7823      	ldrb	r3, [r4, #0]
 800bb34:	2b2e      	cmp	r3, #46	; 0x2e
 800bb36:	d10c      	bne.n	800bb52 <_vfiprintf_r+0x15a>
 800bb38:	7863      	ldrb	r3, [r4, #1]
 800bb3a:	2b2a      	cmp	r3, #42	; 0x2a
 800bb3c:	d134      	bne.n	800bba8 <_vfiprintf_r+0x1b0>
 800bb3e:	9b03      	ldr	r3, [sp, #12]
 800bb40:	1d1a      	adds	r2, r3, #4
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	9203      	str	r2, [sp, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	bfb8      	it	lt
 800bb4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb4e:	3402      	adds	r4, #2
 800bb50:	9305      	str	r3, [sp, #20]
 800bb52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bc28 <_vfiprintf_r+0x230>
 800bb56:	7821      	ldrb	r1, [r4, #0]
 800bb58:	2203      	movs	r2, #3
 800bb5a:	4650      	mov	r0, sl
 800bb5c:	f7f4 fb40 	bl	80001e0 <memchr>
 800bb60:	b138      	cbz	r0, 800bb72 <_vfiprintf_r+0x17a>
 800bb62:	9b04      	ldr	r3, [sp, #16]
 800bb64:	eba0 000a 	sub.w	r0, r0, sl
 800bb68:	2240      	movs	r2, #64	; 0x40
 800bb6a:	4082      	lsls	r2, r0
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	3401      	adds	r4, #1
 800bb70:	9304      	str	r3, [sp, #16]
 800bb72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb76:	4829      	ldr	r0, [pc, #164]	; (800bc1c <_vfiprintf_r+0x224>)
 800bb78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb7c:	2206      	movs	r2, #6
 800bb7e:	f7f4 fb2f 	bl	80001e0 <memchr>
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d03f      	beq.n	800bc06 <_vfiprintf_r+0x20e>
 800bb86:	4b26      	ldr	r3, [pc, #152]	; (800bc20 <_vfiprintf_r+0x228>)
 800bb88:	bb1b      	cbnz	r3, 800bbd2 <_vfiprintf_r+0x1da>
 800bb8a:	9b03      	ldr	r3, [sp, #12]
 800bb8c:	3307      	adds	r3, #7
 800bb8e:	f023 0307 	bic.w	r3, r3, #7
 800bb92:	3308      	adds	r3, #8
 800bb94:	9303      	str	r3, [sp, #12]
 800bb96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb98:	443b      	add	r3, r7
 800bb9a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb9c:	e768      	b.n	800ba70 <_vfiprintf_r+0x78>
 800bb9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bba2:	460c      	mov	r4, r1
 800bba4:	2001      	movs	r0, #1
 800bba6:	e7a6      	b.n	800baf6 <_vfiprintf_r+0xfe>
 800bba8:	2300      	movs	r3, #0
 800bbaa:	3401      	adds	r4, #1
 800bbac:	9305      	str	r3, [sp, #20]
 800bbae:	4619      	mov	r1, r3
 800bbb0:	f04f 0c0a 	mov.w	ip, #10
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbba:	3a30      	subs	r2, #48	; 0x30
 800bbbc:	2a09      	cmp	r2, #9
 800bbbe:	d903      	bls.n	800bbc8 <_vfiprintf_r+0x1d0>
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d0c6      	beq.n	800bb52 <_vfiprintf_r+0x15a>
 800bbc4:	9105      	str	r1, [sp, #20]
 800bbc6:	e7c4      	b.n	800bb52 <_vfiprintf_r+0x15a>
 800bbc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbcc:	4604      	mov	r4, r0
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e7f0      	b.n	800bbb4 <_vfiprintf_r+0x1bc>
 800bbd2:	ab03      	add	r3, sp, #12
 800bbd4:	9300      	str	r3, [sp, #0]
 800bbd6:	462a      	mov	r2, r5
 800bbd8:	4b12      	ldr	r3, [pc, #72]	; (800bc24 <_vfiprintf_r+0x22c>)
 800bbda:	a904      	add	r1, sp, #16
 800bbdc:	4630      	mov	r0, r6
 800bbde:	f7fc fa45 	bl	800806c <_printf_float>
 800bbe2:	4607      	mov	r7, r0
 800bbe4:	1c78      	adds	r0, r7, #1
 800bbe6:	d1d6      	bne.n	800bb96 <_vfiprintf_r+0x19e>
 800bbe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbea:	07d9      	lsls	r1, r3, #31
 800bbec:	d405      	bmi.n	800bbfa <_vfiprintf_r+0x202>
 800bbee:	89ab      	ldrh	r3, [r5, #12]
 800bbf0:	059a      	lsls	r2, r3, #22
 800bbf2:	d402      	bmi.n	800bbfa <_vfiprintf_r+0x202>
 800bbf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbf6:	f7fd faaa 	bl	800914e <__retarget_lock_release_recursive>
 800bbfa:	89ab      	ldrh	r3, [r5, #12]
 800bbfc:	065b      	lsls	r3, r3, #25
 800bbfe:	f53f af1d 	bmi.w	800ba3c <_vfiprintf_r+0x44>
 800bc02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc04:	e71c      	b.n	800ba40 <_vfiprintf_r+0x48>
 800bc06:	ab03      	add	r3, sp, #12
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	462a      	mov	r2, r5
 800bc0c:	4b05      	ldr	r3, [pc, #20]	; (800bc24 <_vfiprintf_r+0x22c>)
 800bc0e:	a904      	add	r1, sp, #16
 800bc10:	4630      	mov	r0, r6
 800bc12:	f7fc fccf 	bl	80085b4 <_printf_i>
 800bc16:	e7e4      	b.n	800bbe2 <_vfiprintf_r+0x1ea>
 800bc18:	0800cc89 	.word	0x0800cc89
 800bc1c:	0800cc93 	.word	0x0800cc93
 800bc20:	0800806d 	.word	0x0800806d
 800bc24:	0800b9d3 	.word	0x0800b9d3
 800bc28:	0800cc8f 	.word	0x0800cc8f

0800bc2c <__sflush_r>:
 800bc2c:	898a      	ldrh	r2, [r1, #12]
 800bc2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc32:	4605      	mov	r5, r0
 800bc34:	0710      	lsls	r0, r2, #28
 800bc36:	460c      	mov	r4, r1
 800bc38:	d458      	bmi.n	800bcec <__sflush_r+0xc0>
 800bc3a:	684b      	ldr	r3, [r1, #4]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	dc05      	bgt.n	800bc4c <__sflush_r+0x20>
 800bc40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	dc02      	bgt.n	800bc4c <__sflush_r+0x20>
 800bc46:	2000      	movs	r0, #0
 800bc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc4e:	2e00      	cmp	r6, #0
 800bc50:	d0f9      	beq.n	800bc46 <__sflush_r+0x1a>
 800bc52:	2300      	movs	r3, #0
 800bc54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc58:	682f      	ldr	r7, [r5, #0]
 800bc5a:	6a21      	ldr	r1, [r4, #32]
 800bc5c:	602b      	str	r3, [r5, #0]
 800bc5e:	d032      	beq.n	800bcc6 <__sflush_r+0x9a>
 800bc60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	075a      	lsls	r2, r3, #29
 800bc66:	d505      	bpl.n	800bc74 <__sflush_r+0x48>
 800bc68:	6863      	ldr	r3, [r4, #4]
 800bc6a:	1ac0      	subs	r0, r0, r3
 800bc6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc6e:	b10b      	cbz	r3, 800bc74 <__sflush_r+0x48>
 800bc70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc72:	1ac0      	subs	r0, r0, r3
 800bc74:	2300      	movs	r3, #0
 800bc76:	4602      	mov	r2, r0
 800bc78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc7a:	6a21      	ldr	r1, [r4, #32]
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	47b0      	blx	r6
 800bc80:	1c43      	adds	r3, r0, #1
 800bc82:	89a3      	ldrh	r3, [r4, #12]
 800bc84:	d106      	bne.n	800bc94 <__sflush_r+0x68>
 800bc86:	6829      	ldr	r1, [r5, #0]
 800bc88:	291d      	cmp	r1, #29
 800bc8a:	d82b      	bhi.n	800bce4 <__sflush_r+0xb8>
 800bc8c:	4a29      	ldr	r2, [pc, #164]	; (800bd34 <__sflush_r+0x108>)
 800bc8e:	410a      	asrs	r2, r1
 800bc90:	07d6      	lsls	r6, r2, #31
 800bc92:	d427      	bmi.n	800bce4 <__sflush_r+0xb8>
 800bc94:	2200      	movs	r2, #0
 800bc96:	6062      	str	r2, [r4, #4]
 800bc98:	04d9      	lsls	r1, r3, #19
 800bc9a:	6922      	ldr	r2, [r4, #16]
 800bc9c:	6022      	str	r2, [r4, #0]
 800bc9e:	d504      	bpl.n	800bcaa <__sflush_r+0x7e>
 800bca0:	1c42      	adds	r2, r0, #1
 800bca2:	d101      	bne.n	800bca8 <__sflush_r+0x7c>
 800bca4:	682b      	ldr	r3, [r5, #0]
 800bca6:	b903      	cbnz	r3, 800bcaa <__sflush_r+0x7e>
 800bca8:	6560      	str	r0, [r4, #84]	; 0x54
 800bcaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcac:	602f      	str	r7, [r5, #0]
 800bcae:	2900      	cmp	r1, #0
 800bcb0:	d0c9      	beq.n	800bc46 <__sflush_r+0x1a>
 800bcb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcb6:	4299      	cmp	r1, r3
 800bcb8:	d002      	beq.n	800bcc0 <__sflush_r+0x94>
 800bcba:	4628      	mov	r0, r5
 800bcbc:	f7fe f8d6 	bl	8009e6c <_free_r>
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	6360      	str	r0, [r4, #52]	; 0x34
 800bcc4:	e7c0      	b.n	800bc48 <__sflush_r+0x1c>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	4628      	mov	r0, r5
 800bcca:	47b0      	blx	r6
 800bccc:	1c41      	adds	r1, r0, #1
 800bcce:	d1c8      	bne.n	800bc62 <__sflush_r+0x36>
 800bcd0:	682b      	ldr	r3, [r5, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d0c5      	beq.n	800bc62 <__sflush_r+0x36>
 800bcd6:	2b1d      	cmp	r3, #29
 800bcd8:	d001      	beq.n	800bcde <__sflush_r+0xb2>
 800bcda:	2b16      	cmp	r3, #22
 800bcdc:	d101      	bne.n	800bce2 <__sflush_r+0xb6>
 800bcde:	602f      	str	r7, [r5, #0]
 800bce0:	e7b1      	b.n	800bc46 <__sflush_r+0x1a>
 800bce2:	89a3      	ldrh	r3, [r4, #12]
 800bce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bce8:	81a3      	strh	r3, [r4, #12]
 800bcea:	e7ad      	b.n	800bc48 <__sflush_r+0x1c>
 800bcec:	690f      	ldr	r7, [r1, #16]
 800bcee:	2f00      	cmp	r7, #0
 800bcf0:	d0a9      	beq.n	800bc46 <__sflush_r+0x1a>
 800bcf2:	0793      	lsls	r3, r2, #30
 800bcf4:	680e      	ldr	r6, [r1, #0]
 800bcf6:	bf08      	it	eq
 800bcf8:	694b      	ldreq	r3, [r1, #20]
 800bcfa:	600f      	str	r7, [r1, #0]
 800bcfc:	bf18      	it	ne
 800bcfe:	2300      	movne	r3, #0
 800bd00:	eba6 0807 	sub.w	r8, r6, r7
 800bd04:	608b      	str	r3, [r1, #8]
 800bd06:	f1b8 0f00 	cmp.w	r8, #0
 800bd0a:	dd9c      	ble.n	800bc46 <__sflush_r+0x1a>
 800bd0c:	6a21      	ldr	r1, [r4, #32]
 800bd0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd10:	4643      	mov	r3, r8
 800bd12:	463a      	mov	r2, r7
 800bd14:	4628      	mov	r0, r5
 800bd16:	47b0      	blx	r6
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	dc06      	bgt.n	800bd2a <__sflush_r+0xfe>
 800bd1c:	89a3      	ldrh	r3, [r4, #12]
 800bd1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd22:	81a3      	strh	r3, [r4, #12]
 800bd24:	f04f 30ff 	mov.w	r0, #4294967295
 800bd28:	e78e      	b.n	800bc48 <__sflush_r+0x1c>
 800bd2a:	4407      	add	r7, r0
 800bd2c:	eba8 0800 	sub.w	r8, r8, r0
 800bd30:	e7e9      	b.n	800bd06 <__sflush_r+0xda>
 800bd32:	bf00      	nop
 800bd34:	dfbffffe 	.word	0xdfbffffe

0800bd38 <_fflush_r>:
 800bd38:	b538      	push	{r3, r4, r5, lr}
 800bd3a:	690b      	ldr	r3, [r1, #16]
 800bd3c:	4605      	mov	r5, r0
 800bd3e:	460c      	mov	r4, r1
 800bd40:	b913      	cbnz	r3, 800bd48 <_fflush_r+0x10>
 800bd42:	2500      	movs	r5, #0
 800bd44:	4628      	mov	r0, r5
 800bd46:	bd38      	pop	{r3, r4, r5, pc}
 800bd48:	b118      	cbz	r0, 800bd52 <_fflush_r+0x1a>
 800bd4a:	6a03      	ldr	r3, [r0, #32]
 800bd4c:	b90b      	cbnz	r3, 800bd52 <_fflush_r+0x1a>
 800bd4e:	f7fc ffdd 	bl	8008d0c <__sinit>
 800bd52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d0f3      	beq.n	800bd42 <_fflush_r+0xa>
 800bd5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd5c:	07d0      	lsls	r0, r2, #31
 800bd5e:	d404      	bmi.n	800bd6a <_fflush_r+0x32>
 800bd60:	0599      	lsls	r1, r3, #22
 800bd62:	d402      	bmi.n	800bd6a <_fflush_r+0x32>
 800bd64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd66:	f7fd f9f1 	bl	800914c <__retarget_lock_acquire_recursive>
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	4621      	mov	r1, r4
 800bd6e:	f7ff ff5d 	bl	800bc2c <__sflush_r>
 800bd72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd74:	07da      	lsls	r2, r3, #31
 800bd76:	4605      	mov	r5, r0
 800bd78:	d4e4      	bmi.n	800bd44 <_fflush_r+0xc>
 800bd7a:	89a3      	ldrh	r3, [r4, #12]
 800bd7c:	059b      	lsls	r3, r3, #22
 800bd7e:	d4e1      	bmi.n	800bd44 <_fflush_r+0xc>
 800bd80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd82:	f7fd f9e4 	bl	800914e <__retarget_lock_release_recursive>
 800bd86:	e7dd      	b.n	800bd44 <_fflush_r+0xc>

0800bd88 <__swhatbuf_r>:
 800bd88:	b570      	push	{r4, r5, r6, lr}
 800bd8a:	460c      	mov	r4, r1
 800bd8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd90:	2900      	cmp	r1, #0
 800bd92:	b096      	sub	sp, #88	; 0x58
 800bd94:	4615      	mov	r5, r2
 800bd96:	461e      	mov	r6, r3
 800bd98:	da0d      	bge.n	800bdb6 <__swhatbuf_r+0x2e>
 800bd9a:	89a3      	ldrh	r3, [r4, #12]
 800bd9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bda0:	f04f 0100 	mov.w	r1, #0
 800bda4:	bf0c      	ite	eq
 800bda6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bdaa:	2340      	movne	r3, #64	; 0x40
 800bdac:	2000      	movs	r0, #0
 800bdae:	6031      	str	r1, [r6, #0]
 800bdb0:	602b      	str	r3, [r5, #0]
 800bdb2:	b016      	add	sp, #88	; 0x58
 800bdb4:	bd70      	pop	{r4, r5, r6, pc}
 800bdb6:	466a      	mov	r2, sp
 800bdb8:	f000 f8a8 	bl	800bf0c <_fstat_r>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	dbec      	blt.n	800bd9a <__swhatbuf_r+0x12>
 800bdc0:	9901      	ldr	r1, [sp, #4]
 800bdc2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bdc6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bdca:	4259      	negs	r1, r3
 800bdcc:	4159      	adcs	r1, r3
 800bdce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdd2:	e7eb      	b.n	800bdac <__swhatbuf_r+0x24>

0800bdd4 <__smakebuf_r>:
 800bdd4:	898b      	ldrh	r3, [r1, #12]
 800bdd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdd8:	079d      	lsls	r5, r3, #30
 800bdda:	4606      	mov	r6, r0
 800bddc:	460c      	mov	r4, r1
 800bdde:	d507      	bpl.n	800bdf0 <__smakebuf_r+0x1c>
 800bde0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	6123      	str	r3, [r4, #16]
 800bde8:	2301      	movs	r3, #1
 800bdea:	6163      	str	r3, [r4, #20]
 800bdec:	b002      	add	sp, #8
 800bdee:	bd70      	pop	{r4, r5, r6, pc}
 800bdf0:	ab01      	add	r3, sp, #4
 800bdf2:	466a      	mov	r2, sp
 800bdf4:	f7ff ffc8 	bl	800bd88 <__swhatbuf_r>
 800bdf8:	9900      	ldr	r1, [sp, #0]
 800bdfa:	4605      	mov	r5, r0
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	f7fe f8a9 	bl	8009f54 <_malloc_r>
 800be02:	b948      	cbnz	r0, 800be18 <__smakebuf_r+0x44>
 800be04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be08:	059a      	lsls	r2, r3, #22
 800be0a:	d4ef      	bmi.n	800bdec <__smakebuf_r+0x18>
 800be0c:	f023 0303 	bic.w	r3, r3, #3
 800be10:	f043 0302 	orr.w	r3, r3, #2
 800be14:	81a3      	strh	r3, [r4, #12]
 800be16:	e7e3      	b.n	800bde0 <__smakebuf_r+0xc>
 800be18:	89a3      	ldrh	r3, [r4, #12]
 800be1a:	6020      	str	r0, [r4, #0]
 800be1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be20:	81a3      	strh	r3, [r4, #12]
 800be22:	9b00      	ldr	r3, [sp, #0]
 800be24:	6163      	str	r3, [r4, #20]
 800be26:	9b01      	ldr	r3, [sp, #4]
 800be28:	6120      	str	r0, [r4, #16]
 800be2a:	b15b      	cbz	r3, 800be44 <__smakebuf_r+0x70>
 800be2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be30:	4630      	mov	r0, r6
 800be32:	f000 f87d 	bl	800bf30 <_isatty_r>
 800be36:	b128      	cbz	r0, 800be44 <__smakebuf_r+0x70>
 800be38:	89a3      	ldrh	r3, [r4, #12]
 800be3a:	f023 0303 	bic.w	r3, r3, #3
 800be3e:	f043 0301 	orr.w	r3, r3, #1
 800be42:	81a3      	strh	r3, [r4, #12]
 800be44:	89a3      	ldrh	r3, [r4, #12]
 800be46:	431d      	orrs	r5, r3
 800be48:	81a5      	strh	r5, [r4, #12]
 800be4a:	e7cf      	b.n	800bdec <__smakebuf_r+0x18>

0800be4c <_putc_r>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	460d      	mov	r5, r1
 800be50:	4614      	mov	r4, r2
 800be52:	4606      	mov	r6, r0
 800be54:	b118      	cbz	r0, 800be5e <_putc_r+0x12>
 800be56:	6a03      	ldr	r3, [r0, #32]
 800be58:	b90b      	cbnz	r3, 800be5e <_putc_r+0x12>
 800be5a:	f7fc ff57 	bl	8008d0c <__sinit>
 800be5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be60:	07d8      	lsls	r0, r3, #31
 800be62:	d405      	bmi.n	800be70 <_putc_r+0x24>
 800be64:	89a3      	ldrh	r3, [r4, #12]
 800be66:	0599      	lsls	r1, r3, #22
 800be68:	d402      	bmi.n	800be70 <_putc_r+0x24>
 800be6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be6c:	f7fd f96e 	bl	800914c <__retarget_lock_acquire_recursive>
 800be70:	68a3      	ldr	r3, [r4, #8]
 800be72:	3b01      	subs	r3, #1
 800be74:	2b00      	cmp	r3, #0
 800be76:	60a3      	str	r3, [r4, #8]
 800be78:	da05      	bge.n	800be86 <_putc_r+0x3a>
 800be7a:	69a2      	ldr	r2, [r4, #24]
 800be7c:	4293      	cmp	r3, r2
 800be7e:	db12      	blt.n	800bea6 <_putc_r+0x5a>
 800be80:	b2eb      	uxtb	r3, r5
 800be82:	2b0a      	cmp	r3, #10
 800be84:	d00f      	beq.n	800bea6 <_putc_r+0x5a>
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	1c5a      	adds	r2, r3, #1
 800be8a:	6022      	str	r2, [r4, #0]
 800be8c:	701d      	strb	r5, [r3, #0]
 800be8e:	b2ed      	uxtb	r5, r5
 800be90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be92:	07da      	lsls	r2, r3, #31
 800be94:	d405      	bmi.n	800bea2 <_putc_r+0x56>
 800be96:	89a3      	ldrh	r3, [r4, #12]
 800be98:	059b      	lsls	r3, r3, #22
 800be9a:	d402      	bmi.n	800bea2 <_putc_r+0x56>
 800be9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be9e:	f7fd f956 	bl	800914e <__retarget_lock_release_recursive>
 800bea2:	4628      	mov	r0, r5
 800bea4:	bd70      	pop	{r4, r5, r6, pc}
 800bea6:	4629      	mov	r1, r5
 800bea8:	4622      	mov	r2, r4
 800beaa:	4630      	mov	r0, r6
 800beac:	f7fd f83d 	bl	8008f2a <__swbuf_r>
 800beb0:	4605      	mov	r5, r0
 800beb2:	e7ed      	b.n	800be90 <_putc_r+0x44>

0800beb4 <memmove>:
 800beb4:	4288      	cmp	r0, r1
 800beb6:	b510      	push	{r4, lr}
 800beb8:	eb01 0402 	add.w	r4, r1, r2
 800bebc:	d902      	bls.n	800bec4 <memmove+0x10>
 800bebe:	4284      	cmp	r4, r0
 800bec0:	4623      	mov	r3, r4
 800bec2:	d807      	bhi.n	800bed4 <memmove+0x20>
 800bec4:	1e43      	subs	r3, r0, #1
 800bec6:	42a1      	cmp	r1, r4
 800bec8:	d008      	beq.n	800bedc <memmove+0x28>
 800beca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bece:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bed2:	e7f8      	b.n	800bec6 <memmove+0x12>
 800bed4:	4402      	add	r2, r0
 800bed6:	4601      	mov	r1, r0
 800bed8:	428a      	cmp	r2, r1
 800beda:	d100      	bne.n	800bede <memmove+0x2a>
 800bedc:	bd10      	pop	{r4, pc}
 800bede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bee6:	e7f7      	b.n	800bed8 <memmove+0x24>

0800bee8 <strncmp>:
 800bee8:	b510      	push	{r4, lr}
 800beea:	b16a      	cbz	r2, 800bf08 <strncmp+0x20>
 800beec:	3901      	subs	r1, #1
 800beee:	1884      	adds	r4, r0, r2
 800bef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bef4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bef8:	429a      	cmp	r2, r3
 800befa:	d103      	bne.n	800bf04 <strncmp+0x1c>
 800befc:	42a0      	cmp	r0, r4
 800befe:	d001      	beq.n	800bf04 <strncmp+0x1c>
 800bf00:	2a00      	cmp	r2, #0
 800bf02:	d1f5      	bne.n	800bef0 <strncmp+0x8>
 800bf04:	1ad0      	subs	r0, r2, r3
 800bf06:	bd10      	pop	{r4, pc}
 800bf08:	4610      	mov	r0, r2
 800bf0a:	e7fc      	b.n	800bf06 <strncmp+0x1e>

0800bf0c <_fstat_r>:
 800bf0c:	b538      	push	{r3, r4, r5, lr}
 800bf0e:	4d07      	ldr	r5, [pc, #28]	; (800bf2c <_fstat_r+0x20>)
 800bf10:	2300      	movs	r3, #0
 800bf12:	4604      	mov	r4, r0
 800bf14:	4608      	mov	r0, r1
 800bf16:	4611      	mov	r1, r2
 800bf18:	602b      	str	r3, [r5, #0]
 800bf1a:	f7f5 fcfe 	bl	800191a <_fstat>
 800bf1e:	1c43      	adds	r3, r0, #1
 800bf20:	d102      	bne.n	800bf28 <_fstat_r+0x1c>
 800bf22:	682b      	ldr	r3, [r5, #0]
 800bf24:	b103      	cbz	r3, 800bf28 <_fstat_r+0x1c>
 800bf26:	6023      	str	r3, [r4, #0]
 800bf28:	bd38      	pop	{r3, r4, r5, pc}
 800bf2a:	bf00      	nop
 800bf2c:	200022bc 	.word	0x200022bc

0800bf30 <_isatty_r>:
 800bf30:	b538      	push	{r3, r4, r5, lr}
 800bf32:	4d06      	ldr	r5, [pc, #24]	; (800bf4c <_isatty_r+0x1c>)
 800bf34:	2300      	movs	r3, #0
 800bf36:	4604      	mov	r4, r0
 800bf38:	4608      	mov	r0, r1
 800bf3a:	602b      	str	r3, [r5, #0]
 800bf3c:	f7f5 fcfd 	bl	800193a <_isatty>
 800bf40:	1c43      	adds	r3, r0, #1
 800bf42:	d102      	bne.n	800bf4a <_isatty_r+0x1a>
 800bf44:	682b      	ldr	r3, [r5, #0]
 800bf46:	b103      	cbz	r3, 800bf4a <_isatty_r+0x1a>
 800bf48:	6023      	str	r3, [r4, #0]
 800bf4a:	bd38      	pop	{r3, r4, r5, pc}
 800bf4c:	200022bc 	.word	0x200022bc

0800bf50 <_sbrk_r>:
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	4d06      	ldr	r5, [pc, #24]	; (800bf6c <_sbrk_r+0x1c>)
 800bf54:	2300      	movs	r3, #0
 800bf56:	4604      	mov	r4, r0
 800bf58:	4608      	mov	r0, r1
 800bf5a:	602b      	str	r3, [r5, #0]
 800bf5c:	f7f5 fd06 	bl	800196c <_sbrk>
 800bf60:	1c43      	adds	r3, r0, #1
 800bf62:	d102      	bne.n	800bf6a <_sbrk_r+0x1a>
 800bf64:	682b      	ldr	r3, [r5, #0]
 800bf66:	b103      	cbz	r3, 800bf6a <_sbrk_r+0x1a>
 800bf68:	6023      	str	r3, [r4, #0]
 800bf6a:	bd38      	pop	{r3, r4, r5, pc}
 800bf6c:	200022bc 	.word	0x200022bc

0800bf70 <nan>:
 800bf70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bf78 <nan+0x8>
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	00000000 	.word	0x00000000
 800bf7c:	7ff80000 	.word	0x7ff80000

0800bf80 <__assert_func>:
 800bf80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf82:	4614      	mov	r4, r2
 800bf84:	461a      	mov	r2, r3
 800bf86:	4b09      	ldr	r3, [pc, #36]	; (800bfac <__assert_func+0x2c>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4605      	mov	r5, r0
 800bf8c:	68d8      	ldr	r0, [r3, #12]
 800bf8e:	b14c      	cbz	r4, 800bfa4 <__assert_func+0x24>
 800bf90:	4b07      	ldr	r3, [pc, #28]	; (800bfb0 <__assert_func+0x30>)
 800bf92:	9100      	str	r1, [sp, #0]
 800bf94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf98:	4906      	ldr	r1, [pc, #24]	; (800bfb4 <__assert_func+0x34>)
 800bf9a:	462b      	mov	r3, r5
 800bf9c:	f000 fbca 	bl	800c734 <fiprintf>
 800bfa0:	f000 fbda 	bl	800c758 <abort>
 800bfa4:	4b04      	ldr	r3, [pc, #16]	; (800bfb8 <__assert_func+0x38>)
 800bfa6:	461c      	mov	r4, r3
 800bfa8:	e7f3      	b.n	800bf92 <__assert_func+0x12>
 800bfaa:	bf00      	nop
 800bfac:	20000154 	.word	0x20000154
 800bfb0:	0800cca2 	.word	0x0800cca2
 800bfb4:	0800ccaf 	.word	0x0800ccaf
 800bfb8:	0800ccdd 	.word	0x0800ccdd

0800bfbc <_calloc_r>:
 800bfbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfbe:	fba1 2402 	umull	r2, r4, r1, r2
 800bfc2:	b94c      	cbnz	r4, 800bfd8 <_calloc_r+0x1c>
 800bfc4:	4611      	mov	r1, r2
 800bfc6:	9201      	str	r2, [sp, #4]
 800bfc8:	f7fd ffc4 	bl	8009f54 <_malloc_r>
 800bfcc:	9a01      	ldr	r2, [sp, #4]
 800bfce:	4605      	mov	r5, r0
 800bfd0:	b930      	cbnz	r0, 800bfe0 <_calloc_r+0x24>
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	b003      	add	sp, #12
 800bfd6:	bd30      	pop	{r4, r5, pc}
 800bfd8:	220c      	movs	r2, #12
 800bfda:	6002      	str	r2, [r0, #0]
 800bfdc:	2500      	movs	r5, #0
 800bfde:	e7f8      	b.n	800bfd2 <_calloc_r+0x16>
 800bfe0:	4621      	mov	r1, r4
 800bfe2:	f7fd f837 	bl	8009054 <memset>
 800bfe6:	e7f4      	b.n	800bfd2 <_calloc_r+0x16>

0800bfe8 <rshift>:
 800bfe8:	6903      	ldr	r3, [r0, #16]
 800bfea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bfee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bff2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bff6:	f100 0414 	add.w	r4, r0, #20
 800bffa:	dd45      	ble.n	800c088 <rshift+0xa0>
 800bffc:	f011 011f 	ands.w	r1, r1, #31
 800c000:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c004:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c008:	d10c      	bne.n	800c024 <rshift+0x3c>
 800c00a:	f100 0710 	add.w	r7, r0, #16
 800c00e:	4629      	mov	r1, r5
 800c010:	42b1      	cmp	r1, r6
 800c012:	d334      	bcc.n	800c07e <rshift+0x96>
 800c014:	1a9b      	subs	r3, r3, r2
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	1eea      	subs	r2, r5, #3
 800c01a:	4296      	cmp	r6, r2
 800c01c:	bf38      	it	cc
 800c01e:	2300      	movcc	r3, #0
 800c020:	4423      	add	r3, r4
 800c022:	e015      	b.n	800c050 <rshift+0x68>
 800c024:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c028:	f1c1 0820 	rsb	r8, r1, #32
 800c02c:	40cf      	lsrs	r7, r1
 800c02e:	f105 0e04 	add.w	lr, r5, #4
 800c032:	46a1      	mov	r9, r4
 800c034:	4576      	cmp	r6, lr
 800c036:	46f4      	mov	ip, lr
 800c038:	d815      	bhi.n	800c066 <rshift+0x7e>
 800c03a:	1a9a      	subs	r2, r3, r2
 800c03c:	0092      	lsls	r2, r2, #2
 800c03e:	3a04      	subs	r2, #4
 800c040:	3501      	adds	r5, #1
 800c042:	42ae      	cmp	r6, r5
 800c044:	bf38      	it	cc
 800c046:	2200      	movcc	r2, #0
 800c048:	18a3      	adds	r3, r4, r2
 800c04a:	50a7      	str	r7, [r4, r2]
 800c04c:	b107      	cbz	r7, 800c050 <rshift+0x68>
 800c04e:	3304      	adds	r3, #4
 800c050:	1b1a      	subs	r2, r3, r4
 800c052:	42a3      	cmp	r3, r4
 800c054:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c058:	bf08      	it	eq
 800c05a:	2300      	moveq	r3, #0
 800c05c:	6102      	str	r2, [r0, #16]
 800c05e:	bf08      	it	eq
 800c060:	6143      	streq	r3, [r0, #20]
 800c062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c066:	f8dc c000 	ldr.w	ip, [ip]
 800c06a:	fa0c fc08 	lsl.w	ip, ip, r8
 800c06e:	ea4c 0707 	orr.w	r7, ip, r7
 800c072:	f849 7b04 	str.w	r7, [r9], #4
 800c076:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c07a:	40cf      	lsrs	r7, r1
 800c07c:	e7da      	b.n	800c034 <rshift+0x4c>
 800c07e:	f851 cb04 	ldr.w	ip, [r1], #4
 800c082:	f847 cf04 	str.w	ip, [r7, #4]!
 800c086:	e7c3      	b.n	800c010 <rshift+0x28>
 800c088:	4623      	mov	r3, r4
 800c08a:	e7e1      	b.n	800c050 <rshift+0x68>

0800c08c <__hexdig_fun>:
 800c08c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c090:	2b09      	cmp	r3, #9
 800c092:	d802      	bhi.n	800c09a <__hexdig_fun+0xe>
 800c094:	3820      	subs	r0, #32
 800c096:	b2c0      	uxtb	r0, r0
 800c098:	4770      	bx	lr
 800c09a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c09e:	2b05      	cmp	r3, #5
 800c0a0:	d801      	bhi.n	800c0a6 <__hexdig_fun+0x1a>
 800c0a2:	3847      	subs	r0, #71	; 0x47
 800c0a4:	e7f7      	b.n	800c096 <__hexdig_fun+0xa>
 800c0a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c0aa:	2b05      	cmp	r3, #5
 800c0ac:	d801      	bhi.n	800c0b2 <__hexdig_fun+0x26>
 800c0ae:	3827      	subs	r0, #39	; 0x27
 800c0b0:	e7f1      	b.n	800c096 <__hexdig_fun+0xa>
 800c0b2:	2000      	movs	r0, #0
 800c0b4:	4770      	bx	lr
	...

0800c0b8 <__gethex>:
 800c0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0bc:	4617      	mov	r7, r2
 800c0be:	680a      	ldr	r2, [r1, #0]
 800c0c0:	b085      	sub	sp, #20
 800c0c2:	f102 0b02 	add.w	fp, r2, #2
 800c0c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c0ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c0ce:	4681      	mov	r9, r0
 800c0d0:	468a      	mov	sl, r1
 800c0d2:	9302      	str	r3, [sp, #8]
 800c0d4:	32fe      	adds	r2, #254	; 0xfe
 800c0d6:	eb02 030b 	add.w	r3, r2, fp
 800c0da:	46d8      	mov	r8, fp
 800c0dc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c0e0:	9301      	str	r3, [sp, #4]
 800c0e2:	2830      	cmp	r0, #48	; 0x30
 800c0e4:	d0f7      	beq.n	800c0d6 <__gethex+0x1e>
 800c0e6:	f7ff ffd1 	bl	800c08c <__hexdig_fun>
 800c0ea:	4604      	mov	r4, r0
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	d138      	bne.n	800c162 <__gethex+0xaa>
 800c0f0:	49a7      	ldr	r1, [pc, #668]	; (800c390 <__gethex+0x2d8>)
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	4640      	mov	r0, r8
 800c0f6:	f7ff fef7 	bl	800bee8 <strncmp>
 800c0fa:	4606      	mov	r6, r0
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d169      	bne.n	800c1d4 <__gethex+0x11c>
 800c100:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c104:	465d      	mov	r5, fp
 800c106:	f7ff ffc1 	bl	800c08c <__hexdig_fun>
 800c10a:	2800      	cmp	r0, #0
 800c10c:	d064      	beq.n	800c1d8 <__gethex+0x120>
 800c10e:	465a      	mov	r2, fp
 800c110:	7810      	ldrb	r0, [r2, #0]
 800c112:	2830      	cmp	r0, #48	; 0x30
 800c114:	4690      	mov	r8, r2
 800c116:	f102 0201 	add.w	r2, r2, #1
 800c11a:	d0f9      	beq.n	800c110 <__gethex+0x58>
 800c11c:	f7ff ffb6 	bl	800c08c <__hexdig_fun>
 800c120:	2301      	movs	r3, #1
 800c122:	fab0 f480 	clz	r4, r0
 800c126:	0964      	lsrs	r4, r4, #5
 800c128:	465e      	mov	r6, fp
 800c12a:	9301      	str	r3, [sp, #4]
 800c12c:	4642      	mov	r2, r8
 800c12e:	4615      	mov	r5, r2
 800c130:	3201      	adds	r2, #1
 800c132:	7828      	ldrb	r0, [r5, #0]
 800c134:	f7ff ffaa 	bl	800c08c <__hexdig_fun>
 800c138:	2800      	cmp	r0, #0
 800c13a:	d1f8      	bne.n	800c12e <__gethex+0x76>
 800c13c:	4994      	ldr	r1, [pc, #592]	; (800c390 <__gethex+0x2d8>)
 800c13e:	2201      	movs	r2, #1
 800c140:	4628      	mov	r0, r5
 800c142:	f7ff fed1 	bl	800bee8 <strncmp>
 800c146:	b978      	cbnz	r0, 800c168 <__gethex+0xb0>
 800c148:	b946      	cbnz	r6, 800c15c <__gethex+0xa4>
 800c14a:	1c6e      	adds	r6, r5, #1
 800c14c:	4632      	mov	r2, r6
 800c14e:	4615      	mov	r5, r2
 800c150:	3201      	adds	r2, #1
 800c152:	7828      	ldrb	r0, [r5, #0]
 800c154:	f7ff ff9a 	bl	800c08c <__hexdig_fun>
 800c158:	2800      	cmp	r0, #0
 800c15a:	d1f8      	bne.n	800c14e <__gethex+0x96>
 800c15c:	1b73      	subs	r3, r6, r5
 800c15e:	009e      	lsls	r6, r3, #2
 800c160:	e004      	b.n	800c16c <__gethex+0xb4>
 800c162:	2400      	movs	r4, #0
 800c164:	4626      	mov	r6, r4
 800c166:	e7e1      	b.n	800c12c <__gethex+0x74>
 800c168:	2e00      	cmp	r6, #0
 800c16a:	d1f7      	bne.n	800c15c <__gethex+0xa4>
 800c16c:	782b      	ldrb	r3, [r5, #0]
 800c16e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c172:	2b50      	cmp	r3, #80	; 0x50
 800c174:	d13d      	bne.n	800c1f2 <__gethex+0x13a>
 800c176:	786b      	ldrb	r3, [r5, #1]
 800c178:	2b2b      	cmp	r3, #43	; 0x2b
 800c17a:	d02f      	beq.n	800c1dc <__gethex+0x124>
 800c17c:	2b2d      	cmp	r3, #45	; 0x2d
 800c17e:	d031      	beq.n	800c1e4 <__gethex+0x12c>
 800c180:	1c69      	adds	r1, r5, #1
 800c182:	f04f 0b00 	mov.w	fp, #0
 800c186:	7808      	ldrb	r0, [r1, #0]
 800c188:	f7ff ff80 	bl	800c08c <__hexdig_fun>
 800c18c:	1e42      	subs	r2, r0, #1
 800c18e:	b2d2      	uxtb	r2, r2
 800c190:	2a18      	cmp	r2, #24
 800c192:	d82e      	bhi.n	800c1f2 <__gethex+0x13a>
 800c194:	f1a0 0210 	sub.w	r2, r0, #16
 800c198:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c19c:	f7ff ff76 	bl	800c08c <__hexdig_fun>
 800c1a0:	f100 3cff 	add.w	ip, r0, #4294967295
 800c1a4:	fa5f fc8c 	uxtb.w	ip, ip
 800c1a8:	f1bc 0f18 	cmp.w	ip, #24
 800c1ac:	d91d      	bls.n	800c1ea <__gethex+0x132>
 800c1ae:	f1bb 0f00 	cmp.w	fp, #0
 800c1b2:	d000      	beq.n	800c1b6 <__gethex+0xfe>
 800c1b4:	4252      	negs	r2, r2
 800c1b6:	4416      	add	r6, r2
 800c1b8:	f8ca 1000 	str.w	r1, [sl]
 800c1bc:	b1dc      	cbz	r4, 800c1f6 <__gethex+0x13e>
 800c1be:	9b01      	ldr	r3, [sp, #4]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	bf14      	ite	ne
 800c1c4:	f04f 0800 	movne.w	r8, #0
 800c1c8:	f04f 0806 	moveq.w	r8, #6
 800c1cc:	4640      	mov	r0, r8
 800c1ce:	b005      	add	sp, #20
 800c1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d4:	4645      	mov	r5, r8
 800c1d6:	4626      	mov	r6, r4
 800c1d8:	2401      	movs	r4, #1
 800c1da:	e7c7      	b.n	800c16c <__gethex+0xb4>
 800c1dc:	f04f 0b00 	mov.w	fp, #0
 800c1e0:	1ca9      	adds	r1, r5, #2
 800c1e2:	e7d0      	b.n	800c186 <__gethex+0xce>
 800c1e4:	f04f 0b01 	mov.w	fp, #1
 800c1e8:	e7fa      	b.n	800c1e0 <__gethex+0x128>
 800c1ea:	230a      	movs	r3, #10
 800c1ec:	fb03 0002 	mla	r0, r3, r2, r0
 800c1f0:	e7d0      	b.n	800c194 <__gethex+0xdc>
 800c1f2:	4629      	mov	r1, r5
 800c1f4:	e7e0      	b.n	800c1b8 <__gethex+0x100>
 800c1f6:	eba5 0308 	sub.w	r3, r5, r8
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	4621      	mov	r1, r4
 800c1fe:	2b07      	cmp	r3, #7
 800c200:	dc0a      	bgt.n	800c218 <__gethex+0x160>
 800c202:	4648      	mov	r0, r9
 800c204:	f7fd ff32 	bl	800a06c <_Balloc>
 800c208:	4604      	mov	r4, r0
 800c20a:	b940      	cbnz	r0, 800c21e <__gethex+0x166>
 800c20c:	4b61      	ldr	r3, [pc, #388]	; (800c394 <__gethex+0x2dc>)
 800c20e:	4602      	mov	r2, r0
 800c210:	21e4      	movs	r1, #228	; 0xe4
 800c212:	4861      	ldr	r0, [pc, #388]	; (800c398 <__gethex+0x2e0>)
 800c214:	f7ff feb4 	bl	800bf80 <__assert_func>
 800c218:	3101      	adds	r1, #1
 800c21a:	105b      	asrs	r3, r3, #1
 800c21c:	e7ef      	b.n	800c1fe <__gethex+0x146>
 800c21e:	f100 0a14 	add.w	sl, r0, #20
 800c222:	2300      	movs	r3, #0
 800c224:	495a      	ldr	r1, [pc, #360]	; (800c390 <__gethex+0x2d8>)
 800c226:	f8cd a004 	str.w	sl, [sp, #4]
 800c22a:	469b      	mov	fp, r3
 800c22c:	45a8      	cmp	r8, r5
 800c22e:	d342      	bcc.n	800c2b6 <__gethex+0x1fe>
 800c230:	9801      	ldr	r0, [sp, #4]
 800c232:	f840 bb04 	str.w	fp, [r0], #4
 800c236:	eba0 000a 	sub.w	r0, r0, sl
 800c23a:	1080      	asrs	r0, r0, #2
 800c23c:	6120      	str	r0, [r4, #16]
 800c23e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c242:	4658      	mov	r0, fp
 800c244:	f7fe f804 	bl	800a250 <__hi0bits>
 800c248:	683d      	ldr	r5, [r7, #0]
 800c24a:	eba8 0000 	sub.w	r0, r8, r0
 800c24e:	42a8      	cmp	r0, r5
 800c250:	dd59      	ble.n	800c306 <__gethex+0x24e>
 800c252:	eba0 0805 	sub.w	r8, r0, r5
 800c256:	4641      	mov	r1, r8
 800c258:	4620      	mov	r0, r4
 800c25a:	f7fe fb93 	bl	800a984 <__any_on>
 800c25e:	4683      	mov	fp, r0
 800c260:	b1b8      	cbz	r0, 800c292 <__gethex+0x1da>
 800c262:	f108 33ff 	add.w	r3, r8, #4294967295
 800c266:	1159      	asrs	r1, r3, #5
 800c268:	f003 021f 	and.w	r2, r3, #31
 800c26c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c270:	f04f 0b01 	mov.w	fp, #1
 800c274:	fa0b f202 	lsl.w	r2, fp, r2
 800c278:	420a      	tst	r2, r1
 800c27a:	d00a      	beq.n	800c292 <__gethex+0x1da>
 800c27c:	455b      	cmp	r3, fp
 800c27e:	dd06      	ble.n	800c28e <__gethex+0x1d6>
 800c280:	f1a8 0102 	sub.w	r1, r8, #2
 800c284:	4620      	mov	r0, r4
 800c286:	f7fe fb7d 	bl	800a984 <__any_on>
 800c28a:	2800      	cmp	r0, #0
 800c28c:	d138      	bne.n	800c300 <__gethex+0x248>
 800c28e:	f04f 0b02 	mov.w	fp, #2
 800c292:	4641      	mov	r1, r8
 800c294:	4620      	mov	r0, r4
 800c296:	f7ff fea7 	bl	800bfe8 <rshift>
 800c29a:	4446      	add	r6, r8
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	42b3      	cmp	r3, r6
 800c2a0:	da41      	bge.n	800c326 <__gethex+0x26e>
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	4648      	mov	r0, r9
 800c2a6:	f7fd ff21 	bl	800a0ec <_Bfree>
 800c2aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	6013      	str	r3, [r2, #0]
 800c2b0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c2b4:	e78a      	b.n	800c1cc <__gethex+0x114>
 800c2b6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c2ba:	2a2e      	cmp	r2, #46	; 0x2e
 800c2bc:	d014      	beq.n	800c2e8 <__gethex+0x230>
 800c2be:	2b20      	cmp	r3, #32
 800c2c0:	d106      	bne.n	800c2d0 <__gethex+0x218>
 800c2c2:	9b01      	ldr	r3, [sp, #4]
 800c2c4:	f843 bb04 	str.w	fp, [r3], #4
 800c2c8:	f04f 0b00 	mov.w	fp, #0
 800c2cc:	9301      	str	r3, [sp, #4]
 800c2ce:	465b      	mov	r3, fp
 800c2d0:	7828      	ldrb	r0, [r5, #0]
 800c2d2:	9303      	str	r3, [sp, #12]
 800c2d4:	f7ff feda 	bl	800c08c <__hexdig_fun>
 800c2d8:	9b03      	ldr	r3, [sp, #12]
 800c2da:	f000 000f 	and.w	r0, r0, #15
 800c2de:	4098      	lsls	r0, r3
 800c2e0:	ea4b 0b00 	orr.w	fp, fp, r0
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	e7a1      	b.n	800c22c <__gethex+0x174>
 800c2e8:	45a8      	cmp	r8, r5
 800c2ea:	d8e8      	bhi.n	800c2be <__gethex+0x206>
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	4628      	mov	r0, r5
 800c2f0:	9303      	str	r3, [sp, #12]
 800c2f2:	f7ff fdf9 	bl	800bee8 <strncmp>
 800c2f6:	4926      	ldr	r1, [pc, #152]	; (800c390 <__gethex+0x2d8>)
 800c2f8:	9b03      	ldr	r3, [sp, #12]
 800c2fa:	2800      	cmp	r0, #0
 800c2fc:	d1df      	bne.n	800c2be <__gethex+0x206>
 800c2fe:	e795      	b.n	800c22c <__gethex+0x174>
 800c300:	f04f 0b03 	mov.w	fp, #3
 800c304:	e7c5      	b.n	800c292 <__gethex+0x1da>
 800c306:	da0b      	bge.n	800c320 <__gethex+0x268>
 800c308:	eba5 0800 	sub.w	r8, r5, r0
 800c30c:	4621      	mov	r1, r4
 800c30e:	4642      	mov	r2, r8
 800c310:	4648      	mov	r0, r9
 800c312:	f7fe f905 	bl	800a520 <__lshift>
 800c316:	eba6 0608 	sub.w	r6, r6, r8
 800c31a:	4604      	mov	r4, r0
 800c31c:	f100 0a14 	add.w	sl, r0, #20
 800c320:	f04f 0b00 	mov.w	fp, #0
 800c324:	e7ba      	b.n	800c29c <__gethex+0x1e4>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	42b3      	cmp	r3, r6
 800c32a:	dd73      	ble.n	800c414 <__gethex+0x35c>
 800c32c:	1b9e      	subs	r6, r3, r6
 800c32e:	42b5      	cmp	r5, r6
 800c330:	dc34      	bgt.n	800c39c <__gethex+0x2e4>
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2b02      	cmp	r3, #2
 800c336:	d023      	beq.n	800c380 <__gethex+0x2c8>
 800c338:	2b03      	cmp	r3, #3
 800c33a:	d025      	beq.n	800c388 <__gethex+0x2d0>
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d115      	bne.n	800c36c <__gethex+0x2b4>
 800c340:	42b5      	cmp	r5, r6
 800c342:	d113      	bne.n	800c36c <__gethex+0x2b4>
 800c344:	2d01      	cmp	r5, #1
 800c346:	d10b      	bne.n	800c360 <__gethex+0x2a8>
 800c348:	9a02      	ldr	r2, [sp, #8]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6013      	str	r3, [r2, #0]
 800c34e:	2301      	movs	r3, #1
 800c350:	6123      	str	r3, [r4, #16]
 800c352:	f8ca 3000 	str.w	r3, [sl]
 800c356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c358:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c35c:	601c      	str	r4, [r3, #0]
 800c35e:	e735      	b.n	800c1cc <__gethex+0x114>
 800c360:	1e69      	subs	r1, r5, #1
 800c362:	4620      	mov	r0, r4
 800c364:	f7fe fb0e 	bl	800a984 <__any_on>
 800c368:	2800      	cmp	r0, #0
 800c36a:	d1ed      	bne.n	800c348 <__gethex+0x290>
 800c36c:	4621      	mov	r1, r4
 800c36e:	4648      	mov	r0, r9
 800c370:	f7fd febc 	bl	800a0ec <_Bfree>
 800c374:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c376:	2300      	movs	r3, #0
 800c378:	6013      	str	r3, [r2, #0]
 800c37a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c37e:	e725      	b.n	800c1cc <__gethex+0x114>
 800c380:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c382:	2b00      	cmp	r3, #0
 800c384:	d1f2      	bne.n	800c36c <__gethex+0x2b4>
 800c386:	e7df      	b.n	800c348 <__gethex+0x290>
 800c388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d1dc      	bne.n	800c348 <__gethex+0x290>
 800c38e:	e7ed      	b.n	800c36c <__gethex+0x2b4>
 800c390:	0800cb34 	.word	0x0800cb34
 800c394:	0800c9c9 	.word	0x0800c9c9
 800c398:	0800ccde 	.word	0x0800ccde
 800c39c:	f106 38ff 	add.w	r8, r6, #4294967295
 800c3a0:	f1bb 0f00 	cmp.w	fp, #0
 800c3a4:	d133      	bne.n	800c40e <__gethex+0x356>
 800c3a6:	f1b8 0f00 	cmp.w	r8, #0
 800c3aa:	d004      	beq.n	800c3b6 <__gethex+0x2fe>
 800c3ac:	4641      	mov	r1, r8
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	f7fe fae8 	bl	800a984 <__any_on>
 800c3b4:	4683      	mov	fp, r0
 800c3b6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c3c0:	f008 081f 	and.w	r8, r8, #31
 800c3c4:	fa03 f308 	lsl.w	r3, r3, r8
 800c3c8:	4213      	tst	r3, r2
 800c3ca:	4631      	mov	r1, r6
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	bf18      	it	ne
 800c3d0:	f04b 0b02 	orrne.w	fp, fp, #2
 800c3d4:	1bad      	subs	r5, r5, r6
 800c3d6:	f7ff fe07 	bl	800bfe8 <rshift>
 800c3da:	687e      	ldr	r6, [r7, #4]
 800c3dc:	f04f 0802 	mov.w	r8, #2
 800c3e0:	f1bb 0f00 	cmp.w	fp, #0
 800c3e4:	d04a      	beq.n	800c47c <__gethex+0x3c4>
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2b02      	cmp	r3, #2
 800c3ea:	d016      	beq.n	800c41a <__gethex+0x362>
 800c3ec:	2b03      	cmp	r3, #3
 800c3ee:	d018      	beq.n	800c422 <__gethex+0x36a>
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d109      	bne.n	800c408 <__gethex+0x350>
 800c3f4:	f01b 0f02 	tst.w	fp, #2
 800c3f8:	d006      	beq.n	800c408 <__gethex+0x350>
 800c3fa:	f8da 3000 	ldr.w	r3, [sl]
 800c3fe:	ea4b 0b03 	orr.w	fp, fp, r3
 800c402:	f01b 0f01 	tst.w	fp, #1
 800c406:	d10f      	bne.n	800c428 <__gethex+0x370>
 800c408:	f048 0810 	orr.w	r8, r8, #16
 800c40c:	e036      	b.n	800c47c <__gethex+0x3c4>
 800c40e:	f04f 0b01 	mov.w	fp, #1
 800c412:	e7d0      	b.n	800c3b6 <__gethex+0x2fe>
 800c414:	f04f 0801 	mov.w	r8, #1
 800c418:	e7e2      	b.n	800c3e0 <__gethex+0x328>
 800c41a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c41c:	f1c3 0301 	rsb	r3, r3, #1
 800c420:	930f      	str	r3, [sp, #60]	; 0x3c
 800c422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c424:	2b00      	cmp	r3, #0
 800c426:	d0ef      	beq.n	800c408 <__gethex+0x350>
 800c428:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c42c:	f104 0214 	add.w	r2, r4, #20
 800c430:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c434:	9301      	str	r3, [sp, #4]
 800c436:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c43a:	2300      	movs	r3, #0
 800c43c:	4694      	mov	ip, r2
 800c43e:	f852 1b04 	ldr.w	r1, [r2], #4
 800c442:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c446:	d01e      	beq.n	800c486 <__gethex+0x3ce>
 800c448:	3101      	adds	r1, #1
 800c44a:	f8cc 1000 	str.w	r1, [ip]
 800c44e:	f1b8 0f02 	cmp.w	r8, #2
 800c452:	f104 0214 	add.w	r2, r4, #20
 800c456:	d13d      	bne.n	800c4d4 <__gethex+0x41c>
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	3b01      	subs	r3, #1
 800c45c:	42ab      	cmp	r3, r5
 800c45e:	d10b      	bne.n	800c478 <__gethex+0x3c0>
 800c460:	1169      	asrs	r1, r5, #5
 800c462:	2301      	movs	r3, #1
 800c464:	f005 051f 	and.w	r5, r5, #31
 800c468:	fa03 f505 	lsl.w	r5, r3, r5
 800c46c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c470:	421d      	tst	r5, r3
 800c472:	bf18      	it	ne
 800c474:	f04f 0801 	movne.w	r8, #1
 800c478:	f048 0820 	orr.w	r8, r8, #32
 800c47c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c47e:	601c      	str	r4, [r3, #0]
 800c480:	9b02      	ldr	r3, [sp, #8]
 800c482:	601e      	str	r6, [r3, #0]
 800c484:	e6a2      	b.n	800c1cc <__gethex+0x114>
 800c486:	4290      	cmp	r0, r2
 800c488:	f842 3c04 	str.w	r3, [r2, #-4]
 800c48c:	d8d6      	bhi.n	800c43c <__gethex+0x384>
 800c48e:	68a2      	ldr	r2, [r4, #8]
 800c490:	4593      	cmp	fp, r2
 800c492:	db17      	blt.n	800c4c4 <__gethex+0x40c>
 800c494:	6861      	ldr	r1, [r4, #4]
 800c496:	4648      	mov	r0, r9
 800c498:	3101      	adds	r1, #1
 800c49a:	f7fd fde7 	bl	800a06c <_Balloc>
 800c49e:	4682      	mov	sl, r0
 800c4a0:	b918      	cbnz	r0, 800c4aa <__gethex+0x3f2>
 800c4a2:	4b1b      	ldr	r3, [pc, #108]	; (800c510 <__gethex+0x458>)
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	2184      	movs	r1, #132	; 0x84
 800c4a8:	e6b3      	b.n	800c212 <__gethex+0x15a>
 800c4aa:	6922      	ldr	r2, [r4, #16]
 800c4ac:	3202      	adds	r2, #2
 800c4ae:	f104 010c 	add.w	r1, r4, #12
 800c4b2:	0092      	lsls	r2, r2, #2
 800c4b4:	300c      	adds	r0, #12
 800c4b6:	f7fc fe4b 	bl	8009150 <memcpy>
 800c4ba:	4621      	mov	r1, r4
 800c4bc:	4648      	mov	r0, r9
 800c4be:	f7fd fe15 	bl	800a0ec <_Bfree>
 800c4c2:	4654      	mov	r4, sl
 800c4c4:	6922      	ldr	r2, [r4, #16]
 800c4c6:	1c51      	adds	r1, r2, #1
 800c4c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c4cc:	6121      	str	r1, [r4, #16]
 800c4ce:	2101      	movs	r1, #1
 800c4d0:	6151      	str	r1, [r2, #20]
 800c4d2:	e7bc      	b.n	800c44e <__gethex+0x396>
 800c4d4:	6921      	ldr	r1, [r4, #16]
 800c4d6:	4559      	cmp	r1, fp
 800c4d8:	dd0b      	ble.n	800c4f2 <__gethex+0x43a>
 800c4da:	2101      	movs	r1, #1
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f7ff fd83 	bl	800bfe8 <rshift>
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	3601      	adds	r6, #1
 800c4e6:	42b3      	cmp	r3, r6
 800c4e8:	f6ff aedb 	blt.w	800c2a2 <__gethex+0x1ea>
 800c4ec:	f04f 0801 	mov.w	r8, #1
 800c4f0:	e7c2      	b.n	800c478 <__gethex+0x3c0>
 800c4f2:	f015 051f 	ands.w	r5, r5, #31
 800c4f6:	d0f9      	beq.n	800c4ec <__gethex+0x434>
 800c4f8:	9b01      	ldr	r3, [sp, #4]
 800c4fa:	441a      	add	r2, r3
 800c4fc:	f1c5 0520 	rsb	r5, r5, #32
 800c500:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c504:	f7fd fea4 	bl	800a250 <__hi0bits>
 800c508:	42a8      	cmp	r0, r5
 800c50a:	dbe6      	blt.n	800c4da <__gethex+0x422>
 800c50c:	e7ee      	b.n	800c4ec <__gethex+0x434>
 800c50e:	bf00      	nop
 800c510:	0800c9c9 	.word	0x0800c9c9

0800c514 <L_shift>:
 800c514:	f1c2 0208 	rsb	r2, r2, #8
 800c518:	0092      	lsls	r2, r2, #2
 800c51a:	b570      	push	{r4, r5, r6, lr}
 800c51c:	f1c2 0620 	rsb	r6, r2, #32
 800c520:	6843      	ldr	r3, [r0, #4]
 800c522:	6804      	ldr	r4, [r0, #0]
 800c524:	fa03 f506 	lsl.w	r5, r3, r6
 800c528:	432c      	orrs	r4, r5
 800c52a:	40d3      	lsrs	r3, r2
 800c52c:	6004      	str	r4, [r0, #0]
 800c52e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c532:	4288      	cmp	r0, r1
 800c534:	d3f4      	bcc.n	800c520 <L_shift+0xc>
 800c536:	bd70      	pop	{r4, r5, r6, pc}

0800c538 <__match>:
 800c538:	b530      	push	{r4, r5, lr}
 800c53a:	6803      	ldr	r3, [r0, #0]
 800c53c:	3301      	adds	r3, #1
 800c53e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c542:	b914      	cbnz	r4, 800c54a <__match+0x12>
 800c544:	6003      	str	r3, [r0, #0]
 800c546:	2001      	movs	r0, #1
 800c548:	bd30      	pop	{r4, r5, pc}
 800c54a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c54e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c552:	2d19      	cmp	r5, #25
 800c554:	bf98      	it	ls
 800c556:	3220      	addls	r2, #32
 800c558:	42a2      	cmp	r2, r4
 800c55a:	d0f0      	beq.n	800c53e <__match+0x6>
 800c55c:	2000      	movs	r0, #0
 800c55e:	e7f3      	b.n	800c548 <__match+0x10>

0800c560 <__hexnan>:
 800c560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c564:	680b      	ldr	r3, [r1, #0]
 800c566:	6801      	ldr	r1, [r0, #0]
 800c568:	115e      	asrs	r6, r3, #5
 800c56a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c56e:	f013 031f 	ands.w	r3, r3, #31
 800c572:	b087      	sub	sp, #28
 800c574:	bf18      	it	ne
 800c576:	3604      	addne	r6, #4
 800c578:	2500      	movs	r5, #0
 800c57a:	1f37      	subs	r7, r6, #4
 800c57c:	4682      	mov	sl, r0
 800c57e:	4690      	mov	r8, r2
 800c580:	9301      	str	r3, [sp, #4]
 800c582:	f846 5c04 	str.w	r5, [r6, #-4]
 800c586:	46b9      	mov	r9, r7
 800c588:	463c      	mov	r4, r7
 800c58a:	9502      	str	r5, [sp, #8]
 800c58c:	46ab      	mov	fp, r5
 800c58e:	784a      	ldrb	r2, [r1, #1]
 800c590:	1c4b      	adds	r3, r1, #1
 800c592:	9303      	str	r3, [sp, #12]
 800c594:	b342      	cbz	r2, 800c5e8 <__hexnan+0x88>
 800c596:	4610      	mov	r0, r2
 800c598:	9105      	str	r1, [sp, #20]
 800c59a:	9204      	str	r2, [sp, #16]
 800c59c:	f7ff fd76 	bl	800c08c <__hexdig_fun>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d14f      	bne.n	800c644 <__hexnan+0xe4>
 800c5a4:	9a04      	ldr	r2, [sp, #16]
 800c5a6:	9905      	ldr	r1, [sp, #20]
 800c5a8:	2a20      	cmp	r2, #32
 800c5aa:	d818      	bhi.n	800c5de <__hexnan+0x7e>
 800c5ac:	9b02      	ldr	r3, [sp, #8]
 800c5ae:	459b      	cmp	fp, r3
 800c5b0:	dd13      	ble.n	800c5da <__hexnan+0x7a>
 800c5b2:	454c      	cmp	r4, r9
 800c5b4:	d206      	bcs.n	800c5c4 <__hexnan+0x64>
 800c5b6:	2d07      	cmp	r5, #7
 800c5b8:	dc04      	bgt.n	800c5c4 <__hexnan+0x64>
 800c5ba:	462a      	mov	r2, r5
 800c5bc:	4649      	mov	r1, r9
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f7ff ffa8 	bl	800c514 <L_shift>
 800c5c4:	4544      	cmp	r4, r8
 800c5c6:	d950      	bls.n	800c66a <__hexnan+0x10a>
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	f1a4 0904 	sub.w	r9, r4, #4
 800c5ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800c5d2:	f8cd b008 	str.w	fp, [sp, #8]
 800c5d6:	464c      	mov	r4, r9
 800c5d8:	461d      	mov	r5, r3
 800c5da:	9903      	ldr	r1, [sp, #12]
 800c5dc:	e7d7      	b.n	800c58e <__hexnan+0x2e>
 800c5de:	2a29      	cmp	r2, #41	; 0x29
 800c5e0:	d155      	bne.n	800c68e <__hexnan+0x12e>
 800c5e2:	3102      	adds	r1, #2
 800c5e4:	f8ca 1000 	str.w	r1, [sl]
 800c5e8:	f1bb 0f00 	cmp.w	fp, #0
 800c5ec:	d04f      	beq.n	800c68e <__hexnan+0x12e>
 800c5ee:	454c      	cmp	r4, r9
 800c5f0:	d206      	bcs.n	800c600 <__hexnan+0xa0>
 800c5f2:	2d07      	cmp	r5, #7
 800c5f4:	dc04      	bgt.n	800c600 <__hexnan+0xa0>
 800c5f6:	462a      	mov	r2, r5
 800c5f8:	4649      	mov	r1, r9
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f7ff ff8a 	bl	800c514 <L_shift>
 800c600:	4544      	cmp	r4, r8
 800c602:	d934      	bls.n	800c66e <__hexnan+0x10e>
 800c604:	f1a8 0204 	sub.w	r2, r8, #4
 800c608:	4623      	mov	r3, r4
 800c60a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c60e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c612:	429f      	cmp	r7, r3
 800c614:	d2f9      	bcs.n	800c60a <__hexnan+0xaa>
 800c616:	1b3b      	subs	r3, r7, r4
 800c618:	f023 0303 	bic.w	r3, r3, #3
 800c61c:	3304      	adds	r3, #4
 800c61e:	3e03      	subs	r6, #3
 800c620:	3401      	adds	r4, #1
 800c622:	42a6      	cmp	r6, r4
 800c624:	bf38      	it	cc
 800c626:	2304      	movcc	r3, #4
 800c628:	4443      	add	r3, r8
 800c62a:	2200      	movs	r2, #0
 800c62c:	f843 2b04 	str.w	r2, [r3], #4
 800c630:	429f      	cmp	r7, r3
 800c632:	d2fb      	bcs.n	800c62c <__hexnan+0xcc>
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	b91b      	cbnz	r3, 800c640 <__hexnan+0xe0>
 800c638:	4547      	cmp	r7, r8
 800c63a:	d126      	bne.n	800c68a <__hexnan+0x12a>
 800c63c:	2301      	movs	r3, #1
 800c63e:	603b      	str	r3, [r7, #0]
 800c640:	2005      	movs	r0, #5
 800c642:	e025      	b.n	800c690 <__hexnan+0x130>
 800c644:	3501      	adds	r5, #1
 800c646:	2d08      	cmp	r5, #8
 800c648:	f10b 0b01 	add.w	fp, fp, #1
 800c64c:	dd06      	ble.n	800c65c <__hexnan+0xfc>
 800c64e:	4544      	cmp	r4, r8
 800c650:	d9c3      	bls.n	800c5da <__hexnan+0x7a>
 800c652:	2300      	movs	r3, #0
 800c654:	f844 3c04 	str.w	r3, [r4, #-4]
 800c658:	2501      	movs	r5, #1
 800c65a:	3c04      	subs	r4, #4
 800c65c:	6822      	ldr	r2, [r4, #0]
 800c65e:	f000 000f 	and.w	r0, r0, #15
 800c662:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c666:	6020      	str	r0, [r4, #0]
 800c668:	e7b7      	b.n	800c5da <__hexnan+0x7a>
 800c66a:	2508      	movs	r5, #8
 800c66c:	e7b5      	b.n	800c5da <__hexnan+0x7a>
 800c66e:	9b01      	ldr	r3, [sp, #4]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d0df      	beq.n	800c634 <__hexnan+0xd4>
 800c674:	f1c3 0320 	rsb	r3, r3, #32
 800c678:	f04f 32ff 	mov.w	r2, #4294967295
 800c67c:	40da      	lsrs	r2, r3
 800c67e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c682:	4013      	ands	r3, r2
 800c684:	f846 3c04 	str.w	r3, [r6, #-4]
 800c688:	e7d4      	b.n	800c634 <__hexnan+0xd4>
 800c68a:	3f04      	subs	r7, #4
 800c68c:	e7d2      	b.n	800c634 <__hexnan+0xd4>
 800c68e:	2004      	movs	r0, #4
 800c690:	b007      	add	sp, #28
 800c692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c696 <__ascii_mbtowc>:
 800c696:	b082      	sub	sp, #8
 800c698:	b901      	cbnz	r1, 800c69c <__ascii_mbtowc+0x6>
 800c69a:	a901      	add	r1, sp, #4
 800c69c:	b142      	cbz	r2, 800c6b0 <__ascii_mbtowc+0x1a>
 800c69e:	b14b      	cbz	r3, 800c6b4 <__ascii_mbtowc+0x1e>
 800c6a0:	7813      	ldrb	r3, [r2, #0]
 800c6a2:	600b      	str	r3, [r1, #0]
 800c6a4:	7812      	ldrb	r2, [r2, #0]
 800c6a6:	1e10      	subs	r0, r2, #0
 800c6a8:	bf18      	it	ne
 800c6aa:	2001      	movne	r0, #1
 800c6ac:	b002      	add	sp, #8
 800c6ae:	4770      	bx	lr
 800c6b0:	4610      	mov	r0, r2
 800c6b2:	e7fb      	b.n	800c6ac <__ascii_mbtowc+0x16>
 800c6b4:	f06f 0001 	mvn.w	r0, #1
 800c6b8:	e7f8      	b.n	800c6ac <__ascii_mbtowc+0x16>

0800c6ba <_realloc_r>:
 800c6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6be:	4680      	mov	r8, r0
 800c6c0:	4614      	mov	r4, r2
 800c6c2:	460e      	mov	r6, r1
 800c6c4:	b921      	cbnz	r1, 800c6d0 <_realloc_r+0x16>
 800c6c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ca:	4611      	mov	r1, r2
 800c6cc:	f7fd bc42 	b.w	8009f54 <_malloc_r>
 800c6d0:	b92a      	cbnz	r2, 800c6de <_realloc_r+0x24>
 800c6d2:	f7fd fbcb 	bl	8009e6c <_free_r>
 800c6d6:	4625      	mov	r5, r4
 800c6d8:	4628      	mov	r0, r5
 800c6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6de:	f000 f842 	bl	800c766 <_malloc_usable_size_r>
 800c6e2:	4284      	cmp	r4, r0
 800c6e4:	4607      	mov	r7, r0
 800c6e6:	d802      	bhi.n	800c6ee <_realloc_r+0x34>
 800c6e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c6ec:	d812      	bhi.n	800c714 <_realloc_r+0x5a>
 800c6ee:	4621      	mov	r1, r4
 800c6f0:	4640      	mov	r0, r8
 800c6f2:	f7fd fc2f 	bl	8009f54 <_malloc_r>
 800c6f6:	4605      	mov	r5, r0
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	d0ed      	beq.n	800c6d8 <_realloc_r+0x1e>
 800c6fc:	42bc      	cmp	r4, r7
 800c6fe:	4622      	mov	r2, r4
 800c700:	4631      	mov	r1, r6
 800c702:	bf28      	it	cs
 800c704:	463a      	movcs	r2, r7
 800c706:	f7fc fd23 	bl	8009150 <memcpy>
 800c70a:	4631      	mov	r1, r6
 800c70c:	4640      	mov	r0, r8
 800c70e:	f7fd fbad 	bl	8009e6c <_free_r>
 800c712:	e7e1      	b.n	800c6d8 <_realloc_r+0x1e>
 800c714:	4635      	mov	r5, r6
 800c716:	e7df      	b.n	800c6d8 <_realloc_r+0x1e>

0800c718 <__ascii_wctomb>:
 800c718:	b149      	cbz	r1, 800c72e <__ascii_wctomb+0x16>
 800c71a:	2aff      	cmp	r2, #255	; 0xff
 800c71c:	bf85      	ittet	hi
 800c71e:	238a      	movhi	r3, #138	; 0x8a
 800c720:	6003      	strhi	r3, [r0, #0]
 800c722:	700a      	strbls	r2, [r1, #0]
 800c724:	f04f 30ff 	movhi.w	r0, #4294967295
 800c728:	bf98      	it	ls
 800c72a:	2001      	movls	r0, #1
 800c72c:	4770      	bx	lr
 800c72e:	4608      	mov	r0, r1
 800c730:	4770      	bx	lr
	...

0800c734 <fiprintf>:
 800c734:	b40e      	push	{r1, r2, r3}
 800c736:	b503      	push	{r0, r1, lr}
 800c738:	4601      	mov	r1, r0
 800c73a:	ab03      	add	r3, sp, #12
 800c73c:	4805      	ldr	r0, [pc, #20]	; (800c754 <fiprintf+0x20>)
 800c73e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c742:	6800      	ldr	r0, [r0, #0]
 800c744:	9301      	str	r3, [sp, #4]
 800c746:	f7ff f957 	bl	800b9f8 <_vfiprintf_r>
 800c74a:	b002      	add	sp, #8
 800c74c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c750:	b003      	add	sp, #12
 800c752:	4770      	bx	lr
 800c754:	20000154 	.word	0x20000154

0800c758 <abort>:
 800c758:	b508      	push	{r3, lr}
 800c75a:	2006      	movs	r0, #6
 800c75c:	f000 f834 	bl	800c7c8 <raise>
 800c760:	2001      	movs	r0, #1
 800c762:	f7f5 f88b 	bl	800187c <_exit>

0800c766 <_malloc_usable_size_r>:
 800c766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c76a:	1f18      	subs	r0, r3, #4
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	bfbc      	itt	lt
 800c770:	580b      	ldrlt	r3, [r1, r0]
 800c772:	18c0      	addlt	r0, r0, r3
 800c774:	4770      	bx	lr

0800c776 <_raise_r>:
 800c776:	291f      	cmp	r1, #31
 800c778:	b538      	push	{r3, r4, r5, lr}
 800c77a:	4604      	mov	r4, r0
 800c77c:	460d      	mov	r5, r1
 800c77e:	d904      	bls.n	800c78a <_raise_r+0x14>
 800c780:	2316      	movs	r3, #22
 800c782:	6003      	str	r3, [r0, #0]
 800c784:	f04f 30ff 	mov.w	r0, #4294967295
 800c788:	bd38      	pop	{r3, r4, r5, pc}
 800c78a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c78c:	b112      	cbz	r2, 800c794 <_raise_r+0x1e>
 800c78e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c792:	b94b      	cbnz	r3, 800c7a8 <_raise_r+0x32>
 800c794:	4620      	mov	r0, r4
 800c796:	f000 f831 	bl	800c7fc <_getpid_r>
 800c79a:	462a      	mov	r2, r5
 800c79c:	4601      	mov	r1, r0
 800c79e:	4620      	mov	r0, r4
 800c7a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7a4:	f000 b818 	b.w	800c7d8 <_kill_r>
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d00a      	beq.n	800c7c2 <_raise_r+0x4c>
 800c7ac:	1c59      	adds	r1, r3, #1
 800c7ae:	d103      	bne.n	800c7b8 <_raise_r+0x42>
 800c7b0:	2316      	movs	r3, #22
 800c7b2:	6003      	str	r3, [r0, #0]
 800c7b4:	2001      	movs	r0, #1
 800c7b6:	e7e7      	b.n	800c788 <_raise_r+0x12>
 800c7b8:	2400      	movs	r4, #0
 800c7ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7be:	4628      	mov	r0, r5
 800c7c0:	4798      	blx	r3
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	e7e0      	b.n	800c788 <_raise_r+0x12>
	...

0800c7c8 <raise>:
 800c7c8:	4b02      	ldr	r3, [pc, #8]	; (800c7d4 <raise+0xc>)
 800c7ca:	4601      	mov	r1, r0
 800c7cc:	6818      	ldr	r0, [r3, #0]
 800c7ce:	f7ff bfd2 	b.w	800c776 <_raise_r>
 800c7d2:	bf00      	nop
 800c7d4:	20000154 	.word	0x20000154

0800c7d8 <_kill_r>:
 800c7d8:	b538      	push	{r3, r4, r5, lr}
 800c7da:	4d07      	ldr	r5, [pc, #28]	; (800c7f8 <_kill_r+0x20>)
 800c7dc:	2300      	movs	r3, #0
 800c7de:	4604      	mov	r4, r0
 800c7e0:	4608      	mov	r0, r1
 800c7e2:	4611      	mov	r1, r2
 800c7e4:	602b      	str	r3, [r5, #0]
 800c7e6:	f7f5 f839 	bl	800185c <_kill>
 800c7ea:	1c43      	adds	r3, r0, #1
 800c7ec:	d102      	bne.n	800c7f4 <_kill_r+0x1c>
 800c7ee:	682b      	ldr	r3, [r5, #0]
 800c7f0:	b103      	cbz	r3, 800c7f4 <_kill_r+0x1c>
 800c7f2:	6023      	str	r3, [r4, #0]
 800c7f4:	bd38      	pop	{r3, r4, r5, pc}
 800c7f6:	bf00      	nop
 800c7f8:	200022bc 	.word	0x200022bc

0800c7fc <_getpid_r>:
 800c7fc:	f7f5 b826 	b.w	800184c <_getpid>

0800c800 <_init>:
 800c800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c802:	bf00      	nop
 800c804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c806:	bc08      	pop	{r3}
 800c808:	469e      	mov	lr, r3
 800c80a:	4770      	bx	lr

0800c80c <_fini>:
 800c80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80e:	bf00      	nop
 800c810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c812:	bc08      	pop	{r3}
 800c814:	469e      	mov	lr, r3
 800c816:	4770      	bx	lr
